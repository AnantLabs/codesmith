<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA DynamicRootList" %>

<%@ Register Name="DynamicRootList" Template="Internal\DynamicRootList.cst" %>
<%@ Register Name="DynamicRootListDataAccess" Template="Internal\DynamicRootList.DataAccess.cst" %>
<%@ Register Name="DynamicRootListDataAccessParameterized" Template="Internal\DynamicRootList.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="DynamicRootListDataAccessStoredProcedures" Template="Internal\DynamicRootList.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="DynamicRootListGenerated" Template="Internal\DynamicRootList.Generated.cst" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    #region DynamicRootList
    
    DynamicRootList dynamicRootList = this.Create<DynamicRootList>();
    this.CopyPropertiesTo(dynamicRootList);
    
    string parentFileName = System.IO.Path.Combine(this.Location, string.Format("Collections\\{0}.cs", dynamicRootList.BusinessClassName));
    if (!System.IO.File.Exists(parentFileName))
    {
        dynamicRootList.RenderToFile(parentFileName, false);
    }
    
    #region DynamicRootList.Generated
    
    string fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.Generated.cs", dynamicRootList.BusinessClassName));
    
    DynamicRootListGenerated dynamicRootListGenerated = this.Create<DynamicRootListGenerated>();
    this.CopyPropertiesTo(dynamicRootListGenerated);
    
    dynamicRootListGenerated.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #region DynamicRootList.DataAccess
    
    fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.DataAccess.cs", dynamicRootList.BusinessClassName));
    if(DataAccessImplementation == DataAccessMethod.None)
    {
        DynamicRootListDataAccess dynamicRootListDataAccess = this.Create<DynamicRootListDataAccess>();
        this.CopyPropertiesTo(dynamicRootListDataAccess);
        
        dynamicRootListDataAccess.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
    {
        DynamicRootListDataAccessParameterized dynamicRootListDataAccessParameterized = this.Create<DynamicRootListDataAccessParameterized>();
        this.CopyPropertiesTo(dynamicRootListDataAccessParameterized);
        
        dynamicRootListDataAccessParameterized.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        DynamicRootListDataAccessStoredProcedures dynamicRootListDataAccessStoredProcedures = this.Create<DynamicRootListDataAccessStoredProcedures>();
        this.CopyPropertiesTo(dynamicRootListDataAccessStoredProcedures);

        dynamicRootListDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, true);

        //StoredProcedures
        fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.StoredProcedures.sql", dynamicRootList.BusinessClassName));
        SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
        this.CopyPropertiesTo(sqlStoredProcedures);
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
    }
    
    #endregion
    
    #endregion

}

public override bool OnTableChanging()
{
    if (string.IsNullOrEmpty(BusinessClassName))
    {
        BusinessClassName = string.Concat(Entity.ClassName, "List");
        ChildBusinessClassName = Entity.ClassName;
    }

    if (string.IsNullOrEmpty(CriteriaClassName) || CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase))
        CriteriaClassName = String.Concat(Entity.ClassName, "Criteria");

    return false;
}

</script>