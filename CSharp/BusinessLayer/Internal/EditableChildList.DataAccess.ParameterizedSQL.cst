<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="DataPortalFetchList" Template="..\..\Common\DataPortalFetchList.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>

using System;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

using Csla;
using Csla.Data;


namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %>
    {
        protected override void Child_Create()
        {
            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return;
        
            OnCreated();
        }
    
        private void Child_Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new DataPortalFetchList()); %>
        }
        
        /// <summary>
        /// Updates the child object.
        /// </summary>
        /// <param name="parameters">The parameters collection may contain more parameters than needed based on the context it was called. We need to filter this list.</param>
        protected override void Child_Update(params object[] parameters)
        {
            bool cancel = false;
            OnUpdating(ref cancel);
            if (cancel) return;

            // We require that one of the parameters be a connection so we can do the CRUD operations.
            var connection = parameters.OfType<SqlConnection>().FirstOrDefault();
            if (connection == null)
                throw new ArgumentNullException("parameters", "Must contain a SqlConnection parameter.");

            RaiseListChangedEvents = false;

            foreach (var item in DeletedList)
            {
                DataPortal.UpdateChild(item, connection);
            }

            DeletedList.Clear();
            
            // Trim down the list to what is actually contained in the child class.
            var list = new System.Collections.Generic.Dictionary<string, object>() {};
            foreach (object o in parameters)
            {
                if(o == null) continue;

                var key = o.GetType().ToString();
                if (!list.ContainsKey(key))
                    list.Add(key, o);
            }

            foreach (var item in Items)
            {
                DataPortal.UpdateChild(item, list.Values.ToArray());
            }

            RaiseListChangedEvents = true;

            OnUpdated();
        }
    }
}
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>