<%-- Author: Blake Niemyjski --%>
<%--         Joe McPherson   --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntitiesCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<% RegisterReferences(); %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this template will not be lost.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;

using System.Data.Linq;
using Csla.Data;

namespace <%= BusinessProjectName %>
{
    public static class LinqToSQLHelper
    {
        #region "Preserved Code"

        private static string _connectionString = String.Empty;

        /// <summary>
        /// Returns the connection string to the data base.
        /// </summary>
        public static string ConnectionString
        {
            get
            {
                if(String.IsNullOrEmpty(_connectionString))
                {
                    _connectionString = "<%= SourceDatabase.Name %>ConnectionString";
                }
                
                return _connectionString;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Returns a where clause formated for use with LINQ based on the current criteria object.
        /// </summary>
        /// <returns>Returns a where clause for the current criteria object.</returns>
        public static string BuildWhereStatement(Dictionary<string, object> bag)
        {
            if (bag.Count == 0)
                return bool.TrueString;

            var result = String.Empty;
            int cntr = -1;
            foreach (KeyValuePair<string, object> key in bag)
            {
                cntr = cntr + 1;
                result += String.Format("{0} = @{1} AND ", key.Key, cntr);
            }

            result = result.Remove(result.Length - 5, 5);
            return result;
        }

        /// <summary>
        /// Returns an array of bytes stored in a binary column.
        /// </summary>
        /// <param name="columnName">The column name containing the the Linq.Binary data.</param>
        /// <returns>An array of bytes stored in the column.  If the column is null a 1 byte array is returned.</returns>
        public static byte[] GetByteArray(System.Data.Linq.Binary columnName)
        {
            if (columnName != null)
                return columnName.ToArray();
            else
                using (var stream = new System.IO.MemoryStream())
                {
                    var psuedoRead = new byte[1];
                    stream.Write(psuedoRead, 0, psuedoRead.Length);
                    return stream.ToArray();
                }
        }

        /// <summary>
        /// Returns a binary result for a byte array value.
        /// </summary>
        /// <param name="byteValue">The column name containing the the byte array data.</param>
        /// <returns>A Linq.Binary representation of the data.  If the length of the byte array =1 return a null value
        public static Binary GetBinary(byte[] byteValue)
        {
            if (byteValue.Length == 1)
                return null;
            else
            {
                var binaryValue = new Binary(byteValue);
                return binaryValue;
            }
        }
        #endregion
    }
}
