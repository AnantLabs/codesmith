<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA NameValueList" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//       Changes to this template will not be lost.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
using System.Data;
using System.Data.SqlClient;
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>

using Csla;
using Csla.Data;

#endregion

namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %>
    {
        #region "Preserved Code"

<% if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL){ %>

        #region Custom Data Access

        private void DataPortal_Fetch()
        {
            RaiseListChangedEvents = false;
            IsReadOnly = false;

            var criteria = new <%= CriteriaClassName %>();
            string commandText = string.Format("SELECT <%= Entity.Members.BuildDataBaseColumns() %> FROM [<%= Entity.Table.Owner %>].[<%= Entity.Table.Name %>] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                            do
                            {
                                // TODO: You will need to update the GetInt32 and GetString values.
                                this.Add(new NameValuePair(reader.GetInt32("<%= Entity.PrimaryKey.KeyMember.ColumnName %>"), reader.GetString("<%= Entity.MembersNoPrimaryKeys[0].ColumnName %>")));
                            } while(reader.Read());
                        }
                        else
                            throw new Exception(string.Format("The record was not found in '<%= Entity.Table.Name %>' using the following criteria: {0}.", criteria));
                    }
                }
            }

            IsReadOnly = true;
            RaiseListChangedEvents = true;
        }

        #endregion

<% } else if(DataAccessImplementation == DataAccessMethod.StoredProcedures || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>

        #region Custom Data Access

        private void DataPortal_Fetch()
        {
            RaiseListChangedEvents = false;
            IsReadOnly = false;

            var criteria = new <%= CriteriaClassName %>();
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("<%= GetSelectStoredProcedureName() %>", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    <%= Entity.MembersNoRowVersion.BuildHasValueCommandParameters() %>
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                            do
                            {
                                // TODO: You will need to update the GetInt32 and GetString values.
                                this.Add(new NameValuePair(reader.GetInt32("<%= Entity.PrimaryKey.KeyMember.ColumnName %>"), reader.GetString("<%= Entity.MembersNoPrimaryKeys[0].ColumnName %>")));
                            } while(reader.Read());
                        }
                        else
                            throw new Exception(string.Format("The record was not found in '<%= Entity.Table.Name %>' using the following criteria: {0}.", criteria));
                    }
                }
            }

            IsReadOnly = true;
            RaiseListChangedEvents = true;
        }

        #endregion

<% } else if(DataAccessImplementation == DataAccessMethod.LinqToSQL ){ %>

        #region Custom Data Access

        private void DataPortal_Fetch()
        {
            RaiseListChangedEvents = false;
            IsReadOnly = false;

            // Check criteria
            // Build a collection of <%=ChildBusinessClassName%><%= Entity.GenericProperty %> objects based on a specified criteria
            using (var ctx = ContextManager<DAL.PetshopDataContext>.GetManager(LinqToSQLHelper.ConnectionString, true))
            {
                var items = ctx.DataContext.<%= StringUtil.ToPascalCase(Entity.Table.Name) %>.Where(LinqToSQLHelper.BuildWhereStatement(criteria.StateBag), criteria.StateBag.Values.ToArray());
                // Add each item retrieved from the data base to the current collection object
                foreach(var item in items)
                {
                    this.Add(new <%= ChildBusinessClassName%><% if(BusinessClassName.Contains("InfoList")) { %>Info<% }%>(item));
                }
            }

            IsReadOnly = true;
            RaiseListChangedEvents = true;
        }

        #endregion

<% } %>

        #endregion
    }
}