<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA SwitchableObject" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
#region Using declarations

using System;

using Csla;
using Csla.Data;

#endregion

namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %>
    {
        #region Root Data Access

        [RunLocal]
        protected override void DataPortal_Create()
        {
            // TODO: load default values
            // omit this override if you have no defaults to set
            base.DataPortal.Create();
        }

        private void DataPortal_Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
            // TODO: load values
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Insert()
        {
            // TODO: insert values
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Update()
        {
            // TODO: update values
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_DeleteSelf()
        {
            // TODO: delete values
            // TODO: Review the need for TransactionScope (if you call DataPortal_Delete then you will not need the attribute on this method).
        }

        //[Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Delete(<%= CriteriaClassName %><%= Entity.GenericProperty %>  criteria)  
        {
            // TODO: delete values
        }

        #endregion

        #region Child Data Access

        protected override void Child_Create()
        {
            // TODO: load default values
            // omit this override if you have no defaults to set
            base.Child_Create();
        }

        private void Child_Fetch(object childData)
        {
            // TODO: load values
        }

        private void Child_Insert(object parent)
        {
            // TODO: insert values
        }

        private void Child_Update(object parent)
        {
            // TODO: update values
        }

        private void Child_DeleteSelf(object parent)
        {
            // TODO: delete values
        }

        #endregion
    }
}
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>