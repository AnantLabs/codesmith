<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="CompositeKeyMethods" Template="..\..\Common\CompositeKeyMethods.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Constructor" Template="..\..\Common\Constructor.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Exists" Template="..\..\Common\Exists.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirty.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Properties" Template="..\..\Common\Properties.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ValidationRules" Template="..\..\Common\ValidationRules.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\DataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;

using Csla;
<% if( DataAccessImplementation == DataAccessMethod.LinqToSQL) {%>
using <%=LinqToSQLContextNamespace%>;
using DAL=<%=LinqToSQLContextNamespace%>;
<% }%>
using Csla.Rules;
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
using System.Data.SqlClient;
#endif
<% } else { %>
using Csla.Data;
using System.Data.SqlClient;
<% } %>

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.Name %>FactoryName)]
<% } %>
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %> : BusinessBase<<%= BusinessClassName %><%= Entity.GenericProperty %>>
    {
<%/*  Documentation code handled in the Constructor.cst template  */
   RenderHelper(new Constructor(), true); %>

<%/*  Documentation code handled in the ValidationRules.cst template  */
   RenderHelper(new ValidationRules()); %>

<%/*  Documentation code handled in the Properties.cst template  */
   RenderHelper(new Properties()); %>

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        #region Synchronous Root Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>.</returns>    
        public static <%= BusinessClassName %><%= Entity.GenericProperty %> New<%= BusinessClassName %>()
        {
            return DataPortal.Create<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        /// <summary>
        /// Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria. 
        /// </summary>
<% foreach(var item in sc.Properties) { %>
        /// <param name="<%= item.VariableName%>"><%if(item.HasDescription){%><%=item.Description%>.<%}else{%>No additional detail available.<%}%></param>
<%}%>
        /// <returns>A <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria.</returns>
        public static <%= BusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>(<%= sc.Properties.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %> {<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>
            
            return DataPortal.Fetch<<%= BusinessClassName %><%= Entity.GenericProperty %>>(criteria);
        }
<% } %>

<% if(UseDeferredDeletion){ %>
        //public static void Delete<%= BusinessClassName %><%= Entity.GenericProperty %>(<%= Entity.Key.Properties.BuildParametersVariables() %>)
        //{
        //      DataPortal.Delete<% if(IsLatestCSLA) { %><<%= BusinessClassName %><%= Entity.GenericProperty %>><% } %>(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<%= Entity.Key.Properties.BuildVariableArguments() %>));
        //}
<% } else { %> 
        public static void Delete<%= BusinessClassName %><%= Entity.GenericProperty %>(<%= Entity.Key.Properties.BuildParametersVariables() %>)
        {
                DataPortal.Delete<% if(IsLatestCSLA) { %><<%= BusinessClassName %><%= Entity.GenericProperty %>><% } %>(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<%= Entity.Key.Properties.BuildVariableArguments() %>));
        }
<% } %>
        
        #endregion
<% if(IncludeSilverlightSupport) { %>
#endif        

        #region Asynchronous Root Factory Methods
        
        public static void New<%= BusinessClassName %>Async(EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        public static void <%= sc.MethodName %>Async(<%= sc.Properties.BuildParametersVariables() %>, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>

            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }
<% } %> 

<% if(UseDeferredDeletion){ %>
        //public static void Delete<%= BusinessClassName %>(<%= Entity.Key.Properties.BuildParametersVariables() %>)
        //{
            //var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= Entity.Key.Properties.BuildObjectInitializer() %>};
            //<%= Entity.Key.Properties.BuildNullableObjectInitializer()%>

            //var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            //dp.BeginDelete(criteria);
        //}
<% } else { %>
        public static void Delete<%= BusinessClassName %>Async(<%= Entity.Key.Properties.BuildParametersVariables()%>, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= Entity.Key.Properties.BuildObjectInitializer() %>};
            <%= Entity.Key.Properties.BuildNullableObjectInitializer()%>

            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.DeleteCompleted += handler;
            dp.BeginDelete(criteria);
        }
<% } %>
        
        #endregion

#if !SILVERLIGHT
<% } %>

        #region Synchronous Child Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>.</returns>
        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> New<%= BusinessClassName %>Child()
        {
            return DataPortal.CreateChild<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        /// <summary>
        /// Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria. 
        /// </summary>
<% foreach(var item in  sc.Properties) { %>
        /// <param name="<%= item.VariableName%>"><%if(item.HasDescription){%><%=item.Description%>.<%}else{%>No additional detail available.<%}%></param>
<%}%>
        /// <returns>A <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria.</returns>

        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>Child(<%= sc.Properties.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %> {<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>

            return DataPortal.Fetch<% if(DataAccessImplementation != DataAccessMethod.ObjectFactoryNone && DataAccessImplementation != DataAccessMethod.ObjectFactoryParameterizedSQL && DataAccessImplementation != DataAccessMethod.ObjectFactoryStoredProcedures){ %>Child<% } %><<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>(criteria);
        }
<% } %>

        #endregion
<% if(IncludeSilverlightSupport) { %>
#endif        

        #region Asynchronous Child Factory Methods
        
        internal static void New<%= BusinessClassName %>ChildAsync(EventHandler<DataPortalResult<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            DataPortal<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>> dp = new DataPortal<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        internal static void <%= sc.MethodName %>ChildAsync(<%= sc.Properties.BuildParametersVariables() %>, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{ <%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>
            
            // Mark as child?
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }
<% } %>

        #endregion
<% } %>
<%/*  Documentation code handled in the appropriate PartialMethods template  */
   RenderHelper(new PartialMethods()); %>

        #region ChildPortal partial methods

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>

        /// <summary>
        /// Codesmith generated stub method that is called when creating the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// Codesmith generated stub method that is called after the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// Codesmith generated stub method that is called when fetching the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="<%= ChildBusinessClassName %>Criteria"/> object containg the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria, ref bool cancel);

        /// <summary>
        /// Codesmith generated stub method that is called after the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// Codesmith generated stub method that is called when inserting the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel);
        partial void OnChildInserting(var connection, ref bool cancel);

        /// <summary>
        /// Codesmith generated stub method that is called after the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// Codesmith generated stub method that is called when updating the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel);
        partial void OnChildUpdating(var connection, ref bool cancel);

        /// <summary>
        /// Codesmith generated stub method that is called after the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// Codesmith generated stub method that is called when self deleting the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// Codesmith generated stub method that is called after the child <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
        #endregion
<%/*  Documentation code handled in the IsDirty.cst template  */
   RenderHelper(new IsDirty()); %>
<%/*  Documentation code handled in the Exists.cst template  */
   RenderHelper(new Exists()); %>
<%/*  Documentation code handled in the CompositeKeyMethods.cst template  */
   RenderHelper(new CompositeKeyMethods()); %>
    }
}