<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="NameValueList" Template="Internal\NameValueList.cst" %>
<%@ Register Name="NameValueListDataAccess" Template="Internal\NameValueList.DataAccess.cst" %>
<%@ Register Name="NameValueListGenerated" Template="Internal\NameValueList.Generated.cst" %>
<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    PreserveRegionsMergeStrategy strategy = new PreserveRegionsMergeStrategy();
    strategy.RegionNameRegex = "^[ \\t]*[ \\s]*\"?(?i:Preserved Code)\"?";

    #region NameValueList
    
    NameValueList nameValueList = this.Create<NameValueList>();
    this.CopyPropertiesTo(nameValueList);
    
    string parentFileName = System.IO.Path.Combine(this.Location, String.Format("Collections\\{0}.cs", nameValueList.BusinessClassName));
    nameValueList.RenderToFile(parentFileName, strategy);
    
    #region NameValueList.Generated
    
    string fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.Generated.cs", nameValueList.BusinessClassName));
    
    NameValueListGenerated nameValueListGenerated = this.Create<NameValueListGenerated>();
    this.CopyPropertiesTo(nameValueListGenerated);
    
    nameValueListGenerated.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #region NameValueList.DataAccess
    
    fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.DataAccess.cs", nameValueList.BusinessClassName));
    
    NameValueListDataAccess nameValueListDataAccess = this.Create<NameValueListDataAccess>();
    this.CopyPropertiesTo(nameValueListDataAccess);
    
    nameValueListDataAccess.RenderToFile(fileName, parentFileName, true);
    
    if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        //StoredProcedures
        fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.StoredProcedures.sql", nameValueList.BusinessClassName));
        SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
        this.CopyPropertiesTo(sqlStoredProcedures);
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
    }
    
    #endregion
    
    #endregion
}

public override bool OnEntityChanging()
{
    if (string.IsNullOrEmpty(BusinessClassName))
    {
        BusinessClassName = string.Concat(Entity.Name, "NameValueList");
        ChildBusinessClassName = Entity.Name;
    }

    if (string.IsNullOrEmpty(CriteriaClassName) || CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase))
        CriteriaClassName = String.Concat(Entity.Name, "Criteria");

    return false;
}

</script>