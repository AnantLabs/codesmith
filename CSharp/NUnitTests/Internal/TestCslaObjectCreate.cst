<%-- Author: Will Comeaux --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.QuickStart.TestCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="Test CSLA Object Create" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
<%@ Property Name="MainTemplateName" Type="System.String" Default="" Category="1. Main Template Name" Description="The name of the main template." %>
        #region Synchronous Create <%= BusinessClassName %> Tests

        /// <summary>
        /// Tests the ability to create synchronously
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>Create()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
            //Create factory method should not be public.
            Console.WriteLine("Ensuring create method is not public on this object");
            Assert.IsFalse(typeof (<%= BusinessClassName %>).GetMethod("New<%= BusinessClassName %>").IsPublic);
<% break; %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestNameValueList.Generated.cst": %>
            //Create factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("New<%= BusinessClassName %>"));
<% break; %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.New<%= BusinessClassName %>();
            Console.WriteLine("Ensuring not null after create");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring IsNew is true");
            Assert.AreEqual(testObject.IsNew, true);
            Console.WriteLine("Ensuring IsSelfDirty is true");
            Assert.AreEqual(testObject.IsSelfDirty, true); 
<% break; %>
<% case "TestSwitchable.Generated.cst": %>
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.New<%= BusinessClassName %>();
            Console.WriteLine("Ensuring not null after create");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring IsNew is true");
            Assert.AreEqual(testObject.IsNew, true);
            Console.WriteLine("Ensuring IsSelfDirty is true");
            Assert.AreEqual(testObject.IsSelfDirty, true); 
<% break; %>
<% default: %>
            //Unable to determine type of CREATE test to generate.
<% break; %>
<% } %>
        }
        #endregion

<% if(IncludeSilverlightSupport) { %>
        
        #region Asynchronous Create <%= BusinessClassName %> Tests

        /// <summary>
        /// Tests the ability to create synchronously
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>CreateA()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
            //Create factory method should not be public.
            Console.WriteLine("Ensuring create method is not public on this object");
            Assert.IsFalse(typeof (<%= BusinessClassName %>).GetMethod("New<%= BusinessClassName %>").IsPublic);
<% break; %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestNameValueList.Generated.cst": %>
            //Create factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("New<%= BusinessClassName %>"));
<% break; %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.New<%= BusinessClassName %>();
            Console.WriteLine("Ensuring not null after create");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring IsNew is true");
            Assert.AreEqual(testObject.IsNew, true);
            Console.WriteLine("Ensuring IsSelfDirty is true");
            Assert.AreEqual(testObject.IsSelfDirty, true); 
<% break; %>
<% case "TestSwitchable.Generated.cst": %>
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.New<%= BusinessClassName %>();
            Console.WriteLine("Ensuring not null after create");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring IsNew is true");
            Assert.AreEqual(testObject.IsNew, true);
            Console.WriteLine("Ensuring IsSelfDirty is true");
            Assert.AreEqual(testObject.IsSelfDirty, true);
<% break; %>
<% default: %>
            //Unable to determine type of CREATE test to generate.
<% break; %>
<% } %>
        }
        #endregion

<% } %>