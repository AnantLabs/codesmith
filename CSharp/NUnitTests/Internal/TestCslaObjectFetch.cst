<%-- Author: Will Comeaux --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.QuickStart.TestCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="Test CSLA Object Fetch" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
<%@ Property Name="MainTemplateName" Type="System.String" Default="" Category="1. Main Template Name" Description="The name of the main template." %>
        #region Synchronous Fetch <%= BusinessClassName %> Tests
        
        /// <summary>
        /// Tests the ability to fetch synchronously with lazy loading, with child objects
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>FetchWithLazyLoadingWithChildObjects()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
            //Fetch factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Get<%= BusinessClassName %>"));
<% break; %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            int idToUse = 1;
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>(idToUse, true, true);
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring proper object was fetch by checking primary key");
            Assert.AreEqual(testObject.<%= Entity.PrimaryKey.KeyMember %>, idToUse);
<% } else {%>
            //Non-integer foreign key detected. Unable to generate FETCH test.
<% }%>
<% break; %>
<% case "TestNameValueList.Generated.cst": %>
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.GetAll();
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring list has items");
            Assert.Greater(testObject.Count, 0);
<% break; %>

<% default: %>
            //Unable to determine type of FETCH test to generate.
<% break; %>
<% } %>
        }
        
        /// <summary>
        /// Tests the ability to fetch synchronously with lazy loading, without child objects
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>FetchWithLazyLoadingNoChildObjects()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
            //Fetch factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Get<%= BusinessClassName %>"));
<% break; %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            int idToUse = 1;
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>(idToUse, true, false);
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring proper object was fetch by checking primary key");
            Assert.AreEqual(testObject.<%= Entity.PrimaryKey.KeyMember %>, idToUse);
<% } else {%>
            //Non-integer foreign key detected. Unable to generate FETCH test.
<% }%>
<% break; %>
<% case "TestNameValueList.Generated.cst": %>
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.GetAll();
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring list has items");
            Assert.Greater(testObject.Count, 0);
<% break; %>

<% default: %>
            //Unable to determine type of FETCH test to generate.
<% break; %>
<% } %>
        }

        /// <summary>
        /// Tests the ability to fetch synchronously without lazy loading with child objects
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>FetchNoLazyLoadingWithChildObjects()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
            //Fetch factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Get<%= BusinessClassName %>"));
<% break; %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            int idToUse = 1;
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>(idToUse, false, true);
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring proper object was fetch by checking primary key");
            Assert.AreEqual(testObject.<%= Entity.PrimaryKey.KeyMember %>, idToUse);
<% } else {%>
            //Non-integer foreign key detected. Unable to generate FETCH test.
<% }%>
<% break; %>
<% case "TestNameValueList.Generated.cst": %>
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.GetAll();
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring list has items");
            Assert.Greater(testObject.Count, 0);
<% break; %>

<% default: %>
            //Unable to determine type of FETCH test to generate.
<% break; %>
<% } %>
        }
        
         /// <summary>
        /// Tests the ability to fetch synchronously without lazy loading without child objects
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>FetchSyndNoLazyLoadingNoChildObjects()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
            //Fetch factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Get<%= BusinessClassName %>"));
<% break; %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            int idToUse = 1;
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>(idToUse);
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring proper object was fetch by checking primary key");
            Assert.AreEqual(testObject.<%= Entity.PrimaryKey.KeyMember %>, idToUse);
<% } else {%>
            //Non-integer foreign key detected. Unable to generate FETCH test.
<% }%>
<% break; %>
<% case "TestNameValueList.Generated.cst": %>
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.GetAll();
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring list has items");
            Assert.Greater(testObject.Count, 0);
<% break; %>

<% default: %>
            //Unable to determine type of FETCH test to generate.
<% break; %>
<% } %>
        }

        #endregion

<% if(IncludeSilverlightSupport) { %>
        
        #region Asynchronous Fetch <%= BusinessClassName %> Tests
        
        /// <summary>
        /// Tests the ability to fetch asynchronously with lazy loading, with child objects
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>FetchAsyncWithLazyLoadingWithChildObjects()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
            //Fetch factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Get<%= BusinessClassName %>Async"));
<% break; %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            /*
            int idToUse = 1;
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>Async(idToUse, true, true);
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring proper object was fetch by checking primary key");
            Assert.AreEqual(testObject.<%= Entity.PrimaryKey.KeyMember %>, idToUse);
            */
<% } else {%>
            //Non-integer foreign key detected. Unable to generate FETCH test.
<% }%>
<% break; %>
<% case "TestNameValueList.Generated.cst": %>
            //<%= BusinessClassName %> testObject = <%= BusinessClassName %>.GetAllA();
            //Console.WriteLine("Ensuring not null after fetch");
            //Assert.IsNotNull(testObject);
            //Console.WriteLine("Ensuring list has items");
            //Assert.Greater(testObject.Count, 0);
<% break; %>

<% default: %>
            //Unable to determine type of FETCH test to generate.
<% break; %>
<% } %>
        }
        
        /// <summary>
        /// Tests the ability to fetch asynchronously with lazy loading, without child objects
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>FetchAsyncWithLazyLoadingNoChildObjects()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
            //Fetch factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Get<%= BusinessClassName %>Async"));
<% break; %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            /*
            int idToUse = 1;
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>Async(idToUse, true, false);
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring proper object was fetch by checking primary key");
            Assert.AreEqual(testObject.<%= Entity.PrimaryKey.KeyMember %>, idToUse);
            */
<% } else {%>
            //Non-integer foreign key detected. Unable to generate FETCH test.
<% }%>
<% break; %>
<% case "TestNameValueList.Generated.cst": %>
            //<%= BusinessClassName %> testObject = <%= BusinessClassName %>.GetAllA();
            //Console.WriteLine("Ensuring not null after fetch");
            //Assert.IsNotNull(testObject);
            //Console.WriteLine("Ensuring list has items");
            //Assert.Greater(testObject.Count, 0);
<% break; %>

<% default: %>
            //Unable to determine type of FETCH test to generate.
<% break; %>
<% } %>
        }
        
        /// <summary>
        /// Tests the ability to fetch asynchronously without lazy loading, with child objects
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>FetchAsyncNoLazyLoadingWithChildObjects()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
            //Fetch factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Get<%= BusinessClassName %>Async"));
<% break; %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            /*
            int idToUse = 1;
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>Async(idToUse, false, true);
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring proper object was fetch by checking primary key");
            Assert.AreEqual(testObject.<%= Entity.PrimaryKey.KeyMember %>, idToUse);
            */
<% } else {%>
            //Non-integer foreign key detected. Unable to generate FETCH test.
<% }%>
<% break; %>
<% case "TestNameValueList.Generated.cst": %>
            //<%= BusinessClassName %> testObject = <%= BusinessClassName %>.GetAllA();
            //Console.WriteLine("Ensuring not null after fetch");
            //Assert.IsNotNull(testObject);
            //Console.WriteLine("Ensuring list has items");
            //Assert.Greater(testObject.Count, 0);
<% break; %>

<% default: %>
            //Unable to determine type of FETCH test to generate.
<% break; %>
<% } %>
        }
        
        /// <summary>
        /// Tests the ability to fetch asynchronously without lazy loading, without child objects
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>FetchAsyncNoLazyLoadingNoChildObjects()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
            //Fetch factory method should not exist for this object.
            Console.WriteLine("Ensuring create method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Get<%= BusinessClassName %>Async"));
<% break; %>
<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            /*
            int idToUse = 1;
            <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>Async(idToUse);
            Console.WriteLine("Ensuring not null after fetch");
            Assert.IsNotNull(testObject);
            Console.WriteLine("Ensuring proper object was fetch by checking primary key");
            Assert.AreEqual(testObject.<%= Entity.PrimaryKey.KeyMember %>, idToUse);
            */
<% } else {%>
            //Non-integer foreign key detected. Unable to generate FETCH test.
<% }%>
<% break; %>
<% case "TestNameValueList.Generated.cst": %>
            //<%= BusinessClassName %> testObject = <%= BusinessClassName %>.GetAllA();
            //Console.WriteLine("Ensuring not null after fetch");
            //Assert.IsNotNull(testObject);
            //Console.WriteLine("Ensuring list has items");
            //Assert.Greater(testObject.Count, 0);
<% break; %>

<% default: %>
            //Unable to determine type of FETCH test to generate.
<% break; %>
<% } %>
        }

        #endregion

<% } %>