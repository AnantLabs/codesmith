//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v2.0.0.1440, CSLA Framework: v3.8.2.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Account.cs'.
//
//     Template: EditableChild.DataAccess.ParameterizedSQL.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

#endregion

namespace PetShop.Business
{
    public partial class Account
    {
        protected override void Child_Create()
        {
            bool cancel = false;
            OnChildCreating(ref cancel);
            if (cancel) return;

            ValidationRules.CheckRules();

            OnChildCreated();
        }

        private void Child_Fetch(AccountCriteria criteria)
        {
            bool cancel = false;
            OnChildFetching(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("SELECT [AccountId], [UniqueID], [Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone] FROM [dbo].[Account] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                            Map(reader);
                        else
                            throw new Exception(string.Format("The record was not found in 'Account' using the following criteria: {0}.", criteria));
                    }
                }
            }

            OnChildFetched();
        }

        private void Child_Insert(Profile profile, SqlConnection connection)
        {
            bool cancel = false;
            OnChildInserting(ref cancel);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            const string commandText = "INSERT INTO [dbo].[Account] ([UniqueID], [Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone]) VALUES (@p_UniqueID, @p_Email, @p_FirstName, @p_LastName, @p_Address1, @p_Address2, @p_City, @p_State, @p_Zip, @p_Country, @p_Phone); SELECT [AccountId] FROM [dbo].[Account] WHERE AccountId = SCOPE_IDENTITY()";
            using(SqlCommand command = new SqlCommand(commandText, connection))
            {
                command.Parameters.AddWithValue("@p_UniqueID", profile.UniqueID);
					command.Parameters.AddWithValue("@p_Email", this.Email);
					command.Parameters.AddWithValue("@p_FirstName", this.FirstName);
					command.Parameters.AddWithValue("@p_LastName", this.LastName);
					command.Parameters.AddWithValue("@p_Address1", this.Address1);
					command.Parameters.AddWithValue("@p_Address2", this.Address2);
					command.Parameters.AddWithValue("@p_City", this.City);
					command.Parameters.AddWithValue("@p_State", this.State);
					command.Parameters.AddWithValue("@p_Zip", this.Zip);
					command.Parameters.AddWithValue("@p_Country", this.Country);
					command.Parameters.AddWithValue("@p_Phone", this.Phone);

                using(var reader = new SafeDataReader(command.ExecuteReader()))
                {
                    if(reader.Read())
                    {
                        LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"));
                    }
                }

            }

            OnChildInserted();
        }

        private void Child_Update(Profile profile, SqlConnection connection)
        {
            bool cancel = false;
            OnChildUpdating(ref cancel);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            const string commandText = "UPDATE [dbo].[Account]  SET [UniqueID] = @p_UniqueID, [Email] = @p_Email, [FirstName] = @p_FirstName, [LastName] = @p_LastName, [Address1] = @p_Address1, [Address2] = @p_Address2, [City] = @p_City, [State] = @p_State, [Zip] = @p_Zip, [Country] = @p_Country, [Phone] = @p_Phone WHERE [AccountId] = @p_AccountId";
            using(SqlCommand command = new SqlCommand(commandText, connection))
            {
                command.Parameters.AddWithValue("@p_AccountId", this.AccountId);
					command.Parameters.AddWithValue("@p_UniqueID", profile.UniqueID);
					command.Parameters.AddWithValue("@p_Email", this.Email);
					command.Parameters.AddWithValue("@p_FirstName", this.FirstName);
					command.Parameters.AddWithValue("@p_LastName", this.LastName);
					command.Parameters.AddWithValue("@p_Address1", this.Address1);
					command.Parameters.AddWithValue("@p_Address2", this.Address2);
					command.Parameters.AddWithValue("@p_City", this.City);
					command.Parameters.AddWithValue("@p_State", this.State);
					command.Parameters.AddWithValue("@p_Zip", this.Zip);
					command.Parameters.AddWithValue("@p_Country", this.Country);
					command.Parameters.AddWithValue("@p_Phone", this.Phone);

                using(var reader = new SafeDataReader(command.ExecuteReader()))
                {
                    if(reader.Read())
                    {
                        LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"));
                    }
                }

            }

            OnChildUpdated();
        }

        private void Child_DeleteSelf()
        {
            bool cancel = false;
            OnChildSelfDeleting(ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new AccountCriteria (AccountId));
        
            OnChildSelfDeleted();
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(AccountCriteria criteria)
        {
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("DELETE FROM [dbo].[Account] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
        }

        private void Map(SafeDataReader reader)
        {
            bool cancel = false;
            OnMapping(ref cancel);
            if (cancel) return;

            using(BypassPropertyChecks)
            {
                LoadProperty(_accountIdProperty, reader["AccountId"]);
                LoadProperty(_uniqueIDProperty, reader["UniqueID"]);
                LoadProperty(_emailProperty, reader["Email"]);
                LoadProperty(_firstNameProperty, reader["FirstName"]);
                LoadProperty(_lastNameProperty, reader["LastName"]);
                LoadProperty(_address1Property, reader["Address1"]);
                LoadProperty(_address2Property, reader["Address2"]);
                LoadProperty(_cityProperty, reader["City"]);
                LoadProperty(_stateProperty, reader["State"]);
                LoadProperty(_zipProperty, reader["Zip"]);
                LoadProperty(_countryProperty, reader["Country"]);
                LoadProperty(_phoneProperty, reader["Phone"]);
            }

            OnMapped();

            MarkAsChild();
            MarkOld();
        }

        #region Child data access partial methods

        partial void OnChildCreating(ref bool cancel);
        partial void OnChildCreated();
        partial void OnChildFetching(AccountCriteria criteria, ref bool cancel);
        partial void OnChildFetched();
        partial void OnMapping(ref bool cancel);
        partial void OnMapped();
        partial void OnChildInserting(ref bool cancel);
        partial void OnChildInserted();
        partial void OnChildUpdating(ref bool cancel);
        partial void OnChildUpdated();
        partial void OnChildSelfDeleting(ref bool cancel);
        partial void OnChildSelfDeleted();
        partial void OnDeleting(AccountCriteria criteria, ref bool cancel);
        partial void OnDeleted();

        #endregion
    }
}