<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a very simple business object." %>
<%@ Property Name="ClassNamespace" Type="System.String" Default="" Optional="True" Category="Context" Description="The namespace to contain this class." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>
using System;
using System.Data;
using System.Data.SqlClient;
using System.Text;

<% if (!string.IsNullOrEmpty(ClassNamespace)) { %>
namespace <%= ClassNamespace %>
{
<% } %>
	#region <%= GetClassName(SourceTable) %>
	/// <summary>
	/// This object represents the properties and methods of a <%= GetClassName(SourceTable) %>.
	/// </summary>
	public class <%= GetClassName(SourceTable) %>
	{
		private <%= GetPrimaryKeyType(SourceTable) %> _id;
		<% foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% } %>
		
		public <%= GetClassName(SourceTable) %>()
		{
		}
		
		public <%= GetClassName(SourceTable) %>(<%= GetPrimaryKeyType(SourceTable) %> id)
		{
			SqlService sql = new SqlService();
			sql.AddParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.PrimaryKey.MemberColumns[0]) %>, id);
			SqlDataReader reader = sql.ExecuteSqlReader("SELECT * FROM <%= SourceTable.Name %> WHERE <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = @<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>");
			
			if (reader.Read()) 
			{
				this.LoadFromReader(reader);
				reader.Close();
			}
			else
			{
				if (!reader.IsClosed) reader.Close();
				throw new ApplicationException("<%= GetClassName(SourceTable) %> does not exist.");
			}
		}
		
		public <%= GetClassName(SourceTable) %>(SqlDataReader reader)
		{
			this.LoadFromReader(reader);
		}
		
		protected void LoadFromReader(SqlDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
			{
				_id = reader.<%= GetReaderMethod(SourceTable.PrimaryKey.MemberColumns[0]) %>(0);
				<% for (int i = 1; i < SourceTable.Columns.Count; i++) { %>
				<%= GetReaderAssignmentStatement(SourceTable.Columns[i], i) %>
				<% } %>
			}
		}
		
		public void Delete()
		{
			<%= GetClassName(SourceTable) %>.Delete(_id);
		}
		
		public void Update()
		{
			SqlService sql = new SqlService();
			StringBuilder queryParameters = new StringBuilder();

			sql.AddParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.PrimaryKey.MemberColumns[0]) %>, Id);
			queryParameters.Append("<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = @<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>");

			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			sql.AddParameter("@<%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>", SqlDbType.<%= GetSqlDbType(SourceTable.NonPrimaryKeyColumns[i]) %>, <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>);
			queryParameters.Append(", <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %> = @<%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>");
			<% } %>

			string query = String.Format("Update <%= SourceTable.Name %> Set {0} Where <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = @<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", queryParameters.ToString());
			SqlDataReader reader = sql.ExecuteSqlReader(query);
		}
		
		public void Create()
		{
			SqlService sql = new SqlService();
			StringBuilder queryParameters = new StringBuilder();

			sql.AddParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.PrimaryKey.MemberColumns[0]) %>, Id);
			queryParameters.Append("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>");

			<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
			sql.AddParameter("@<%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>", SqlDbType.<%= GetSqlDbType(SourceTable.NonPrimaryKeyColumns[i]) %>, <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>);
			queryParameters.Append(", @<%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>");
			<% } %>

			string query = String.Format("Insert Into <%= SourceTable.Name %> ({0}) Values ({1})", queryParameters.ToString().Replace("@", ""), queryParameters.ToString());
			SqlDataReader reader = sql.ExecuteSqlReader(query);
		}
		
		public static <%= GetClassName(SourceTable) %> New<%= GetClassName(SourceTable) %>(<%= GetPrimaryKeyType(SourceTable) %> id)
		{
			<%= GetClassName(SourceTable) %> newEntity = new <%= GetClassName(SourceTable) %>();
			newEntity._id = id;

			return newEntity;
		}
		
		#region Public Properties
		public <%= GetPrimaryKeyType(SourceTable) %> Id
		{
			get {return _id;}
			set {_id = value;}
		}
		
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
		public <%= GetCSharpVariableType(SourceTable.NonPrimaryKeyColumns[i]) %> <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>
		{
			get {return <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %>;}
			set {<%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %> = value;}
		}
		<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
		#endregion
		
		public static <%= GetClassName(SourceTable) %> Get<%= GetClassName(SourceTable) %>(<%= GetPrimaryKeyType(SourceTable) %> id)
		{
			return new <%= GetClassName(SourceTable) %>(id);
		}
		
		public static void Delete(<%= GetPrimaryKeyType(SourceTable) %> id)
		{
			SqlService sql = new SqlService();
			sql.AddParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", SqlDbType.<%= GetSqlDbType(SourceTable.PrimaryKey.MemberColumns[0]) %>, id);
	
			SqlDataReader reader = sql.ExecuteSqlReader("Delete <%= SourceTable.Name %> Where <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = @<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>");
		}
	}
	#endregion
<% if (!string.IsNullOrEmpty(ClassNamespace)) { %>
}
<% } %>

<script runat="template">
public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);
	
	string defaultValue = GetMemberVariableDefaultValue(column);
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";
	
	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
	statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";
	
	return statement;
}

public string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);
	
	return memberVariableName;
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}
		
public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;

	return DbTypeCSharp[column.DataType.ToString()];	
}

public string GetReaderMethod(ColumnSchema column)
{
	return DbDataReader[column.DataType.ToString()];
}

public string GetClassName(TableSchema table)
{
	if (table.Name.EndsWith("s"))
	{
		return table.Name.Substring(0, table.Name.Length - 1);
	}
	else
	{
		return table.Name;
	}
}

public string GetSqlDbType(ColumnSchema column)
{
	return SqlNativeSqlDb[column.NativeType.ToString()];
}

public string GetPrimaryKeyType(TableSchema table)
{
	if (table.PrimaryKey != null)
	{
		if (table.PrimaryKey.MemberColumns.Count == 1)
		{
			return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
		}
		else
		{
			throw new ApplicationException("This template will not work on primary keys with more than one member column.");
		}
	}
	else
	{
		throw new ApplicationException("This template will only work on tables with a primary key.");
	}
}

public override string GetFileName()
{
	return this.GetClassName(this.SourceTable) + ".cs";
}
</script>