<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates strongly typed ICollection, IList, and IEnumerator interfaces." %>
<%@ Property Name="Accessibility" Type="AccessibilityEnum" Category="Options" Description="The accessibility of the collection interfaces." %>
<%@ Property Name="TargetNamespace" Type="System.String" Optional="True" Category="Namespaces" Description="The namespace of the collection interfaces." %>
<%@ Property Name="ItemType" Type="System.String" Category="Context" Description="The element type of the collection." %>
<%@ Property Name="ItemNamespace" Type="System.String" Optional="True" Category="Namespaces" Description="The namespace of the element type." %>
<%@ Property Name="ItemValueType" Type="System.Boolean" Category="Options" Default="false" Description="Indicates whether ItemType is a value type." %>

<% UsingNamespace("System"); %>
<% UsingNamespace("System.Collections"); %>
<% UsingNamespace(ItemNamespace); %>

<% StartNamespace(TargetNamespace); %>
    #region Interface I<%= ItemType%>Collection

    /// <summary>
    /// Defines size, enumerators, and synchronization methods for strongly
    /// typed collections of <see cref="<%= ItemType %>"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>I<%= ItemType%>Collection</b> provides an <see cref="ICollection"/>
    /// that is strongly typed for <see cref="<%= ItemType %>"/> elements.
    /// </remarks>

    <%= GetAccessModifier(Accessibility) %> interface I<%= ItemType %>Collection {
        #region Properties
        #region Count

        /// <summary>
        /// Gets the number of elements contained in the
        /// <see cref="I<%= ItemType %>Collection"/>.
        /// </summary>
        /// <value>The number of elements contained in the
        /// <see cref="I<%= ItemType %>Collection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.Count"/> for details.</remarks>

        int Count { get; }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the
        /// <see cref="I<%= ItemType %>Collection"/> is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="I<%= ItemType %>Collection"/> is
        /// synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="ICollection.IsSynchronized"/> for details.</remarks>

        bool IsSynchronized { get; }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize access
        /// to the <see cref="I<%= ItemType %>Collection"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize access
        /// to the <see cref="I<%= ItemType %>Collection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.SyncRoot"/> for details.</remarks>

        object SyncRoot { get; }

        #endregion
        #endregion
        #region Methods
        #region CopyTo

        /// <summary>
        /// Copies the entire <see cref="I<%= ItemType %>Collection"/> to a one-dimensional <see cref="Array"/>
        /// of <see cref="<%= ItemType %>"/> elements, starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="<%= ItemType %>"/> elements copied from the <see cref="I<%= ItemType %>Collection"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="I<%= ItemType %>Collection"/> is greater
        /// than the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="ICollection.CopyTo"/> for details.</remarks>

        void CopyTo(<%= ItemType %>[] array, int arrayIndex);

        #endregion
        #region GetEnumerator

        /// <summary>
        /// Returns an <see cref="I<%= ItemType %>Enumerator"/> that can
        /// iterate through the <see cref="I<%= ItemType %>Collection"/>.
        /// </summary>
        /// <returns>An <see cref="I<%= ItemType %>Enumerator"/>
        /// for the entire <see cref="I<%= ItemType %>Collection"/>.</returns>
        /// <remarks>Please refer to <see cref="IEnumerable.GetEnumerator"/> for details.</remarks>

        I<%= ItemType %>Enumerator GetEnumerator();

        #endregion
        #endregion
    }

    #endregion
    #region Interface I<%= ItemType%>List

    /// <summary>
    /// Represents a strongly typed collection of <see cref="<%= ItemType %>"/>
    /// objects that can be individually accessed by index.
    /// </summary>
    /// <remarks>
    /// <b>I<%= ItemType%>List</b> provides an <see cref="IList"/>
    /// that is strongly typed for <see cref="<%= ItemType %>"/> elements.
    /// </remarks>

    <%= GetAccessModifier(Accessibility) %> interface
        I<%= ItemType %>List: I<%= ItemType %>Collection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the <see cref="I<%= ItemType %>List"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="I<%= ItemType %>List"/> has a fixed size;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the <see cref="I<%= ItemType %>List"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="I<%= ItemType %>List"/> is read-only;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="<%= ItemType %>"/> element at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the
        /// <see cref="<%= ItemType %>"/> element to get or set.</param>
        /// <value>
        /// The <see cref="<%= ItemType %>"/> element at the specified <paramref name="index"/>.
        /// </value>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="I<%= ItemType %>Collection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// The property is set and the <see cref="I<%= ItemType %>List"/> is read-only.</exception>
        /// <remarks>Please refer to <see cref="IList.this"/> for details.</remarks>

        <%= ItemType %> this[int index] { get; set; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds a <see cref="<%= ItemType %>"/> to the end
        /// of the <see cref="I<%= ItemType %>List"/>.
        /// </summary>
        /// <param name="value">The <see cref="<%= ItemType %>"/> object
        /// to be added to the end of the <see cref="I<%= ItemType %>List"/>.
        <% if (!ItemValueType) { %>
        /// This argument can be a null reference.
        <% } %>
        /// </param>
        /// <returns>The <see cref="I<%= ItemType %>List"/> index at which
        /// the <paramref name="value"/> has been added.</returns>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="I<%= ItemType %>List"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>I<%= ItemType %>List</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Add"/> for details.</remarks>

        int Add(<%= ItemType %> value);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="I<%= ItemType %>List"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="I<%= ItemType %>List"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>I<%= ItemType %>List</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="I<%= ItemType %>List"/>
        /// contains the specified <see cref="<%= ItemType %>"/> element.
        /// </summary>
        /// <param name="value">The <see cref="<%= ItemType %>"/> object
        /// to locate in the <see cref="I<%= ItemType %>List"/>.
        <% if (!ItemValueType) { %>
        /// This argument can be a null reference.
        <% } %>
        /// </param>
        /// <returns><c>true</c> if <paramref name="value"/> is found in the
        /// <see cref="I<%= ItemType %>List"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="IList.Contains"/> for details.</remarks>

        bool Contains(<%= ItemType %> value);

        #endregion
        #region IndexOf

        /// <summary>
        /// Returns the zero-based index of the first occurrence of the specified
        /// <see cref="<%= ItemType %>"/> in the <see cref="I<%= ItemType %>List"/>.
        /// </summary>
        /// <param name="value">The <see cref="<%= ItemType %>"/> object
        /// to locate in the <see cref="I<%= ItemType %>List"/>.
        <% if (!ItemValueType) { %>
        /// This argument can be a null reference.
        <% } %>
        /// </param>
        /// <returns>
        /// The zero-based index of the first occurrence of <paramref name="value"/>
        /// in the <see cref="I<%= ItemType %>List"/>, if found; otherwise, -1.
        /// </returns>
        /// <remarks>Please refer to <see cref="IList.IndexOf"/> for details.</remarks>

        int IndexOf(<%= ItemType %> value);

        #endregion
        #region Insert

        /// <summary>
        /// Inserts a <see cref="<%= ItemType %>"/> element into the
        /// <see cref="I<%= ItemType %>List"/> at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index at which
        /// <paramref name="value"/> should be inserted.</param>
        /// <param name="value">The <see cref="<%= ItemType %>"/> object
        /// to insert into the <see cref="I<%= ItemType %>List"/>.
        <% if (!ItemValueType) { %>
        /// This argument can be a null reference.
        <% } %>
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is greater than
        /// <see cref="I<%= ItemType %>Collection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="I<%= ItemType %>List"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>I<%= ItemType %>List</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Insert"/> for details.</remarks>

        void Insert(int index, <%= ItemType %> value);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the first occurrence of the specified <see cref="<%= ItemType %>"/>
        /// from the <see cref="I<%= ItemType %>List"/>.
        /// </summary>
        /// <param name="value">The <see cref="<%= ItemType %>"/> object
        /// to remove from the <see cref="I<%= ItemType %>List"/>.
        <% if (!ItemValueType) { %>
        /// This argument can be a null reference.
        <% } %>
        /// </param>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="I<%= ItemType %>List"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>I<%= ItemType %>List</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Remove"/> for details.</remarks>

        void Remove(<%= ItemType %> value);

        #endregion
        #region RemoveAt

        /// <summary>
        /// Removes the element at the specified index of the
        /// <see cref="I<%= ItemType %>List"/>.
        /// </summary>
        /// <param name="index">The zero-based index of the element to remove.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="I<%= ItemType %>Collection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="I<%= ItemType %>List"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>I<%= ItemType %>List</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.RemoveAt"/> for details.</remarks>

        void RemoveAt(int index);

        #endregion
        #endregion
    }

    #endregion
    #region Interface I<%= ItemType %>Enumerator

    /// <summary>
    /// Supports type-safe iteration over a collection that
    /// contains <see cref="<%= ItemType %>"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>I<%= ItemType %>Enumerator</b> provides an <see cref="IEnumerator"/>
    /// that is strongly typed for <see cref="<%= ItemType %>"/> elements.
    /// </remarks>

    <%= GetAccessModifier(Accessibility) %> interface I<%= ItemType %>Enumerator {
        #region Properties
        #region Current

        /// <summary>
        /// Gets the current <see cref="<%= ItemType %>"/> element in the collection.
        /// </summary>
        /// <value>The current <see cref="<%= ItemType %>"/> element in the collection.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the collection or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The collection was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Current"/> for details, but note
        /// that <b>Current</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        <%= ItemType %> Current { get; }

        #endregion
        #endregion
        #region Methods
        #region MoveNext

        /// <summary>
        /// Advances the enumerator to the next element of the collection.
        /// </summary>
        /// <returns><c>true</c> if the enumerator was successfully advanced to the next element;
        /// <c>false</c> if the enumerator has passed the end of the collection.</returns>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.MoveNext"/> for details.</remarks>

        bool MoveNext();

        #endregion
        #region Reset

        /// <summary>
        /// Sets the enumerator to its initial position,
        /// which is before the first element in the collection.
        /// </summary>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Reset"/> for details.</remarks>

        void Reset();

        #endregion
        #endregion
    }

    #endregion
<% EndNamespace(TargetNamespace); %>
<script runat="template">
public enum AccessibilityEnum {
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public string GetAccessModifier(AccessibilityEnum accessibility) {
    switch (accessibility) {
        case AccessibilityEnum.Public:            return "public";
        case AccessibilityEnum.Protected:         return "protected";
        case AccessibilityEnum.Internal:          return "internal";
        case AccessibilityEnum.ProtectedInternal: return "protected internal";
        case AccessibilityEnum.Private:           return "private";
        default:                                  return "public";
    }
}

private static System.Collections.Specialized.StringCollection
    _namespaces = new System.Collections.Specialized.StringCollection();

public void UsingNamespace(string ns) {
    if (ns == null || ns.Length == 0) return;
    if (_namespaces.Contains(ns)) return;
    Response.WriteLine("using " + ns + ";");
    _namespaces.Add(ns);
}

public void StartNamespace(string ns) {
    if (ns == null || ns.Length == 0) return;
    Response.WriteLine("namespace " + ns + " {");
}

public void EndNamespace(string ns) {
    if (ns == null || ns.Length == 0) return;
    Response.WriteLine("}");
}
</script>
