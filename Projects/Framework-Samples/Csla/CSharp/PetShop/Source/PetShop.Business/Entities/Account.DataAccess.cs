//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.8.X CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Account.cs'.
//
//     Template: EditableChild.DataAccess.ParameterizedSQL.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

#endregion

namespace PetShop.Business
{
    public partial class Account
    {
        protected override void Child_Create()
        {
            // TODO: load default values
            // omit this override if you have no defaults to set
            //base.Child_Create();
        }

        private void Child_Fetch(AccountCriteria criteria)
        {
            string commandText = string.Format("SELECT [AccountId], [UniqueID], [Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone] FROM [dbo].[Account] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                            Map(reader);
                        else
                            throw new Exception(string.Format("The record was not found in 'Account' using the following criteria: {0}.", criteria));
                    }
                }
            }
        }

        private void Child_Insert(Profile profile)
        {
            const string commandText = "INSERT INTO [dbo].[Account] ([UniqueID], [Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone]) VALUES (@p_UniqueID, @p_Email, @p_FirstName, @p_LastName, @p_Address1, @p_Address2, @p_City, @p_State, @p_Zip, @p_Country, @p_Phone); SELECT [AccountId] FROM [dbo].[Account] WHERE AccountId = SCOPE_IDENTITY()";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@p_UniqueID", profile.UniqueID);
					command.Parameters.AddWithValue("@p_Email", Email);
					command.Parameters.AddWithValue("@p_FirstName", FirstName);
					command.Parameters.AddWithValue("@p_LastName", LastName);
					command.Parameters.AddWithValue("@p_Address1", Address1);
					command.Parameters.AddWithValue("@p_Address2", Address2);
					command.Parameters.AddWithValue("@p_City", City);
					command.Parameters.AddWithValue("@p_State", State);
					command.Parameters.AddWithValue("@p_Zip", Zip);
					command.Parameters.AddWithValue("@p_Country", Country);
					command.Parameters.AddWithValue("@p_Phone", Phone);
                    
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                            LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"));
                        }
                    }
                }
            }
        }

        private void Child_Update(Profile profile)
        {
            const string commandText = "UPDATE [dbo].[Account]  SET [UniqueID] = @p_UniqueID, [Email] = @p_Email, [FirstName] = @p_FirstName, [LastName] = @p_LastName, [Address1] = @p_Address1, [Address2] = @p_Address2, [City] = @p_City, [State] = @p_State, [Zip] = @p_Zip, [Country] = @p_Country, [Phone] = @p_Phone WHERE [AccountId] = @p_AccountId";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
					command.Parameters.AddWithValue("@p_AccountId", AccountId);
					command.Parameters.AddWithValue("@p_UniqueID", profile.UniqueID);
					command.Parameters.AddWithValue("@p_Email", Email);
					command.Parameters.AddWithValue("@p_FirstName", FirstName);
					command.Parameters.AddWithValue("@p_LastName", LastName);
					command.Parameters.AddWithValue("@p_Address1", Address1);
					command.Parameters.AddWithValue("@p_Address2", Address2);
					command.Parameters.AddWithValue("@p_City", City);
					command.Parameters.AddWithValue("@p_State", State);
					command.Parameters.AddWithValue("@p_Zip", Zip);
					command.Parameters.AddWithValue("@p_Country", Country);
					command.Parameters.AddWithValue("@p_Phone", Phone);

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        if(reader.RecordsAffected == 0)
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

                    }
                }
            }
        }

        private void Child_DeleteSelf()
        {
            DataPortal_Delete(new AccountCriteria(AccountId));
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(AccountCriteria criteria)
        {
            string commandText = string.Format("DELETE FROM [dbo].[Account] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        if(reader.RecordsAffected == 0)
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                    }
                }
            }
        }

        private void Map(SafeDataReader reader)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"));
                LoadProperty(_uniqueIDProperty, reader.GetInt32("UniqueID"));
                LoadProperty(_emailProperty, reader.GetString("Email"));
                LoadProperty(_firstNameProperty, reader.GetString("FirstName"));
                LoadProperty(_lastNameProperty, reader.GetString("LastName"));
                LoadProperty(_address1Property, reader.GetString("Address1"));
                LoadProperty(_address2Property, reader.GetString("Address2"));
                LoadProperty(_cityProperty, reader.GetString("City"));
                LoadProperty(_stateProperty, reader.GetString("State"));
                LoadProperty(_zipProperty, reader.GetString("Zip"));
                LoadProperty(_countryProperty, reader.GetString("Country"));
                LoadProperty(_phoneProperty, reader.GetString("Phone"));
            }

            MarkAsChild();
            MarkOld();
        }
    }
}