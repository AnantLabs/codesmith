//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v1.5.0.1357, CSLA Framework: v3.8.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Cart.cs'.
//
//     Template: EditableChild.DataAccess.ParameterizedSQL.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

#endregion

namespace PetShop.Business
{
    public partial class Cart
    {
        protected override void Child_Create()
        {
            bool cancel = false;
            OnChildCreating(ref cancel);
            if (cancel) return;

            ValidationRules.CheckRules();

            OnChildCreated();
        }

        private void Child_Fetch(CartCriteria criteria)
        {
            bool cancel = false;
            OnChildFetching(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("SELECT [CartId], [UniqueID], [ItemId], [Name], [Type], [Price], [CategoryId], [ProductId], [IsShoppingCart], [Quantity] FROM [dbo].[Cart] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                            Map(reader);
                        else
                            throw new Exception(string.Format("The record was not found in 'Cart' using the following criteria: {0}.", criteria));
                    }
                }
            }

            OnChildFetched();
        }

        private void Child_Insert(Profile profile)
        {
            bool cancel = false;
            OnChildInserting(ref cancel);
            if (cancel) return;

            const string commandText = "INSERT INTO [dbo].[Cart] ([UniqueID], [ItemId], [Name], [Type], [Price], [CategoryId], [ProductId], [IsShoppingCart], [Quantity]) VALUES (@p_UniqueID, @p_ItemId, @p_Name, @p_Type, @p_Price, @p_CategoryId, @p_ProductId, @p_IsShoppingCart, @p_Quantity); SELECT [CartId] FROM [dbo].[Cart] WHERE CartId = SCOPE_IDENTITY()";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@p_UniqueID", profile.UniqueID);
					command.Parameters.AddWithValue("@p_ItemId", ItemId);
					command.Parameters.AddWithValue("@p_Name", Name);
					command.Parameters.AddWithValue("@p_Type", Type);
					command.Parameters.AddWithValue("@p_Price", Price);
					command.Parameters.AddWithValue("@p_CategoryId", CategoryId);
					command.Parameters.AddWithValue("@p_ProductId", ProductId);
					command.Parameters.AddWithValue("@p_IsShoppingCart", IsShoppingCart);
					command.Parameters.AddWithValue("@p_Quantity", Quantity);

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                            LoadProperty(_cartIdProperty, reader.GetInt32("CartId"));
                        }
                    }
                }
            }

            OnChildInserted();
        }

        private void Child_Update(Profile profile)
        {
            bool cancel = false;
            OnChildUpdating(ref cancel);
            if (cancel) return;

            const string commandText = "UPDATE [dbo].[Cart]  SET [UniqueID] = @p_UniqueID, [ItemId] = @p_ItemId, [Name] = @p_Name, [Type] = @p_Type, [Price] = @p_Price, [CategoryId] = @p_CategoryId, [ProductId] = @p_ProductId, [IsShoppingCart] = @p_IsShoppingCart, [Quantity] = @p_Quantity WHERE [CartId] = @p_CartId";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@p_CartId", CartId);
					command.Parameters.AddWithValue("@p_UniqueID", profile.UniqueID);
					command.Parameters.AddWithValue("@p_ItemId", ItemId);
					command.Parameters.AddWithValue("@p_Name", Name);
					command.Parameters.AddWithValue("@p_Type", Type);
					command.Parameters.AddWithValue("@p_Price", Price);
					command.Parameters.AddWithValue("@p_CategoryId", CategoryId);
					command.Parameters.AddWithValue("@p_ProductId", ProductId);
					command.Parameters.AddWithValue("@p_IsShoppingCart", IsShoppingCart);
					command.Parameters.AddWithValue("@p_Quantity", Quantity);

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnChildUpdated();
        }

        private void Child_DeleteSelf()
        {
            DataPortal_Delete(new CartCriteria(CartId));
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(CartCriteria criteria)
        {
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("DELETE FROM [dbo].[Cart] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
        }

        private void Map(SafeDataReader reader)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_cartIdProperty, reader.GetInt32("CartId"));
                LoadProperty(_uniqueIDProperty, reader.GetInt32("UniqueID"));
                LoadProperty(_itemIdProperty, reader.GetString("ItemId"));
                LoadProperty(_nameProperty, reader.GetString("Name"));
                LoadProperty(_typeProperty, reader.GetString("Type"));
                LoadProperty(_priceProperty, reader.GetDecimal("Price"));
                LoadProperty(_categoryIdProperty, reader.GetString("CategoryId"));
                LoadProperty(_productIdProperty, reader.GetString("ProductId"));
                LoadProperty(_isShoppingCartProperty, reader.GetBoolean("IsShoppingCart"));
                LoadProperty(_quantityProperty, reader.GetInt32("Quantity"));
            }

            MarkAsChild();
            MarkOld();
        }

        #region Child data access partial methods

        partial void OnChildCreating(ref bool cancel);
        partial void OnChildCreated();
        partial void OnChildFetching(CartCriteria criteria, ref bool cancel);
        partial void OnChildFetched();
        partial void OnChildInserting(ref bool cancel);
        partial void OnChildInserted();
        partial void OnChildUpdating(ref bool cancel);
        partial void OnChildUpdated();
        partial void OnChildSelfDeleting(ref bool cancel);
        partial void OnChildSelfDeleted();
        partial void OnDeleting(CartCriteria criteria, ref bool cancel);
        partial void OnDeleted();

        #endregion
    }
}