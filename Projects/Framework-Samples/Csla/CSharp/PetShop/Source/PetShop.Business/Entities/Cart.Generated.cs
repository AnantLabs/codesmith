//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v1.5.0.0, CSLA Framework: v3.8.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Cart.cs'.
//
//     Template: EditableChild.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Data;
using Csla.Validation;

#endregion

namespace PetShop.Business
{
    [Serializable]
    public partial class Cart : BusinessBase< Cart >
    {
        #region Contructor(s)

        private Cart()
        {
            MarkAsChild();
        }

        internal Cart(System.Int32 cartId)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_cartIdProperty, cartId);
            }

            MarkAsChild();
        }
        
        internal Cart(SafeDataReader reader)
        {
            Map(reader);

            MarkAsChild();
        }
        #endregion

        #region Validation Rules

        protected override void AddBusinessRules()
        {
            if(AddBusinessValidationRules())
                return;

            ValidationRules.AddRule(CommonRules.StringRequired, _itemIdProperty);
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_itemIdProperty, 10));
            ValidationRules.AddRule(CommonRules.StringRequired, _nameProperty);
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_nameProperty, 80));
            ValidationRules.AddRule(CommonRules.StringRequired, _typeProperty);
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_typeProperty, 80));
            ValidationRules.AddRule(CommonRules.StringRequired, _categoryIdProperty);
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_categoryIdProperty, 10));
            ValidationRules.AddRule(CommonRules.StringRequired, _productIdProperty);
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_productIdProperty, 10));
        }

        #endregion

        #region Properties

        private static readonly PropertyInfo< System.Int32 > _cartIdProperty = RegisterProperty< System.Int32 >(p => p.CartId);
		[System.ComponentModel.DataObjectField(true, true)]
        public System.Int32 CartId
        {
            get { return GetProperty(_cartIdProperty); }
            internal set{ SetProperty(_cartIdProperty, value); }
        }

        private static readonly PropertyInfo< System.Int32 > _uniqueIDProperty = RegisterProperty< System.Int32 >(p => p.UniqueID);
        public System.Int32 UniqueID
        {
            get { return GetProperty(_uniqueIDProperty); }
            set{ SetProperty(_uniqueIDProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _itemIdProperty = RegisterProperty< System.String >(p => p.ItemId);
        public System.String ItemId
        {
            get { return GetProperty(_itemIdProperty); }
            set{ SetProperty(_itemIdProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _nameProperty = RegisterProperty< System.String >(p => p.Name);
        public System.String Name
        {
            get { return GetProperty(_nameProperty); }
            set{ SetProperty(_nameProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _typeProperty = RegisterProperty< System.String >(p => p.Type);
        public System.String Type
        {
            get { return GetProperty(_typeProperty); }
            set{ SetProperty(_typeProperty, value); }
        }

        private static readonly PropertyInfo< System.Decimal > _priceProperty = RegisterProperty< System.Decimal >(p => p.Price);
        public System.Decimal Price
        {
            get { return GetProperty(_priceProperty); }
            set{ SetProperty(_priceProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _categoryIdProperty = RegisterProperty< System.String >(p => p.CategoryId);
        public System.String CategoryId
        {
            get { return GetProperty(_categoryIdProperty); }
            set{ SetProperty(_categoryIdProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _productIdProperty = RegisterProperty< System.String >(p => p.ProductId);
        public System.String ProductId
        {
            get { return GetProperty(_productIdProperty); }
            set{ SetProperty(_productIdProperty, value); }
        }

        private static readonly PropertyInfo< System.Boolean > _isShoppingCartProperty = RegisterProperty< System.Boolean >(p => p.IsShoppingCart);
        public System.Boolean IsShoppingCart
        {
            get { return GetProperty(_isShoppingCartProperty); }
            set{ SetProperty(_isShoppingCartProperty, value); }
        }

        private static readonly PropertyInfo< System.Int32 > _quantityProperty = RegisterProperty< System.Int32 >(p => p.Quantity);
        public System.Int32 Quantity
        {
            get { return GetProperty(_quantityProperty); }
            set{ SetProperty(_quantityProperty, value); }
        }

        //AssociatedManyToOne
        private static readonly PropertyInfo< Profile > _profileMemberProperty = RegisterProperty< Profile >(p => p.ProfileMember, Csla.RelationshipTypes.Child);
        public Profile ProfileMember
        {
            get
            {
                if(!FieldManager.FieldExists(_profileMemberProperty))
                {
                    if(IsNew || !PetShop.Business.Profile.Exists(new PetShop.Business.ProfileCriteria {UniqueID = UniqueID}))
                        LoadProperty(_profileMemberProperty, PetShop.Business.Profile.NewProfile());
                    else
                        LoadProperty(_profileMemberProperty, PetShop.Business.Profile.GetByUniqueID(UniqueID));
                }

                return GetProperty(_profileMemberProperty); 
            }
        }


        #endregion

        #region Factory Methods 

        internal static Cart NewCart()
        {
            return DataPortal.CreateChild< Cart >();
        }

        internal static Cart GetByCartId(System.Int32 cartId)
        {
            return DataPortal.FetchChild< Cart >(
                new CartCriteria {CartId = cartId});
        }

        internal static Cart GetByUniqueID(System.Int32 uniqueID)
        {
            return DataPortal.FetchChild< Cart >(
                new CartCriteria {UniqueID = uniqueID});
        }

        internal static Cart GetByIsShoppingCart(System.Boolean isShoppingCart)
        {
            return DataPortal.FetchChild< Cart >(
                new CartCriteria {IsShoppingCart = isShoppingCart});
        }

        #endregion

        #region Exists Command

        public static bool Exists(CartCriteria criteria)
        {
            return ExistsCommand.Execute(criteria);
        }

        #endregion

        #region Overridden properties

        /// <summary>
        /// Returns true if the business object or any of its children properties are dirty.
        /// </summary>
        public override bool IsDirty
        {
            get
            {
                if (base.IsDirty) return true;
                if (ProfileMember.IsDirty) return true;

                return false;
            }
        }

        #endregion

    }
}