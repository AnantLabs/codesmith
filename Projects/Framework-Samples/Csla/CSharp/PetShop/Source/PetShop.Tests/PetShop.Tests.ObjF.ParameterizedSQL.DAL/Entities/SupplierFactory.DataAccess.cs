//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v1.5.0.0, CSLA Framework: v3.8.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Supplier.cs'.
//
//     Template: ObjectFactory.DataAccess.ParameterizedSQL.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Server;
using Csla.Data;

using PetShop.Tests.ObjF.ParameterizedSQL;

#endregion

namespace PetShop.Tests.ObjF.ParameterizedSQL.DAL
{
    public partial class SupplierFactory : ObjectFactory
    {
        #region Create

        /// <summary>
        /// Creates new Supplier with default values.
        /// </summary>
        /// <returns>new Supplier.</returns>
        [RunLocal]
        public Supplier Create()
        {
            var item = (Supplier)Activator.CreateInstance(typeof(Supplier), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            using (BypassPropertyChecks(item))
            {
                // Default values.
            }

            CheckRules(item);
            MarkNew(item);
            OnCreated();

            return item;
        }

        /// <summary>
        /// Creates new Supplier with default values.
        /// </summary>
        /// <returns>new Supplier.</returns>
        [RunLocal]
        private Supplier Create(SupplierCriteria criteria)
        {
            var item = (Supplier)Activator.CreateInstance(typeof(Supplier), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            var resource = Fetch(criteria);
            using (BypassPropertyChecks(item))
            {
                item.Name = resource.Name;
                item.Status = resource.Status;
                item.Addr1 = resource.Addr1;
                item.Addr2 = resource.Addr2;
                item.City = resource.City;
                item.State = resource.State;
                item.Zip = resource.Zip;
                item.Phone = resource.Phone;
            }

            CheckRules(item);
            MarkNew(resource);

            OnCreated();

            return item;
        }

        #endregion

        #region Fetch

        /// <summary>
        /// Fetch Supplier.
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns></returns>
        public Supplier Fetch(SupplierCriteria criteria)
        {
            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return null;

            Supplier item;
            string commandText = string.Format("SELECT [SuppId], [Name], [Status], [Addr1], [Addr2], [City], [State], [Zip], [Phone] FROM [dbo].[Supplier] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if (reader.Read())
                            item = Map(reader);
                        else
                            throw new Exception(String.Format("The record was not found in 'Supplier' using the following criteria: {0}.", criteria));
                    }
                }
            }

            MarkOld(item);
            OnFetched();
            return item;
        }

        #endregion

        #region Insert

        private void DoInsert(Supplier item, bool stopProccessingChildren)
        {
            // Don't update if the item isn't dirty.
            if (!item.IsDirty) return;

            bool cancel = false;
            OnInserting(ref cancel);
            if (cancel) return;

            const string commandText = "INSERT INTO [dbo].[Supplier] ([SuppId], [Name], [Status], [Addr1], [Addr2], [City], [State], [Zip], [Phone]) VALUES (@p_SuppId, @p_Name, @p_Status, @p_Addr1, @p_Addr2, @p_City, @p_State, @p_Zip, @p_Phone)";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@p_SuppId", item.SuppId);
					command.Parameters.AddWithValue("@p_Name", item.Name);
					command.Parameters.AddWithValue("@p_Status", item.Status);
					command.Parameters.AddWithValue("@p_Addr1", item.Addr1);
					command.Parameters.AddWithValue("@p_Addr2", item.Addr2);
					command.Parameters.AddWithValue("@p_City", item.City);
					command.Parameters.AddWithValue("@p_State", item.State);
					command.Parameters.AddWithValue("@p_Zip", item.Zip);
					command.Parameters.AddWithValue("@p_Phone", item.Phone);

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                        }
                    }
                }
            }

            MarkOld(item);
            CheckRules(item);
            
            if(!stopProccessingChildren)
            {
            // Update Child Items.
                Update_Item_Items_Supplier(ref item);
            }

            OnInserted();
        }

        #endregion

        #region Update

        [Transactional(TransactionalTypes.TransactionScope)]
        public Supplier Update(Supplier item)
        {
            return Update(item, false);
        }

        public Supplier Update(Supplier item, bool stopProccessingChildren)
        {
            if(item.IsDeleted)
            {
                DoDelete(item);
                MarkNew(item);
            }
            else if(item.IsNew)
            {
                DoInsert(item, stopProccessingChildren);
            }
            else
            {
                DoUpdate(item, stopProccessingChildren);
            }

            return item;
        }

        private void DoUpdate(Supplier item, bool stopProccessingChildren)
        {
            bool cancel = false;
            OnUpdating(ref cancel);
            if (cancel) return;

            // Don't update if the item isn't dirty.
            if (item.IsDirty)
            {
                const string commandText = "UPDATE [dbo].[Supplier]  SET [SuppId] = @p_SuppId, [Name] = @p_Name, [Status] = @p_Status, [Addr1] = @p_Addr1, [Addr2] = @p_Addr2, [City] = @p_City, [State] = @p_State, [Zip] = @p_Zip, [Phone] = @p_Phone WHERE [SuppId] = @p_SuppId";
                using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
                {
                    connection.Open();
                    using(SqlCommand command = new SqlCommand(commandText, connection))
                    {
                        command.Parameters.AddWithValue("@p_SuppId", item.SuppId);
					command.Parameters.AddWithValue("@p_Name", item.Name);
					command.Parameters.AddWithValue("@p_Status", item.Status);
					command.Parameters.AddWithValue("@p_Addr1", item.Addr1);
					command.Parameters.AddWithValue("@p_Addr2", item.Addr2);
					command.Parameters.AddWithValue("@p_City", item.City);
					command.Parameters.AddWithValue("@p_State", item.State);
					command.Parameters.AddWithValue("@p_Zip", item.Zip);
					command.Parameters.AddWithValue("@p_Phone", item.Phone);

                        //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        int result = command.ExecuteNonQuery();
                        if (result == 0)
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                    }
                }
            }

            MarkOld(item);
            CheckRules(item);

            if(!stopProccessingChildren)
            {
            // Update Child Items.
                Update_Item_Items_Supplier(ref item);
            }

            OnUpdated();
        }
        #endregion

        #region Delete

        [Transactional(TransactionalTypes.TransactionScope)]
        public void Delete(SupplierCriteria criteria)
        {
            // Note: this call to delete is for immediate deletion and doesn't keep track of any entity state.
            DoDelete(criteria);
        }

        protected void DoDelete(Supplier item)
        {
            // If we're not dirty then don't update the database.
            if (!item.IsDirty) return;

            // If we're new then don't call delete.
            if (item.IsNew) return;

            DoDelete(new SupplierCriteria{SuppId = item.SuppId});

            MarkNew(item);
        }

        /// <summary>
        /// This call to delete is for immediate deletion and doesn't keep track of any entity state.
        /// </summary>
        /// <param name="criteria">The Criteria.</param>
        private void DoDelete(SupplierCriteria criteria)
        {
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("DELETE FROM [dbo].[Supplier] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
        }

        #endregion

        #region Helper Methods

        public Supplier Map(SafeDataReader reader)
        {
            var item = (Supplier)Activator.CreateInstance(typeof(Supplier), true);
            using (BypassPropertyChecks(item))
            {
                item.SuppId = reader.GetInt32("SuppId");
                item.Name = reader.GetString("Name");
                item.Status = reader.GetString("Status");
                item.Addr1 = reader.GetString("Addr1");
                item.Addr2 = reader.GetString("Addr2");
                item.City = reader.GetString("City");
                item.State = reader.GetString("State");
                item.Zip = reader.GetString("Zip");
                item.Phone = reader.GetString("Phone");
            }
            
            return item;
        }

        //AssociatedOneToMany
        private static void Update_Item_Items_Supplier(ref Supplier item)
        {
            foreach(Item itemToUpdate in item.Items)
            {
				itemToUpdate.Supplier = item.SuppId;

                new ItemFactory().Update(itemToUpdate, true);
            }
        }

        #endregion

        #region Data access partial methods

        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(SupplierCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnInserting(ref bool cancel);
        partial void OnInserted();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
        partial void OnSelfDeleting(ref bool cancel);
        partial void OnSelfDeleted();
        partial void OnDeleting(SupplierCriteria criteria, ref bool cancel);
        partial void OnDeleted();

        #endregion
    }
}