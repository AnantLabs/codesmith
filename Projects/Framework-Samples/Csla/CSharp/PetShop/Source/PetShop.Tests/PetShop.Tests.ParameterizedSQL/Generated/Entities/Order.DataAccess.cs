//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v1.5.0.1357, CSLA Framework: v3.8.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Order.cs'.
//
//     Template: SwitchableObject.DataAccess.ParameterizedSQL.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

#endregion

namespace PetShop.Tests.ParameterizedSQL
{
    public partial class Order
    {
        #region Root Data Access

        [RunLocal]
        protected override void DataPortal_Create()
        {
            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return;

            ValidationRules.CheckRules();

            OnCreated();
        }

        private void DataPortal_Fetch(OrderCriteria criteria)
        {
            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("SELECT [OrderId], [UserId], [OrderDate], [ShipAddr1], [ShipAddr2], [ShipCity], [ShipState], [ShipZip], [ShipCountry], [BillAddr1], [BillAddr2], [BillCity], [BillState], [BillZip], [BillCountry], [Courier], [TotalPrice], [BillToFirstName], [BillToLastName], [ShipToFirstName], [ShipToLastName], [AuthorizationNumber], [Locale] FROM [dbo].[Orders] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if (reader.Read())
                            Map(reader);
                        else
                            throw new Exception(String.Format("The record was not found in 'Orders' using the following criteria: {0}.", criteria));
                    }
                }
            }

            OnFetched();
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Insert()
        {
            bool cancel = false;
            OnInserting(ref cancel);
            if (cancel) return;

            const string commandText = "INSERT INTO [dbo].[Orders] ([UserId], [OrderDate], [ShipAddr1], [ShipAddr2], [ShipCity], [ShipState], [ShipZip], [ShipCountry], [BillAddr1], [BillAddr2], [BillCity], [BillState], [BillZip], [BillCountry], [Courier], [TotalPrice], [BillToFirstName], [BillToLastName], [ShipToFirstName], [ShipToLastName], [AuthorizationNumber], [Locale]) VALUES (@p_UserId, @p_OrderDate, @p_ShipAddr1, @p_ShipAddr2, @p_ShipCity, @p_ShipState, @p_ShipZip, @p_ShipCountry, @p_BillAddr1, @p_BillAddr2, @p_BillCity, @p_BillState, @p_BillZip, @p_BillCountry, @p_Courier, @p_TotalPrice, @p_BillToFirstName, @p_BillToLastName, @p_ShipToFirstName, @p_ShipToLastName, @p_AuthorizationNumber, @p_Locale); SELECT [OrderId] FROM [dbo].[Orders] WHERE OrderId = SCOPE_IDENTITY()";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@p_UserId", UserId);
					command.Parameters.AddWithValue("@p_OrderDate", OrderDate);
					command.Parameters.AddWithValue("@p_ShipAddr1", ShipAddr1);
					command.Parameters.AddWithValue("@p_ShipAddr2", ShipAddr2);
					command.Parameters.AddWithValue("@p_ShipCity", ShipCity);
					command.Parameters.AddWithValue("@p_ShipState", ShipState);
					command.Parameters.AddWithValue("@p_ShipZip", ShipZip);
					command.Parameters.AddWithValue("@p_ShipCountry", ShipCountry);
					command.Parameters.AddWithValue("@p_BillAddr1", BillAddr1);
					command.Parameters.AddWithValue("@p_BillAddr2", BillAddr2);
					command.Parameters.AddWithValue("@p_BillCity", BillCity);
					command.Parameters.AddWithValue("@p_BillState", BillState);
					command.Parameters.AddWithValue("@p_BillZip", BillZip);
					command.Parameters.AddWithValue("@p_BillCountry", BillCountry);
					command.Parameters.AddWithValue("@p_Courier", Courier);
					command.Parameters.AddWithValue("@p_TotalPrice", TotalPrice);
					command.Parameters.AddWithValue("@p_BillToFirstName", BillToFirstName);
					command.Parameters.AddWithValue("@p_BillToLastName", BillToLastName);
					command.Parameters.AddWithValue("@p_ShipToFirstName", ShipToFirstName);
					command.Parameters.AddWithValue("@p_ShipToLastName", ShipToLastName);
					command.Parameters.AddWithValue("@p_AuthorizationNumber", AuthorizationNumber);
					command.Parameters.AddWithValue("@p_Locale", Locale);

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                            using (BypassPropertyChecks)
                            {
                                LoadProperty(_orderIdProperty, reader.GetInt32("OrderId"));
                            }
                        }
                    }
                }
            }

            OnInserted();

            FieldManager.UpdateChildren(this);
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Update()
        {
            bool cancel = false;
            OnUpdating(ref cancel);
            if (cancel) return;

            const string commandText = "UPDATE [dbo].[Orders]  SET [UserId] = @p_UserId, [OrderDate] = @p_OrderDate, [ShipAddr1] = @p_ShipAddr1, [ShipAddr2] = @p_ShipAddr2, [ShipCity] = @p_ShipCity, [ShipState] = @p_ShipState, [ShipZip] = @p_ShipZip, [ShipCountry] = @p_ShipCountry, [BillAddr1] = @p_BillAddr1, [BillAddr2] = @p_BillAddr2, [BillCity] = @p_BillCity, [BillState] = @p_BillState, [BillZip] = @p_BillZip, [BillCountry] = @p_BillCountry, [Courier] = @p_Courier, [TotalPrice] = @p_TotalPrice, [BillToFirstName] = @p_BillToFirstName, [BillToLastName] = @p_BillToLastName, [ShipToFirstName] = @p_ShipToFirstName, [ShipToLastName] = @p_ShipToLastName, [AuthorizationNumber] = @p_AuthorizationNumber, [Locale] = @p_Locale WHERE [OrderId] = @p_OrderId";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@p_OrderId", OrderId);
					command.Parameters.AddWithValue("@p_UserId", UserId);
					command.Parameters.AddWithValue("@p_OrderDate", OrderDate);
					command.Parameters.AddWithValue("@p_ShipAddr1", ShipAddr1);
					command.Parameters.AddWithValue("@p_ShipAddr2", ShipAddr2);
					command.Parameters.AddWithValue("@p_ShipCity", ShipCity);
					command.Parameters.AddWithValue("@p_ShipState", ShipState);
					command.Parameters.AddWithValue("@p_ShipZip", ShipZip);
					command.Parameters.AddWithValue("@p_ShipCountry", ShipCountry);
					command.Parameters.AddWithValue("@p_BillAddr1", BillAddr1);
					command.Parameters.AddWithValue("@p_BillAddr2", BillAddr2);
					command.Parameters.AddWithValue("@p_BillCity", BillCity);
					command.Parameters.AddWithValue("@p_BillState", BillState);
					command.Parameters.AddWithValue("@p_BillZip", BillZip);
					command.Parameters.AddWithValue("@p_BillCountry", BillCountry);
					command.Parameters.AddWithValue("@p_Courier", Courier);
					command.Parameters.AddWithValue("@p_TotalPrice", TotalPrice);
					command.Parameters.AddWithValue("@p_BillToFirstName", BillToFirstName);
					command.Parameters.AddWithValue("@p_BillToLastName", BillToLastName);
					command.Parameters.AddWithValue("@p_ShipToFirstName", ShipToFirstName);
					command.Parameters.AddWithValue("@p_ShipToLastName", ShipToLastName);
					command.Parameters.AddWithValue("@p_AuthorizationNumber", AuthorizationNumber);
					command.Parameters.AddWithValue("@p_Locale", Locale);

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnUpdated();

            FieldManager.UpdateChildren(this);
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(new OrderCriteria(OrderId));
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(OrderCriteria criteria)
        {
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("DELETE FROM [dbo].[Orders] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
        }

        #endregion

        #region Child Data Access

        protected override void Child_Create()
        {
            bool cancel = false;
            OnChildCreating(ref cancel);
            if (cancel) return;

            ValidationRules.CheckRules();

            OnChildCreated();
        }

        private void Child_Fetch(OrderCriteria criteria)
        {
            bool cancel = false;
            OnChildFetching(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("SELECT [OrderId], [UserId], [OrderDate], [ShipAddr1], [ShipAddr2], [ShipCity], [ShipState], [ShipZip], [ShipCountry], [BillAddr1], [BillAddr2], [BillCity], [BillState], [BillZip], [BillCountry], [Courier], [TotalPrice], [BillToFirstName], [BillToLastName], [ShipToFirstName], [ShipToLastName], [AuthorizationNumber], [Locale] FROM [dbo].[Orders] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                            Map(reader);
                        else
                            throw new Exception(string.Format("The record was not found in 'Orders' using the following criteria: {0}.", criteria));
                    }
                }
            }

            OnChildFetched();

            MarkAsChild();
        }

        private void Child_Insert()
        {
            bool cancel = false;
            OnChildInserting(ref cancel);
            if (cancel) return;

            const string commandText = "INSERT INTO [dbo].[Orders] ([UserId], [OrderDate], [ShipAddr1], [ShipAddr2], [ShipCity], [ShipState], [ShipZip], [ShipCountry], [BillAddr1], [BillAddr2], [BillCity], [BillState], [BillZip], [BillCountry], [Courier], [TotalPrice], [BillToFirstName], [BillToLastName], [ShipToFirstName], [ShipToLastName], [AuthorizationNumber], [Locale]) VALUES (@p_UserId, @p_OrderDate, @p_ShipAddr1, @p_ShipAddr2, @p_ShipCity, @p_ShipState, @p_ShipZip, @p_ShipCountry, @p_BillAddr1, @p_BillAddr2, @p_BillCity, @p_BillState, @p_BillZip, @p_BillCountry, @p_Courier, @p_TotalPrice, @p_BillToFirstName, @p_BillToLastName, @p_ShipToFirstName, @p_ShipToLastName, @p_AuthorizationNumber, @p_Locale); SELECT [OrderId] FROM [dbo].[Orders] WHERE OrderId = SCOPE_IDENTITY()";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@p_UserId", UserId);
					command.Parameters.AddWithValue("@p_OrderDate", OrderDate);
					command.Parameters.AddWithValue("@p_ShipAddr1", ShipAddr1);
					command.Parameters.AddWithValue("@p_ShipAddr2", ShipAddr2);
					command.Parameters.AddWithValue("@p_ShipCity", ShipCity);
					command.Parameters.AddWithValue("@p_ShipState", ShipState);
					command.Parameters.AddWithValue("@p_ShipZip", ShipZip);
					command.Parameters.AddWithValue("@p_ShipCountry", ShipCountry);
					command.Parameters.AddWithValue("@p_BillAddr1", BillAddr1);
					command.Parameters.AddWithValue("@p_BillAddr2", BillAddr2);
					command.Parameters.AddWithValue("@p_BillCity", BillCity);
					command.Parameters.AddWithValue("@p_BillState", BillState);
					command.Parameters.AddWithValue("@p_BillZip", BillZip);
					command.Parameters.AddWithValue("@p_BillCountry", BillCountry);
					command.Parameters.AddWithValue("@p_Courier", Courier);
					command.Parameters.AddWithValue("@p_TotalPrice", TotalPrice);
					command.Parameters.AddWithValue("@p_BillToFirstName", BillToFirstName);
					command.Parameters.AddWithValue("@p_BillToLastName", BillToLastName);
					command.Parameters.AddWithValue("@p_ShipToFirstName", ShipToFirstName);
					command.Parameters.AddWithValue("@p_ShipToLastName", ShipToLastName);
					command.Parameters.AddWithValue("@p_AuthorizationNumber", AuthorizationNumber);
					command.Parameters.AddWithValue("@p_Locale", Locale);

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                            LoadProperty(_orderIdProperty, reader.GetInt32("OrderId"));
                        }
                    }
                }
            }

            OnChildInserted();
        }

        private void Child_Update()
        {
            bool cancel = false;
            OnChildUpdating(ref cancel);
            if (cancel) return;

            const string commandText = "UPDATE [dbo].[Orders]  SET [UserId] = @p_UserId, [OrderDate] = @p_OrderDate, [ShipAddr1] = @p_ShipAddr1, [ShipAddr2] = @p_ShipAddr2, [ShipCity] = @p_ShipCity, [ShipState] = @p_ShipState, [ShipZip] = @p_ShipZip, [ShipCountry] = @p_ShipCountry, [BillAddr1] = @p_BillAddr1, [BillAddr2] = @p_BillAddr2, [BillCity] = @p_BillCity, [BillState] = @p_BillState, [BillZip] = @p_BillZip, [BillCountry] = @p_BillCountry, [Courier] = @p_Courier, [TotalPrice] = @p_TotalPrice, [BillToFirstName] = @p_BillToFirstName, [BillToLastName] = @p_BillToLastName, [ShipToFirstName] = @p_ShipToFirstName, [ShipToLastName] = @p_ShipToLastName, [AuthorizationNumber] = @p_AuthorizationNumber, [Locale] = @p_Locale WHERE [OrderId] = @p_OrderId";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@p_OrderId", OrderId);
					command.Parameters.AddWithValue("@p_UserId", UserId);
					command.Parameters.AddWithValue("@p_OrderDate", OrderDate);
					command.Parameters.AddWithValue("@p_ShipAddr1", ShipAddr1);
					command.Parameters.AddWithValue("@p_ShipAddr2", ShipAddr2);
					command.Parameters.AddWithValue("@p_ShipCity", ShipCity);
					command.Parameters.AddWithValue("@p_ShipState", ShipState);
					command.Parameters.AddWithValue("@p_ShipZip", ShipZip);
					command.Parameters.AddWithValue("@p_ShipCountry", ShipCountry);
					command.Parameters.AddWithValue("@p_BillAddr1", BillAddr1);
					command.Parameters.AddWithValue("@p_BillAddr2", BillAddr2);
					command.Parameters.AddWithValue("@p_BillCity", BillCity);
					command.Parameters.AddWithValue("@p_BillState", BillState);
					command.Parameters.AddWithValue("@p_BillZip", BillZip);
					command.Parameters.AddWithValue("@p_BillCountry", BillCountry);
					command.Parameters.AddWithValue("@p_Courier", Courier);
					command.Parameters.AddWithValue("@p_TotalPrice", TotalPrice);
					command.Parameters.AddWithValue("@p_BillToFirstName", BillToFirstName);
					command.Parameters.AddWithValue("@p_BillToLastName", BillToLastName);
					command.Parameters.AddWithValue("@p_ShipToFirstName", ShipToFirstName);
					command.Parameters.AddWithValue("@p_ShipToLastName", ShipToLastName);
					command.Parameters.AddWithValue("@p_AuthorizationNumber", AuthorizationNumber);
					command.Parameters.AddWithValue("@p_Locale", Locale);

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnChildUpdated();
        }

        private void Child_DeleteSelf()
        {
            DataPortal_Delete(new OrderCriteria(OrderId));
        }

        #endregion

        private void Map(SafeDataReader reader)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_orderIdProperty, reader.GetInt32("OrderId"));
                LoadProperty(_userIdProperty, reader.GetString("UserId"));
                LoadProperty(_orderDateProperty, reader.GetDateTime("OrderDate"));
                LoadProperty(_shipAddr1Property, reader.GetString("ShipAddr1"));
                LoadProperty(_shipAddr2Property, reader.GetString("ShipAddr2"));
                LoadProperty(_shipCityProperty, reader.GetString("ShipCity"));
                LoadProperty(_shipStateProperty, reader.GetString("ShipState"));
                LoadProperty(_shipZipProperty, reader.GetString("ShipZip"));
                LoadProperty(_shipCountryProperty, reader.GetString("ShipCountry"));
                LoadProperty(_billAddr1Property, reader.GetString("BillAddr1"));
                LoadProperty(_billAddr2Property, reader.GetString("BillAddr2"));
                LoadProperty(_billCityProperty, reader.GetString("BillCity"));
                LoadProperty(_billStateProperty, reader.GetString("BillState"));
                LoadProperty(_billZipProperty, reader.GetString("BillZip"));
                LoadProperty(_billCountryProperty, reader.GetString("BillCountry"));
                LoadProperty(_courierProperty, reader.GetString("Courier"));
                LoadProperty(_totalPriceProperty, reader.GetDecimal("TotalPrice"));
                LoadProperty(_billToFirstNameProperty, reader.GetString("BillToFirstName"));
                LoadProperty(_billToLastNameProperty, reader.GetString("BillToLastName"));
                LoadProperty(_shipToFirstNameProperty, reader.GetString("ShipToFirstName"));
                LoadProperty(_shipToLastNameProperty, reader.GetString("ShipToLastName"));
                LoadProperty(_authorizationNumberProperty, reader.GetInt32("AuthorizationNumber"));
                LoadProperty(_localeProperty, reader.GetString("Locale"));
            }

            MarkOld();
        }

        #region Data access partial methods

        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(OrderCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnInserting(ref bool cancel);
        partial void OnInserted();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
        partial void OnSelfDeleting(ref bool cancel);
        partial void OnSelfDeleted();
        partial void OnDeleting(OrderCriteria criteria, ref bool cancel);
        partial void OnDeleted();

        #endregion

        #region Child data access partial methods

        partial void OnChildCreating(ref bool cancel);
        partial void OnChildCreated();
        partial void OnChildFetching(OrderCriteria criteria, ref bool cancel);
        partial void OnChildFetched();
        partial void OnChildInserting(ref bool cancel);
        partial void OnChildInserted();
        partial void OnChildUpdating(ref bool cancel);
        partial void OnChildUpdated();
        partial void OnChildSelfDeleting(ref bool cancel);
        partial void OnChildSelfDeleted();

        #endregion
    }
}