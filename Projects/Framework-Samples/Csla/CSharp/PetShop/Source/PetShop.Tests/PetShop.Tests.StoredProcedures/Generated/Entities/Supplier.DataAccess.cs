//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v1.5.0.1413, CSLA Framework: v3.8.2.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Supplier.cs'.
//
//     Template: EditableRoot.DataAccess.StoredProcedures.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

#endregion

namespace PetShop.Tests.StoredProcedures
{
    public partial class Supplier
    {
        [RunLocal]
        protected override void DataPortal_Create()
        {
            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return;

            ValidationRules.CheckRules();

            OnCreated();
        }

        protected void DataPortal_Fetch(SupplierCriteria criteria)
        {
            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return;

            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("[dbo].[CSLA_Supplier_Select]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    command.Parameters.AddWithValue("@p_NameHasValue", criteria.NameHasValue);
					command.Parameters.AddWithValue("@p_Addr1HasValue", criteria.Addr1HasValue);
					command.Parameters.AddWithValue("@p_Addr2HasValue", criteria.Addr2HasValue);
					command.Parameters.AddWithValue("@p_CityHasValue", criteria.CityHasValue);
					command.Parameters.AddWithValue("@p_StateHasValue", criteria.StateHasValue);
					command.Parameters.AddWithValue("@p_ZipHasValue", criteria.ZipHasValue);
					command.Parameters.AddWithValue("@p_PhoneHasValue", criteria.PhoneHasValue);
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                            Map(reader);
                        else
                            throw new Exception(string.Format("The record was not found in 'Supplier' using the following criteria: {0}.", criteria));
                    }
                }
            }

            OnFetched();
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Insert()
        {
            bool cancel = false;
            OnInserting(ref cancel);
            if (cancel) return;

            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand("[dbo].[CSLA_Supplier_Insert]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@p_SuppId", this.SuppId);
					command.Parameters.AddWithValue("@p_Name", this.Name);
					command.Parameters.AddWithValue("@p_Status", this.Status);
					command.Parameters.AddWithValue("@p_Addr1", this.Addr1);
					command.Parameters.AddWithValue("@p_Addr2", this.Addr2);
					command.Parameters.AddWithValue("@p_City", this.City);
					command.Parameters.AddWithValue("@p_State", this.State);
					command.Parameters.AddWithValue("@p_Zip", this.Zip);
					command.Parameters.AddWithValue("@p_Phone", this.Phone);
                    command.ExecuteNonQuery();

                    using (BypassPropertyChecks)
                    {
                        LoadProperty(_originalSuppIdProperty, this.SuppId);
                    }
                }

                FieldManager.UpdateChildren(this, connection);
            }

            OnInserted();
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Update()
        {
            bool cancel = false;
            OnUpdating(ref cancel);
            if (cancel) return;

            if(OriginalSuppId != SuppId)
            {
                // Insert new child.
                Supplier item = new Supplier {SuppId = SuppId, Name = Name, Status = Status, Addr1 = Addr1, Addr2 = Addr2, City = City, State = State, Zip = Zip, Phone = Phone};
                item = item.Save();

                // Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
                foreach(Item itemToUpdate in Items)
                {
				itemToUpdate.Supplier = SuppId;
                }

                // Create a new connection.
                using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
                {
                    connection.Open();
                    FieldManager.UpdateChildren(this, connection);
                }

                // Delete the old.
                DataPortal_Delete(new SupplierCriteria {SuppId = OriginalSuppId});

                // Mark the original as the new one.
                OriginalSuppId = SuppId;
                OnUpdated();

                return;
            }

            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand("[dbo].[CSLA_Supplier_Update]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@p_OriginalSuppId", this.OriginalSuppId);
					command.Parameters.AddWithValue("@p_SuppId", this.SuppId);
					command.Parameters.AddWithValue("@p_Name", this.Name);
					command.Parameters.AddWithValue("@p_Status", this.Status);
					command.Parameters.AddWithValue("@p_Addr1", this.Addr1);
					command.Parameters.AddWithValue("@p_Addr2", this.Addr2);
					command.Parameters.AddWithValue("@p_City", this.City);
					command.Parameters.AddWithValue("@p_State", this.State);
					command.Parameters.AddWithValue("@p_Zip", this.Zip);
					command.Parameters.AddWithValue("@p_Phone", this.Phone);
                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

                    LoadProperty(_originalSuppIdProperty, this.SuppId);
                }

                FieldManager.UpdateChildren(this, connection);
            }

            OnUpdated();
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_DeleteSelf()
        {
            bool cancel = false;
            OnSelfDeleting(ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new SupplierCriteria (SuppId));
        
            OnSelfDeleted();
        }
        
        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(SupplierCriteria criteria)
        {
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("[dbo].[CSLA_Supplier_Delete]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
        }

        private void Map(SafeDataReader reader)
        {
            bool cancel = false;
            OnMapping(ref cancel);
            if (cancel) return;

            using(BypassPropertyChecks)
            {
                LoadProperty(_suppIdProperty, reader.GetInt32("SuppId"));
                LoadProperty(_originalSuppIdProperty, reader.GetInt32("SuppId"));
                LoadProperty(_nameProperty, reader.GetString("Name"));
                LoadProperty(_statusProperty, reader.GetString("Status"));
                LoadProperty(_addr1Property, reader.GetString("Addr1"));
                LoadProperty(_addr2Property, reader.GetString("Addr2"));
                LoadProperty(_cityProperty, reader.GetString("City"));
                LoadProperty(_stateProperty, reader.GetString("State"));
                LoadProperty(_zipProperty, reader.GetString("Zip"));
                LoadProperty(_phoneProperty, reader.GetString("Phone"));
            }

            OnMapped();

            MarkOld();
        }

        #region Data access partial methods

        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(SupplierCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnMapping(ref bool cancel);
        partial void OnMapped();
        partial void OnInserting(ref bool cancel);
        partial void OnInserted();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
        partial void OnSelfDeleting(ref bool cancel);
        partial void OnSelfDeleted();
        partial void OnDeleting(SupplierCriteria criteria, ref bool cancel);
        partial void OnDeleted();

        #endregion
    }
}