'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.8.X CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Account.vb.
'
'     Template: EditableChild.DataAccess.ParameterizedSQL.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Data
Imports System.Data.SqlClient

Imports Csla
Imports Csla.Data

Public Partial Class Account
    <RunLocal()> _
    Protected Overrides Sub Child_Create()
        ' TODO: load default values
        ' omit this override if you have no defaults to set
        'MyBase.Child_Create()
    End Sub
    
    Private Sub Child_Fetch(ByVal criteria As AccountCriteria)
        Dim commandText As String = String.Format("SELECT [AccountId], [UniqueID], [Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone] FROM [dbo].[Account] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag))
        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand(commandText, connection)
                command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    If reader.Read() Then
                        Map(reader)
                    Else
                        Throw New Exception(String.Format("The record was not found in 'Account' using the following criteria: {0}.", criteria))
                    End If
                End Using
            End Using
        End Using
    End Sub
    
    Private Sub Child_Insert(ByVal profile As Profile)
        Const commandText As String = "INSERT INTO [dbo].[Account] ([UniqueID], [Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone]) VALUES (@p_UniqueID, @p_Email, @p_FirstName, @p_LastName, @p_Address1, @p_Address2, @p_City, @p_State, @p_Zip, @p_Country, @p_Phone); SELECT [AccountId] FROM [dbo].[Account] WHERE AccountId = SCOPE_IDENTITY()"
        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand(commandText, connection)
                command.Parameters.AddWithValue("@p_UniqueID", profile.UniqueID)
				command.Parameters.AddWithValue("@p_Email", Email)
				command.Parameters.AddWithValue("@p_FirstName", FirstName)
				command.Parameters.AddWithValue("@p_LastName", LastName)
				command.Parameters.AddWithValue("@p_Address1", Address1)
				command.Parameters.AddWithValue("@p_Address2", Address2)
				command.Parameters.AddWithValue("@p_City", City)
				command.Parameters.AddWithValue("@p_State", State)
				command.Parameters.AddWithValue("@p_Zip", Zip)
				command.Parameters.AddWithValue("@p_Country", Country)
				command.Parameters.AddWithValue("@p_Phone", Phone)

                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    If reader.Read() Then
                        LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"))
                    End If
                End Using
            End Using
        End Using
    End Sub

    Private Sub Child_Update(ByVal profile As Profile)
        Const commandText As String = "UPDATE [dbo].[Account]  SET [UniqueID] = @p_UniqueID, [Email] = @p_Email, [FirstName] = @p_FirstName, [LastName] = @p_LastName, [Address1] = @p_Address1, [Address2] = @p_Address2, [City] = @p_City, [State] = @p_State, [Zip] = @p_Zip, [Country] = @p_Country, [Phone] = @p_Phone WHERE [AccountId] = @p_AccountId"
        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand(commandText, connection)
				command.Parameters.AddWithValue("@p_AccountId", AccountId)
				command.Parameters.AddWithValue("@p_UniqueID", profile.UniqueID)
				command.Parameters.AddWithValue("@p_Email", Email)
				command.Parameters.AddWithValue("@p_FirstName", FirstName)
				command.Parameters.AddWithValue("@p_LastName", LastName)
				command.Parameters.AddWithValue("@p_Address1", Address1)
				command.Parameters.AddWithValue("@p_Address2", Address2)
				command.Parameters.AddWithValue("@p_City", City)
				command.Parameters.AddWithValue("@p_State", State)
				command.Parameters.AddWithValue("@p_Zip", Zip)
				command.Parameters.AddWithValue("@p_Country", Country)
				command.Parameters.AddWithValue("@p_Phone", Phone)

                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    If reader.RecordsAffected = 0 Then
                        Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
                End Using
            End Using
        End Using
    End Sub
    
    Private Sub Child_DeleteSelf()
        DataPortal_Delete(New AccountCriteria(AccountId))
    End Sub
    
    <Transactional(TransactionalTypes.TransactionScope)> _
    Protected Shadows Sub DataPortal_Delete(ByVal criteria As AccountCriteria)
        Dim commandText As String = String.Format("DELETE FROM [dbo].[Account] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag))
        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand(commandText, connection)
                command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))

				'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
				Dim result As Integer = command.ExecuteNonQuery()
				If (result = 0) Then
					throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
				End If
            End Using
        End Using
    End Sub
    
    Private Sub Map(ByVal reader As SafeDataReader)
        Using(BypassPropertyChecks)
            LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"))
            LoadProperty(_uniqueIDProperty, reader.GetInt32("UniqueID"))
            LoadProperty(_emailProperty, reader.GetString("Email"))
            LoadProperty(_firstNameProperty, reader.GetString("FirstName"))
            LoadProperty(_lastNameProperty, reader.GetString("LastName"))
            LoadProperty(_address1Property, reader.GetString("Address1"))
            LoadProperty(_address2Property, reader.GetString("Address2"))
            LoadProperty(_cityProperty, reader.GetString("City"))
            LoadProperty(_stateProperty, reader.GetString("State"))
            LoadProperty(_zipProperty, reader.GetString("Zip"))
            LoadProperty(_countryProperty, reader.GetString("Country"))
            LoadProperty(_phoneProperty, reader.GetString("Phone"))
        End Using

        MarkAsChild()
        MarkOld()
    End Sub
End Class