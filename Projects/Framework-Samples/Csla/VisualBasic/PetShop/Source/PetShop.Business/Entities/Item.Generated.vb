'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.8.X CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Item.vb.
'
'     Template: SwitchableObject.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Validation

<Serializable()> _
Public Partial Class Item 
    Inherits BusinessBase(Of Item)
    
    #Region "Contructor(s)"

    Private Sub New()
        ' require use of factory method 
    End Sub

    Friend Sub New(Byval reader As SafeDataReader)
        Map(reader)
    End Sub

    #End Region
    
    #Region "Validation Rules"
    
    Protected Overrides Sub AddBusinessRules()
    
        If AddBusinessValidationRules() Then Exit Sub
       
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_statusProperty, 2))
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_nameProperty, 80))
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_imageProperty, 80))
        ValidationRules.AddRule(AddressOf CommonRules.StringRequired, _productIdProperty)
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_productIdProperty, 10))
    End Sub
    
    #End Region
    
    #Region "Business Methods"


    
    Private Shared ReadOnly _itemIdProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Item) p.ItemId)
		<System.ComponentModel.DataObjectField(true, false)> _
    Public Property ItemId() As String
        Get 
            Return GetProperty(_itemIdProperty)
        End Get
        Set (ByVal value As String)
            SetProperty(_itemIdProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _listPriceProperty As PropertyInfo(Of System.Nullable(Of Decimal)) = RegisterProperty(Of System.Nullable(Of Decimal))(Function(p As Item) p.ListPrice)
    Public Property ListPrice() As System.Nullable(Of Decimal)
        Get 
            Return GetProperty(_listPriceProperty)
        End Get
        Set (ByVal value As System.Nullable(Of Decimal))
            SetProperty(_listPriceProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _unitCostProperty As PropertyInfo(Of System.Nullable(Of Decimal)) = RegisterProperty(Of System.Nullable(Of Decimal))(Function(p As Item) p.UnitCost)
    Public Property UnitCost() As System.Nullable(Of Decimal)
        Get 
            Return GetProperty(_unitCostProperty)
        End Get
        Set (ByVal value As System.Nullable(Of Decimal))
            SetProperty(_unitCostProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _statusProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Item) p.Status)
    Public Property Status() As String
        Get 
            Return GetProperty(_statusProperty)
        End Get
        Set (ByVal value As String)
            SetProperty(_statusProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _nameProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Item) p.Name)
    Public Property Name() As String
        Get 
            Return GetProperty(_nameProperty)
        End Get
        Set (ByVal value As String)
            SetProperty(_nameProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _imageProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Item) p.Image)
    Public Property Image() As String
        Get 
            Return GetProperty(_imageProperty)
        End Get
        Set (ByVal value As String)
            SetProperty(_imageProperty, value)
        End Set
    End Property
    
    Private Shared _productIdProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Item) p.ProductId)
    Public Property ProductId() As String 
        Get  
            Return GetProperty(_productIdProperty)                
        End Get
        Set (ByVal value As String)
            SetProperty(_productIdProperty, value) 
        End Set
    End Property
    
    Private Shared _suppIdProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p As Item) p.SuppId)
    Public Property SuppId() As Integer 
        Get  
            Return GetProperty(_suppIdProperty)                
        End Get
        Set (ByVal value As Integer)
            SetProperty(_suppIdProperty, value) 
        End Set
    End Property
    
    Private Shared ReadOnly _productProperty As PropertyInfo(Of Product) = RegisterProperty(Of Product)(Function(p As Item) p.Product, Csla.RelationshipTypes.LazyLoad)
    Public ReadOnly Property Product() As Product
        Get
        
            If Not(FieldManager.FieldExists(_productProperty))
                If (Me.IsNew) Then
                    LoadProperty(_productProperty, Product.NewProduct())
                Else
                    LoadProperty(_productProperty, Product.GetProduct(ProductId))
                End If
            End If
            
            Return GetProperty(_productProperty) 
        End Get
    End Property
    
    Private Shared ReadOnly _supplierProperty As PropertyInfo(Of Supplier) = RegisterProperty(Of Supplier)(Function(p As Item) p.Supplier, Csla.RelationshipTypes.LazyLoad)
    Public ReadOnly Property Supplier() As Supplier
        Get
        
            If Not(FieldManager.FieldExists(_supplierProperty))
                If (Me.IsNew) Then
                    LoadProperty(_supplierProperty, Supplier.NewSupplier())
                Else
                    LoadProperty(_supplierProperty, Supplier.GetSupplier(SuppId))
                End If
            End If
            
            Return GetProperty(_supplierProperty) 
        End Get
    End Property
    
    #End Region
            
    #Region "Root Factory Methods"
    
    Public Shared Function NewItem() As Item 
        Return DataPortal.Create(Of Item)()
    End Function
    
    Public Shared Function GetItem(ByVal itemId As String) As Item         
        Return DataPortal.Fetch(Of Item)(New ItemCriteria(itemId))
    End Function
    
    Public Shared Function GetByProductItemIdListPriceName(ByVal productId As String, ByVal itemId As String, ByVal listPrice As System.Nullable(Of Decimal), ByVal name As String) As Item 
        Dim criteria As New ItemCriteria()
        criteria.ProductId = productId
        criteria.ItemId = itemId
        criteria.ListPrice = listPrice
        criteria.Name = name
        
        Return DataPortal.Fetch(Of Item)(criteria)
    End Function

    Public Shared Sub DeleteItem(ByVal itemId As String)
        DataPortal.Delete(New ItemCriteria(itemId))
    End Sub
    Public Shared Sub DeleteItem(ByVal productId As String, ByVal suppId As System.Nullable(Of Integer), ByVal itemId As String, ByVal listPrice As System.Nullable(Of Decimal), ByVal name As String)
        Dim criteria As New ItemCriteria()
        criteria.ProductId = productId
        criteria.SuppId = suppId
        criteria.ItemId = itemId
        criteria.ListPrice = listPrice
        criteria.Name = name

        DataPortal.Delete(criteria)
    End Sub
    
    #End Region
    
    #Region "Child Factory Methods"
    
    Friend Shared Function NewItemChild() As Item
        Return DataPortal.CreateChild(Of Item)()
    End Function
    
    Friend Shared Function GetItemChild(ByVal itemId As String) As Item         
        Return DataPortal.FetchChild(Of Item)(New ItemCriteria(itemId))
    End Function

    #End Region
    

End Class