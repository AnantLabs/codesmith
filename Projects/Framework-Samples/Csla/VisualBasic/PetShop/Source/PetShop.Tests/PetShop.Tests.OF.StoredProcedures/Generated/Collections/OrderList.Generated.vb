'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v1.5.0.0, CSLA Framework: v3.8.0.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'OrderList.vb.
'
'     Template: EditableRootList.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data

<Serializable()> _
<Csla.Server.ObjectFactory(FactoryNames.OrderListFactoryName)> _
Public Partial Class OrderList 
    Inherits BusinessListBase(Of OrderList, Order)

    #Region "Contructor(s)"
    
    Private Sub New()
        AllowNew = true
    End Sub
    
    #End Region

    #Region "Factory Methods"

    Public Shared Function NewList() As OrderList
        Return DataPortal.Create(Of OrderList)()
    End Function

    Public Shared Function GetByOrderId(ByVal orderId As System.Int32) As OrderList 
        Dim criteria As New OrderCriteria()
		criteria.OrderId = orderId

        Return DataPortal.Fetch(Of OrderList)(criteria)
    End Function

    Public Shared Function GetAll() As OrderList
        Return DataPortal.Fetch(Of OrderList)(New OrderCriteria())
    End Function

    #End Region

    #Region "Properties"

    Protected Overrides Function AddNewCore() As Object
        Dim item As Order = PetShop.Tests.OF.StoredProcedures.Order.NewOrder()
        Me.Add(item)
        Return item
    End Function

    #End Region

    #Region "Exists Command"

    Public Shared Function Exists(ByVal criteria As OrderCriteria) As Boolean
        Return PetShop.Tests.OF.StoredProcedures.Order.Exists(criteria)
    End Function

    #End Region

        #Region "Property overrides"

        ''' <summary>
        ''' Returns true if any children are dirty
        ''' </summary>
        Public Shadows ReadOnly Property IsDirty() As Boolean
            Get
                For Each item As Order In Me.Items
                    If item.IsDirty Then
                        Return True
                    End If
                Next
        
                Return False
            End Get
        End Property

        #End Region

End Class