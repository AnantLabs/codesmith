//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Linq;

namespace PetShop.Core.Data
{
    /// <summary>
    /// The query extension class for Inventory.
    /// </summary>
    public static partial class InventoryExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static PetShop.Core.Data.Inventory ByKey(this IQueryable<PetShop.Core.Data.Inventory> queryable, string itemId)
        {
            var entity = queryable as System.Data.Linq.Table<PetShop.Core.Data.Inventory>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.ByKey.Invoke((PetShop.Core.Data.PetShopDataContext)entity.Context, itemId);
            
            return queryable.FirstOrDefault(i => i.ItemId == itemId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<PetShop.Core.Data.Inventory> table, string itemId)
        {
            return table.Delete(i => i.ItemId == itemId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Inventory.Qty"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.Inventory> ByQty(this IQueryable<PetShop.Core.Data.Inventory> queryable, int qty)
        {
            return queryable.Where(i => i.Qty == qty);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<PetShop.Core.Data.PetShopDataContext, string, PetShop.Core.Data.Inventory> ByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (PetShop.Core.Data.PetShopDataContext db, string itemId) => 
                        db.Inventory.FirstOrDefault(i => i.ItemId == itemId));

        }
        #endregion
    }
}

