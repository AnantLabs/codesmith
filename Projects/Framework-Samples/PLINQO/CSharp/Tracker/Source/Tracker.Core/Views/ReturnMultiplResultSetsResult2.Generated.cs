//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace Tracker.Core.Data
{
    /// <summary>
    /// Class representing data for the Tracker database.
    /// </summary>
    
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(Metadata))]
    public partial class ReturnMultiplResultSetsResult2
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="ReturnMultiplResultSetsResult2"/> class.
        /// </summary>
        static ReturnMultiplResultSetsResult2()
        {
            CodeSmith.Data.Rules.RuleManager.AddShared<ReturnMultiplResultSetsResult2>();
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnMultiplResultSetsResult2"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public ReturnMultiplResultSetsResult2()
        {
            OnCreated();
            Initialize();
        }

        private void Initialize()
        {
        }
        #endregion

        #region Column Mapped Properties

        private int _id;

        /// <summary>
        /// Gets or sets the Id column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Id", Storage = "_id", DbType = "int NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    OnIdChanging(value);
                    _id = value;
                    OnIdChanged();
                }
            }
        }

        private int _statusId;

        /// <summary>
        /// Gets or sets the StatusId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "StatusId", Storage = "_statusId", DbType = "int NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        public int StatusId
        {
            get { return _statusId; }
            set
            {
                if (_statusId != value)
                {
                    OnStatusIdChanging(value);
                    _statusId = value;
                    OnStatusIdChanged();
                }
            }
        }

        private int _priorityId;

        /// <summary>
        /// Gets or sets the PriorityId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "PriorityId", Storage = "_priorityId", DbType = "int NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        public int PriorityId
        {
            get { return _priorityId; }
            set
            {
                if (_priorityId != value)
                {
                    OnPriorityIdChanging(value);
                    _priorityId = value;
                    OnPriorityIdChanged();
                }
            }
        }

        private int _createdId;

        /// <summary>
        /// Gets or sets the CreatedId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "CreatedId", Storage = "_createdId", DbType = "int NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        public int CreatedId
        {
            get { return _createdId; }
            set
            {
                if (_createdId != value)
                {
                    OnCreatedIdChanging(value);
                    _createdId = value;
                    OnCreatedIdChanged();
                }
            }
        }

        private string _summary;

        /// <summary>
        /// Gets or sets the Summary column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Summary", Storage = "_summary", DbType = "nvarchar(255) NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [System.Runtime.Serialization.DataMember(Order = 5)]
        public string Summary
        {
            get { return _summary; }
            set
            {
                if (_summary != value)
                {
                    OnSummaryChanging(value);
                    _summary = value;
                    OnSummaryChanged();
                }
            }
        }

        private string _details;

        /// <summary>
        /// Gets or sets the Details column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Details", Storage = "_details", DbType = "nvarchar(2000)", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        [System.Runtime.Serialization.DataMember(Order = 6)]
        public string Details
        {
            get { return _details; }
            set
            {
                if (_details != value)
                {
                    OnDetailsChanging(value);
                    _details = value;
                    OnDetailsChanged();
                }
            }
        }

        private Nullable<System.DateTime> _startDate;

        /// <summary>
        /// Gets or sets the StartDate column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "StartDate", Storage = "_startDate", DbType = "datetime", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 7)]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    OnStartDateChanging(value);
                    _startDate = value;
                    OnStartDateChanged();
                }
            }
        }

        private Nullable<System.DateTime> _dueDate;

        /// <summary>
        /// Gets or sets the DueDate column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "DueDate", Storage = "_dueDate", DbType = "datetime", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 8)]
        public Nullable<System.DateTime> DueDate
        {
            get { return _dueDate; }
            set
            {
                if (_dueDate != value)
                {
                    OnDueDateChanging(value);
                    _dueDate = value;
                    OnDueDateChanged();
                }
            }
        }

        private Nullable<System.DateTime> _completeDate;

        /// <summary>
        /// Gets or sets the CompleteDate column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "CompleteDate", Storage = "_completeDate", DbType = "datetime", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 9)]
        public Nullable<System.DateTime> CompleteDate
        {
            get { return _completeDate; }
            set
            {
                if (_completeDate != value)
                {
                    OnCompleteDateChanging(value);
                    _completeDate = value;
                    OnCompleteDateChanged();
                }
            }
        }

        private Nullable<int> _assignedId;

        /// <summary>
        /// Gets or sets the AssignedId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "AssignedId", Storage = "_assignedId", DbType = "int", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 10)]
        public Nullable<int> AssignedId
        {
            get { return _assignedId; }
            set
            {
                if (_assignedId != value)
                {
                    OnAssignedIdChanging(value);
                    _assignedId = value;
                    OnAssignedIdChanged();
                }
            }
        }

        private System.DateTime _createdDate;

        /// <summary>
        /// Gets or sets the CreatedDate column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "CreatedDate", Storage = "_createdDate", DbType = "datetime NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 11)]
        public System.DateTime CreatedDate
        {
            get { return _createdDate; }
            set
            {
                if (_createdDate != value)
                {
                    OnCreatedDateChanging(value);
                    _createdDate = value;
                    OnCreatedDateChanged();
                }
            }
        }

        private System.DateTime _modifiedDate;

        /// <summary>
        /// Gets or sets the ModifiedDate column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "ModifiedDate", Storage = "_modifiedDate", DbType = "datetime NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 12)]
        public System.DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    OnModifiedDateChanging(value);
                    _modifiedDate = value;
                    OnModifiedDateChanged();
                }
            }
        }

        private System.Data.Linq.Binary _rowVersion = default(System.Data.Linq.Binary);

        /// <summary>
        /// Gets the RowVersion column value.
        /// </summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Data.Linq.Mapping.Column(Name = "RowVersion", Storage = "_rowVersion", DbType = "timestamp NOT NULL", IsDbGenerated = true, IsVersion = true, CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 13)]
        public System.Data.Linq.Binary RowVersion
        {
            get { return _rowVersion; }
            set
            {
                if (_rowVersion != value)
                {
                    OnRowVersionChanging(value);
                    _rowVersion = value;
                    OnRowVersionChanged();
                }
            }
        }

        private string _createdBy;

        /// <summary>
        /// Gets or sets the CreatedBy column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "CreatedBy", Storage = "_createdBy", DbType = "nvarchar(50)", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.Runtime.Serialization.DataMember(Order = 14)]
        public string CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    OnCreatedByChanging(value);
                    _createdBy = value;
                    OnCreatedByChanged();
                }
            }
        }

        private string _lastModifiedBy;

        /// <summary>
        /// Gets or sets the LastModifiedBy column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "LastModifiedBy", Storage = "_lastModifiedBy", DbType = "nvarchar(50)", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.Runtime.Serialization.DataMember(Order = 15)]
        public string LastModifiedBy
        {
            get { return _lastModifiedBy; }
            set
            {
                if (_lastModifiedBy != value)
                {
                    OnLastModifiedByChanging(value);
                    _lastModifiedBy = value;
                    OnLastModifiedByChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when <see cref="Id"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIdChanging(int value);
        /// <summary>Called after <see cref="Id"/> has Changed.</summary>
        partial void OnIdChanged();
        /// <summary>Called when <see cref="StatusId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStatusIdChanging(int value);
        /// <summary>Called after <see cref="StatusId"/> has Changed.</summary>
        partial void OnStatusIdChanged();
        /// <summary>Called when <see cref="PriorityId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnPriorityIdChanging(int value);
        /// <summary>Called after <see cref="PriorityId"/> has Changed.</summary>
        partial void OnPriorityIdChanged();
        /// <summary>Called when <see cref="CreatedId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCreatedIdChanging(int value);
        /// <summary>Called after <see cref="CreatedId"/> has Changed.</summary>
        partial void OnCreatedIdChanged();
        /// <summary>Called when <see cref="Summary"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnSummaryChanging(string value);
        /// <summary>Called after <see cref="Summary"/> has Changed.</summary>
        partial void OnSummaryChanged();
        /// <summary>Called when <see cref="Details"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnDetailsChanging(string value);
        /// <summary>Called after <see cref="Details"/> has Changed.</summary>
        partial void OnDetailsChanged();
        /// <summary>Called when <see cref="StartDate"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStartDateChanging(Nullable<System.DateTime> value);
        /// <summary>Called after <see cref="StartDate"/> has Changed.</summary>
        partial void OnStartDateChanged();
        /// <summary>Called when <see cref="DueDate"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnDueDateChanging(Nullable<System.DateTime> value);
        /// <summary>Called after <see cref="DueDate"/> has Changed.</summary>
        partial void OnDueDateChanged();
        /// <summary>Called when <see cref="CompleteDate"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCompleteDateChanging(Nullable<System.DateTime> value);
        /// <summary>Called after <see cref="CompleteDate"/> has Changed.</summary>
        partial void OnCompleteDateChanged();
        /// <summary>Called when <see cref="AssignedId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAssignedIdChanging(Nullable<int> value);
        /// <summary>Called after <see cref="AssignedId"/> has Changed.</summary>
        partial void OnAssignedIdChanged();
        /// <summary>Called when <see cref="CreatedDate"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCreatedDateChanging(System.DateTime value);
        /// <summary>Called after <see cref="CreatedDate"/> has Changed.</summary>
        partial void OnCreatedDateChanged();
        /// <summary>Called when <see cref="ModifiedDate"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnModifiedDateChanging(System.DateTime value);
        /// <summary>Called after <see cref="ModifiedDate"/> has Changed.</summary>
        partial void OnModifiedDateChanged();
        /// <summary>Called when <see cref="RowVersion"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnRowVersionChanging(System.Data.Linq.Binary value);
        /// <summary>Called after <see cref="RowVersion"/> has Changed.</summary>
        partial void OnRowVersionChanged();
        /// <summary>Called when <see cref="CreatedBy"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCreatedByChanging(string value);
        /// <summary>Called after <see cref="CreatedBy"/> has Changed.</summary>
        partial void OnCreatedByChanged();
        /// <summary>Called when <see cref="LastModifiedBy"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLastModifiedByChanging(string value);
        /// <summary>Called after <see cref="LastModifiedBy"/> has Changed.</summary>
        partial void OnLastModifiedByChanged();
        #endregion

        #region Serialization
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }
        #endregion
    }
}

