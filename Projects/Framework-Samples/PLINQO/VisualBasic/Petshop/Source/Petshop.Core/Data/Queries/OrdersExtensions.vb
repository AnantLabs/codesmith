
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Orders.
    ''' </summary>
    Public Module OrdersExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal orderId As Integer) As PetShop.Core.Data.Orders

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Orders) = CType(queryable, Table(Of PetShop.Core.Data.Orders))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), orderId)
            End If

            Return queryable.FirstOrDefault(Function(o)o.OrderId = orderId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Orders), ByVal orderId As Integer) As Integer
            Return table.Delete(Function(o)o.OrderId = orderId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderId">OrderId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByOrderId(queryable As IQueryable(Of PetShop.Core.Data.Orders), orderId As Integer) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.OrderId = orderId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderId">OrderId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByOrderId(queryable As IQueryable(Of PetShop.Core.Data.Orders), orderId As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim OrderIdList = New List(Of Integer)()
            OrderIdList.Add(orderId)
        
            If additionalValues IsNot Nothing Then
                OrderIdList.AddRange(additionalValues)
            End If
        
            If OrderIdList.Count = 1 Then
                Return queryable.ByOrderId(OrderIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("OrderId", OrderIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUserId(queryable As IQueryable(Of PetShop.Core.Data.Orders), userId As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.UserId = userId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUserId(queryable As IQueryable(Of PetShop.Core.Data.Orders), userId As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim UserIdList = New List(Of String)()
            UserIdList.Add(userId)
        
            If additionalValues IsNot Nothing Then
                UserIdList.AddRange(additionalValues)
            End If
        
            If UserIdList.Count = 1 Then
                Return queryable.ByUserId(UserIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("UserId", UserIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderDate">OrderDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByOrderDate(queryable As IQueryable(Of PetShop.Core.Data.Orders), orderDate As Date) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.OrderDate = orderDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderDate">OrderDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByOrderDate(queryable As IQueryable(Of PetShop.Core.Data.Orders), orderDate As Date, ParamArray additionalValues As Date()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim OrderDateList = New List(Of Date)()
            OrderDateList.Add(orderDate)
        
            If additionalValues IsNot Nothing Then
                OrderDateList.AddRange(additionalValues)
            End If
        
            If OrderDateList.Count = 1 Then
                Return queryable.ByOrderDate(OrderDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("OrderDate", OrderDateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr1">ShipAddr1 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipAddr1(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipAddr1 As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipAddr1 = shipAddr1)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr1">ShipAddr1 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipAddr1(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipAddr1 As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim ShipAddr1List = New List(Of String)()
            ShipAddr1List.Add(shipAddr1)
        
            If additionalValues IsNot Nothing Then
                ShipAddr1List.AddRange(additionalValues)
            End If
        
            If ShipAddr1List.Count = 1 Then
                Return queryable.ByShipAddr1(ShipAddr1List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipAddr1", ShipAddr1List)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr2">ShipAddr2 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipAddr2(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipAddr2 As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o) Object.Equals(o.ShipAddr2, shipAddr2))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr2">ShipAddr2 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipAddr2(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipAddr2 As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim ShipAddr2List = New List(Of String)()
            ShipAddr2List.Add(shipAddr2)
        
            If additionalValues IsNot Nothing Then
                ShipAddr2List.AddRange(additionalValues)
            Else
                ShipAddr2List.Add(Nothing)
            End If
        
            If ShipAddr2List.Count = 1 Then
                Return queryable.ByShipAddr2(ShipAddr2List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipAddr2", ShipAddr2List)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCity">ShipCity to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipCity(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipCity As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipCity = shipCity)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCity">ShipCity to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipCity(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipCity As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim ShipCityList = New List(Of String)()
            ShipCityList.Add(shipCity)
        
            If additionalValues IsNot Nothing Then
                ShipCityList.AddRange(additionalValues)
            End If
        
            If ShipCityList.Count = 1 Then
                Return queryable.ByShipCity(ShipCityList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipCity", ShipCityList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipState">ShipState to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipState(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipState As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipState = shipState)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipState">ShipState to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipState(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipState As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim ShipStateList = New List(Of String)()
            ShipStateList.Add(shipState)
        
            If additionalValues IsNot Nothing Then
                ShipStateList.AddRange(additionalValues)
            End If
        
            If ShipStateList.Count = 1 Then
                Return queryable.ByShipState(ShipStateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipState", ShipStateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipZip">ShipZip to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipZip(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipZip As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipZip = shipZip)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipZip">ShipZip to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipZip(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipZip As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim ShipZipList = New List(Of String)()
            ShipZipList.Add(shipZip)
        
            If additionalValues IsNot Nothing Then
                ShipZipList.AddRange(additionalValues)
            End If
        
            If ShipZipList.Count = 1 Then
                Return queryable.ByShipZip(ShipZipList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipZip", ShipZipList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCountry">ShipCountry to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipCountry(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipCountry As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipCountry = shipCountry)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCountry">ShipCountry to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipCountry(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipCountry As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim ShipCountryList = New List(Of String)()
            ShipCountryList.Add(shipCountry)
        
            If additionalValues IsNot Nothing Then
                ShipCountryList.AddRange(additionalValues)
            End If
        
            If ShipCountryList.Count = 1 Then
                Return queryable.ByShipCountry(ShipCountryList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipCountry", ShipCountryList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr1">BillAddr1 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillAddr1(queryable As IQueryable(Of PetShop.Core.Data.Orders), billAddr1 As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillAddr1 = billAddr1)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr1">BillAddr1 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillAddr1(queryable As IQueryable(Of PetShop.Core.Data.Orders), billAddr1 As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim BillAddr1List = New List(Of String)()
            BillAddr1List.Add(billAddr1)
        
            If additionalValues IsNot Nothing Then
                BillAddr1List.AddRange(additionalValues)
            End If
        
            If BillAddr1List.Count = 1 Then
                Return queryable.ByBillAddr1(BillAddr1List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillAddr1", BillAddr1List)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr2">BillAddr2 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillAddr2(queryable As IQueryable(Of PetShop.Core.Data.Orders), billAddr2 As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o) Object.Equals(o.BillAddr2, billAddr2))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr2">BillAddr2 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillAddr2(queryable As IQueryable(Of PetShop.Core.Data.Orders), billAddr2 As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim BillAddr2List = New List(Of String)()
            BillAddr2List.Add(billAddr2)
        
            If additionalValues IsNot Nothing Then
                BillAddr2List.AddRange(additionalValues)
            Else
                BillAddr2List.Add(Nothing)
            End If
        
            If BillAddr2List.Count = 1 Then
                Return queryable.ByBillAddr2(BillAddr2List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillAddr2", BillAddr2List)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCity">BillCity to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillCity(queryable As IQueryable(Of PetShop.Core.Data.Orders), billCity As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillCity = billCity)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCity">BillCity to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillCity(queryable As IQueryable(Of PetShop.Core.Data.Orders), billCity As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim BillCityList = New List(Of String)()
            BillCityList.Add(billCity)
        
            If additionalValues IsNot Nothing Then
                BillCityList.AddRange(additionalValues)
            End If
        
            If BillCityList.Count = 1 Then
                Return queryable.ByBillCity(BillCityList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillCity", BillCityList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billState">BillState to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillState(queryable As IQueryable(Of PetShop.Core.Data.Orders), billState As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillState = billState)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billState">BillState to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillState(queryable As IQueryable(Of PetShop.Core.Data.Orders), billState As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim BillStateList = New List(Of String)()
            BillStateList.Add(billState)
        
            If additionalValues IsNot Nothing Then
                BillStateList.AddRange(additionalValues)
            End If
        
            If BillStateList.Count = 1 Then
                Return queryable.ByBillState(BillStateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillState", BillStateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billZip">BillZip to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillZip(queryable As IQueryable(Of PetShop.Core.Data.Orders), billZip As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillZip = billZip)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billZip">BillZip to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillZip(queryable As IQueryable(Of PetShop.Core.Data.Orders), billZip As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim BillZipList = New List(Of String)()
            BillZipList.Add(billZip)
        
            If additionalValues IsNot Nothing Then
                BillZipList.AddRange(additionalValues)
            End If
        
            If BillZipList.Count = 1 Then
                Return queryable.ByBillZip(BillZipList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillZip", BillZipList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCountry">BillCountry to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillCountry(queryable As IQueryable(Of PetShop.Core.Data.Orders), billCountry As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillCountry = billCountry)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCountry">BillCountry to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillCountry(queryable As IQueryable(Of PetShop.Core.Data.Orders), billCountry As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim BillCountryList = New List(Of String)()
            BillCountryList.Add(billCountry)
        
            If additionalValues IsNot Nothing Then
                BillCountryList.AddRange(additionalValues)
            End If
        
            If BillCountryList.Count = 1 Then
                Return queryable.ByBillCountry(BillCountryList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillCountry", BillCountryList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="courier">Courier to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCourier(queryable As IQueryable(Of PetShop.Core.Data.Orders), courier As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.Courier = courier)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="courier">Courier to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCourier(queryable As IQueryable(Of PetShop.Core.Data.Orders), courier As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim CourierList = New List(Of String)()
            CourierList.Add(courier)
        
            If additionalValues IsNot Nothing Then
                CourierList.AddRange(additionalValues)
            End If
        
            If CourierList.Count = 1 Then
                Return queryable.ByCourier(CourierList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("Courier", CourierList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="totalPrice">TotalPrice to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByTotalPrice(queryable As IQueryable(Of PetShop.Core.Data.Orders), totalPrice As Decimal) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.TotalPrice = totalPrice)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="totalPrice">TotalPrice to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByTotalPrice(queryable As IQueryable(Of PetShop.Core.Data.Orders), totalPrice As Decimal, ParamArray additionalValues As Decimal()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim TotalPriceList = New List(Of Decimal)()
            TotalPriceList.Add(totalPrice)
        
            If additionalValues IsNot Nothing Then
                TotalPriceList.AddRange(additionalValues)
            End If
        
            If TotalPriceList.Count = 1 Then
                Return queryable.ByTotalPrice(TotalPriceList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("TotalPrice", TotalPriceList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToFirstName">BillToFirstName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillToFirstName(queryable As IQueryable(Of PetShop.Core.Data.Orders), billToFirstName As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillToFirstName = billToFirstName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToFirstName">BillToFirstName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillToFirstName(queryable As IQueryable(Of PetShop.Core.Data.Orders), billToFirstName As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim BillToFirstNameList = New List(Of String)()
            BillToFirstNameList.Add(billToFirstName)
        
            If additionalValues IsNot Nothing Then
                BillToFirstNameList.AddRange(additionalValues)
            End If
        
            If BillToFirstNameList.Count = 1 Then
                Return queryable.ByBillToFirstName(BillToFirstNameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillToFirstName", BillToFirstNameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToLastName">BillToLastName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillToLastName(queryable As IQueryable(Of PetShop.Core.Data.Orders), billToLastName As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillToLastName = billToLastName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToLastName">BillToLastName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByBillToLastName(queryable As IQueryable(Of PetShop.Core.Data.Orders), billToLastName As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim BillToLastNameList = New List(Of String)()
            BillToLastNameList.Add(billToLastName)
        
            If additionalValues IsNot Nothing Then
                BillToLastNameList.AddRange(additionalValues)
            End If
        
            If BillToLastNameList.Count = 1 Then
                Return queryable.ByBillToLastName(BillToLastNameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillToLastName", BillToLastNameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToFirstName">ShipToFirstName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipToFirstName(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipToFirstName As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipToFirstName = shipToFirstName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToFirstName">ShipToFirstName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipToFirstName(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipToFirstName As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim ShipToFirstNameList = New List(Of String)()
            ShipToFirstNameList.Add(shipToFirstName)
        
            If additionalValues IsNot Nothing Then
                ShipToFirstNameList.AddRange(additionalValues)
            End If
        
            If ShipToFirstNameList.Count = 1 Then
                Return queryable.ByShipToFirstName(ShipToFirstNameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipToFirstName", ShipToFirstNameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToLastName">ShipToLastName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipToLastName(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipToLastName As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipToLastName = shipToLastName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToLastName">ShipToLastName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByShipToLastName(queryable As IQueryable(Of PetShop.Core.Data.Orders), shipToLastName As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim ShipToLastNameList = New List(Of String)()
            ShipToLastNameList.Add(shipToLastName)
        
            If additionalValues IsNot Nothing Then
                ShipToLastNameList.AddRange(additionalValues)
            End If
        
            If ShipToLastNameList.Count = 1 Then
                Return queryable.ByShipToLastName(ShipToLastNameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipToLastName", ShipToLastNameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAuthorizationNumber(queryable As IQueryable(Of PetShop.Core.Data.Orders), authorizationNumber As Integer) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.AuthorizationNumber = authorizationNumber)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAuthorizationNumber(queryable As IQueryable(Of PetShop.Core.Data.Orders), authorizationNumber As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim AuthorizationNumberList = New List(Of Integer)()
            AuthorizationNumberList.Add(authorizationNumber)
        
            If additionalValues IsNot Nothing Then
                AuthorizationNumberList.AddRange(additionalValues)
            End If
        
            If AuthorizationNumberList.Count = 1 Then
                Return queryable.ByAuthorizationNumber(AuthorizationNumberList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("AuthorizationNumber", AuthorizationNumberList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="locale">Locale to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByLocale(queryable As IQueryable(Of PetShop.Core.Data.Orders), locale As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.Locale = locale)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="locale">Locale to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByLocale(queryable As IQueryable(Of PetShop.Core.Data.Orders), locale As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim LocaleList = New List(Of String)()
            LocaleList.Add(locale)
        
            If additionalValues IsNot Nothing Then
                LocaleList.AddRange(additionalValues)
            End If
        
            If LocaleList.Count = 1 Then
                Return queryable.ByLocale(LocaleList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("Locale", LocaleList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, Integer, PetShop.Core.Data.Orders) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal orderId As Integer) _
                        db.Orders.FirstOrDefault(Function(o)o.OrderId = orderId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

