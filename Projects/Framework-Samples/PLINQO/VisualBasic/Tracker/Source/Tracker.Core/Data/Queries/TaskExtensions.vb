
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace Tracker.Core.Data
    ''' <summary>
    ''' The query extension class for Task.
    ''' </summary>
    Public Module TaskExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal id As Integer) As Tracker.Core.Data.Task

            Dim entity As System.Data.Linq.Table(Of Tracker.Core.Data.Task) = CType(queryable, Table(Of Tracker.Core.Data.Task))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, Tracker.Core.Data.TrackerDataContext), id)
            End If

            Return queryable.FirstOrDefault(Function(t)t.Id = id)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of Tracker.Core.Data.Task), ByVal id As Integer) As Integer
            Return table.Delete(Function(t)t.Id = id)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ById(queryable As IQueryable(Of Tracker.Core.Data.Task), id As Integer) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.Id = id)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ById(queryable As IQueryable(Of Tracker.Core.Data.Task), id As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim IdList = New List(Of Integer)()
            IdList.Add(id)
        
            If additionalValues IsNot Nothing Then
                IdList.AddRange(additionalValues)
            End If
        
            If IdList.Count = 1 Then
                Return queryable.ById(IdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("Id", IdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByStatus(queryable As IQueryable(Of Tracker.Core.Data.Task), status As Status) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.Status = status)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByStatus(queryable As IQueryable(Of Tracker.Core.Data.Task), status As Status, ParamArray additionalValues As Status()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim StatusList = New List(Of Status)()
            StatusList.Add(status)
        
            If additionalValues IsNot Nothing Then
                StatusList.AddRange(additionalValues)
            End If
        
            If StatusList.Count = 1 Then
                Return queryable.ByStatus(StatusList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("Status", StatusList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="priority">Priority to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByPriority(queryable As IQueryable(Of Tracker.Core.Data.Task), priority As Priority) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.Priority, priority))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="priority">Priority to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByPriority(queryable As IQueryable(Of Tracker.Core.Data.Task), priority As Priority, ParamArray additionalValues As Priority()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim PriorityList = New List(Of Priority)()
            PriorityList.Add(priority)
        
            If additionalValues IsNot Nothing Then
                PriorityList.AddRange(additionalValues)
            Else
                PriorityList.Add(Nothing)
            End If
        
            If PriorityList.Count = 1 Then
                Return queryable.ByPriority(PriorityList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("Priority", PriorityList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdId">CreatedId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCreatedId(queryable As IQueryable(Of Tracker.Core.Data.Task), createdId As Integer) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.CreatedId = createdId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdId">CreatedId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCreatedId(queryable As IQueryable(Of Tracker.Core.Data.Task), createdId As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim CreatedIdList = New List(Of Integer)()
            CreatedIdList.Add(createdId)
        
            If additionalValues IsNot Nothing Then
                CreatedIdList.AddRange(additionalValues)
            End If
        
            If CreatedIdList.Count = 1 Then
                Return queryable.ByCreatedId(CreatedIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("CreatedId", CreatedIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="summary">Summary to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function BySummary(queryable As IQueryable(Of Tracker.Core.Data.Task), summary As String) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.Summary = summary)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="summary">Summary to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function BySummary(queryable As IQueryable(Of Tracker.Core.Data.Task), summary As String, ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim SummaryList = New List(Of String)()
            SummaryList.Add(summary)
        
            If additionalValues IsNot Nothing Then
                SummaryList.AddRange(additionalValues)
            End If
        
            If SummaryList.Count = 1 Then
                Return queryable.BySummary(SummaryList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("Summary", SummaryList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="details">Details to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDetails(queryable As IQueryable(Of Tracker.Core.Data.Task), details As String) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.Details, details))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="details">Details to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDetails(queryable As IQueryable(Of Tracker.Core.Data.Task), details As String, ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim DetailsList = New List(Of String)()
            DetailsList.Add(details)
        
            If additionalValues IsNot Nothing Then
                DetailsList.AddRange(additionalValues)
            Else
                DetailsList.Add(Nothing)
            End If
        
            If DetailsList.Count = 1 Then
                Return queryable.ByDetails(DetailsList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("Details", DetailsList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="startDate">StartDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByStartDate(queryable As IQueryable(Of Tracker.Core.Data.Task), startDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.StartDate, startDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="startDate">StartDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByStartDate(queryable As IQueryable(Of Tracker.Core.Data.Task), startDate As Date?, ParamArray additionalValues As Date?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim StartDateList = New List(Of Date?)()
            StartDateList.Add(startDate)
        
            If additionalValues IsNot Nothing Then
                StartDateList.AddRange(additionalValues)
            Else
                StartDateList.Add(Nothing)
            End If
        
            If StartDateList.Count = 1 Then
                Return queryable.ByStartDate(StartDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("StartDate", StartDateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="dueDate">DueDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDueDate(queryable As IQueryable(Of Tracker.Core.Data.Task), dueDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.DueDate, dueDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="dueDate">DueDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDueDate(queryable As IQueryable(Of Tracker.Core.Data.Task), dueDate As Date?, ParamArray additionalValues As Date?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim DueDateList = New List(Of Date?)()
            DueDateList.Add(dueDate)
        
            If additionalValues IsNot Nothing Then
                DueDateList.AddRange(additionalValues)
            Else
                DueDateList.Add(Nothing)
            End If
        
            If DueDateList.Count = 1 Then
                Return queryable.ByDueDate(DueDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("DueDate", DueDateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="completeDate">CompleteDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCompleteDate(queryable As IQueryable(Of Tracker.Core.Data.Task), completeDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.CompleteDate, completeDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="completeDate">CompleteDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCompleteDate(queryable As IQueryable(Of Tracker.Core.Data.Task), completeDate As Date?, ParamArray additionalValues As Date?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim CompleteDateList = New List(Of Date?)()
            CompleteDateList.Add(completeDate)
        
            If additionalValues IsNot Nothing Then
                CompleteDateList.AddRange(additionalValues)
            Else
                CompleteDateList.Add(Nothing)
            End If
        
            If CompleteDateList.Count = 1 Then
                Return queryable.ByCompleteDate(CompleteDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("CompleteDate", CompleteDateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="assignedId">AssignedId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAssignedId(queryable As IQueryable(Of Tracker.Core.Data.Task), assignedId As Integer?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.AssignedId, assignedId))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="assignedId">AssignedId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAssignedId(queryable As IQueryable(Of Tracker.Core.Data.Task), assignedId As Integer?, ParamArray additionalValues As Integer?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim AssignedIdList = New List(Of Integer?)()
            AssignedIdList.Add(assignedId)
        
            If additionalValues IsNot Nothing Then
                AssignedIdList.AddRange(additionalValues)
            Else
                AssignedIdList.Add(Nothing)
            End If
        
            If AssignedIdList.Count = 1 Then
                Return queryable.ByAssignedId(AssignedIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("AssignedId", AssignedIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCreatedDate(queryable As IQueryable(Of Tracker.Core.Data.Task), createdDate As Date) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.CreatedDate = createdDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCreatedDate(queryable As IQueryable(Of Tracker.Core.Data.Task), createdDate As Date, ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim CreatedDateList = New List(Of Date)()
            CreatedDateList.Add(createdDate)
        
            If additionalValues IsNot Nothing Then
                CreatedDateList.AddRange(additionalValues)
            End If
        
            If CreatedDateList.Count = 1 Then
                Return queryable.ByCreatedDate(CreatedDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("CreatedDate", CreatedDateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByModifiedDate(queryable As IQueryable(Of Tracker.Core.Data.Task), modifiedDate As Date) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.ModifiedDate = modifiedDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByModifiedDate(queryable As IQueryable(Of Tracker.Core.Data.Task), modifiedDate As Date, ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim ModifiedDateList = New List(Of Date)()
            ModifiedDateList.Add(modifiedDate)
        
            If additionalValues IsNot Nothing Then
                ModifiedDateList.AddRange(additionalValues)
            End If
        
            If ModifiedDateList.Count = 1 Then
                Return queryable.ByModifiedDate(ModifiedDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("ModifiedDate", ModifiedDateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByLastModifiedBy(queryable As IQueryable(Of Tracker.Core.Data.Task), lastModifiedBy As String) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.LastModifiedBy, lastModifiedBy))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByLastModifiedBy(queryable As IQueryable(Of Tracker.Core.Data.Task), lastModifiedBy As String, ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim LastModifiedByList = New List(Of String)()
            LastModifiedByList.Add(lastModifiedBy)
        
            If additionalValues IsNot Nothing Then
                LastModifiedByList.AddRange(additionalValues)
            Else
                LastModifiedByList.Add(Nothing)
            End If
        
            If LastModifiedByList.Count = 1 Then
                Return queryable.ByLastModifiedBy(LastModifiedByList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("LastModifiedBy", LastModifiedByList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of TrackerDataContext, Integer, Tracker.Core.Data.Task) = _
                CompiledQuery.Compile( _
                    Function(db As TrackerDataContext , ByVal id As Integer) _
                        db.Task.FirstOrDefault(Function(t)t.Id = id))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

