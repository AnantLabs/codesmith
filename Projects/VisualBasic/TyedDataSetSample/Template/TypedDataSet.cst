<%@ CodeTemplate Language="VB" Src="TypedDataSet.cst.vb" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="VB"  Description="Generates a typed DataSet class based on a database table schema." %>
<%@ Property Name="ClassNamespace" Type="String" Optional="true" Category="Context" Description="The namespace for the generated classes." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the typed DataSet should contain." %>
<%@ Map Name="DBTOVB" src="DbType-VB.csmap" Description="A Mapping of Db types to VB data types" %>
<%@ Map Name="NativeToDB" Src="SqlNativeType-SqlDbType.csmap" Description="A Mapping from NativeDBTypes to DbTypes" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections" %>

Imports System 
Imports System.IO 
Imports System.Collections 
Imports System.Data 
Imports System.Data.SqlClient 
Imports System.ComponentModel 
Imports System.ComponentModel.Design 
Imports System.Xml 
Imports System.Xml.Schema 
Imports System.Runtime.Serialization 
<%
If Not String.IsNullOrEmpty(Me.ClassNamespace) Then 
    Response.WriteLine("NameSpace {0}", Me.ClassNamespace) 
End If 
%>

#Region "<%= GetClassName(SourceTable.Name) %>DataSet" 
<Serializable()> _ 
<DesignerCategoryAttribute("code")> _ 
<System.Diagnostics.DebuggerStepThrough()> _ 
<ToolboxItem(True)> _ 
Public Class <%= GetClassName(SourceTable.Name) %>DataSet 
    Inherits DataSet 
    Private _table<%= GetClassName(SourceTable.Name) %> As <%= GetClassName(SourceTable.Name) %>DataTable 
    
    <DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)> _ 
    Public ReadOnly Property <%= GetClassName(SourceTable.Name) %>() As <%= GetClassName(SourceTable.Name) %>DataTable 
        Get 
            Return Me._table<%= GetClassName(SourceTable.Name) %> 
        End Get 
    End Property 
    
    Public Sub New() 
        Me.InitClass() 
    End Sub 
    
    Protected Overloads Overrides Function GetSchemaSerializable() As XmlSchema 
        Dim stream As New MemoryStream() 
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing)) 
        stream.Position = 0 
        Return XmlSchema.Read(New XmlTextReader(stream), Nothing) 
    End Function 
    
    Protected Overloads Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader) 
        Me.Reset() 
        Dim ds As New DataSet() 
        ds.ReadXml(reader) 
        If (ds.Tables("<%= GetClassName(SourceTable.Name) %>") IsNot Nothing) Then 
            Me.Tables.Add(New <%= GetClassName(SourceTable.Name) %>DataTable(ds.Tables("<%= GetClassName(SourceTable.Name) %>"))) 
        End If 
        Me.DataSetName = ds.DataSetName 
        Me.Prefix = ds.Prefix 
        Me.[Namespace] = ds.[Namespace] 
        Me.Locale = ds.Locale 
        Me.CaseSensitive = ds.CaseSensitive 
        Me.EnforceConstraints = ds.EnforceConstraints 
        Me.Merge(ds, False, System.Data.MissingSchemaAction.Add) 
        Me.InitVars() 
    End Sub 
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext) 
        Dim strSchema As String = DirectCast((info.GetValue("XmlSchema", GetType(String))), String) 
        If (strSchema IsNot Nothing) Then 
            Dim ds As New DataSet() 
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema))) 
            If (ds.Tables("<%= GetClassName(SourceTable.Name) %>") IsNot Nothing) Then 
                Me.Tables.Add(New <%= GetClassName(SourceTable.Name) %>DataTable(ds.Tables("<%= GetClassName(SourceTable.Name) %>"))) 
            End If 
            Me.DataSetName = ds.DataSetName 
            Me.Prefix = ds.Prefix 
            Me.[Namespace] = ds.[Namespace] 
            Me.Locale = ds.Locale 
            Me.CaseSensitive = ds.CaseSensitive 
            Me.EnforceConstraints = ds.EnforceConstraints 
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add) 
            Me.InitVars() 
        Else 
            Me.InitClass() 
        End If 
        Me.GetSerializationData(info, context) 
    End Sub 
    
    Private Sub InitClass() 
        Me.DataSetName = "<%= GetClassName(SourceTable.Name) %>DataSet" 
        _table<%= GetClassName(SourceTable.Name) %> = New <%= GetClassName(SourceTable.Name) %>DataTable() 
        Me.Tables.Add(_table<%= GetClassName(SourceTable.Name) %>) 
        Me.ExtendedProperties.Add("DataAdapterName", "<%= GetClassName(SourceTable.Name) %>DataAdapter") 
        Me.ExtendedProperties.Add("ObjectName", "<%= GetClassName(SourceTable.Name) %>") 
        Me.ExtendedProperties.Add("ObjectDescription", "<%= GetClassName(SourceTable.Name) %>") 
        Me.ExtendedProperties.Add("NameSpace", "") 
    End Sub 
    
    Public Overloads Overrides Function Clone() As DataSet 
        Dim cln As <%= GetClassName(SourceTable.Name) %>DataSet = DirectCast((MyBase.Clone()), <%= GetClassName(SourceTable.Name) %>DataSet) 
        cln.InitVars() 
        Return cln 
    End Function 
    
    Friend Sub InitVars() 
        _table<%= GetClassName(SourceTable.Name) %> = DirectCast((Me.Tables("<%= GetClassName(SourceTable.Name) %>")), <%= GetClassName(SourceTable.Name) %>DataTable) 
        If _table<%= GetClassName(SourceTable.Name) %> IsNot Nothing Then 
            _table<%= GetClassName(SourceTable.Name) %>.InitVars() 
        End If 
    End Sub 
    
    Protected Overloads Overrides Function ShouldSerializeTables() As Boolean 
        Return False 
    End Function 
    
    Protected Overloads Overrides Function ShouldSerializeRelations() As Boolean 
        Return False 
    End Function 
    
    Private Function ShouldSerialize<%= GetClassName(SourceTable.Name) %>() As Boolean 
        Return False 
    End Function 
   
    Public Delegate Sub <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler(ByVal sender As Object, ByVal e As <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs) 
    
    <Serializable()> _ 
    Public Class <%= GetClassName(SourceTable.Name) %>DataTable 
        Inherits DataTable 
        Implements System.Collections.IEnumerable 
		<% Dim i As Integer %>
		<% For i = 0 To SourceTable.Columns.Count - 1 %>
			Private _column<%= SourceTable.Columns(i).Name %> AS DataColumn
		<% NEXT %>
        
        Friend Sub New() 
            MyBase.New("<%= GetClassName(SourceTable.Name) %>") 
            Me.InitClass() 
        End Sub 
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext) 
            MyBase.New(info, context) 
            Me.InitVars() 
        End Sub 
        
        Friend Sub New(ByVal table As DataTable) 
            MyBase.New(table.TableName) 
            If table.CaseSensitive <> table.DataSet.CaseSensitive Then 
                Me.CaseSensitive = table.CaseSensitive 
            End If 
            If table.Locale.ToString() <> table.DataSet.Locale.ToString() Then 
                Me.Locale = table.Locale 
            End If 
            If table.[Namespace] <> table.DataSet.[Namespace] Then 
                Me.[Namespace] = table.[Namespace] 
            End If 
            Me.Prefix = table.Prefix 
            Me.MinimumCapacity = table.MinimumCapacity 
            Me.DisplayExpression = table.DisplayExpression 
        End Sub 
        
        Public ReadOnly Property Count() As Integer 
            Get 
                Return Me.Rows.Count 
            End Get 
        End Property 
        
        <% FOR i = 0 TO SourceTable.Columns.Count - 1%>
		Public ReadOnly Property <%= SourceTable.Columns(i).Name %>Column
			get
				return _column<%= SourceTable.Columns(i).Name %>
			END GET
		END Property
			
			<% NEXT %>
   
        Public Default ReadOnly Property Item(ByVal index As Integer) As <%= GetClassName(SourceTable.Name) %>Row 
            Get 
                Return DirectCast((Me.Rows(index)), <%= GetClassName(SourceTable.Name) %>Row) 
            End Get 
        End Property 
        
        Public Event <%= GetClassName(SourceTable.Name) %>RowChanged As <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler 
        Public Event <%= GetClassName(SourceTable.Name) %>RowChanging As <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler 
        Public Event <%= GetClassName(SourceTable.Name) %>RowDeleted As <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler 
        Public Event <%= GetClassName(SourceTable.Name) %>RowDeleting As <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler 
        
        Public Sub Add<%= GetClassName(SourceTable.Name) %>Row(ByVal row As <%= GetClassName(SourceTable.Name) %>Row) 
            Me.Rows.Add(row) 
        End Sub 
       
        Public Function Add<%= GetClassName(SourceTable.Name) %>Row( _
			<% FOR i =0 TO SourceTable.Columns.Count - 1 %>
				ByVal <%= GetCamelCaseName(SourceTable.Columns(i).Name) %> AS <%= DBTOVB(NativeToDB((DirectCast((SourceTable.Columns(i)),SchemaExplorer.ColumnSchema)).NativeType)) %><% IF i < SourceTable.Columns.Count - 1 THEN %>,<% END IF %> _
			<% NEXT %>) AS <%= GetClassName(SourceTable.Name) %>Row
            Dim row<%= GetClassName(SourceTable.Name) %>Row As <%= GetClassName(SourceTable.Name) %>Row = DirectCast((Me.NewRow()), <%= GetClassName(SourceTable.Name) %>Row) 
            <% FOR i = 0 TO SourceTable.Columns.Count - 1%>
				row<%= GetClassName(SourceTable.Name) %>Row("<%= SourceTable.Columns(i).Name %>") = <%= GetCamelCaseName(SourceTable.Columns(i).Name) %>
			<% NEXT %> 
            Me.Rows.Add(row<%= GetClassName(SourceTable.Name) %>Row) 
            Return row<%= GetClassName(SourceTable.Name) %>Row 
        End Function 
        
        <% IF (SourceTable.PrimaryKey.MemberColumns.Count = 1) THEN %>
			Public FUNCTION FindBy<%= SourceTable.PrimaryKey.MemberColumns(0).Name %>(ByVal <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns(0).Name) %> AS <%=  DBTOVB(NativeToDB(SourceTable.PrimaryKey.MemberColumns(0).NativeType)) %>) AS <%= GetClassName(SourceTable.Name) %>Row
				return (DirectCast((Me.Rows.Find(new object() {<%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns(0).Name) %>})),<%= GetClassName(SourceTable.Name) %>Row))
			END Function
			
		<%END IF%>
        
        Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator() 
        End Function 
        
        Public Overloads Overrides Function Clone() As DataTable 
            Dim cln As <%= GetClassName(SourceTable.Name) %>DataTable = DirectCast((MyBase.Clone()), <%= GetClassName(SourceTable.Name) %>DataTable) 
            cln.InitVars() 
            Return cln 
        End Function 
        
        Friend Sub InitVars() 
            <% FOR i = 0 TO SourceTable.Columns.Count  - 1%>
				_column<%= SourceTable.Columns(i).Name %> = Me.Columns("<%= SourceTable.Columns(i).Name %>")
			<% NEXT %> 
        End Sub 
        
        Public Sub InitClass() 
           <% FOR i = 0 TO SourceTable.Columns.Count - 1%>
				_column<%= SourceTable.Columns(i).Name %> = new DataColumn("<%= SourceTable.Columns(i).Name %>", GetType(<%= DBTOVB(NativeToDB(SourceTable.Columns(i).NativeType)) %>), "", MappingType.Element)
				_column<%= SourceTable.Columns(i).Name %>.AllowDBNull = <% IF (SourceTable.Columns(i).AllowDBNull) THEN %>true<%  Else %>false<% END IF %>
				_column<%= SourceTable.Columns(i).Name %>.Caption = "<%= GetSpacedName(SourceTable.Columns(i).Name) %>"
				<% IF (SizeMatters(SourceTable.Columns(i))AND DBTOVB(NativeToDB(SourceTable.Columns(i).NativeType)) = "String") THEN %>
				_column<%= SourceTable.Columns(i).Name %>.MaxLength = <%= SourceTable.Columns(i).Size %>
				<% END IF %>
				_column<%= SourceTable.Columns(i).Name %>.Unique = <% IF (SourceTable.PrimaryKey.MemberColumns.Count = 1 AND SourceTable.Columns(i).IsPrimaryKeyMember) THEN %>true<% Else %>false<% END IF %>
				_column<%= SourceTable.Columns(i).Name %>.DefaultValue = <%IF Not (DirectCast(SourceTable.Columns(i).ExtendedProperties("CS_IsIdentity").value,Boolean)) THEN %> Convert.DBNull <% ELSE %> Int32.MinValue <% END IF %>
				_column<%= SourceTable.Columns(i).Name %>.ExtendedProperties.Add("IsKey", "<% IF (SourceTable.Columns(i).IsPrimaryKeyMember) THEN %>true<%  Else %>false<% END IF %>")
				_column<%= SourceTable.Columns(i).Name %>.ExtendedProperties.Add("ReadOnly", "false")
				_column<%= SourceTable.Columns(i).Name %>.ExtendedProperties.Add("Description", "<%= GetSpacedName(SourceTable.Columns(i).Name) %>")
				<% IF (SizeMatters(SourceTable.Columns(i)) AND DBTOVB(NativeToDB(SourceTable.Columns(i).NativeType)) = "String")THEN %>
				_column<%= SourceTable.Columns(i).Name %>.ExtendedProperties.Add("Length", "<%= SourceTable.Columns(i).Size %>")
				<% END IF %>
				_column<%= SourceTable.Columns(i).Name %>.ExtendedProperties.Add("Decimals", "0")
				_column<%= SourceTable.Columns(i).Name %>.ExtendedProperties.Add("AllowDBNulls", "<% IF (SourceTable.Columns(i).AllowDBNull) THEN %>true<%  Else %>false<% END IF %>")
				Me.Columns.Add(_column<%= SourceTable.Columns(i).Name %>)
				
			<% NEXT %>
			<% IF (SourceTable.PrimaryKey.MemberColumns.Count = 1) THEN %>
				Me.PrimaryKey = new DataColumn() {_column<%= SourceTable.PrimaryKey.MemberColumns(0).Name %>}
			<% END IF %>
        End Sub 
        
        Public Function New<%= GetClassName(SourceTable.Name) %>Row() As <%= GetClassName(SourceTable.Name) %>Row 
            Dim row<%= GetClassName(SourceTable.Name) %>Row As <%= GetClassName(SourceTable.Name) %>Row = DirectCast((Me.NewRow()), <%= GetClassName(SourceTable.Name) %>Row) 
            Return row<%= GetClassName(SourceTable.Name) %>Row 
        End Function 
        
        Protected Overloads Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow 
            Return New <%= GetClassName(SourceTable.Name) %>Row(builder) 
        End Function 
        
        Protected Overloads Overrides Function GetRowType() As Type 
            Return GetType(<%= GetClassName(SourceTable.Name) %>Row) 
        End Function 
        
        Protected Overloads Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs) 
            MyBase.OnRowChanged(e) 
                RaiseEvent <%= GetClassName(SourceTable.Name) %>RowChanged(Me, New <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(DirectCast((e.Row), <%= GetClassName(SourceTable.Name) %>Row), e.Action)) 
        End Sub 
        
        Protected Overloads Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs) 
            MyBase.OnRowChanging(e)
                RaiseEvent <%= GetClassName(SourceTable.Name) %>RowChanging(Me, New <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(DirectCast((e.Row), <%= GetClassName(SourceTable.Name) %>Row), e.Action)) 
        End Sub 
        
        Protected Overloads Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs) 
            MyBase.OnRowDeleted(e) 
            RaiseEvent <%= GetClassName(SourceTable.Name) %>RowDeleted(Me, New <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(DirectCast((e.Row), <%= GetClassName(SourceTable.Name) %>Row), e.Action)) 
        End Sub 
        
        Protected Overloads Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs) 
            MyBase.OnRowDeleting(e) 
            RaiseEvent <%= GetClassName(SourceTable.Name) %>RowDeleting(Me, New <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(DirectCast((e.Row), <%= GetClassName(SourceTable.Name) %>Row), e.Action)) 
        End Sub 
        
        Public Sub Remove<%= GetClassName(SourceTable.Name) %>Row(ByVal row As <%= GetClassName(SourceTable.Name) %>Row) 
            Me.Rows.Remove(row) 
        End Sub 
    End Class 
   
    Public Class <%= GetClassName(SourceTable.Name) %>Row 
        Inherits DataRow 
        Private _table<%= GetClassName(SourceTable.Name) %> As <%= GetClassName(SourceTable.Name) %>DataTable 
        
        Friend Sub New(ByVal rb As DataRowBuilder) 
            MyBase.New(rb) 
            _table<%= GetClassName(SourceTable.Name) %> = DirectCast((Me.Table), <%= GetClassName(SourceTable.Name) %>DataTable) 
        End Sub 
        
    <% FOR i = 0 TO SourceTable.Columns.Count - 1%>
		''' <summary>
		''' Gets or sets the value of <%= SourceTable.Columns(i).Name %> property
		''' </summary>
		Public Property <%= SourceTable.Columns(i).Name %> As <%= DBTOVB(NativeToDB(SourceTable.Columns(i).NativeType)) %>
			get
				try
					return (DirectCast((Me(_table<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.Columns(i).Name %>Column)),<%= DBTOVB(NativeToDB(SourceTable.Columns(i).NativeType)) %>))
				catch exception AS InvalidCastException
					throw new StrongTypingException("Cannot get value <%= SourceTable.Columns(i).Name %> because it is DBNull.", exception)
				End Try
			End Get
			set
				Me(_table<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.Columns(i).Name %>Column) = value
			END SET
		End Property
			
		Public Function Is<%= SourceTable.Columns(i).Name %>Null() AS Boolean
			return Me.IsNull(_table<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.Columns(i).Name %>Column)
		END Function
			
		public Sub Set<%= SourceTable.Columns(i).Name %>Null()
			Me(_table<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.Columns(i).Name %>Column) = Convert.DBNull
		END SUB
			
	<% NEXT %>
    End Class 
    
    Public Class <%=GetClassName(SourceTable.Name)%>RowChangeEventArgs 
        Inherits EventArgs 
        Private _eventRow As <%=GetClassName(SourceTable.Name)%>Row 
        Private _eventAction As System.Data.DataRowAction 
        
        Public Sub New(ByVal row As <%=GetClassName(SourceTable.Name)%>Row, ByVal action As DataRowAction) 
            _eventRow = row 
            _eventAction = action 
        End Sub 
        
        Public ReadOnly Property Row() As <%=GetClassName(SourceTable.Name)%>Row 
            Get 
                Return _eventRow 
            End Get 
        End Property 
        
        Public ReadOnly Property Action() As DataRowAction 
            Get 
                Return _eventAction 
            End Get 
        End Property 
    End Class 
End Class 
#End Region 

#Region "<%=GetClassName(SourceTable.Name)%>DataAdapter" 
Public Class <%=GetClassName(SourceTable.Name)%>DataAdapter 
    Inherits MarshalByRefObject 
    Implements IDataAdapter 
    #Region "Member Variables" 
    Private _connection As IDbConnection 
    Private _transaction As IDbTransaction 
    Private _command As IDbCommand 
    Private _reader As IDataReader 
    Private _connectionTimeout As Integer = 30 
    Private _commandTimeout As Integer = 30 
    Private _connectionStringKey As String 
    Private _autoCloseConnection As Boolean = True 
    Private _autoCommitTransaction As Boolean = True 
    Private _convertEmptyValuesToDBNull As Boolean = True 
    'private IDataParameter() _fillDataParameters 
    #End Region 
    
    #Region "Constructors" 
    Public Sub New() 
        _connectionStringKey = "ConnectionString" 
    End Sub 
    
    Public Sub New(ByVal connectionStringKey As String) 
        _connectionStringKey = connectionStringKey + "_ConnectionString" 
    End Sub 
    
    Public Sub New(ByVal connection As IDbConnection) 
        Me.Connection = connection 
    End Sub 
    
    Public Sub New(ByVal transaction As IDbTransaction) 
        Me.Transaction = transaction 
    End Sub 
    #End Region 
    
    #Region "Properties" 
    Public Property Connection() As IDbConnection 
        Get 
            If _connection Is Nothing Then 
                _connection = New SqlConnection() 
                    '_connection.ConnectionTimeout = Me.ConnectionTimeout 
                _connection.ConnectionString = System.Configuration.ConfigurationManager.AppSettings(Me.ConnectionStringKey) 
            End If 
            Return _connection 
        End Get 
        Set 
            _connection = value 
            ' if the connection is passed in then it should be up to the owner to close the connection. 
            _autoCloseConnection = False 
        End Set 
    End Property 
    
    Public Property Transaction() As IDbTransaction 
        Get 
            Return _transaction 
        End Get 
        Set 
            _transaction = value 
            _connection = _transaction.Connection 
            ' if the connection is passed in then it should be up to the owner to close the connection. 
            _autoCloseConnection = False 
            ' if the transaction is passed in then it should be up to the owner of the transaction to commit. 
            _autoCommitTransaction = False 
        End Set 
    End Property 
    
    Public Property AutoCloseConnection() As Boolean 
        Get 
            Return _autoCloseConnection 
        End Get 
        Set 
            _autoCloseConnection = value 
        End Set 
    End Property 
    
    Public Property AutoCommitTransaction() As Boolean 
        Get 
            Return _autoCommitTransaction 
        End Get 
        Set 
            _autoCommitTransaction = value 
        End Set 
    End Property 
    
    Public Property ConvertEmptyValuesToDBNull() As Boolean 
        Get 
            Return _convertEmptyValuesToDBNull 
        End Get 
        Set 
            _convertEmptyValuesToDBNull = value 
        End Set 
    End Property 
    
    Public ReadOnly Property ConnectionStringKey() As String 
        Get 
            Return _connectionStringKey 
        End Get 
    End Property 
    
    Public Property ConnectionTimeout() As Integer 
        Get 
            Return _connectionTimeout 
        End Get 
        Set 
            _connectionTimeout = value 
        End Set 
    End Property 
    
    Public Property CommandTimeout() As Integer 
        Get 
            Return _commandTimeout 
        End Get 
        Set 
            _commandTimeout = value 
        End Set 
    End Property 
    
    Public Property MissingMappingAction() As MissingMappingAction Implements IDataAdapter.MissingMappingAction
        Get 
            Return MissingMappingAction.Passthrough 
        End Get 
        Set 
        End Set 
    End Property 
    
    Public Property MissingSchemaAction() As MissingSchemaAction Implements IDataAdapter.MissingSchemaAction
        Get 
            Return MissingSchemaAction.Ignore 
        End Get 
        Set 
        End Set 
    End Property 
    
    Public ReadOnly Property TableMappings() As ITableMappingCollection Implements IDataAdapter.TableMappings
        Get 
            Dim tableMaps As System.Data.Common.DataTableMappingCollection 
            tableMaps = New System.Data.Common.DataTableMappingCollection() 
            Return tableMaps 
        End Get 
    End Property 
    #End Region 
    
    #Region "Helper Methods" 
    Private Function GetCommand() As IDbCommand 
        If Me.Connection IsNot Nothing Then 
            _command = Me.Connection.CreateCommand() 
            _command.CommandTimeout = Me.CommandTimeout 
            _command.CommandType = CommandType.Text 
            _command.Connection = Me.Connection 
            If _transaction IsNot Nothing Then 
                _command.Transaction = _transaction 
            End If 
            
            Return _command 
        Else 
            Throw New InvalidOperationException("You must have a valid Connection object before calling GetCommand.") 
        End If 
    End Function 
    
    Private Sub OpenConnection() 
        If Me.Connection IsNot Nothing Then 
            If Me.Connection.State = ConnectionState.Closed Then 
                _connection.Open() 
            End If 
        Else 
            Throw New InvalidOperationException("You must have a valid Connection object before calling GetCommand.") 
        End If 
    End Sub 
    
    Private Sub Cleanup() 
        Try 
            If _reader IsNot Nothing Then 
                If Not _reader.IsClosed Then 
                    _reader.Close() 
                End If 
                _reader.Dispose() 
                _reader = Nothing 
            End If 
            
            If _command IsNot Nothing Then 
                _command.Dispose() 
                _command = Nothing 
            End If 
            
            If _connection IsNot Nothing AndAlso Me.AutoCloseConnection = True Then 
                If _connection.State = ConnectionState.Open Then 
                    _connection.Close() 
                End If 
                _connection.Dispose() 
                _connection = Nothing 
            End If 
        Catch 
        End Try 
    End Sub 
    #End Region 
    
    #Region "CreateParameter" 
    Public Function CreateParameter(ByVal name As String, ByVal type As DbType, ByVal value As Object) As IDbDataParameter 
        Dim prm As IDbDataParameter = _command.CreateParameter() 
        prm.Direction = ParameterDirection.Input 
        prm.ParameterName = name 
        prm.DbType = type 
        prm.Value = Me.PrepareParameterValue(value) 
        
        Return prm 
    End Function 
    
    Public Function CreateParameter(ByVal name As String, ByVal type As DbType, ByVal value As Object, ByVal size As Integer) As IDbDataParameter 
        Dim prm As IDbDataParameter = _command.CreateParameter() 
        prm.Direction = ParameterDirection.Input 
        prm.ParameterName = name 
        prm.DbType = type 
        prm.Size = size 
        prm.Value = Me.PrepareParameterValue(value) 
        
        Return prm 
    End Function 
    
    Public Function CreateParameter(ByVal name As String, ByVal type As DbType, ByVal value As Object, ByVal direction As ParameterDirection) As IDbDataParameter 
        Dim prm As IDbDataParameter = _command.CreateParameter() 
        prm.Direction = direction 
        prm.ParameterName = name 
        prm.DbType = type 
        prm.Value = Me.PrepareParameterValue(value) 
        
        Return prm 
    End Function 
    
    Public Function CreateParameter(ByVal name As String, ByVal type As DbType, ByVal value As Object, ByVal size As Integer, ByVal direction As ParameterDirection) As IDbDataParameter 
        Dim prm As IDbDataParameter = _command.CreateParameter() 
        prm.Direction = direction 
        prm.ParameterName = name 
        prm.DbType = type 
        prm.Size = size 
        prm.Value = Me.PrepareParameterValue(value) 
        
        Return prm 
    End Function 
    
    Private Function PrepareParameterValue(ByVal value As Object) As Object 
        Return PrepareParameterValue(value, False) 
    End Function 
    
    Private Function PrepareParameterValue(ByVal value As Object, ByVal convertZeroToDBNull As Boolean) As Object 
        If Not _convertEmptyValuesToDBNull Then 
            Return value 
        End If 
        
        Select Case value.GetType().ToString() 
            Case "System.String" 
                If Convert.ToString(value) = [String].Empty Then 
                    Return DBNull.Value 
                Else 
                    Return value 
                End If 
            Case "System.Guid" 
                If New Guid(Convert.ToString(value)) = Guid.Empty Then 
                    Return DBNull.Value 
                Else 
                    Return value 
                End If 
            Case "System.DateTime" 
                If Convert.ToDateTime(value) = DateTime.MinValue Then 
                    Return DBNull.Value 
                Else 
                    Return value 
                End If 
            Case "System.Int16" 
                If Convert.ToInt16(value) = 0 Then 
                    If convertZeroToDBNull Then 
                        Return DBNull.Value 
                    Else 
                        Return value 
                    End If 
                Else 
                    Return value 
                End If 
            Case "System.Int32" 
                If Convert.ToInt32(value) = 0 Then 
                    If convertZeroToDBNull Then 
                        Return DBNull.Value 
                    Else 
                        Return value 
                    End If 
                Else 
                    Return value 
                End If 
            Case "System.Int64" 
                If Convert.ToInt64(value) = 0 Then 
                    If convertZeroToDBNull Then 
                        Return DBNull.Value 
                    Else 
                        Return value 
                    End If 
                Else 
                    Return value 
                End If 
            Case "System.Single" 
                If Convert.ToSingle(value) = 0 Then 
                    If convertZeroToDBNull Then 
                        Return DBNull.Value 
                    Else 
                        Return value 
                    End If 
                Else 
                    Return value 
                End If 
            Case "System.Double" 
                If Convert.ToDouble(value) = 0 Then 
                    If convertZeroToDBNull Then 
                        Return DBNull.Value 
                    Else 
                        Return value 
                    End If 
                Else 
                    Return value 
                End If 
            Case "System.Decimal" 
                If Convert.ToDecimal(value) = 0 Then 
                    If convertZeroToDBNull Then 
                        Return DBNull.Value 
                    Else 
                        Return value 
                    End If 
                Else 
                    Return value 
                End If 
            Case Else 
                Return value 
        End Select 
    End Function 
    #End Region 
    
    #Region "Fill Methods" 
    <% Dim methods AS NEW ArrayList %>
    Public Function FillSchema(ByVal dataSet As DataSet, ByVal schemaType As SchemaType) As DataTable() Implements IDataAdapter.FillSchema
        Dim dataTables As DataTable() 
        dataTables = New DataTable(dataSet.Tables.Count - 1) {} 
        dataSet.Tables.CopyTo(dataTables, dataSet.Tables.Count) 
        Return dataTables 
    End Function 
    
    Public Function Fill(ByVal dataSet As <%=GetClassName(SourceTable.Name)%>DataSet, ByVal dataRecord As IDataRecord) As Integer 
        Return Fill(dataSet, <% For  i = 0 TO SourceTable.PrimaryKey.MemberColumns.Count - 1 %>DirectCast(dataRecord("<%= SourceTable.PrimaryKey.MemberColumns(i).Name %>"),<%= DBTOVB(NativeToDB(SourceTable.PrimaryKey.MemberColumns(i).NativeType)) %>)<% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) Then %>, <% END IF %><% NEXT %>)
    End Function 
    
    Public Function Fill(ByVal dataSet As <%=GetClassName(SourceTable.Name)%>DataSet, ByVal dataRow As DataRow) As Integer 
        Return Fill(dataSet, <% For  i = 0 TO SourceTable.PrimaryKey.MemberColumns.Count - 1 %>DirectCast(dataRow("<%= SourceTable.PrimaryKey.MemberColumns(i).Name %>"),<%= DBTOVB(NativeToDB(SourceTable.PrimaryKey.MemberColumns(i).NativeType)) %>)<% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) Then %>, <% END IF %><% NEXT %>) 
    End Function 
    
    Public Function Fill(ByVal dataSet As <%=GetClassName(SourceTable.Name)%>DataSet, <% FOR i = 0 TO SourceTable.PrimaryKey.MemberColumns.Count - 1 %> ByVal <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns(i).Name) %> AS <%= DBTOVB(NativeToDB(SourceTable.PrimaryKey.MemberColumns(i).NativeType)) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) THEN %>, <% END IF %><% NEXT %>) As Integer 
        Try 
            _command = Me.GetCommand() 
            _command.CommandText = _
					"SELECT " & _
						<% For i = 0 TO SourceTable.Columns.Count - 1 %>
						"[<%= SourceTable.Columns(i).Name %>]<% IF (i < SourceTable.Columns.Count - 1) THEN %>,<% END IF %>" & _
						<% NEXT %>
					"FROM " & _
						"[<%= GetClassName(SourceTable.Name) %>]" & _
					" WHERE " & _
						<% FOR i = 0 TO SourceTable.PrimaryKey.MemberColumns.Count - 1 %>
						"[<%= SourceTable.PrimaryKey.MemberColumns(i).Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns(i).Name %><% IF (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) THEN %>,<% END IF %>" & _
						<% NEXT %>
           <% FOR i = 0 TO SourceTable.PrimaryKey.MemberColumns.Count - 1 %>
				_command.Parameters.Add(Me.CreateParameter("@<%= SourceTable.PrimaryKey.MemberColumns(i).Name %>", DbType.<%= NativeToDB(SourceTable.PrimaryKey.MemberColumns(i).NativeType)%>, <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns(i).Name) %>))
			<% NEXT %>
            Me.OpenConnection() 
            _reader = _command.ExecuteReader(CommandBehavior.CloseConnection Or CommandBehavior.SingleResult Or CommandBehavior.SingleRow) 
            If _reader.Read() Then 
                Dim row As <%=GetClassName(SourceTable.Name)%>DataSet.<%=GetClassName(SourceTable.Name)%>Row = dataSet.<%=GetClassName(SourceTable.Name)%>.New<%=GetClassName(SourceTable.Name)%>Row() 
                Me.Populate<%=GetClassName(SourceTable.Name)%>DataRow(_reader, row) 
                dataSet.<%=GetClassName(SourceTable.Name)%>.Add<%=GetClassName(SourceTable.Name)%>Row(row) 
                dataSet.AcceptChanges() 
                
                Return 1 
            Else 
                Throw New <%=GetClassName(SourceTable.Name)%>NotFoundException() 
            End If 
        Catch e As Exception 
            System.Diagnostics.Debug.WriteLine(e.ToString()) 
            Return 0 
        Finally 
            Me.Cleanup() 
        End Try 
    End Function 
    
    Private Sub Populate<%=GetClassName(SourceTable.Name)%>DataRow(ByVal reader As IDataReader, ByVal row As <%=GetClassName(SourceTable.Name)%>DataSet.<%=GetClassName(SourceTable.Name)%>Row) 
        <% For i = 0 TO SourceTable.Columns.Count - 1 %>
			IF NOT reader.IsDBNull(<%= i %>) THEN 
			row.<%= SourceTable.Columns(i).Name %> = reader.<%= GetReaderMethod(SourceTable.Columns(i)) %>(<%= i %>) 
			END IF
		<% NEXT %>
    End Sub 
    
    Public Function Fill(ByVal dataSet As DataSet) As Integer Implements IDataAdapter.Fill
        Dim pageDataSet As <%=GetClassName(SourceTable.Name)%>DataSet = TryCast(dataSet, <%=GetClassName(SourceTable.Name)%>DataSet) 
        If pageDataSet IsNot Nothing Then 
            Return Me.Fill(pageDataSet) 
        Else 
            Throw New ApplicationException() 
        End If 
    End Function 
    
    Public Function Fill(ByVal dataSet As <%=GetClassName(SourceTable.Name)%>DataSet, ByVal columns As String(), ByVal values As String(), ByVal types As DbType()) As Integer 
        Try 
            Dim recordcount As Integer = 0 
            _command = Me.GetCommand() 
            _command.CommandText = _
					"SELECT " & _
						<% For i = 0 TO SourceTable.Columns.Count - 1 %>
						"[<%= SourceTable.Columns(i).Name %>]<% if (i < SourceTable.Columns.Count - 1) THEN %>,<% END IF %> " & _
						<% NEXT %>
					"FROM " & _
						"[<%= GetClassName(SourceTable.Name) %>]" & _
					" WHERE "
            For i As Integer = 0 To columns.Length - 1 
                
                _command.CommandText += columns(i) + " = " + (IF(types(i) = DbType.AnsiString,"'" + values(i) + "'",values(i))) 
                If i < columns.Length - 1 Then 
                    _command.CommandText += " AND " 
                End If 
            Next 
            For i As Integer = 0 To columns.Length - 1 
                _command.Parameters.Add(Me.CreateParameter("@" + columns(i), types(i), columns(i))) 
            Next 
            Me.OpenConnection() 
            _reader = _command.ExecuteReader(CommandBehavior.CloseConnection Or CommandBehavior.SingleResult) 
            While _reader.Read() 
                Dim row As <%=GetClassName(SourceTable.Name)%>DataSet.<%=GetClassName(SourceTable.Name)%>Row = dataSet.<%=GetClassName(SourceTable.Name)%>.New<%=GetClassName(SourceTable.Name)%>Row() 
                Me.Populate<%=GetClassName(SourceTable.Name)%>DataRow(_reader, row) 
                dataSet.<%=GetClassName(SourceTable.Name)%>.Add<%=GetClassName(SourceTable.Name)%>Row(row) 
                
                recordcount += 1 
            End While 
            dataSet.AcceptChanges() 
            
            Return recordcount 
        Catch e As Exception 
            System.Diagnostics.Debug.WriteLine(e.ToString()) 
            Return 0 
        Finally 
            Me.Cleanup() 
        End Try 
    End Function 
    
    Public Function Fill(ByVal dataSet As <%=GetClassName(SourceTable.Name)%>DataSet) As Integer 
        Try 
            Dim recordcount As Integer = 0 
            _command = Me.GetCommand() 
            _command.CommandText = _
					"SELECT " & _
						<% FOR i = 0 TO SourceTable.Columns.Count - 1 %>
						"[<%= SourceTable.Columns(i).Name %>]<% if (i < SourceTable.Columns.Count - 1) THEN %>,<% END IF %>" & _
						<% NEXT %>
					"FROM " & _
						"[<%= GetClassName(SourceTable.Name) %>]"
            Me.OpenConnection() 
            _reader = _command.ExecuteReader(CommandBehavior.CloseConnection Or CommandBehavior.SingleResult) 
            While _reader.Read() 
                Dim row As <%=GetClassName(SourceTable.Name)%>DataSet.<%=GetClassName(SourceTable.Name)%>Row = dataSet.<%=GetClassName(SourceTable.Name)%>.New<%=GetClassName(SourceTable.Name)%>Row() 
                Me.Populate<%=GetClassName(SourceTable.Name)%>DataRow(_reader, row) 
                dataSet.<%=GetClassName(SourceTable.Name)%>.Add<%=GetClassName(SourceTable.Name)%>Row(row) 
                
                recordcount += 1 
            End While 
            dataSet.AcceptChanges() 
            
            Return recordcount 
        Catch e As Exception 
            System.Diagnostics.Debug.WriteLine(e.ToString()) 
            Return 0 
        Finally 
            Me.Cleanup() 
        End Try 
    End Function 
	<% Dim j AS Integer %>
    <% For i = 0 To SourceTable.Indexes.Count - 1  %>
		<% IF  NOT methods.Contains(GetFillByIndexName(SourceTable.Indexes(i))) THEN %>
		<% methods.Add(GetFillByIndexName(SourceTable.Indexes(i))) %>
		Public Function <%= GetFillByIndexName(SourceTable.Indexes(i)) %>(ByVal dataSet As <%= GetClassName(SourceTable.Name) %>DataSet, <%= GetFillByIndexParameters(SourceTable.Indexes(i)) %>) AS Integer
			Try
				DIM recordcount AS INTEGER = 0
				_command = Me.GetCommand()
				_command.CommandText = _
					"SELECT " & _
						<% FOR j = 0 TO SourceTable.Columns.Count - 1 %>
						"[<%= SourceTable.Columns(j).Name %>]<% IF (j < SourceTable.Columns.Count - 1) THEN %>,<% END IF %>" & _
						<% NEXT %>
					"FROM " & _
						"[<%= GetClassName(SourceTable.Name) %>] " & _
					" WHERE" & _
						<% FOR j = 0 TO SourceTable.Indexes(i).MemberColumns.Count - 1 %>
						"<% IF (j > 0) THEN %> AND <% END IF %>[<%= SourceTable.Indexes(i).MemberColumns(j).Name %>] = @<%= SourceTable.Indexes(i).MemberColumns(j).Name %>" & _
						<% NEXT %>
					" "
				<% FOR j = 0 TO SourceTable.Indexes(i).MemberColumns.Count - 1%>
				_command.Parameters.Add(Me.CreateParameter("@<%= SourceTable.Indexes(i).MemberColumns(j).Name %>", DbType.<%= NativeToDB(SourceTable.Indexes(i).MemberColumns(j).NativeType) %>, <%= GetCamelCaseName(SourceTable.Indexes(i).MemberColumns(j).Name) %>))
				<% NEXT %>
				Me.OpenConnection()
				_reader = _command.ExecuteReader(CommandBehavior.CloseConnection OR CommandBehavior.SingleResult)
				while (_reader.Read())
					Dim row AS <%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row = dataSet.<%= GetClassName(SourceTable.Name) %>.New<%= GetClassName(SourceTable.Name) %>Row()
					Me.Populate<%= GetClassName(SourceTable.Name) %>DataRow(_reader, row)
					dataSet.<%= GetClassName(SourceTable.Name) %>.Add<%= GetClassName(SourceTable.Name) %>Row(row)
					
					recordcount += 1
				END While
	
				dataSet.AcceptChanges()
				
				return recordcount
			
			CATCH e AS Exception
				System.Diagnostics.Debug.WriteLine(e.ToString())
				return 0
			
			FINALLY
				Me.Cleanup()
			END TRY
		END FUNCTION
		<% END IF %>
		<% NEXT %>
		
		<% FOR i = 0 TO SourceTable.ForeignKeys.Count - 1 %>
		<% IF  NOT methods.Contains("FillBy" + SourceTable.ForeignKeyColumns(i).Name) THEN %> 
		<% methods.Add("FillBy" + SourceTable.ForeignKeyColumns(i).Name) %>
		PUBLIC FUNCTION FillBy<%=SourceTable.ForeignKeyColumns(i).Name %> (ByVal dataSet AS <%= GetClassName(SourceTable.Name) %>DataSet, <%= DBTOVB(NativeToDB(SourceTable.ForeignKeyColumns(i).NativeType))%> <%=SourceTable.ForeignKeyColumns(i).Name%>) AS INTEGER
			TRY
				int recordcount = 0
				_command = Me.GetCommand()
				_command.CommandText = _
					"SELECT " &_
						<% FOR j = 0 TO SourceTable.Columns.Count - 1 %>
						"[<%= SourceTable.Columns(j).Name %>]<% if (j < SourceTable.Columns.Count - 1) THEN %>,<% END IF %>" & _
						<% NEXT %>
					"FROM " & _
						"[<%= GetClassName(SourceTable.Name) %>]" & _
					" WHERE " & _
						<% FOR j = 0 TO SourceTable.ForeignKeys(i).ForeignKeyMemberColumns.Count - 1 %>
						"<% if (j > 0) THEN %>AND <% END IF %>[<%= SourceTable.ForeignKeys(i).ForeignKeyMemberColumns(j).Name %>] = @<%= SourceTable.ForeignKeys(i).ForeignKeyMemberColumns(j).Name %>" & _
						<% NEXT %>
				
				<% FOR j = 0 TO SourceTable.ForeignKeys(i).ForeignKeyMemberColumns.Count - 1%>
				_command.Parameters.Add(Me.CreateParameter("@<%= SourceTable.ForeignKeys(i).ForeignKeyMemberColumns(j).Name %>", DbType.<%= SourceTable.ForeignKeys(i).ForeignKeyMemberColumns(j).NativeType %>, <%= GetCamelCaseName(SourceTable.ForeignKeys(i).ForeignKeyMemberColumns(j).Name) %>)) _
				<% NEXT %>
				Me.OpenConnection()
				_reader = _command.ExecuteReader(CommandBehavior.CloseConnection | CommandBehavior.SingleResult)
				while (_reader.Read())
				{
					<%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row row = dataSet.<%= GetClassName(SourceTable.Name) %>.New<%= GetClassName(SourceTable.Name) %>Row()
					Me.Populate<%= GetClassName(SourceTable.Name) %>DataRow(_reader, row)
					dataSet.<%= GetClassName(SourceTable.Name) %>.Add<%= GetClassName(SourceTable.Name) %>Row(row)
					
					recordcount++
				}
				dataSet.AcceptChanges()
				
				return recordcount
			END TRY
			CATCH (Exception e)
				System.Diagnostics.Debug.WriteLine(e.ToString())
				return 0
			END CATCH
			FINALLY
				Me.Cleanup()
			END FINALLY
		FUNCTION
		<% END IF %>
    	<% NEXT %>
    Public Function GetFillParameters() As IDataParameter() Implements IDataAdapter.GetFillParameters
        ' not sure if I should create a <%=GetClassName(SourceTable.Name)%>Id parameter here or not. 
        Return Nothing 
        '_fillDataParameters 
    End Function 
    #End Region 
    
    #Region "Update Methods" 
    Public Function Update(ByVal dataSet As DataSet) As Integer Implements IDataAdapter.Update
        Dim pageDataSet As <%=GetClassName(SourceTable.Name)%>DataSet = TryCast(dataSet, <%=GetClassName(SourceTable.Name)%>DataSet) 
        If pageDataSet IsNot Nothing Then 
            Return Me.Update(pageDataSet) 
        Else 
            Throw New ApplicationException() 
        End If 
    End Function 
    
    Public Function Update(ByVal dataSet As <%=GetClassName(SourceTable.Name)%>DataSet) As Integer 
        If dataSet IsNot Nothing Then 
            Try 
                Dim updatedRowCount As Integer = 0 
                
                For Each row As <%=GetClassName(SourceTable.Name)%>DataSet.<%=GetClassName(SourceTable.Name)%>Row In dataSet.<%=GetClassName(SourceTable.Name)%> 
                    Select Case row.RowState 
                        Case DataRowState.Added 
                            On<%=GetClassName(SourceTable.Name)%>Updating(New <%=GetClassName(SourceTable.Name)%>EventArgs(row, StatementType.Insert)) 
                            _command = Me.GetCommand() 
                            _command.CommandText = _
								"INSERT INTO [<%= GetClassName(SourceTable.Name) %>] ( " & _
								<% FOR i = 0 TO SourceTable.Columns.Count - 1 %>
								<% if DirectCast(SourceTable.Columns(i).ExtendedProperties("CS_IsIdentity").Value,Boolean) = false THEN %>
								"[<%= SourceTable.Columns(i).Name %>]<% IF (i < SourceTable.Columns.Count - 1) THEN %>,<% END IF %> " & _
								<% END IF %>
								<% NEXT %>
								") VALUES ( " & _
								<% FOR i = 0 TO SourceTable.Columns.Count - 1 %>
								<% IF DirectCast(SourceTable.Columns(i).ExtendedProperties("CS_IsIdentity").Value,Boolean) = false THEN %>
								"@<%= SourceTable.Columns(i).Name %><% if (i < SourceTable.Columns.Count - 1) THEN %>,<% END IF %>" & _
								<% END IF %>
								<% NEXT %>
								")"
								
								<% FOR i = 0 TO SourceTable.Columns.Count - 1 %>
								<% IF DirectCast(SourceTable.Columns(i).ExtendedProperties("CS_IsIdentity").Value, Boolean) = false THEN %>
								_command.Parameters.Add(Me.CreateParameter("@<%= SourceTable.Columns(i).Name %>", DbType.<%= NativeToDB(SourceTable.Columns(i).NativeType) %>, IF(row.Is<%= SourceTable.Columns(i).Name %>Null() , DirectCast(DBNull.Value,Object) , DirectCast(row.<%= SourceTable.Columns(i).Name %>,Object))))
								<% END IF %>
								<% NEXT %>
                            Me.OpenConnection() 
                            _command.ExecuteNonQuery() 
                            On<%=GetClassName(SourceTable.Name)%>Updated(New <%=GetClassName(SourceTable.Name)%>EventArgs(row, StatementType.Insert)) 
                            
                            updatedRowCount += 1 
                            Exit Select 
                        Case DataRowState.Modified 
                            On<%=GetClassName(SourceTable.Name)%>Updating(New <%=GetClassName(SourceTable.Name)%>EventArgs(row, StatementType.Update)) 
                            _command = Me.GetCommand() 
                            _command.CommandText = _
									"UPDATE [<%= GetClassName(SourceTable.Name) %>] SET " & _
										<% For i = 0 To SourceTable.NonPrimaryKeyColumns.Count - 1 %>
										"[<%= SourceTable.NonPrimaryKeyColumns(i).Name %>] = @<%= SourceTable.NonPrimaryKeyColumns(i).Name %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) Then %>,<% END IF %>" & _
										<% NEXT %>
									" WHERE " & _
										<% For i = 0 To SourceTable.PrimaryKey.MemberColumns.Count - 1 %>
										"[<%= SourceTable.PrimaryKey.MemberColumns(i).Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns(i).Name %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) THEN %>,<% END IF %>" & _
										<% NEXT %>
										" "
								<% FOR i = 0 TO SourceTable.Columns.Count - 1 %>
								_command.Parameters.Add(Me.CreateParameter("@<%= SourceTable.Columns(i).Name %>", DbType.<%= NativeToDB(SourceTable.Columns(i).NativeType) %>, IF(row.Is<%= SourceTable.Columns(i).Name %>Null() , DirectCast(DBNull.Value,Object) , DirectCast(row.<%= SourceTable.Columns(i).Name %>,Object))))
								<% Next %>
                            Me.OpenConnection() 
                            _command.ExecuteNonQuery() 
                            On<%=GetClassName(SourceTable.Name)%>Updated(New <%=GetClassName(SourceTable.Name)%>EventArgs(row, StatementType.Update)) 
                            
                            updatedRowCount += 1 
                            Exit Select 
                        Case DataRowState.Deleted 
                            On<%=GetClassName(SourceTable.Name)%>Updating(New <%=GetClassName(SourceTable.Name)%>EventArgs(row, StatementType.Delete)) 
                            _command = Me.GetCommand() 
                            _command.CommandText = _
									"DELETE FROM [<%= GetClassName(SourceTable.Name) %>]" & _
									" WHERE " & _
										<% For i = 0 TO SourceTable.PrimaryKey.MemberColumns.Count - 1%>
										"[<%= SourceTable.PrimaryKey.MemberColumns(i).Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns(i).Name %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) THEN %>,<% END IF %>" & _
										<% NEXT %>
									" "
								<% FOR i = 0 TO SourceTable.PrimaryKey.MemberColumns.Count- 1 %>
								_command.Parameters.Add(Me.CreateParameter("@<%= SourceTable.PrimaryKey.MemberColumns(i).Name %>", DbType.<%= NativeToDB(SourceTable.PrimaryKey.MemberColumns(i).NativeType) %>, row(dataSet.<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.PrimaryKey.MemberColumns(i).Name %>Column, DataRowVersion.Original)))
								<% NEXT %>
                            Me.OpenConnection() 
                            _command.ExecuteNonQuery() 
                            On<%=GetClassName(SourceTable.Name)%>Updated(New <%=GetClassName(SourceTable.Name)%>EventArgs(row, StatementType.Delete)) 
                            
                            updatedRowCount += 1 
                            Exit Select 
                    End Select 
                Next 
                dataSet.AcceptChanges() 
                
                Return updatedRowCount 
            Catch e As Exception 
                System.Diagnostics.Debug.WriteLine(e.ToString()) 
                Return 0 
            Finally 
                Me.Cleanup() 
            End Try 
        Else 
            Me.Cleanup() 
            Throw New ArgumentException("DataSet null") 
        End If 
    End Function 
    #End Region 
    
    #Region "Events" 
    Public Delegate Sub <%=GetClassName(SourceTable.Name)%>UpdateEventHandler(ByVal sender As Object, ByVal e As <%=GetClassName(SourceTable.Name)%>EventArgs) 
    
    Public Event <%=GetClassName(SourceTable.Name)%>Updated As <%=GetClassName(SourceTable.Name)%>UpdateEventHandler 
    Private Sub On<%=GetClassName(SourceTable.Name)%>Updated(ByVal e As <%=GetClassName(SourceTable.Name)%>EventArgs)  
        RaiseEvent <%=GetClassName(SourceTable.Name)%>Updated(Me, e) 
    End Sub 
    
    Public Event <%=GetClassName(SourceTable.Name)%>Updating As <%=GetClassName(SourceTable.Name)%>UpdateEventHandler 
    Private Sub On<%=GetClassName(SourceTable.Name)%>Updating(ByVal e As <%=GetClassName(SourceTable.Name)%>EventArgs) 
      	RaiseEvent <%=GetClassName(SourceTable.Name)%>Updating(Me, e) 
    End Sub 
    
    Public Class <%=GetClassName(SourceTable.Name)%>EventArgs 
        Inherits EventArgs 
        Private _statementType As StatementType 
        Private _dataRow As <%=GetClassName(SourceTable.Name)%>DataSet.<%=GetClassName(SourceTable.Name)%>Row 
        
        Public Sub New(ByVal row As <%=GetClassName(SourceTable.Name)%>DataSet.<%=GetClassName(SourceTable.Name)%>Row, ByVal statementType As StatementType) 
            _dataRow = row 
            _statementType = statementType 
        End Sub 
        
        Public ReadOnly Property StatementType() As StatementType 
            Get 
                Return _statementType 
            End Get 
        End Property 
        
        
        Public Property Row() As <%=GetClassName(SourceTable.Name)%>DataSet.<%=GetClassName(SourceTable.Name)%>Row 
            Get 
                Return _dataRow 
            End Get 
            Set 
                _dataRow = value 
            End Set 
        End Property 
    End Class 
    #End Region 
    
    #Region "Custom Exceptions" 
    <Serializable()> _ 
    Public Class <%=GetClassName(SourceTable.Name)%>NotFoundException 
        Inherits ApplicationException 
        Public Sub New() 
        End Sub 
        
        Public Sub New(ByVal message As String) 
            MyBase.New(message) 
        End Sub 
        
        Public Sub New(ByVal message As String, ByVal inner As Exception) 
            MyBase.New(message, inner) 
        End Sub 
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext) 
            MyBase.New(info, context) 
        End Sub 
    End Class 
    
    <Serializable()> _ 
    Public Class ForeignKeyNotFoundException 
        Inherits ApplicationException 
        Public Sub New() 
        End Sub 
        
        Public Sub New(ByVal message As String) 
            MyBase.New(message) 
        End Sub 
        
        Public Sub New(ByVal message As String, ByVal inner As Exception) 
            MyBase.New(message, inner) 
        End Sub 
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext) 
            MyBase.New(info, context) 
        End Sub 
    End Class 
    
    <Serializable()> _ 
    Public Class <%=GetClassName(SourceTable.Name)%>DataLockedException 
        Inherits ApplicationException 
        Public Sub New() 
        End Sub 
        
        Public Sub New(ByVal message As String) 
            MyBase.New(message) 
        End Sub 
        
        Public Sub New(ByVal message As String, ByVal inner As Exception) 
            MyBase.New(message, inner) 
        End Sub 
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext) 
            MyBase.New(info, context) 
        End Sub 
    End Class 
    
    <Serializable()> _ 
    Public Class <%=GetClassName(SourceTable.Name)%>DataChangedException 
        Inherits ApplicationException 
        Public Sub New() 
        End Sub 
        
        Public Sub New(ByVal message As String) 
            MyBase.New(message) 
        End Sub 
        
        Public Sub New(ByVal message As String, ByVal inner As Exception) 
            MyBase.New(message, inner) 
        End Sub 
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext) 
            MyBase.New(info, context) 
        End Sub 
    End Class 
    
    <Serializable()> _ 
    Public Class <%=GetClassName(SourceTable.Name)%>DuplicateKeyException 
        Inherits ApplicationException 
        Public Sub New() 
        End Sub 
        
        Public Sub New(ByVal message As String) 
            MyBase.New(message) 
        End Sub 
        
        Public Sub New(ByVal message As String, ByVal inner As Exception) 
            MyBase.New(message, inner) 
        End Sub 
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext) 
            MyBase.New(info, context) 
        End Sub 
    End Class 
    
    <Serializable()> _ 
    Public Class <%=GetClassName(SourceTable.Name)%>DataDeletedException 
        Inherits ApplicationException 
        Public Sub New() 
        End Sub 
        
        Public Sub New(ByVal message As String) 
            MyBase.New(message) 
        End Sub 
        
        Public Sub New(ByVal message As String, ByVal inner As Exception) 
            MyBase.New(message, inner) 
        End Sub 
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext) 
            MyBase.New(info, context) 
        End Sub 
    End Class 
    #End Region 
End Class 
#End Region 

<%
if NOT String.IsNullOrEmpty(Me.ClassNamespace) THEN
	Response.WriteLine("END NAMESPACE")
END IF
%>