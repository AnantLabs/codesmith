
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Data.Linq
Imports System.Data.SqlTypes
Imports System.Linq
Imports System.Text
Imports CodeSmith.Data
Imports CodeSmith.Data.Rules
Imports CodeSmith.Data.Rules.Assign
Imports CodeSmith.Data.Rules.Validation

Namespace Petshop.Data
    ''' <summary>
    ''' The manager class for Profiles.
    ''' </summary>
    Partial Public Class ProfilesManager 
    Inherits EntityManagerBase(Of PetshopDataManager,Profiles)
        ''' <summary>
        ''' Initializes the <see cref="ProfilesManager"/> class.
        ''' </summary>
        Shared Sub New()
            RuleManager.AddShared(Of Profiles )(GetType(PetshopDataContext))
            
            AddRules()
            
        End Sub

        ''' <summary>
        ''' Initializes the <see cref="ProfilesManager"/> class.
        ''' </summary>
        ''' <param name="manager">The current manager.</param>
        Public Sub New(ByVal manager As PetshopDataManager) 
            MyBase.New(manager)
            OnCreated()
        End Sub

        ''' <summary>
        ''' Gets the current context.
        ''' </summary>
        Protected ReadOnly Property Context As PetshopDataContext
            Get
                return Manager.Context
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the entity for this manager.
        ''' </summary>
        Protected ReadOnly Property Entity As Table(Of Profiles)
            Get 
                return Manager.Context.Profiles
            End Get
        End Property
        
        
        ''' <summary>
        ''' Creates the key for this entity.
        ''' </summary>
        Public Shared Function CreateKey(uniqueID As Integer) As IEntityKey(Of Integer)
            Return New EntityKey(Of Integer)(uniqueID)
        End Function
        
        ''' <summary>
        ''' Gets an entity by the primary key.
        ''' </summary>
        ''' <param name="key">The key for the entity.</param>
        ''' <returns>
        ''' An instance of the entity or null if not found.
        ''' </returns>
        ''' <remarks>
        ''' This method is expecting key to be of type IEntityKey(Of Integer).
        ''' </remarks>
        ''' <exception cref="ArgumentException">Thrown when key is not of type IEntityKey(Of Integer).</exception>
        Public Overrides Function GetByKey(ByVal key As IEntityKey) As Profiles
            If (key Is GetType(IEntityKey(Of Integer))) Then
                Dim entityKey As IEntityKey(Of Integer) = DirectCast(key,IEntityKey(Of Integer))
                return GetByKey(entityKey.Key)
            Else
                Throw New ArgumentException("Invalid key, expected key to be of type IEntityKey(Of Integer)")
            End If
        End Function
        
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        Public Overloads Function GetByKey(uniqueID As Integer) As Profiles
            If (Context.LoadOptions Is Nothing) Then 
                return Query.GetByKey.Invoke(Context, uniqueID)
            Else
                return Entity.FirstOrDefault(Function(p)p.UniqueID = uniqueID)
            End If
        End Function
        ''' <summary>
        ''' Gets an instance by using a unique index.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        Public Overloads Function GetByUsernameApplicationName(username As String, applicationName As String) As Profiles
            If (Context.LoadOptions Is Nothing) Then 
                return Query.GetByUsernameApplicationName.Invoke(Context, username, applicationName)
            Else
                Return Entity.FirstOrDefault(Function(p)p.Username = username _
					AndAlso p.ApplicationName = applicationName)
            End If
        END Function

        #Region "Extensibility Method Definitions"
        ''' <summary>Called by the static constructor to add shared rules.</summary>
        Shared Partial Private Sub AddRules()
        End Sub
        ''' <summary>Called when the class is created.</summary>
        Partial Private Sub OnCreated()
        End Sub
        #End Region
        
        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query

            Friend Shared Readonly GetByKey As Func(Of PetshopDataContext, Integer, Profiles) = _
                CompiledQuery.Compile( _
                     Function(db As PetshopDataContext, uniqueID As Integer) _
                        db.Profiles.FirstOrDefault(Function(p)p.UniqueID = uniqueID))

            Friend Shared Readonly GetByUsernameApplicationName As Func(Of PetshopDataContext, String, String, Profiles) = _
                CompiledQuery.Compile( _
                     Function(db As PetshopDataContext, username As String, applicationName As String) _
                        db.Profiles.FirstOrDefault(Function(p)p.Username = username _
							AndAlso p.ApplicationName = applicationName))

        End Class
        #End Region
    End Class
End Namespace

