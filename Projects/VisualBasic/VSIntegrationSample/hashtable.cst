<%@ CodeTemplate Language="VB" TargetLanguage="VB" Description="Generates a strongly-typed collection based on a HashTable." %>
<%@ Property Name="KeyType" Type="System.String" Category="Context" Description="The type to use as a key in the collection." %>
<%@ Property Name="ItemType" Type="System.String" Category="Context" Description="The type to use as an item in the collection." %>
<%@ Property Name="ClassName" Type="System.String" Category="Context" Description="The name of the class to be generated." %>
<%@ Property Name="Accessibility" Type="AccessibilityEnum" Category="Options" Description="The accessibility of the class to be generated." %>
<%@ Property Name="SingleFileMode" Type="System.Boolean" Category="Options" Default="True" Description="Generate content for a complete cs file instead of just a class." %>
<% If Not Me.SingleFileMode Then %>
Imports System
Imports System.Collections

<% End If %>
	#Region "<%= ClassName %>"
    <%= GetAccessModifier(Accessibility) %> Class <%= ClassName %>
        Implements IDictionary
        Implements ICollection
        Implements IEnumerable
        Implements ICloneable
        Protected _innerHash As Hashtable

#Region "Constructors"
        Public Sub New()
            _innerHash = New Hashtable()
        End Sub

        Public Sub New(ByVal original As <%= ClassName %>)
            _innerHash = New Hashtable(original.innerHash)
        End Sub

        Public Sub New(ByVal dictionary As IDictionary)
            _innerHash = New Hashtable(dictionary)
        End Sub

        Public Sub New(ByVal capacity As Integer)
            _innerHash = New Hashtable(capacity)
        End Sub

        Public Sub New(ByVal dictionary As IDictionary, ByVal loadFactor As Single)
            _innerHash = New Hashtable(dictionary, loadFactor)
        End Sub

        Public Sub New(ByVal codeProvider As IHashCodeProvider, ByVal comparer As IComparer)
            _innerHash = New Hashtable(codeProvider, comparer)
        End Sub

        Public Sub New(ByVal capacity As Integer, ByVal loadFactor As Integer)
            _innerHash = New Hashtable(capacity, loadFactor)
        End Sub

        Public Sub New(ByVal dictionary As IDictionary, ByVal codeProvider As IHashCodeProvider, ByVal comparer As IComparer)
            _innerHash = New Hashtable(dictionary, codeProvider, comparer)
        End Sub

        Public Sub New(ByVal capacity As Integer, ByVal codeProvider As IHashCodeProvider, ByVal comparer As IComparer)
            _innerHash = New Hashtable(capacity, codeProvider, comparer)
        End Sub

        Public Sub New(ByVal dictionary As IDictionary, ByVal loadFactor As Single, ByVal codeProvider As IHashCodeProvider, ByVal comparer As IComparer)
            _innerHash = New Hashtable(dictionary, loadFactor, codeProvider, comparer)
        End Sub

        Public Sub New(ByVal capacity As Integer, ByVal loadFactor As Integer, ByVal codeProvider As IHashCodeProvider, ByVal comparer As IComparer)
            _innerHash = New Hashtable(capacity, loadFactor, codeProvider, comparer)
        End Sub


#End Region

#Region "Implementation of IDictionary"

        Private Function _GetEnumerator() As IDictionaryEnumerator
            Return New <%= ClassName %>Enumerator(Me)
        End Function

        Public Function IDictionary_GetEnumerator() As IDictionaryEnumerator Implements IDictionary.GetEnumerator
            Return _GetEnumerator()
        End Function

        Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator
            Return _GetEnumerator()
        End Function

        Public Sub Remove(ByVal key As <%= KeyType %>)
            _innerHash.Remove(key)
        End Sub

        Public Sub Remove(ByVal key As Object) Implements IDictionary.Remove
            Remove(CType(key, <%= KeyType %>))
        End Sub

        Public Function Contains(ByVal key As <%= KeyType %>) As Boolean
            Return _innerHash.Contains(key)

        End Function

        Public Function Contains(ByVal key As Object) As Boolean Implements IDictionary.Contains
            Return Contains(CType(key, <%= KeyType %>))
        End Function

        Public Sub Clear() Implements IDictionary.Clear
            _innerHash.Clear()
        End Sub

        Public Sub Add(ByVal key As <%= KeyType %>, ByVal value As <%= ItemType %>)
            _innerHash.Add(key, value)
        End Sub

        Public Sub Add(ByVal key As Object, ByVal value As Object) Implements IDictionary.Add
            Add(CType(key, <%= KeyType %>), CType(value, <%= ItemType %>))
        End Sub

        Public ReadOnly Property IsReadOnly() As Boolean Implements IDictionary.IsReadOnly
            Get
                Return _innerHash.IsReadOnly
            End Get
        End Property

        Default Public Property Item(ByVal key As <%= KeyType %>) As <%= ItemType %>
            Get
                Return CType(_innerHash(key), <%= ItemType %>)
            End Get
            Set(ByVal Value As <%= ItemType %>)
                _innerHash(key) = value
            End Set
        End Property


        Default Public Property Item(ByVal key As Object) As Object Implements IDictionary.Item
            Get
                Return item(CType(key, <%= KeyType %>))
            End Get
            Set(ByVal Value As Object)
                item(CType(key, <%= KeyType %>)) = CType(value, <%= ItemType %>)
            End Set
        End Property

        Public ReadOnly Property Values() As System.Collections.ICollection Implements IDictionary.Values
            Get
                Return _innerHash.Values
            End Get
        End Property

        Public ReadOnly Property Keys() As System.Collections.ICollection Implements IDictionary.Keys
            Get
                Return _innerHash.Keys
            End Get
        End Property

        Public ReadOnly Property IsFixedSize() As Boolean Implements IDictionary.IsFixedSize
            Get
                Return _innerHash.IsFixedSize
            End Get
        End Property

#End Region

#Region "Implementation of ICollection"

        Public Sub CopyTo(ByVal array As System.Array, ByVal index As Integer) Implements ICollection.CopyTo
            _innerHash.CopyTo(array, index)
        End Sub

        Public ReadOnly Property IsSynchronized() As Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return _innerHash.IsSynchronized
            End Get
        End Property

        Public ReadOnly Property Count() As Integer Implements System.Collections.ICollection.Count
            Get
                Return _innerHash.Count
            End Get
        End Property

        Public ReadOnly Property SyncRoot() As Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return _innerHash.SyncRoot
            End Get
        End Property

#End Region

#Region "Implementation of ICloneable"

        Public Function Clone() As <%= ClassName %>
            Dim innerClone As <%= ClassName %> = New <%= ClassName %>()
            innerClone._innerHash = CType(_innerHash.Clone(), Hashtable)

            Return innerClone
        End Function

        Public Function ICloneable_Clone() As Object Implements ICloneable.Clone
            Return Clone()
        End Function
#End Region

#Region "HashTable Methods"
        Public Function ContainsKey(ByVal key As <%= KeyType %>) As Boolean
            Return _innerHash.ContainsKey(key)
        End Function

        Public Function ContainsValue(ByVal value As <%= ItemType %>) As Boolean
            Return _innerHash.ContainsValue(value)
        End Function

        Public Shared Function Synchronized(ByVal nonSync As <%= ClassName %>) As <%= ClassName %>
            Dim sync As <%= ClassName %> = New <%= ClassName %>()
            sync._innerHash = Hashtable.Synchronized(nonSync.innerHash)
            Return sync
        End Function
#End Region

        Friend ReadOnly Property InnerHash() As Hashtable
            Get
                Return _innerHash
            End Get
        End Property
    End Class

    Public Class <%= ClassName %>Enumerator
        Implements IDictionaryEnumerator

        Private innerEnumerator As IDictionaryEnumerator

        Friend Sub New(ByVal enumerable As <%= ClassName %>)
            innerEnumerator = enumerable.InnerHash.GetEnumerator()
        End Sub

#Region "Implementation of IDictionaryEnumerator"
        Public ReadOnly Property Key() As <%= KeyType %>
            Get
                Return CType(innerEnumerator.Key, <%= KeyType %>)
            End Get
        End Property

        Public ReadOnly Property IDictionaryEnumerator_Key() As Object Implements IDictionaryEnumerator.Key
            Get
                Return Key
            End Get
        End Property

        Public ReadOnly Property Value() As <%= ItemType %>
            Get
                Return CType(innerEnumerator.Value, <%= ItemType %>)
            End Get
        End Property

        Public ReadOnly Property IDictionaryEnumerator_Value() As Object Implements IDictionaryEnumerator.Value
            Get
                Return Value
            End Get
        End Property

        Public ReadOnly Property Entry() As System.Collections.DictionaryEntry Implements IDictionaryEnumerator.Entry
            Get
                Return innerEnumerator.Entry
            End Get
        End Property
#End Region

#Region "Implementation of IEnumerator"
        Public Sub Reset() Implements IDictionaryEnumerator.Reset
            innerEnumerator.Reset()
        End Sub

        Public Function MoveNext() As Boolean Implements IDictionaryEnumerator.MoveNext
            Return innerEnumerator.MoveNext()
        End Function

        Public ReadOnly Property Current() As Object Implements IDictionaryEnumerator.Current
            Get
                Return innerEnumerator.Current
            End Get
        End Property
#End Region
    End Class
	#End Region
<script runat="template">
Public Enum AccessibilityEnum
	[Public]
	[Friend]
	[Private]
End Enum

Public Function GetAccessModifier(ByVal accessibility As AccessibilityEnum) As String
	Select accessibility
		Case AccessibilityEnum.Public
			GetAccessModifier = "Public"
		Case AccessibilityEnum.Friend
			GetAccessModifier = "Friend"
		Case AccessibilityEnum.Private
			GetAccessModifier = "Private"
		Case Else
			GetAccessModifier = "Public"
	End Select
End Function
</script>
