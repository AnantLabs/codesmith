//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace Tester.Data
{
    /// <summary>
    /// The class representing the dbo.Junction table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.Junction")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(Metadata))]
    [System.Data.Services.Common.DataServiceKey("LeftId", "RightId")]
    [System.Diagnostics.DebuggerDisplay("LeftId: {LeftId}, RightId: {RightId}")]
    public partial class Junction
        : LinqEntityBase, ICloneable
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="Junction"/> class.
        /// </summary>
        static Junction()
        {
            CodeSmith.Data.Rules.RuleManager.AddShared<Junction>();
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Junction"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public Junction()
        {
            OnCreated();
            Initialize();
        }

        private void Initialize()
        {
            _left = default(System.Data.Linq.EntityRef<Left>);
            _right = default(System.Data.Linq.EntityRef<Right>);
        }
        #endregion

        #region Column Mapped Properties

        private int _leftId;

        /// <summary>
        /// Gets or sets the LeftId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "LeftId", Storage = "_leftId", DbType = "int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        public int LeftId
        {
            get { return _leftId; }
            set
            {
                if (_leftId != value)
                {
                    if (_left.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnLeftIdChanging(value);
                    SendPropertyChanging("LeftId");
                    _leftId = value;
                    SendPropertyChanged("LeftId");
                    OnLeftIdChanged();
                }
            }
        }

        private int _rightId;

        /// <summary>
        /// Gets or sets the RightId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "RightId", Storage = "_rightId", DbType = "int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        public int RightId
        {
            get { return _rightId; }
            set
            {
                if (_rightId != value)
                {
                    if (_right.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRightIdChanging(value);
                    SendPropertyChanging("RightId");
                    _rightId = value;
                    SendPropertyChanged("RightId");
                    OnRightIdChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties

        private System.Data.Linq.EntityRef<Left> _left;

        /// <summary>
        /// Gets or sets the Left association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "Left_Junction", Storage = "_left", ThisKey = "LeftId", OtherKey = "Id", IsUnique = true, IsForeignKey = true, DeleteOnNull = true)]
        [System.Runtime.Serialization.DataMember(Order = 3, EmitDefaultValue = false)]
        public Left Left
        {
            get { return (serializing && !_left.HasLoadedOrAssignedValue) ? null : _left.Entity; }
            set
            {
                Left previousValue = _left.Entity;
                if (previousValue != value || _left.HasLoadedOrAssignedValue == false)
                {
                    OnLeftChanging(value);
                    SendPropertyChanging("Left");
                    if (previousValue != null)
                    {
                        _left.Entity = null;
                        previousValue.JunctionList.Remove(this);
                    }
                    _left.Entity = value;
                    if (value != null)
                    {
                        value.JunctionList.Add(this);
                        _leftId = value.Id;
                    }
                    else
                    {
                        _leftId = default(int);
                    }
                    SendPropertyChanged("Left");
                    OnLeftChanged();
                }
            }
        }

        private System.Data.Linq.EntityRef<Right> _right;

        /// <summary>
        /// Gets or sets the Right association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "Right_Junction", Storage = "_right", ThisKey = "RightId", OtherKey = "Id", IsUnique = true, IsForeignKey = true, DeleteOnNull = true)]
        [System.Runtime.Serialization.DataMember(Order = 4, EmitDefaultValue = false)]
        public Right Right
        {
            get { return (serializing && !_right.HasLoadedOrAssignedValue) ? null : _right.Entity; }
            set
            {
                Right previousValue = _right.Entity;
                if (previousValue != value || _right.HasLoadedOrAssignedValue == false)
                {
                    OnRightChanging(value);
                    SendPropertyChanging("Right");
                    if (previousValue != null)
                    {
                        _right.Entity = null;
                        previousValue.JunctionList.Remove(this);
                    }
                    _right.Entity = value;
                    if (value != null)
                    {
                        value.JunctionList.Add(this);
                        _rightId = value.Id;
                    }
                    else
                    {
                        _rightId = default(int);
                    }
                    SendPropertyChanged("Right");
                    OnRightChanged();
                }
            }
        }
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when <see cref="LeftId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLeftIdChanging(int value);
        /// <summary>Called after <see cref="LeftId"/> has Changed.</summary>
        partial void OnLeftIdChanged();
        /// <summary>Called when <see cref="RightId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnRightIdChanging(int value);
        /// <summary>Called after <see cref="RightId"/> has Changed.</summary>
        partial void OnRightIdChanged();
        /// <summary>Called when <see cref="Left"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLeftChanging(Left value);
        /// <summary>Called after <see cref="Left"/> has Changed.</summary>
        partial void OnLeftChanged();
        /// <summary>Called when <see cref="Right"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnRightChanging(Right value);
        /// <summary>Called after <see cref="Right"/> has Changed.</summary>
        partial void OnRightChanged();

        #endregion

        #region Serialization
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        public Junction Clone()
        {
            return (Junction)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
            _left = Detach(_left);
            _right = Detach(_right);
        }
        #endregion
    }
}

