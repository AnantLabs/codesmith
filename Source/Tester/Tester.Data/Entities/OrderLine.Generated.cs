//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace Tester.Data
{
    /// <summary>
    /// The class representing the dbo.OrderLine table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.OrderLine")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(Metadata))]
    [System.Data.Services.Common.DataServiceKey("Id")]
    [System.Diagnostics.DebuggerDisplay("Id: {Id}")]
    public partial class OrderLine
        : LinqEntityBase, ICloneable
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="OrderLine"/> class.
        /// </summary>
        static OrderLine()
        {
            CodeSmith.Data.Rules.RuleManager.AddShared<OrderLine>();
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLine"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public OrderLine()
        {
            OnCreated();
            Initialize();
        }

        private void Initialize()
        {
        }
        #endregion

        #region Column Mapped Properties

        private int _id;

        /// <summary>
        /// Gets or sets the Id column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Id", Storage = "_id", DbType = "int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    OnIdChanging(value);
                    SendPropertyChanging("Id");
                    _id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        private int _orderId;

        /// <summary>
        /// Gets or sets the OrderId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "OrderId", Storage = "_orderId", DbType = "int NOT NULL", CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        public int OrderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId != value)
                {
                    OnOrderIdChanging(value);
                    SendPropertyChanging("OrderId");
                    _orderId = value;
                    SendPropertyChanged("OrderId");
                    OnOrderIdChanged();
                }
            }
        }

        private int _itemId;

        /// <summary>
        /// Gets or sets the ItemId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "ItemId", Storage = "_itemId", DbType = "int NOT NULL", CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        public int ItemId
        {
            get { return _itemId; }
            set
            {
                if (_itemId != value)
                {
                    OnItemIdChanging(value);
                    SendPropertyChanging("ItemId");
                    _itemId = value;
                    SendPropertyChanged("ItemId");
                    OnItemIdChanged();
                }
            }
        }

        private int _quantity;

        /// <summary>
        /// Gets or sets the Quantity column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Quantity", Storage = "_quantity", DbType = "int NOT NULL", CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        public int Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    OnQuantityChanging(value);
                    SendPropertyChanging("Quantity");
                    _quantity = value;
                    SendPropertyChanged("Quantity");
                    OnQuantityChanged();
                }
            }
        }

        private decimal _total;

        /// <summary>
        /// Gets or sets the Total column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Total", Storage = "_total", DbType = "decimal(18,0) NOT NULL", CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 5)]
        public decimal Total
        {
            get { return _total; }
            set
            {
                if (_total != value)
                {
                    OnTotalChanging(value);
                    SendPropertyChanging("Total");
                    _total = value;
                    SendPropertyChanged("Total");
                    OnTotalChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when <see cref="Id"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIdChanging(int value);
        /// <summary>Called after <see cref="Id"/> has Changed.</summary>
        partial void OnIdChanged();
        /// <summary>Called when <see cref="OrderId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnOrderIdChanging(int value);
        /// <summary>Called after <see cref="OrderId"/> has Changed.</summary>
        partial void OnOrderIdChanged();
        /// <summary>Called when <see cref="ItemId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnItemIdChanging(int value);
        /// <summary>Called after <see cref="ItemId"/> has Changed.</summary>
        partial void OnItemIdChanged();
        /// <summary>Called when <see cref="Quantity"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnQuantityChanging(int value);
        /// <summary>Called after <see cref="Quantity"/> has Changed.</summary>
        partial void OnQuantityChanged();
        /// <summary>Called when <see cref="Total"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTotalChanging(decimal value);
        /// <summary>Called after <see cref="Total"/> has Changed.</summary>
        partial void OnTotalChanged();

        #endregion

        #region Serialization
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        public OrderLine Clone()
        {
            return (OrderLine)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
        }
        #endregion
    }
}

