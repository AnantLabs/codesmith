//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace Tester.Data
{
    /// <summary>
    /// Class representing data for the Tester database.
    /// </summary>
    
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(Metadata))]
    public partial class Programmer
        : Employee, ICloneable
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="Programmer"/> class.
        /// </summary>
        static Programmer()
        {
            CodeSmith.Data.Rules.RuleManager.AddShared<Programmer>();
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Programmer"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public Programmer()
        {
            OnCreated();
            Initialize();
        }

        private void Initialize()
        {
        }
        #endregion

        #region Column Mapped Properties

        private string _language;

        /// <summary>
        /// Gets or sets the Language column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Language", Storage = "_language", DbType = "nvarchar(50)")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        public string Language
        {
            get { return _language; }
            set
            {
                if (_language != value)
                {
                    OnLanguageChanging(value);
                    SendPropertyChanging("Language");
                    _language = value;
                    SendPropertyChanged("Language");
                    OnLanguageChanged();
                }
            }
        }

        private string _level;

        /// <summary>
        /// Gets or sets the Level column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Level", Storage = "_level", DbType = "nvarchar(50)")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        public string Level
        {
            get { return _level; }
            set
            {
                if (_level != value)
                {
                    OnLevelChanging(value);
                    SendPropertyChanging("Level");
                    _level = value;
                    SendPropertyChanged("Level");
                    OnLevelChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when <see cref="Language"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLanguageChanging(string value);
        /// <summary>Called after <see cref="Language"/> has Changed.</summary>
        partial void OnLanguageChanged();
        /// <summary>Called when <see cref="Level"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLevelChanging(string value);
        /// <summary>Called after <see cref="Level"/> has Changed.</summary>
        partial void OnLevelChanged();

        #endregion

        #region Serialization
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        public Programmer Clone()
        {
            return (Programmer)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
        }
        #endregion
    }
}

