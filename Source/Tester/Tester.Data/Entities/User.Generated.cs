//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace Tester.Data
{
    /// <summary>
    /// The class representing the dbo.User table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.User")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(Metadata))]
    [System.Data.Services.Common.DataServiceKey("Id")]
    [System.Diagnostics.DebuggerDisplay("Id: {Id}")]
    public partial class User
        : LinqEntityBase, ICloneable
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="User"/> class.
        /// </summary>
        static User()
        {
            CodeSmith.Data.Rules.RuleManager.AddShared<User>();
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public User()
        {
            OnCreated();
            Initialize();
        }

        private void Initialize()
        {
            _userProfile = default(System.Data.Linq.EntityRef<UserProfile>);
        }
        #endregion

        #region Column Mapped Properties

        private int _id = default(int);

        /// <summary>
        /// Gets the Id column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Id", Storage = "_id", DbType = "int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    OnIdChanging(value);
                    SendPropertyChanging("Id");
                    _id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        private string _userName;

        /// <summary>
        /// Gets or sets the UserName column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "UserName", Storage = "_userName", DbType = "nvarchar(50) NOT NULL", CanBeNull = false)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    OnUserNameChanging(value);
                    SendPropertyChanging("UserName");
                    _userName = value;
                    SendPropertyChanged("UserName");
                    OnUserNameChanged();
                }
            }
        }

        private string _password;

        /// <summary>
        /// Gets or sets the Password column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Password", Storage = "_password", DbType = "nvarchar(50) NOT NULL", CanBeNull = false)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    OnPasswordChanging(value);
                    SendPropertyChanging("Password");
                    _password = value;
                    SendPropertyChanged("Password");
                    OnPasswordChanged();
                }
            }
        }

        private string _emailAddress;

        /// <summary>
        /// Gets or sets the EmailAddress column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "EmailAddress", Storage = "_emailAddress", DbType = "nvarchar(50) NOT NULL", CanBeNull = false)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        public string EmailAddress
        {
            get { return _emailAddress; }
            set
            {
                if (_emailAddress != value)
                {
                    OnEmailAddressChanging(value);
                    SendPropertyChanging("EmailAddress");
                    _emailAddress = value;
                    SendPropertyChanged("EmailAddress");
                    OnEmailAddressChanged();
                }
            }
        }

        private string _comments;

        /// <summary>
        /// Gets or sets the Comments column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Comments", Storage = "_comments", DbType = "nvarchar(150)")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        [System.Runtime.Serialization.DataMember(Order = 5)]
        public string Comments
        {
            get { return _comments; }
            set
            {
                if (_comments != value)
                {
                    OnCommentsChanging(value);
                    SendPropertyChanging("Comments");
                    _comments = value;
                    SendPropertyChanged("Comments");
                    OnCommentsChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties

        private System.Data.Linq.EntityRef<UserProfile> _userProfile;

        /// <summary>
        /// Gets or sets the UserProfile association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "User_UserProfile", Storage = "_userProfile", ThisKey = "Id", OtherKey = "UserId", IsUnique = true)]
        [System.Runtime.Serialization.DataMember(Order = 6, EmitDefaultValue = false)]
        public UserProfile UserProfile
        {
            get { return (serializing && !_userProfile.HasLoadedOrAssignedValue) ? null : _userProfile.Entity; }
            set
            {
                UserProfile previousValue = _userProfile.Entity;
                if (previousValue != value || _userProfile.HasLoadedOrAssignedValue == false)
                {
                    OnUserProfileChanging(value);
                    SendPropertyChanging("UserProfile");
                    if (previousValue != null)
                    {
                        _userProfile.Entity = null;
                        previousValue.User = null;
                    }
                    _userProfile.Entity = value;
                    if (value != null)
                    {
                        value.User = this;
                    }
                    SendPropertyChanged("UserProfile");
                    OnUserProfileChanged();
                }
            }
        }
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when <see cref="Id"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIdChanging(int value);
        /// <summary>Called after <see cref="Id"/> has Changed.</summary>
        partial void OnIdChanged();
        /// <summary>Called when <see cref="UserName"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserNameChanging(string value);
        /// <summary>Called after <see cref="UserName"/> has Changed.</summary>
        partial void OnUserNameChanged();
        /// <summary>Called when <see cref="Password"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnPasswordChanging(string value);
        /// <summary>Called after <see cref="Password"/> has Changed.</summary>
        partial void OnPasswordChanged();
        /// <summary>Called when <see cref="EmailAddress"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnEmailAddressChanging(string value);
        /// <summary>Called after <see cref="EmailAddress"/> has Changed.</summary>
        partial void OnEmailAddressChanged();
        /// <summary>Called when <see cref="Comments"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCommentsChanging(string value);
        /// <summary>Called after <see cref="Comments"/> has Changed.</summary>
        partial void OnCommentsChanged();
        /// <summary>Called when <see cref="UserProfile"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserProfileChanging(UserProfile value);
        /// <summary>Called after <see cref="UserProfile"/> has Changed.</summary>
        partial void OnUserProfileChanged();

        #endregion

        #region Serialization
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        public User Clone()
        {
            return (User)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
            _userProfile = Detach(_userProfile);
        }
        #endregion
    }
}

