//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace Tester.Data
{
    /// <summary>
    /// The class representing the dbo.UserProfile table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.UserProfile")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(Metadata))]
    [System.Data.Services.Common.DataServiceKey("Id")]
    [System.Diagnostics.DebuggerDisplay("Id: {Id}")]
    public partial class UserProfile
        : LinqEntityBase, ICloneable
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="UserProfile"/> class.
        /// </summary>
        static UserProfile()
        {
            CodeSmith.Data.Rules.RuleManager.AddShared<UserProfile>();
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfile"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public UserProfile()
        {
            OnCreated();
            Initialize();
        }

        private void Initialize()
        {
            _user = default(System.Data.Linq.EntityRef<User>);
        }
        #endregion

        #region Column Mapped Properties

        private int _id = default(int);

        /// <summary>
        /// Gets the Id column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Id", Storage = "_id", DbType = "int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    OnIdChanging(value);
                    SendPropertyChanging("Id");
                    _id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        private Nullable<int> _userId;

        /// <summary>
        /// Gets or sets the UserId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "UserId", Storage = "_userId", DbType = "int")]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (_user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIdChanging(value);
                    SendPropertyChanging("UserId");
                    _userId = value;
                    SendPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }

        private bool _allowNotification;

        /// <summary>
        /// Gets or sets the AllowNotification column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "AllowNotification", Storage = "_allowNotification", DbType = "bit NOT NULL", CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        public bool AllowNotification
        {
            get { return _allowNotification; }
            set
            {
                if (_allowNotification != value)
                {
                    OnAllowNotificationChanging(value);
                    SendPropertyChanging("AllowNotification");
                    _allowNotification = value;
                    SendPropertyChanged("AllowNotification");
                    OnAllowNotificationChanged();
                }
            }
        }

        private System.Data.Linq.Binary _avatar;

        /// <summary>
        /// Gets or sets the Avatar column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Avatar", Storage = "_avatar", DbType = "image", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        public System.Data.Linq.Binary Avatar
        {
            get { return _avatar; }
            set
            {
                if (_avatar != value)
                {
                    OnAvatarChanging(value);
                    SendPropertyChanging("Avatar");
                    _avatar = value;
                    SendPropertyChanged("Avatar");
                    OnAvatarChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties

        private System.Data.Linq.EntityRef<User> _user;

        /// <summary>
        /// Gets or sets the User association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "User_UserProfile", Storage = "_user", ThisKey = "UserId", OtherKey = "Id", IsUnique = true, IsForeignKey = true)]
        [System.Runtime.Serialization.DataMember(Order = 5, EmitDefaultValue = false)]
        public User User
        {
            get { return (serializing && !_user.HasLoadedOrAssignedValue) ? null : _user.Entity; }
            set
            {
                User previousValue = _user.Entity;
                if (previousValue != value || _user.HasLoadedOrAssignedValue == false)
                {
                    OnUserChanging(value);
                    SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        _user.Entity = null;
                        previousValue.UserProfileList.Remove(this);
                    }
                    _user.Entity = value;
                    if (value != null)
                    {
                        value.UserProfileList.Add(this);
                        _userId = value.Id;
                    }
                    else
                    {
                        _userId = default(int);
                    }
                    SendPropertyChanged("User");
                    OnUserChanged();
                }
            }
        }
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when <see cref="Id"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIdChanging(int value);
        /// <summary>Called after <see cref="Id"/> has Changed.</summary>
        partial void OnIdChanged();
        /// <summary>Called when <see cref="UserId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserIdChanging(Nullable<int> value);
        /// <summary>Called after <see cref="UserId"/> has Changed.</summary>
        partial void OnUserIdChanged();
        /// <summary>Called when <see cref="AllowNotification"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAllowNotificationChanging(bool value);
        /// <summary>Called after <see cref="AllowNotification"/> has Changed.</summary>
        partial void OnAllowNotificationChanged();
        /// <summary>Called when <see cref="Avatar"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAvatarChanging(System.Data.Linq.Binary value);
        /// <summary>Called after <see cref="Avatar"/> has Changed.</summary>
        partial void OnAvatarChanged();
        /// <summary>Called when <see cref="User"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserChanging(User value);
        /// <summary>Called after <see cref="User"/> has Changed.</summary>
        partial void OnUserChanged();

        #endregion

        #region Serialization
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        public UserProfile Clone()
        {
            return (UserProfile)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
            _user = Detach(_user);
        }
        #endregion
    }
}

