//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using System.Linq.Dynamic;

namespace Tracker.Data
{
    /// <summary>
    /// The query extension class for Task.
    /// </summary>
    public static partial class TaskExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static Tracker.Data.Task GetByKey(this IQueryable<Tracker.Data.Task> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<Tracker.Data.Task>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((Tracker.Data.TrackerDataContext)entity.Context, id);
            
            return queryable.FirstOrDefault(t => t.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<Tracker.Data.Task> table, int id)
        {
            return table.Delete(t => t.Id == id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ById(this IQueryable<Tracker.Data.Task> queryable, int id)
        {
            return queryable.Where(t => t.Id == id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ById(this IQueryable<Tracker.Data.Task> queryable, int id, params int[] additionalValues)
        {
            var idList = new List<int> {id};

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("Id", idList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByStatusId(this IQueryable<Tracker.Data.Task> queryable, int statusId)
        {
            return queryable.Where(t => t.StatusId == statusId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByStatusId(this IQueryable<Tracker.Data.Task> queryable, int statusId, params int[] additionalValues)
        {
            var statusIdList = new List<int> {statusId};

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("StatusId", statusIdList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.PriorityId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="priorityId">PriorityId to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByPriorityId(this IQueryable<Tracker.Data.Task> queryable, Priority priorityId)
        {
            return queryable.Where(t => t.PriorityId == priorityId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.PriorityId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="priorityId">PriorityId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByPriorityId(this IQueryable<Tracker.Data.Task> queryable, Priority priorityId, params Priority[] additionalValues)
        {
            var priorityIdList = new List<Priority> {priorityId};

            if (additionalValues != null)
                priorityIdList.AddRange(additionalValues);

            if (priorityIdList.Count == 1)
                return queryable.ByPriorityId(priorityIdList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("PriorityId", priorityIdList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.CreatedId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdId">CreatedId to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByCreatedId(this IQueryable<Tracker.Data.Task> queryable, int createdId)
        {
            return queryable.Where(t => t.CreatedId == createdId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.CreatedId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdId">CreatedId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByCreatedId(this IQueryable<Tracker.Data.Task> queryable, int createdId, params int[] additionalValues)
        {
            var createdIdList = new List<int> {createdId};

            if (additionalValues != null)
                createdIdList.AddRange(additionalValues);

            if (createdIdList.Count == 1)
                return queryable.ByCreatedId(createdIdList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("CreatedId", createdIdList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.Summary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="summary">Summary to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> BySummary(this IQueryable<Tracker.Data.Task> queryable, string summary)
        {
            return queryable.Where(t => t.Summary == summary);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.Summary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="summary">Summary to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> BySummary(this IQueryable<Tracker.Data.Task> queryable, string summary, params string[] additionalValues)
        {
            var summaryList = new List<string> {summary};

            if (additionalValues != null)
                summaryList.AddRange(additionalValues);

            if (summaryList.Count == 1)
                return queryable.BySummary(summaryList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("Summary", summaryList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.Details"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="details">Details to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByDetails(this IQueryable<Tracker.Data.Task> queryable, string details)
        {
            return queryable.Where(t => object.Equals(t.Details, details));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.Details"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="details">Details to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByDetails(this IQueryable<Tracker.Data.Task> queryable, string details, params string[] additionalValues)
        {
            var detailsList = new List<string> {details};

            if (additionalValues != null)
                detailsList.AddRange(additionalValues);
            else
                detailsList.Add(null);

            if (detailsList.Count == 1)
                return queryable.ByDetails(detailsList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("Details", detailsList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDate">StartDate to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByStartDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime? startDate)
        {
            return queryable.Where(t => object.Equals(t.StartDate, startDate));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDate">StartDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByStartDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime? startDate, params System.DateTime?[] additionalValues)
        {
            var startDateList = new List<System.DateTime?> {startDate};

            if (additionalValues != null)
                startDateList.AddRange(additionalValues);
            else
                startDateList.Add(null);

            if (startDateList.Count == 1)
                return queryable.ByStartDate(startDateList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("StartDate", startDateList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.DueDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dueDate">DueDate to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByDueDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime? dueDate)
        {
            return queryable.Where(t => object.Equals(t.DueDate, dueDate));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.DueDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dueDate">DueDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByDueDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime? dueDate, params System.DateTime?[] additionalValues)
        {
            var dueDateList = new List<System.DateTime?> {dueDate};

            if (additionalValues != null)
                dueDateList.AddRange(additionalValues);
            else
                dueDateList.Add(null);

            if (dueDateList.Count == 1)
                return queryable.ByDueDate(dueDateList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("DueDate", dueDateList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.CompleteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completeDate">CompleteDate to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByCompleteDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime? completeDate)
        {
            return queryable.Where(t => object.Equals(t.CompleteDate, completeDate));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.CompleteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completeDate">CompleteDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByCompleteDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime? completeDate, params System.DateTime?[] additionalValues)
        {
            var completeDateList = new List<System.DateTime?> {completeDate};

            if (additionalValues != null)
                completeDateList.AddRange(additionalValues);
            else
                completeDateList.Add(null);

            if (completeDateList.Count == 1)
                return queryable.ByCompleteDate(completeDateList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("CompleteDate", completeDateList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.AssignedId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="assignedId">AssignedId to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByAssignedId(this IQueryable<Tracker.Data.Task> queryable, int? assignedId)
        {
            return queryable.Where(t => object.Equals(t.AssignedId, assignedId));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.AssignedId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="assignedId">AssignedId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByAssignedId(this IQueryable<Tracker.Data.Task> queryable, int? assignedId, params int?[] additionalValues)
        {
            var assignedIdList = new List<int?> {assignedId};

            if (additionalValues != null)
                assignedIdList.AddRange(additionalValues);
            else
                assignedIdList.Add(null);

            if (assignedIdList.Count == 1)
                return queryable.ByAssignedId(assignedIdList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("AssignedId", assignedIdList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByCreatedDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime createdDate)
        {
            return queryable.Where(t => t.CreatedDate == createdDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByCreatedDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime createdDate, params System.DateTime[] additionalValues)
        {
            var createdDateList = new List<System.DateTime> {createdDate};

            if (additionalValues != null)
                createdDateList.AddRange(additionalValues);

            if (createdDateList.Count == 1)
                return queryable.ByCreatedDate(createdDateList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("CreatedDate", createdDateList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByModifiedDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime modifiedDate)
        {
            return queryable.Where(t => t.ModifiedDate == modifiedDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByModifiedDate(this IQueryable<Tracker.Data.Task> queryable, System.DateTime modifiedDate, params System.DateTime[] additionalValues)
        {
            var modifiedDateList = new List<System.DateTime> {modifiedDate};

            if (additionalValues != null)
                modifiedDateList.AddRange(additionalValues);

            if (modifiedDateList.Count == 1)
                return queryable.ByModifiedDate(modifiedDateList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("ModifiedDate", modifiedDateList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.LastModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByLastModifiedBy(this IQueryable<Tracker.Data.Task> queryable, string lastModifiedBy)
        {
            return queryable.Where(t => object.Equals(t.LastModifiedBy, lastModifiedBy));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Task.LastModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Task> ByLastModifiedBy(this IQueryable<Tracker.Data.Task> queryable, string lastModifiedBy, params string[] additionalValues)
        {
            var lastModifiedByList = new List<string> {lastModifiedBy};

            if (additionalValues != null)
                lastModifiedByList.AddRange(additionalValues);
            else
                lastModifiedByList.Add(null);

            if (lastModifiedByList.Count == 1)
                return queryable.ByLastModifiedBy(lastModifiedByList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Task, bool>("LastModifiedBy", lastModifiedByList);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<Tracker.Data.TrackerDataContext, int, Tracker.Data.Task> GetByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Tracker.Data.TrackerDataContext db, int id) => 
                        db.Task.FirstOrDefault(t => t.Id == id));

        }
        #endregion
    }
}

