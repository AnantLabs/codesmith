<%-- 
Name: Collection DL Class Template
Author: Chris Lasater
Description: Allows generation of Concrete Public DL class from Update and Select stored procs
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper"  Description="Single Record Concrete Class Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="SelectCollectionStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="False" Category="Context" Description="Stored Procedure to use for record collection for select." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;
using System.Collections;
using System.Data;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

/// <summary>
/// This class can be used without reflection or moved into the Bl assembly if desired for simplification.
/// It is where data for a particualr database type is written for access into that database
/// The constructor requires a connections tring to be fed from the UI or calling process.
/// This class is the implementation class for the interface
/// it houses all data push pull functionality
/// THis is a colection object which acts as an iterator, and the interface IUsersDataBL
/// makes sure it gets ILIst implemented for UI databinding
/// it is marked internal so it cannot be created outside the 
/// assembly, this makes sure only expected creations of the oobject are possible
/// and makes the assembly into a complete facade with only known interfaces as entry points
/// </summary>
namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.Collections
{
	
	<%= BuildXmlClassComment(SelectCollectionStoredProcedure) %> 	
	[Serializable]
	internal class <%= GetPluralName(RecordSetName)%>BL : <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Collections.CollectionsBase, <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.I<%= GetPluralName(RecordSetName)%>BL
	{
		#region Private Variables
        private <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.I<%= GetPluralName(RecordSetName)%>DL _data;
		#endregion		

		#region Constructor
		/// <summary>
		/// Generic Constructor for Collections BL
		/// </summary>
		/// <param name="connectionString"></param>
		public <%= GetPluralName(RecordSetName)%>BL()
		{
            
		}	
		/// <summary>
		/// This is used to create the object from serialization data
		/// </summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		public <%= GetPluralName(RecordSetName)%>BL(System.Runtime.Serialization.SerializationInfo info,
			System.Runtime.Serialization.StreamingContext context) : base(info, context)
		{			
			<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.InputOutputParameters) { %>	
			this.<%= GetPropertyName(parameter) %> = (<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>)info.GetValue("<%= GetPropertyName(parameter) %>", typeof(<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>));
			<% } %>
			
			<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.AllInputParameters) { 
				if(!SelectCollectionStoredProcedure.InputOutputParameters.Contains(parameter)) { %>			
			this.<%= GetPropertyName(parameter) %> = (<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>)info.GetValue("<%= GetPropertyName(parameter) %>", typeof(<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>));
			<%	} %>	
			<% } %>
			
			<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.AllOutputParameters) { 
				if(!SelectCollectionStoredProcedure.InputOutputParameters.Contains(parameter)) { %>			
			this.<%= GetPropertyName(parameter) %> = (<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>)info.GetValue("<%= GetPropertyName(parameter) %>", typeof(<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>));
			<%	} %>	
			<% } %>
		}
		#endregion

		#region Internal Protected Properties
		/// <summary>
		/// returns IDataTemplate for the underlying DL data class
		/// </summary>
        protected internal <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.I<%= GetPluralName(RecordSetName)%>DL Data
		{
			get
			{
				if(_data == null)
                    _data = new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.Impl.<%= GetPluralName(RecordSetName)%>DL();
			
				return _data;
			}
			
		}
		#endregion

        #region Properties
        
		<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.InputOutputParameters) { %>	
		<%= BuildXmlParameterComment(parameter) %>        
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return Data.<%= GetPropertyName(parameter) %>; } set { Data.<%= GetPropertyName(parameter) %> = value; } }
		<% } %>
		
		<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.AllInputParameters) { 
			if(!SelectCollectionStoredProcedure.InputOutputParameters.Contains(parameter)) { %>			
		<%= BuildXmlParameterComment(parameter) %>        
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return Data.<%= GetPropertyName(parameter) %>; } set { Data.<%= GetPropertyName(parameter) %> = value; } }
		<%	} %>	
		<% } %>
		
		<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.AllOutputParameters) { 
			if(!SelectCollectionStoredProcedure.InputOutputParameters.Contains(parameter)) { %>			
		<%= BuildXmlParameterComment(parameter) %>        
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return Data.<%= GetPropertyName(parameter) %>; } set { Data.<%= GetPropertyName(parameter) %> = value; } }
		<%	} %>	
		<% } %>
        #endregion		
		
		#region Programmer - Properties
			// Developer Code Goes here 
		#endregion

		#region Indexer
		/// <summary>
		/// Gets a instance in the collection of IUserDataBL as a concrete class
		/// </summary>
		public new I<%= GetSingularName(RecordSetName)%>BL this[int index]
		{
			get{return (I<%= GetSingularName(RecordSetName)%>BL)base[index];}
		}
		#endregion

		#region BLBase Members
		/// <summary>
		/// Pulls data from the DL. Call this to retrieve a collection of users.
		/// </summary>
		public override void Get()
		{
			int index = this.Rules.Add(new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.Rules.<%= GetPluralName(RecordSetName)%>SelectRule(this));
			try
			{
			 	Load();	
			}
			finally
			{
				this.Rules.RemoveAt(index);
			}
		}        
		#endregion			

		#region IBLBase Members	
		/// <summary>
		/// 
		/// </summary>
		protected internal override void Load()
		{
			if(!Validate()) return;
			IDataReader reader = null;
			
			try
			{
				reader = this.Data.Execute();
				
				if (reader == null) return;			
					
				while(reader.Read())
				{
                    <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.I<%= GetSingularName(RecordSetName)%>BL instance =
                        new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.<%= GetSingularName(RecordSetName)%>BL();

                    <% foreach (CommandResultColumnSchema column in SelectCollectionStoredProcedure.CommandResults[0].Columns) { %>	
					instance.<%= GetPropertyName(column) %> = reader["<%= GetOriginalPropertyName(column) %>"] != DBNull.Value && reader["<%= GetOriginalPropertyName(column) %>"] != null ? (<%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %>)reader["<%= GetOriginalPropertyName(column) %>"] : <%= GetMemberVariableDefaultValue(column.DataType, CanHaveNullablePrimitives, column.Name == "TransactionType") %>;
					<% } %>				
					
                    this.SetRestore(Data);
                    this.AllResults.Add(instance);
				}
			}		
		
			catch (Exception ex)
			{			
				
				this.ValidationMessages.Add(
					new Base.Validation.ValidationMessage(
					Base.Validation.ValidationLevel.Exception,
					"",ex.Message));
                base.LogError(ex);			
				throw ex;
			}
			finally
			{
				
				if(reader != null)
					try
					{
						reader.Close();
						reader = null;
					}
					catch(Exception){}
			}
			
		}
		#endregion
		
		#region Programmer - Methods
			// Developer Code Goes here 
		#endregion
	}
}

<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	if (RecordSetName != null && RecordSetName.Length > 0)
	{
		return GetPluralName(RecordSetName);
	}
	else
	{
		return SelectCollectionStoredProcedure.Name.Replace(" ", "");
	}
}

#endregion


</script>