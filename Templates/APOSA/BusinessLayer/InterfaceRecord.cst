<%-- 
Name: Interface DL Template
Author: Chris Lasater
Description: Allows generation of Concrete Public DL Interface from Update and Select stored procs
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper"  Description="Single Record Interface Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="UpdateStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True"  Category="Context" Description="Stored Procedure to use for properties for update." %>
<%@ Property Name="SelectStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True" Category="Context" Description="Stored Procedure to use for properties for select." %>
<%@ Property Name="SelectCollectionStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="False" Category="Context" Description="Stored Procedure to use for record collection for select." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;
using System.Collections.Generic;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

/// <summary>
/// Interface between BL and DL layer. Contianed in BL layer to allow generic
/// instancing of data classes in other assembly. We could change the data in the UserDataFactory 
/// (or configuration) and pull a whole new class
/// or assembly, just has to inherit from this interface
/// </summary>
namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer
{	
	
    public interface I<%= GetSingularName(RecordSetName)%>BL : <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.IBLBase
	{
        
		#region Properties

		<% foreach (CommandResultColumnSchema column in SelectCollectionStoredProcedure.CommandResults[0].Columns) { %>			
		<%= BuildXmlParameterComment(column) %> 
		<% if(UpdateStoredProcedure != null && 
				UpdateStoredProcedure.InputOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] != null) { %>
		<% ParameterSchema parameter = UpdateStoredProcedure.InputOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))]; %>
		<%	} %>
		<% if(UpdateStoredProcedure != null && 
				UpdateStoredProcedure.InputOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null &&
				UpdateStoredProcedure.AllInputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] != null) { %>
		<% ParameterSchema parameter = UpdateStoredProcedure.AllInputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))]; %>
		<%	} %>
		<% if(UpdateStoredProcedure != null && 
				UpdateStoredProcedure.InputOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null &&
				UpdateStoredProcedure.AllOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] != null) { %>
		<% ParameterSchema parameter = UpdateStoredProcedure.AllOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))]; %>
		<%	} %>
		<%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(column) %> { get; set; }
		<% } %>
		
        <% if(UpdateStoredProcedure != null) { %>
        <% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null) {%>	
		<%= BuildXmlParameterComment(parameter) %> 
		<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %>  { get; set; }
		<%	} %>
		<% } %>
			
		
		<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllOutputParameters) {
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null &&
			UpdateStoredProcedure.AllInputParameters[parameter.Name] == null) {  %>	
		<%= BuildXmlParameterComment(parameter) %>   
		<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %>  { get; set; }
		<%	} %>	
		<% } %>
		<% } %>
		
		<% if(SelectStoredProcedure != null) { %>
		<% foreach (CommandResultColumnSchema column in SelectStoredProcedure.CommandResults[0].Columns) {
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[column.Name.Trim(new char[]{'[',']'})] == null && 
				((UpdateStoredProcedure == null) ||  
				(UpdateStoredProcedure != null && 
				UpdateStoredProcedure.AllInputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null &&
				UpdateStoredProcedure.AllOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null))) { %>			
		<%= BuildXmlParameterComment(column) %>        
		<%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(column) %> { get; set; }
		<%	} %>	
		<% } %>
		<% } %>		
		
        #endregion
		
		#region Programmer - Properties
			// Developer Code Goes here 
		#endregion
		
		#region Programmer - Methods
			// Developer Code Goes here 
		#endregion
	}
}

<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}

public string GetClassName()
{
	if (RecordSetName != null && RecordSetName.Length > 0)
	{
		return GetSingularName(RecordSetName);
	}
	else
	{
		return SelectStoredProcedure.Name.Replace(" ", "");
	}
}
#endregion





</script>