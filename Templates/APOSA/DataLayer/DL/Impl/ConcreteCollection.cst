<%-- 
Name: Collection DL Class Template
Author: Chris Lasater
Description: Allows generation of Concrete Public DL class from Update and Select stored procs
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Concrete Class Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="SelectCollectionStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="False" Category="Context" Description="Stored Procedure to use for record collection for select." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

/// <summary>
/// This class can be used without reflection or moved into the Bl assembly if desired for simplification.
/// It is where data for a particualr database type is written for access into that database
/// The constructor requires a connections tring to be fed from the UI or calling process.
/// </summary>
namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.Impl
{
	
	<%= BuildXmlClassComment(SelectCollectionStoredProcedure) %>
    [Base.SelectStoredProcedureNameAttribute("<%=SelectCollectionStoredProcedure%>")]
	public class <%= GetPluralName(RecordSetName)%>DL : <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.Base.DALBase, <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.I<%= GetPluralName(RecordSetName)%>DL
	{
        #region Private Variables		
        		
		
		<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.InputOutputParameters) { %>									
		<%= GetMemberVariableDeclarationStatement(parameter, CanHaveNullablePrimitives) %> 	
		<% } %>    
		
		<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.AllOutputParameters) { 
			if(!SelectCollectionStoredProcedure.InputOutputParameters.Contains(parameter)) { %>				
		<%= GetMemberVariableDeclarationStatement(parameter, CanHaveNullablePrimitives) %>
		<%	} %>
		<% } %>    
		
		
		<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.AllInputParameters) { 
			if(!SelectCollectionStoredProcedure.InputOutputParameters.Contains(parameter)) { %>				
		<%= GetMemberVariableDeclarationStatement(parameter, CanHaveNullablePrimitives) %>
		<%	} %>
		<% } %>    
        #endregion		        	

        #region Properties        
				
        <% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.InputOutputParameters) { %>	
		<%= BuildXmlParameterComment(parameter) %>        
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return <%= GetMemberVariableName(parameter) %>; } set { <%= GetMemberVariableName(parameter) %> = value; } }
		<% } %>
		
		<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.AllInputParameters) { 
			if(!SelectCollectionStoredProcedure.InputOutputParameters.Contains(parameter)) { %>			
		<%= BuildXmlParameterComment(parameter) %>        
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return <%= GetMemberVariableName(parameter) %>; } set { <%= GetMemberVariableName(parameter) %> = value; } }
		<%	} %>	
		<% } %>
		
		<% foreach (ParameterSchema parameter in SelectCollectionStoredProcedure.AllOutputParameters) { 
			if(!SelectCollectionStoredProcedure.InputOutputParameters.Contains(parameter)) { %>			
		<%= BuildXmlParameterComment(parameter) %>        
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return <%= GetMemberVariableName(parameter) %>; } set { <%= GetMemberVariableName(parameter) %> = value; } }
		<%	} %>	
		<% } %>
        #endregion	
		
		#region Programmer - Properties
			// Developer Code Goes here 
		#endregion
       
		#region Programmer - Methods
			// Developer Code Goes here 
		#endregion
    }
}

<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	if (RecordSetName != null && RecordSetName.Length > 0)
	{
		return GetPluralName(RecordSetName);
	}
	else
	{
		return SelectCollectionStoredProcedure.Name.Replace(" ", "");
	}
}

#endregion


</script>