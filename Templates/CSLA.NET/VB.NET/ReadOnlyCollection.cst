<%@ CodeTemplate Src="CSLAHelper.vb" Inherits="CSLAHelper" Debug="False" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Read Only Collection Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
                                          <%-- Code Verified - MFA 12/05/2003 against Project and Resource List --%>
<%=Level(0,True)%>Option Strict On
<%=Level(0,False)%>Option Explicit On
<%=Level(0,False)%>Option Compare Text

<%=Level(0,False)%>Imports CSLA
<%=Level(0,False)%>Imports CSLA.Data
<%=Level(0,False)%>Imports System.Data.SQLClient
<%-- Generic Variables for code to use  --%><% Dim Col As ColumnSchema %><% Dim PKs As ColumnSchemaCollection = RootTable.primarykey.membercolumns %><% Dim NPKs As ColumnSchemaCollection = RootTable.NonPrimaryKeyColumns %>
<% Dim PKOrd As integer = PKs.Count - 1 %><% Dim OrdinalColCount as Integer = RootTable.columns.count - 1 %>
<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>Namespace <%= ClassNamespace %>
<% End If %>
   ''' <summary>
   ''' This business object represents the properties and methods of the <%= RootTable.Database.Name %>.<%= RootTable %> Table.
	''' It corresponds to the READ-ONLY COLLECTION OBJECT as outlined in the Book "Expert One-on-One VB.NET Business Objects"
	''' Object was generated on <%= Now() %> - By <%=Environment.UserName %>
   ''' </summary>
   ''' <remarks>
   ''' Parameters used to generate this class.
   ''' Business Object
   '''	ClassNamespace      = <%= ClassNamespace %>
   '''	CollectionName      = <%= CollectionName %>
   '''	ObjectName          = <%= ObjectName %>
   '''	RootTable           = <%= RootTable.Database.Name %>.<%= RootTable %>
   '''  BaseClassExt        = <%= BaseClassExt %>
   '''
   '''Options
   '''	MemberPrefix        = <%= MemberPrefix %>
   '''	Accessibility       = <%= Accessibility.ToString %>
   '''	Serializable        = <%= Serializable %>
   '''	MustBeInherited     = <%= MustBeInherited %>
   '''	TransactionType     = <%= TransactionType.ToString %>
   '''
   '''Business Object's Parent
   '''	ParentName          = <%= ParentName %>
   '''	ParentObjectType    = <%= ParentType %>
   '''
   '''Business Object's Child Collection
   '''	ChildCollectionName = <%= ChildCollectionName %>
   '''	ChildMemberName     = <%= ChildMemberName %>
   '''
   '''Stored Procedure Style
   '''	GeneralSPPrefix     = <%= GeneralSPPrefix %>
   '''	InsertPrefix        = <%= InsertPrefix %>
   '''	UpdatePrefix        = <%= UpdatePrefix %>
   '''	DeletePrefix        = <%= DeletePrefix %>
   '''	SelectPrefix        = <%= SelectPrefix %>
   ''' </remarks>
<%=Level(0,False)%><% If Serializable = True Then %><Serializable()> _<% End If %>
<%=Level(0,False)%><%= GetAccessModifier(Accessibility) %> <%= GetMustInherit(MustBeInherited) %>Class <%= GetBaseCollectionName %>
<%=Level(1,False)%>Inherits ReadOnlyCollectionBase

#Region " Business Object Data Structure"
<%=Level(1,False)%><Serializable()> _
<%=Level(1,False)%>Public Structure <%= GetCustomClassName %>Info
<%=Level(2,False)%><% IF Len(ChildCollectionName)>0 Then %>Private <%= MemberPrefix %><%= ChildMemberName %> As <%= ChildCollectionName %><% End IF %>
<%=Level(2,False)%><%= GetPrimaryKeys(PKs, MemberPrefix, ConstructorDeclaration(False,True), 2,"",True) %>
<%=Level(2,False)%><% For Each Col in NPKs %><%= GetMemberVariableDeclarationStatement("Friend", col, "", True) %><%=Level(2, True)%><% Next %>	
<%=Level(0,False)%><% For Each Col in RootTable.Columns %><%=Level(1,False)%><%= GetPropertyDeclarations(col, false, 1,"",True) %><% Next %>	        
<%=Level(2,False)%>Public Overloads Function Equals(ByVal info as <%= GetCustomClassName %>Info) as Boolean
<%=Level(3,False)%>Return <% For Each col in PKs %><%= GetMemberVariableName(col) %>.Equals(info.<%= GetPropertyName(Col) %>)<% IF PKs.Item(PKOrd).name <> col.name Then %> AND _<%= Level(3,False) %><% END IF%><% Next %>
<%=Level(2,False)%>End Function  
       
<%=Level(1,False)%>End Structure	

#End Region ' Business Object Data Structure
	
#Region " Business Properties and Methods "
    	
<%=Level(1,False)%>Default Public ReadOnly Property Item(ByVal Index As Integer) as <%= GetCustomClassName %>Info
<%=Level(2,False)%>Get
<%=Level(3,False)%>Return CType(list.Item(Index), <%= GetCustomClassName %>Info)
<%=Level(2,False)%>End Get
<%=Level(1,False)%>End Property

<%=Level(1,False)%>Default Public ReadOnly Property Item(<% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>) As <%= GetCustomClassName %>Info
<%=Level(2,False)%>Get        
<%=Level(3,False)%>Dim obj As <%= GetCustomClassName %>Info
    
<%=Level(3,False)%>For Each obj In list
<%=Level(4,False)%>If <% For Each col in PKs %>Obj.<%= GetPropertyName(Col) %>.Equals(<%= col.name %>)<% IF PKs.Item(PKOrd).name <> col.name Then %> AND _<%= Level(4, True) %><% END IF%><% Next %> Then
<%=Level(5,False)%>Return CType(obj, <%= GetCustomClassName %>Info)
<%=Level(4,False)%>End If              
<%=Level(3,False)%>Next          
<%=Level(3,False)%>Return Nothing
<%=Level(2,False)%>End Get      
<%=Level(1,False)%>End Property
      
#End Region ' Business Properties and Methods

      
#Region " Contains (Evaluate if the Object exists in Collection) "

<%=Level(1,False)%>Public Overloads Function Contains(ByVal item as <%= GetCustomClassName %>Info) As Boolean
<%=Level(2,False)%>Dim child as <%= GetCustomClassName %>Info
    
<%=Level(2,False)%>For Each child In list
<%=Level(3,False)%>If child.Equals(item) then
<%=Level(4,False)%>Return True
<%=Level(3,False)%>End If
<%=Level(2,False)%>Next    
<%=Level(2,False)%>Return False    
<%=Level(1,False)%>End Function      

#End Region 'Contains (Evaluate if the Object exists in Collection)

#Region " Shared Methods "

<%=Level(1,False)%>Public Shared Function Get<%= GetCustomCollectionName %>() As <%= GetCustomCollectionName %> 
<%=Level(2,False)%>Return CType(DataPortal.Fetch(New Criteria()), <%= GetCustomCollectionName %>)
<%=Level(1,False)%>End Function

<%=Level(1,False)%>Public Shared Function Empty<%= GetCustomCollectionName %>() As <%= GetCustomCollectionName %> 
<%=Level(2,False)%>Return New <%= GetCustomCollectionName %>
<%=Level(1,False)%>End Function

#End Region ' Shared Methods

#Region " Constructors "

<%=Level(1,False)%>Protected Sub New()
<%=Level(2,False)%>' prevent direct creation
<%=Level(2,False)%><% If AllowSort Then %>AllowSort = True<% End If %><% If AllowFind Then %><%=Level(2,True)%>AllowFind = True<% End If %>
<%=Level(1,False)%>End Sub
	
#End Region ' Constructors 

#Region " Criteria Class (identifies the Individual Object/ Primary Key) "

<%=Level(1,False)%>' criteria for identifying existing object and is always serializable
<%=Level(1,False)%>'Not necessary in this class. pg. 384
<%=Level(1,False)%><Serializable()> _
<%=Level(1,False)%>Private Class Criteria
<%=Level(2,False)%>Inherits CSLA.Server.CriteriaBase
    	
<%=Level(2,False)%>Public Sub New()
<%=Level(3,False)%>MyBase.New(GetType(<%= GetCustomCollectionName() %>))
<%=Level(2,False)%>End Sub
    
<%=Level(1,False)%>End Class

#End Region ' Criteria

#Region " Data Access "

<%=Level(1,False)%>' called by DataPortal to load data from the database<% IF TransactionType = 2 Then %>
<%=Level(1,False)%><Transactional()> _<% END IF %>
<%=Level(1,False)%>Protected Overrides Sub DataPortal_Fetch(ByVal Criteria As Object)
<%=Level(2,False)%>'Retrieve data from db
<%=Level(2,False)%>'Locked = False
<%=Level(2,False)%>'Dim crit As Criteria = CType(Criteria, Criteria) <-Not really needed as we load the entire list
<%=Level(2,False)%>Dim cn As New SqlConnection(db("<%= RootTable.database.name %>"))
<%=Level(2,False)%>Dim cmd As New SqlCommand
<%=Level(2,False)%><% IF TransactionType = 1 Then %>Dim tr As SqlTransaction<% END IF %>	  
<%=Level(3,False)%>cn.Open()
<%=Level(2,False)%>Try
<%=Level(3,False)%><% IF TransactionType = 1 Then %>tr = cn.BeginTransaction(IsolationLevel.ReadCommitted)
<%=Level(3,False)%>Try<% END IF %>
<%=Level(4,False)%>With cmd
<%=Level(5,False)%>.Connection = cn<% IF TransactionType = 1 Then %>
<%=Level(5,False)%>.transaction = tr<% END IF %>
<%=Level(5,False)%>.CommandType = CommandType.StoredProcedure
<%=Level(5,False)%>.CommandText = "<%= GeneralSPPrefix %><%= SelectPrefix %><%= GetCustomClassName %>"
<%=Level(5,False)%>Dim dr As New SafeDataReader(.ExecuteReader)
<%=Level(5,False)%>Try
<%=Level(6,False)%>While dr.read()
<%=Level(7,False)%>Dim info As <%= GetCustomClassName %>Info
<%=Level(7,False)%>With dr<% Dim i As short %><% For i = 0 to OrdinalColCount %>
<%=Level(8,False)%><%= GetReaderAssignmentStatement(RootTable.Columns(i), i,"info") %><% Next i %>
<%=Level(7,False)%>End With 
<%=Level(7,False)%>innerlist.Add(info)
<%=Level(6,False)%>End While	                  	
<%=Level(6,False)%>' load child objects here if there are any
<%=Level(6,False)%><% IF Len(ChildCollectionName)>0 Then %>dr.NextResult()
<%=Level(6,False)%><%= MemberPrefix %><%= ChildMemberName %> = <%= ChildCollectionName %>.Get<%= ChildCollectionName %>(dr)<% End If %>
<%=Level(5,False)%>Finally
<%=Level(6,False)%>dr.Close()
<%=Level(5,False)%>End Try
<%=Level(4,False)%>End With
<%=Level(4,False)%>'MarkOld() <-No need to mark old as we cannot change it anyway
<%=Level(4,False)%><% IF TransactionType = 1 Then %>tr.commit()
<%=Level(3,False)%>Catch ex As exception
<%=Level(4,False)%>tr.rollback()
<%=Level(4,False)%>Throw ex
<%=Level(3,False)%>End Try<% END IF %>
<%=Level(2,False)%>Finally
<%=Level(3,False)%>cn.Close()
<%=Level(2,False)%>End Try
<%=Level(2,False)%>'Locked = true
<%=Level(1,False)%>End Sub

#End Region ' Data Access 

<%=Level(0,False)%>End Class

<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %><%=Level(0,False)%>End Namespace<% End If %>

