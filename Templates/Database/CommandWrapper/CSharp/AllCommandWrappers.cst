<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith 
* Description: This template will generate wrappers for all stored procedures in a database.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Description="Generates stored procedure wrappers for all stored procedures in a database" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Description="Database that the stored procedures wrappers should be based on." %>
<%@ Property Name="Accessibility" Type="CommandWrapperTemplate.AccessibilityEnum" Default="Public" Category="Context" Description="The accessibility of the generated classes." %>
<%@ Property Name="ExcludedCommands" Type="StringCollection" Default="" Optional="True" Category="Options"
	Description="If supplied, any matching commands will not get wrappers generated. (* is treated as a wildcard)" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%-- Register the StoredProcedures template and have it's properties merged into this template.  --%>
<%@ Register Template="CommandWrapperClass.cst" Name="CommandWrapperTemplate" MergeProperties="True" ExcludeProperties="SourceCommand,BatchMode,CommandClassName,ResultRowClassName,Accessibility" %>
<script runat="template">
private string _outputDirectory = String.Empty;

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
[Optional]
[Category("Output")]
[Description("The directory to output the results to.")]
public string OutputDirectory 
{
	get
	{
		// default to the directory that the template is located in
		if (_outputDirectory.Length == 0) return this.CodeTemplateInfo.DirectoryName + "output\\";
		
		return _outputDirectory;
	}
	set
	{
		_outputDirectory = value;
		if (_outputDirectory.EndsWith("\\") == false)
		{
			_outputDirectory += "\\";
		}
	} 
}

private Regex excludedCommandRegex = null;

public bool CommandIsExcluded(CommandSchema command)
{
	if (excludedCommandRegex == null)
	{
		if (ExcludedCommands != null && ExcludedCommands.Count > 0)
		{
			string excluded = String.Empty;
			for (int i = 0; i < ExcludedCommands.Count; i++)
			{
				if (ExcludedCommands[i].Trim().Length > 0)
				{
					excluded += "(" + Regex.Escape(ExcludedCommands[i]).Replace("\\*", ".*?") + ")|";
				}
			}
			
			if (excluded.Length > 0)
			{
				excluded = excluded.Substring(0, excluded.Length - 1);
				excludedCommandRegex = new Regex(excluded, RegexOptions.IgnoreCase);
			}
		}
	}
	
	if (excludedCommandRegex != null && excludedCommandRegex.IsMatch(command.Name)) return true;
	
	return false;
}

public override void Render(System.IO.TextWriter writer)
{
	this.Progress.MaximumValue = SourceDatabase.Commands.Count;
	this.Progress.Step = 1;
	
	string outputDirectory = Path.Combine(this.CodeTemplateInfo.DirectoryName, this.OutputDirectory);
	if (!Directory.Exists(outputDirectory)) Directory.CreateDirectory(outputDirectory);
	
	for (int i = 0; i < SourceDatabase.Commands.Count; i++)
	{
		if (!CommandIsExcluded(SourceDatabase.Commands[i]))
		{
			Trace.WriteLine("Generating wrapper for " + SourceDatabase.Commands[i].FullName + "...");
			try
			{
				CommandWrapperTemplate commandWrapperTemplate = new CommandWrapperTemplate();
				this.CopyPropertiesTo(commandWrapperTemplate);
				commandWrapperTemplate.SourceCommand = SourceDatabase.Commands[i];
				string outputPath = outputDirectory + commandWrapperTemplate.GetFileName();
				commandWrapperTemplate.RenderToFile(outputPath, true);
			}
			catch (Exception e)
			{
				Trace.WriteLine("Unable to generate wrapper for " + SourceDatabase.Commands[i].FullName + "\r\n" + e.ToString() + "\r\n");
			}
		}
		
		this.Progress.PerformStep();
	}
}
</script>