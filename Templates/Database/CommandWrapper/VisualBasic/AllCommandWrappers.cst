<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Description: This template will generate wrappers for all stored procedures in a database.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate OutputType="None" Language="VB" TargetLanguage="Text" Description="This template will generate wrappers for all stored procedures in a database." %>

<%-- Required Properties  --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Required" Description="Database that the stored procedures wrappers should be based on." OnChanged="OnSourceDatabaseChanged" DeepLoad="True" %>
<%@ Property Name="ResultSchema" Type="CommandWrapperTemplate.ResultSchemaEnum" Category="Required" Default="StronglyTyped"  Description="Determines what type of result schema should be used for the wrapper class." %>
<%@ Property Name="Accessibility" Type="CommandWrapperTemplate.AccessibilityEnum" Category="Required" Default="Public" Description="The accessibility of the generated classes." %>

<%-- Optional Properties  --%>
<%@ Property Name="IgnoreExpressions" Type="StringCollection" Default="" Optional="True" Category="Optional" Description="If supplied, any matching commands will not get wrappers generated. (* is treated as a wildcard)" %>

<%-- Register the StoredProcedures template and have it's properties merged into this template.  --%>
<%@ Register Template="CommandWrapperClass.cst" Name="CommandWrapperTemplate" MergeProperties="True" ExcludeProperties="SourceCommand,BatchMode,CommandClassName,ResultRowClassName,Accessibility" %>

<%-- Register referenced assemblies.  --%>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>

<%-- Import commonly used namespaces. --%>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

Private _outputDirectory As String = String.Empty

<Editor(GetType(System.Windows.Forms.Design.FolderNameEditor), GetType(System.Drawing.Design.UITypeEditor))> _
<[Optional]()> _
<Category("Output")> _
<Description("The directory to output the results to.")> _
Public Property OutputDirectory() As String
	Get
		' default to the directory that the template is located in
		If _outputDirectory.Length = 0 Then
			Return ".\"
		End If

		Return _outputDirectory
	End Get
	Set
		_outputDirectory = value
		If _outputDirectory.EndsWith("\") = False Then
			_outputDirectory += "\"
		End If
	End Set
End Property

Private _expressions As List(Of Regex) = Nothing
Public Function CommandIsExcluded(ByVal cmd As CommandSchema) As Boolean
    If Not IgnoreExpressions Is Nothing AndAlso IgnoreExpressions.Count > 0 Then
        If _expressions Is Nothing Then
            _expressions = New List(Of Regex)()
            For Each ignore As String In IgnoreExpressions
                If Not String.IsNullOrEmpty(ignore) Then
                    _expressions.Add(New Regex(ignore.Trim(), RegexOptions.IgnoreCase))
                End If
            Next
        End If
    
        For Each regex As Regex In _expressions
            If regex.IsMatch(cmd.FullName) Then
                Return True
            End If
        Next
    End If
    
    Return False
End Function

Public Overloads Overrides Sub Render(ByVal writer As System.IO.TextWriter)
    If(SourceDatabase.Commands.Count > 0)
        Me.Progress.MaximumValue = SourceDatabase.Commands.Count
    Else
        Trace.WriteLine("No commands were found! Please choose a DataSource that contains commands.")
        Me.Progress.MaximumValue = 100
    End If
	
	Me.Progress.[Step] = 1

	Dim outputDirectory As String = Path.GetFullPath(Me.OutputDirectory)
	If Not Directory.Exists(outputDirectory) Then
		Directory.CreateDirectory(outputDirectory)
	End If

	Dim i As Integer = 0
	While i < SourceDatabase.Commands.Count
		If Not CommandIsExcluded(SourceDatabase.Commands(i)) Then
			Trace.WriteLine("Generating wrapper for " + SourceDatabase.Commands(i).FullName + "...")
			Try
                Dim commandWrapperTemplate As CommandWrapperTemplate = Me.Create(Of CommandWrapperTemplate)()
                Me.CopyPropertiesTo(commandWrapperTemplate)
                commandWrapperTemplate.SourceCommand = SourceDatabase.Commands(i)
    
                Dim path As String = System.IO.Path.Combine(outputDirectory, commandWrapperTemplate.GetFileName())
                commandWrapperTemplate.RenderToFile(path, True)
		    Catch e As Exception
				Trace.WriteLine("Unable to generate wrapper for " + SourceDatabase.Commands(i).FullName + "" & Chr(13) & "" & Chr(10) & "" + e.ToString() + "" & Chr(13) & "" & Chr(10) & "")
			End Try
		End If

		Me.Progress.PerformStep()
		System.Math.Max(System.Threading.Interlocked.Increment(i),i - 1)
	End While
End Sub

Public Sub OnSourceDatabaseChanged(sender As Object, args As System.EventArgs)
	If SourceDatabase Is Nothing Then
		Return
	End If

	If String.IsNullOrEmpty(TargetNamespace) Then
		TargetNamespace = SourceDatabase.Name
	End If

	If IgnoreExpressions Is Nothing Then
		IgnoreExpressions = New StringCollection()
	End If

	If IgnoreExpressions.Count = 0 Then
		IgnoreExpressions.Add("^dbo.aspnet")
		IgnoreExpressions.Add("^dbo.vw_aspnet")
	End If
End Sub
</script>