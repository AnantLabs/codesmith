<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Description: This template will generate wrappers for a stored procedure in a database.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="CodeSmith.BaseTemplates.VBSqlCodeTemplate" Description="This template will generate wrappers for a stored procedure in a database." %>

<%-- Required Properties  --%>
<%@ Property Name="SourceCommand" Type="SchemaExplorer.CommandSchema" Category="Required" Description="Command that the wrapper class should wrap." %>
<%@ Property Name="Accessibility" Type="AccessibilityEnum" Default="Public" Category="Required" Description="The accessibility of the generated classes." %>
<%@ Property Name="ResultSchema" Type="ResultSchemaEnum" Default="StronglyTyped" Category="Required" Description="Determines what type of result schema should be used for the wrapper class." %>
<%@ Property Name="TargetNamespace" Type="System.String" Category="Required" Description="Namespace that the generated classes should be a member of." %>

<%-- Optional Properties  --%>
<%@ Property Name="CommandClassName" Type="System.String" Optional="True" Category="Optional" Description="Used to override the name of the command wrapper class." %>
<%@ Property Name="ResultRowClassName" Type="System.String" Optional="True" Category="Optional" Description="Used to override the name of the result row class." %>
<%@ Property Name="CommandPrefix" Type="System.String" Default="usp_" Category="Optional" Description="If this prefix is found at the start of a command name, it will be stripped off." %>
<%@ Property Name="BatchMode" Type="System.Boolean" Default="False" Category="Optional" Description="If true, the template will not output using and namespace statements." %>

<%-- Register referenced assemblies.  --%>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="SchemaExplorer" %>

<%-- Import commonly used namespaces. --%>
<%@ Import Namespace="SchemaExplorer" %>

<% If Not (BatchMode) Then %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by CodeSmith.
'
'     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
'     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
'     Version: <%= GetType(CodeTemplate).Assembly.GetName().Version.ToString() %>
'
'     Changes to this file may cause incorrect behavior AndAlso will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data
Imports System.Data.SqlTypes
Imports System.Data.SqlClient
<% If (Me.ResultSchema = ResultSchemaEnum.StronglyTyped AndAlso Me.ReturnsResultSet) Then %>
Imports System.Collections.ObjectModel
<% End If %>


Namespace <%= TargetNamespace %>
<% End If %>

<% If (ResultSchema = ResultSchemaEnum.StronglyTyped AndAlso ReturnsResultSet) Then %>
	#Region "<%= GetRowClassName() %>"
	' <summary>
	' Stores result row level information from the <%= SourceCommand.Name %> stored procedure.
	' </summary>
	<Serializable()> _
	<%= GetAccessModifier() %> Class <%= GetRowClassName() %>
	
		#Region "Member Variables"
		<% For Each column As CommandResultColumnSchema In SourceCommand.CommandResults(0).Columns %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% Next %>
		#End Region
		
		#Region "Constructors"
		Public Sub New()
		End Sub
		
		Public Sub New(reader As SqlDataReader)
			LoadFromReader(reader)
		End Sub
		#End Region
		
		#Region "Helper Methods"
		Protected Sub LoadFromReader(reader As SqlDataReader)
			If (Not reader Is Nothing AndAlso Not reader.IsClosed) Then
				<% For i as Int32 = 0 To (SourceCommand.CommandResults(0).Columns.Count - 1) %>
				<%= GetReaderAssignmentStatement(SourceCommand.CommandResults(0).Columns(i), i) %>
				<% Next %>
			End If
		End Sub
		#End Region
		
		#Region "Public Properties"
		<% For i as Int32 = 0 To (SourceCommand.CommandResults(0).Columns.Count - 1) %>
		Public Property <%= GetPropertyName(SourceCommand.CommandResults(0).Columns(i)) %> As <%= GetSqlType(SourceCommand.CommandResults(0).Columns(i).DataType) %>
			Get
				Return <%= GetMemberVariableName(SourceCommand.CommandResults(0).Columns(i)) %>
			End Get
			Set
				<%= GetMemberVariableName(SourceCommand.CommandResults(0).Columns(i)) %> = value
			End Set
		End Property
		<% If (i < SourceCommand.CommandResults(0).Columns.Count - 1) Then Response.Write(vbNewLine) %>		
		<% Next %>
		#End Region
	End Class
	#End Region	
<% End If %>
	#Region "<%= SourceCommand.Name %> Wrapper"
    ' <summary>
    ' This class is a wrapper for the <%= SourceCommand.Name %> stored procedure.
    ' </summary>
    <%= GetAccessModifier() %> class <%= GetClassName() %>

		#Region "Member Variables
		
		Protected _connectionString As String = String.Empty
        Protected _connection As SqlConnection = Nothing
        Protected _transaction As SqlTransaction = Nothing
		Protected _ownsConnection As Boolean = true
		Protected _recordsAffected As Int32= -1
		Protected _returnValue As Int32 = 0
		<% For Each parameter As ParameterSchema In SourceCommand.NonReturnValueParameters %>
		<%= GetMemberVariableDeclarationStatement(parameter) %>
		Protected <%= GetMemberVariableName(parameter) %>Set As Boolean = false
		<% Next %>
		#End Region
		
		#Region "Constructors"
		Public Sub New()
		End Sub
		
		Public Sub New(connectionString As String)
			ConnectionString = connectionString
		End Sub
		
		Public Sub New(connection As SqlConnection)
			Connection = connection
		End Sub
		
		Public Sub New(connection As SqlConnection, transaction As SqlTransaction)
			Connection = connection
			Transaction = transaction
		End Sub
		
		#End Region
		
		#Region "Public Properties"
		' <summary>
		' The connection string to use when executing the <%= SourceCommand.Name %> stored procedure.
		' </summary>
		Public Property ConnectionString As String
			Get
				Return _connectionString
			End Get
			Set
				_connectionString = value
			End Set
		End Property
        
        ' <summary>
        ' The connection to use when executing the <%= SourceCommand.Name %> stored procedure.
        ' If this is not null, it will be used instead of creating a New connection.
        ' </summary>
        Public Property Connection As SqlConnection
            Get
				Return _connection
			End Get
            Set 
				_connection = value
			End Set
        End Property
		
        ' <summary>
        ' The transaction to use when executing the <%= SourceCommand.Name %> stored procedure.
        ' If this is not null, the stored procedure will be executing within the transaction.
        ' </summary>
        Public Property Transaction As SqlTransaction
            Get
				Return _transaction
			End Get
            Set
				_transaction = value
			End Set
        End Property
		
		' <summary>
		' Gets the Return value from the <%= SourceCommand.Name %> stored procedure.
		' </summary>
		Public ReadOnly Property ReturnValue As Int32
			Get
				Return _returnValue
			End Get
		End Property
		
		' <summary>
		' Gets the number of rows changed, inserted, or deleted by execution of the <%= SourceCommand.Name %> stored procedure.
		' </summary>
		Public ReadOnly Property RecordsAffected As Int32
			Get
				Return _recordsAffected
			End Get
		End Property
		
		<% For i as Int32 = 0 To (SourceCommand.NonReturnValueParameters.Count - 1) %>
		' <summary>
		' <%= SourceCommand.NonReturnValueParameters(i).Description %>
		' </summary>
		Public Property <%= GetPropertyName(SourceCommand.NonReturnValueParameters(i)) %> As <%= GetSqlType(SourceCommand.NonReturnValueParameters(i).DataType) %>
			Get
				Return <%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %>
			End Get
			Set
				<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %> = value
				<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %>Set = true
			End Set
		End Property
		<% If (i < SourceCommand.NonReturnValueParameters.Count - 1) Then Response.Write(vbNewLine) %>		
		<% Next %>
		#End Region
		
		#Region "Helper Methods"
        Private Function GetConnection() As SqlConnection
            If (Not Connection Is Nothing) Then
				_ownsConnection = false
                Return Connection
            Else
 				System.Diagnostics.Debug.Assert(ConnectionString.Length <> 0, "You must first set the ConnectioString property before calling an Execute method.")
            	Return New SqlConnection(ConnectionString)
            End If
        End Function
		
		#End Region
		
		#Region "Execute Methods"
		<% If (ReturnsResultSet) Then %>
		' <summary>
		' This method calls the <%= SourceCommand.Name %> stored procedure and returns a SqlDataReader with the results.
		' </summary>
		' <returns>SqlDataReader</returns>

		Public Overridable Function <%= IIf(ReturnsResultSet AndAlso ResultSchema = ResultSchemaEnum.ADO , "Execute" , "ExecuteReader") %>() As SqlDataReader

			Dim reader As SqlDataReader = Nothing
			Dim cmd As SqlCommand = New SqlCommand()
			Dim cn As SqlConnection = GetConnection()
			
			Try
				cmd.Connection = cn
				cmd.Transaction = Transaction
				cmd.CommandText = "[<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>]"
				cmd.CommandType = CommandType.StoredProcedure
				
				'"Populate Parameters"
				Dim prmReturnValue As SqlParameter = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int)
				prmReturnValue.Direction = ParameterDirection.ReturnValue
				
				<% For i As Int32 = 0 To (SourceCommand.NonReturnValueParameters.Count - 1) %>
				Dim <%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %> As SqlParameter = cmd.Parameters.Add("<%= SourceCommand.NonReturnValueParameters(i).Name %>", SqlDbType.<%= GetSqlDbType(SourceCommand.NonReturnValueParameters(i).NativeType) %>)
				<% If (SourceCommand.NonReturnValueParameters(i).Direction <> ParameterDirection.Input) Then %>
				If (<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %>Set = True) Then
				<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters(i).Direction.ToString() %>
				Else
					<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.Output
				End If
				<% Else %>
				<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters(i).Direction.ToString() %>
				<% End If %>
				<% BuildParameterExtraStatements(SourceCommand.NonReturnValueParameters(i)) %>
				If (<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %>Set = True OrElse <%= GetPropertyName(SourceCommand.NonReturnValueParameters(i)) %>.IsNull = False) Then
					<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Value = <%= GetPropertyName(SourceCommand.NonReturnValueParameters(i)) %>
				End If
				<% If (i < SourceCommand.NonReturnValueParameters.Count - 1) Then Response.Write(vbTab + vbTab + vbTab + vbTab + vbNewLine) %>
				<% Next %>
				'"End Populate Parameters"
				
				'"Execute Command
                If (cn.State <> ConnectionState.Open) Then cn.Open()
				If (_ownsConnection) Then
					reader = cmd.ExecuteReader(CommandBehavior.CloseConnection)
				Else
					reader = cmd.ExecuteReader()
				End If
				'"End Execute Command
				
				'"Get Output Parameters
				If (Not prmReturnValue.Value Is Nothing AndAlso Not prmReturnValue.Value Is DBNull.Value)
					_returnValue = CType(prmReturnValue.Value, Int32)
				End If
				
				<% For i As Int32 = 0 To (SourceCommand.AllOutputParameters.Count - 1) %>
				If (Not <%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %> Not Is Nothing AndAlso <%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value Is Nothing) Then
					If (<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value is <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>) Then
						<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = (<%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value
					Else
						If (<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value <> DBNull.Value)
							<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = New <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>((<%= GetCSharpVariableType(SourceCommand.AllOutputParameters(i).DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value)
						Else
							<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>.Null
						End If
					End If
				Else
					<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = <%= GetMemberVariableDefaultValue(SourceCommand.AllOutputParameters(i).DataType) %>
				End If}
				<% If (i < SourceCommand.AllOutputParameters.Count - 1) Then Response.Write(vbTab + vbTab + vbTab + vbTab + vbNewLine) %>
				<% Next %>
				'"End Get Output Parameters
			Finally
				cmd.Dispose()
			End Try
			
			Return reader
		End Function
		
		' <summary>
		' This method calls the <%= SourceCommand.Name %> stored procedure AndAlso returns a DataSet with the results.
		' </summary>
		' <returns>DataSet</returns>
		Public Overridable Function ExecuteDataSet() As DataSet

			Dim ds As DataSet = New DataSet()
			Dim cmd As SqlCommand = New SqlCommand()
			Dim cn As SqlConnection = GetConnection()
			
			Try

				cmd.Connection = cn
				cmd.Transaction = Transaction
				cmd.CommandText = "[<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>]"
				cmd.CommandType = CommandType.StoredProcedure
				
				'"Populate Parameters"
				Dim prmReturnValue As SqlParameter = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int)
				prmReturnValue.Direction = ParameterDirection.ReturnValue
				
				<% For i As Int32 = 0 To (SourceCommand.NonReturnValueParameters.Count - 1) %>
				Dim <%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %> As SqlParameter = cmd.Parameters.Add("<%= SourceCommand.NonReturnValueParameters(i).Name %>", SqlDbType.<%= GetSqlDbType(SourceCommand.NonReturnValueParameters(i).NativeType) %>)
				<% If (SourceCommand.NonReturnValueParameters(i).Direction <> ParameterDirection.Input) Then %>
				If (<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %>Set = True) Then
				<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters(i).Direction.ToString() %>
				Else
					<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.Output
				End If
				<% Else %>
				<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters(i).Direction.ToString() %>
				<% End If %>
				<% BuildParameterExtraStatements(SourceCommand.NonReturnValueParameters(i)) %>
				If (<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %>Set = True OrElse <%= GetPropertyName(SourceCommand.NonReturnValueParameters(i)) %>.IsNull = False) Then
					<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Value = <%= GetPropertyName(SourceCommand.NonReturnValueParameters(i)) %>
				End If
				<% If (i < SourceCommand.NonReturnValueParameters.Count - 1) Then Response.Write(vbTab + vbTab + vbTab + vbTab + vbNewLine) %>
				<% Next %>
				'"End Populate Parameters"
				
				'"Execute Command
				if (cn.State <> ConnectionState.Open) Then cn.Open()
				
				Dim da As SqlDataAdapter = New SqlDataAdapter(cmd)
				da.Fill(ds)
				_recordsAffected = ds.Tables(0).Rows.Count
				'"End Execute Command
				
				'"Get Output Parameters
				If (Not prmReturnValue.Value Is Nothing AndAlso Not prmReturnValue.Value Is DBNull.Value) Then
					_returnValue = CType(prmReturnValue.Value, Int32)
				End If
				
				<% For i As Int32 = 0 To (SourceCommand.AllOutputParameters.Count - 1) %>
				If Not (<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %> Not Is Nothing AndAlso <%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value Is Nothing) Then
					If (<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value is <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>) Then
						<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = (<%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value
					Else
						If (<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value <> DBNull.Value) Then
							<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = New <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>((<%= GetCSharpVariableType(SourceCommand.AllOutputParameters(i).DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value)
						Else
							<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>.Null
						End If
					End If
				Else
					<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = <%= GetMemberVariableDefaultValue(SourceCommand.AllOutputParameters(i).DataType) %>
				End If
				<% If (i < SourceCommand.AllOutputParameters.Count - 1) Then Response.Write(vbTab + vbTab + vbTab + vbTab + vbNewLine) %>
				<% Next %>
				'"End Get Output Parameters
			Finally
				If (_ownsConnection) Then
					If (cn.State = ConnectionState.Open) Then
						cn.Close()
					End If
					
					cn.Dispose()
				End If
				cmd.Dispose()
			End Try
			
			Return ds
		End Function
		
		<% End If %>
		<% If (ReturnsResultSet = False OrElse ResultSchema = ResultSchemaEnum.StronglyTyped) Then %>
		' <summary>
		' This method calls the <%= SourceCommand.Name %> stored procedure<% If (ReturnsResultSet) Then %> AndAlso outputs the results to a custom strongly typed collection<% End If %>.
		' </summary>
		<% If (ReturnsResultSet) Then %>
		' <returns><%= GetRowClassCollectionName() %></returns>
		<% End If %>
		Public Overridable <% If (ReturnsResultSet) Then Response.Write("Function") Else Response.Write("Sub") %> Execute() <% If (ReturnsResultSet) Then Response.Write(" As " + GetRowClassCollectionName()) %>
			<% If (ReturnsResultSet) Then %>
			Dim <%= GetRowClassCollectionInstanceName() %> As <%= GetRowClassCollectionName() %> = New <%= GetRowClassCollectionName() %>()
			<% End If %>
			Dim cmd As SqlCommand= New SqlCommand()
			Dim cn As SqlConnection = GetConnection()
			
			Try
				cmd.Connection = cn
				cmd.Transaction = Transaction
				cmd.CommandText = "[<%= SourceCommand.Owner %>].[<%= SourceCommand.Name %>]"
				cmd.CommandType = CommandType.StoredProcedure
				
				'"Populate Parameters"
				Dim prmReturnValue As SqlParameter = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int)
				prmReturnValue.Direction = ParameterDirection.ReturnValue
				
				<% For i As Int32 = 0 To (SourceCommand.NonReturnValueParameters.Count - 1) %>
				Dim <%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %> As SqlParameter = cmd.Parameters.Add("<%= SourceCommand.NonReturnValueParameters(i).Name %>", SqlDbType.<%= GetSqlDbType(SourceCommand.NonReturnValueParameters(i).NativeType) %>)
				<% If (SourceCommand.NonReturnValueParameters(i).Direction <> ParameterDirection.Input) Then %>
				If (<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %>Set = True) Then
				<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters(i).Direction.ToString() %>
				Else
					<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.Output
				End If
				<% Else %>
				<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Direction = ParameterDirection.<%= SourceCommand.NonReturnValueParameters(i).Direction.ToString() %>
				<% End If %>
				<% BuildParameterExtraStatements(SourceCommand.NonReturnValueParameters(i)) %>
				If (<%= GetMemberVariableName(SourceCommand.NonReturnValueParameters(i)) %>Set = True OrElse <%= GetPropertyName(SourceCommand.NonReturnValueParameters(i)) %>.IsNull = False) Then
					<%= GetParameterName(SourceCommand.NonReturnValueParameters(i).Name) %>.Value = <%= GetPropertyName(SourceCommand.NonReturnValueParameters(i)) %>
				End If
				<% If (i < SourceCommand.NonReturnValueParameters.Count - 1) Then Response.Write(vbTab + vbTab + vbTab + vbTab + vbNewLine) %>
				<% Next %>
				
				' "Execute Command"
				<% If (ReturnsResultSet) Then %>
				If (cn.State <> ConnectionState.Open) Then cn.Open()
				Dim reader As SqlDataReader = cmd.ExecuteReader()
				Try
					While (reader.Read())
						Dim <%= GetCamelCaseName(GetRowClassName()) %> As <%= GetRowClassName() %> = New <%= GetRowClassName() %>(reader)
						<%= GetRowClassCollectionInstanceName() %>.Add(<%= GetCamelCaseName(GetRowClassName()) %>)
					End While
				Finally
					If (Not reader.IsClosed) Then
						reader.Close()
						_recordsAffected = reader.RecordsAffected
					End If
				End Try
				<% Else %>
				If (cn.State <> ConnectionState.Open) Then cn.Open()
				_recordsAffected = cmd.ExecuteNonQuery()
				<% End If %>
				
				'"Get Output Parameters"
				If (Not prmReturnValue.Value Is Nothing AndAlso Not prmReturnValue.Value Is DBNull.Value) Then 
					_returnValue = CType(prmReturnValue.Value, Int32)
				End If
				
				<% For i As Int32 = 0 To (SourceCommand.AllOutputParameters.Count - 1) %>
				If (Not <%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %> Is Nothing AndAlso <%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value Is Nothing) Then
					If (<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value is <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>) Then
						<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = (<%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value
					Else
						If (<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value <> DBNull.Value)
							<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = New <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>((<%= GetCSharpVariableType(SourceCommand.AllOutputParameters(i).DataType) %>)<%= GetParameterName(SourceCommand.AllOutputParameters(i).Name) %>.Value)
						Else
							<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = <%= GetSqlType(SourceCommand.AllOutputParameters(i).DataType) %>.Null
						End If
					End If
				Else
					<%= GetPropertyName(SourceCommand.AllOutputParameters(i)) %> = <%= GetMemberVariableDefaultValue(SourceCommand.AllOutputParameters(i).DataType) %>
				End If
				<% If (i < SourceCommand.AllOutputParameters.Count - 1) Then Response.Write(vbTab + vbTab + vbTab + vbTab + vbNewLine) %>
				<% Next %>
				'"End Get Output Parameters"
			Finally
				If (_ownsConnection) Then
					If (cn.State = ConnectionState.Open) Then
						cn.Close()
					End If
					
					cn.Dispose()
				End If
				cmd.Dispose()
			End Try
			<% If (ReturnsResultSet) Then %>
			
			Return <%= GetRowClassCollectionInstanceName() %>
			<% End If %>
		End <% If (ReturnsResultSet) Then Response.Write("Function") Else Response.Write("Sub") %> 		
		<% End If %>
		
		<% If (SourceCommand.Parameters.Count <= 42) Then ' IntelliSense breaks after 42 parameters on one method. %>
		<% If (ReturnsResultSet) Then %>
		' <summary>
		' This method calls the <%= SourceCommand.Name %> stored procedure AndAlso returns a SqlDataReader with the results.
		' </summary>
		<% BuildXmlCommentParameterList() %>
		' <returns>SqlDataReader</returns>
		Public Shared Function <%= IIf(ReturnsResultSet AndAlso ResultSchema = ResultSchemaEnum.ADO , "Execute" , "ExecuteReader") %>(<%= BuildParameterList() %>) As SqlDataReader
			Dim <%= GetCamelCaseName(GetClassName()) %> As <%= GetClassName() %> = New <%= GetClassName() %>()
			
			'"Assign Property Values"
			<%= GetCamelCaseName(GetClassName()) %>.ConnectionString = connectionString
			<%= AssignPropertyValues(GetCamelCaseName(GetClassName())) %>
			'"End Assign Property Values"
			
			Dim reader As SqlDataReader = <%= GetCamelCaseName(GetClassName()) %>.ExecuteReader()
			
			'"Get Property Values"
			<%= GetPropertyValues(GetCamelCaseName(GetClassName())) %>
			'"End Get Property Values"
			
			Return reader
		End Function
		
		' <summary>
		' This method calls the <%= SourceCommand.Name %> stored procedure AndAlso returns a DataSet with the results.
		' </summary>
		<% BuildXmlCommentParameterList() %>
		' <returns>DataSet</returns>
		Public Shared Function ExecuteDataSet(<%= BuildParameterList() %>) As DataSet
			Dim <%= GetCamelCaseName(GetClassName()) %> As <%= GetClassName() %> = New <%= GetClassName() %>()
			
			'"Assign Property Values
			<%= GetCamelCaseName(GetClassName()) %>.ConnectionString = connectionString
			<%= AssignPropertyValues(GetCamelCaseName(GetClassName())) %>
			'"End Assign Property Values
			
			Dim ds As DataSet = <%= GetCamelCaseName(GetClassName()) %>.ExecuteDataSet()
			
			'"Get Property Values
			<%= GetPropertyValues(GetCamelCaseName(GetClassName())) %>
			'"End Get Property Values
			
			Return ds
		End Function
		
		<% End If %>
		<% If (ReturnsResultSet = False OrElse ResultSchema = ResultSchemaEnum.StronglyTyped) Then %>
		' <summary>
		' This method calls the <%= SourceCommand.Name %> stored procedure<% If (ReturnsResultSet) Then %> AndAlso outputs the results to a custom strongly typed collection<% End If %>.
		' </summary>
		<% BuildXmlCommentParameterList() %>
		<% If (ReturnsResultSet) Then %>
		' <returns><%= GetRowClassCollectionName() %></returns>
		<% End If %>
		Public Shared <% If (ReturnsResultSet) Then Response.Write("Function") Else Response.Write("Sub") %> Execute(<%= BuildParameterList() %>) As <% If (ReturnsResultSet) Then Response.Write(GetRowClassCollectionName()) %>
			Dim <%= GetCamelCaseName(GetClassName()) %> As <%= GetClassName() %> = New <%= GetClassName() %>()
			
			'"Assign Property Values"
			<%= GetCamelCaseName(GetClassName()) %>.ConnectionString = connectionString
			<%= AssignPropertyValues(GetCamelCaseName(GetClassName())) %>
			'"End Assign Property Values"
			
			<% If (ReturnsResultSet) Then %>
			Dim <%= GetRowClassCollectionInstanceName() %> As <%= GetRowClassCollectionName() %> = <%= GetCamelCaseName(GetClassName()) %>.Execute()
			<% Else %>
			<%= GetCamelCaseName(GetClassName()) %>.Execute()
			<% End If %>
			
			'"Get Property Values"
			<%= GetPropertyValues(GetCamelCaseName(GetClassName())) %>
			'"End Get Property Values"
			<% If (ReturnsResultSet) Then %>
			
			Return <%= GetRowClassCollectionInstanceName() %>
			<% End If %>
		End Function
		<% End If %>
		<% End If %>
		#End Region
	End Class
	#End Region
<% If (Not BatchMode) Then %>
End Namespace
<% End If %>

<script runat="template">

#Region "Name Helpers"

Public Function GetClassName() As String
	If (CommandClassName <> Nothing AndAlso CommandClassName.Length > 0) Then
		Return CommandClassName
	Else
		Dim className As String = SourceCommand.Name
		If (className.StartsWith(Me.CommandPrefix)) Then
			className = className.Substring(Me.CommandPrefix.Length - 1)
		End If
		className = className.Replace(" ", "")
		className = className.Replace("_", "")
		Return className
	End If
End Function

Public Function GetRowClassName() As String

	If (ResultRowClassName <> Nothing AndAlso ResultRowClassName.Length > 0) Then
		Return ResultRowClassName
	Else
		Return GetClassName() & "Row"
	End If
End Function

Public Function GetRowClassCollectionName() As String
	Return "Collection( Of " + GetRowClassName() + ")"
End Function

Public Function GetRowClassCollectionInstanceName() As String
	Return GetCamelCaseName(GetRowClassName() + "List")
End Function

Public Shadows Function GetCamelCaseName(value As String) As String
	If (value.StartsWith("@")) Then value = value.Substring(1)
	If (value = "Return_VALUE") Then Return "ReturnValue"
	
	Return StringUtil.ToCamelCase(	value )
End Function

Public Function GetParameterName(value As String) As String
	value = value.Replace(" ", "")
	if (value.StartsWith("@")) Then value = value.Substring(1)
	Return "prm" + value
End Function

Public Shadows Function GetMemberVariableName(column As CommandResultColumnSchema) As String
	Dim propertyName As String = GetPropertyName(column)
	Dim memberVariableName As String = "_" + GetCamelCaseName(propertyName)
	
	Return memberVariableName
End Function

Public Shadows Function GetMemberVariableName(parameter As ParameterSchema) As String

	Dim propertyName As String = GetPropertyName(parameter)
	if (propertyName.StartsWith("@")) Then propertyName = propertyName.Substring(1)
	Dim memberVariableName As String = "_" + GetCamelCaseName(propertyName)
	
	Return memberVariableName
End Function

Public Shadows Function GetPropertyName(column As CommandResultColumnSchema) As String
	Dim propertyName As String = column.Name.Replace(" ", "")
	
	Return propertyName
End Function

Public Shadows Function GetPropertyName(parameter As ParameterSchema) As String
	Dim propertyName As String = parameter.Name.Replace(" ", "")
	if (propertyName.StartsWith("@")) Then propertyName = propertyName.Substring(1)
	
	Return propertyName
End Function
#End Region

#Region "Miscellaneous"

Public Overrides Function GetFileName() As String
	Return Me.GetClassName() + ".vb"
End Function

Private ReadOnly Property ReturnsResultSet As Boolean
	Get
		Try
			Return Me.ResultSchema <> ResultSchemaEnum.None AndAlso (SourceCommand.CommandResults.Count > 0)
		Catch
			' problem discovering schema information, change result schema to ADO.
			Me.ResultSchema = ResultSchemaEnum.ADO
			Return true
		End Try
	End Get
End Property

Public Sub BuildXmlCommentParameterList()

	Dim builder As System.Text.StringBuilder = New System.Text.StringBuilder()
	builder.Append(vbTab + vbTab + "' <param name=""connectionString"">The connection string to use</param>\r\n")
	
	For i As Int32 = 0 To (SourceCommand.InputParameters.Count - 1)
		builder.Append(vbTab + vbTab + " ")
		builder.Append("'<param name=""")
		builder.Append(GetCamelCaseName(SourceCommand.InputParameters(i).Name))
		builder.Append(""">")
		builder.Append(SourceCommand.InputParameters(i).Description)
		builder.Append("'</param>\r\n")
	Next
	
	For i As Int32 = 0 To (SourceCommand.InputOutputParameters.Count - 1)
		builder.Append(vbTab + vbTab + " ")
		builder.Append("<param name=""")
		builder.Append(GetCamelCaseName(SourceCommand.InputOutputParameters(i).Name))
		builder.Append(""">")
		builder.Append(SourceCommand.InputOutputParameters(i).Description)
		builder.Append("</param>\r\n")
	Next
	
	For i As Int32 = 0 To (SourceCommand.OutputParameters.Count - 1)
		builder.Append(vbTab + vbTab + " ")
		builder.Append("<param name=""")
		builder.Append(GetCamelCaseName(SourceCommand.OutputParameters(i).Name))
		builder.Append(""">")
		builder.Append(SourceCommand.OutputParameters(i).Description)
		builder.Append("</param>\r\n")
	Next
	
	If (builder.ToString().Length > 0) Then
		Response.Write(builder.ToString())
	End If
End Sub

Public Sub BuildParameterExtraStatements(parameter As ParameterSchema)

	Dim builder As System.Text.StringBuilder = New System.Text.StringBuilder()
	Select Case (parameter.DataType)
		Case DbType.AnsiString, DbType.AnsiStringFixedLength, DbType.String, DbType.StringFixedLength
			builder.Append(vbTab + vbTab + vbTab + vbTab + vbTab)
			builder.Append(GetParameterName(parameter.Name))
			builder.Append(".Size = ")
			builder.Append(parameter.Size)
			builder.Append("\r\n")
		Case DbType.Currency,DbType.Decimal,DbType.Double,DbType.VarNumeric
			builder.Append(vbTab + vbTab + vbTab + vbTab + vbTab)
			builder.Append(GetParameterName(parameter.Name))
			builder.Append(".Precision = ")
			builder.Append(parameter.Precision)
			builder.Append(vbNewLine)
			builder.Append(vbTab + vbTab + vbTab + vbTab + vbTab)
			builder.Append(GetParameterName(parameter.Name))
			builder.Append(".Scale = ")
			builder.Append(parameter.Scale)
			builder.Append("\r\n")
	End Select
	
	If (builder.ToString().Length > 0) Then
		Response.Write(builder.ToString())
	End If
End Sub

Public Function BuildParameterList() As String
	Dim builder As System.Text.StringBuilder = New System.Text.StringBuilder()
	builder.Append("connectionString As String, ")
	For i As Int32 = 0 To (SourceCommand.InputParameters.Count - 1)
		builder.Append(GetCamelCaseName(SourceCommand.InputParameters(i).Name))
		builder.Append(" As ")
		builder.Append(GetSqlType(SourceCommand.InputParameters(i).DataType))
		builder.Append(", ")
	Next
	For i As Int32 = 0 To (SourceCommand.InputOutputParameters.Count - 1)
		builder.Append(GetCamelCaseName(SourceCommand.InputOutputParameters(i).Name))
		builder.Append(" As ref ")
		builder.Append(GetSqlType(SourceCommand.InputOutputParameters(i).DataType))
		builder.Append(", ")
	Next

	For i As Int32 = 0 To (SourceCommand.OutputParameters.Count - 1)
		builder.Append(GetCamelCaseName(SourceCommand.OutputParameters(i).Name))
		builder.Append("As ref ")
		builder.Append(GetSqlType(SourceCommand.OutputParameters(i).DataType))
		builder.Append(", ")
	Next
	
	if (builder.ToString().Length > 0)
		Return builder.ToString().Substring(0, builder.Length - 2)
	Else
		Return String.Empty
	End If
End Function

Public Function AssignPropertyValues(objectName As String) As String

	Dim builder As System.Text.StringBuilder = New System.Text.StringBuilder()
	For i As Int32 = 0 To (SourceCommand.NonReturnValueParameters.Count - 1)
		builder.Append(objectName)
		builder.Append(".")
		builder.Append(GetPropertyName(SourceCommand.NonReturnValueParameters(i)))
		builder.Append(" = ")
		builder.Append(GetCamelCaseName(SourceCommand.NonReturnValueParameters(i).Name))
		builder.Append("," + vbNewLine + vbNewLine + vbTab + vbTab + vbTab)
	Next
	
	if (builder.ToString().Length > 0) Then
		Return builder.ToString().Substring(0, builder.Length - 8)
	Else
		Return String.Empty
	End If
End Function

Public Function GetPropertyValues(objectName As String) As String

	Dim builder As System.Text.StringBuilder = New System.Text.StringBuilder()
	For i As Int32 = 0 To (SourceCommand.AllOutputParameters.Count - 1)

		builder.Append(GetCamelCaseName(SourceCommand.AllOutputParameters(i).Name))
		builder.Append(" = ")
		builder.Append(objectName)
		builder.Append(".")
		builder.Append(GetPropertyName(SourceCommand.AllOutputParameters(i)))
		builder.Append("," + vbNewLine + vbNewLine + vbTab + vbTab + vbTab)

	Next
	
	If (builder.ToString().Length > 0) Then
		Return builder.ToString().Substring(0, builder.Length - 5)
	Else
		Return String.Empty
	End If
End Function
#End Region

#Region "Declaration Statements"
Public Shadows Function GetMemberVariableDeclarationStatement(column As CommandResultColumnSchema) As String
	Return GetMemberVariableDeclarationStatement("Protected", column)
End Function

Public Shadows Function GetMemberVariableDeclarationStatement(protectionLevel As String, column As CommandResultColumnSchema) As String

	Dim statement As String = protectionLevel + " "
	statement += GetMemberVariableName(column) + " As " + GetSqlType(column.DataType)
	
	Dim DefaultValue As String = GetMemberVariableDefaultValue(column.DataType)
	If (DefaultValue <> "") Then
		statement += " = " + DefaultValue
	End If
	
	statement += ""
	
	Return statement
End Function

Public Shadows Function GetMemberVariableDeclarationStatement(parameter As ParameterSchema) As String
	Return GetMemberVariableDeclarationStatement("Protected", parameter)
End Function

Public Shadows Function GetMemberVariableDeclarationStatement(protectionLevel As String, parameter As ParameterSchema) As String

	Dim statement As String = protectionLevel + " "
	statement += GetMemberVariableName(parameter) + " As " + GetSqlType(parameter.DataType)
	
	Dim DefaultValue As String= GetMemberVariableDefaultValue(parameter.DataType)
	If (DefaultValue <> "") Then
		statement += " = " + DefaultValue
	End If
	
	statement += ""
	
	Return statement
End Function

Public Function GetReaderAssignmentStatement(column As CommandResultColumnSchema, index As Int32) As String

	Dim statement As String = "If (Not reader.IsDbNull(" + index.ToString() + ")) Then "
	statement += GetMemberVariableName(column) + " = "
	
	if (column.Name.EndsWith("TypeCode")) Then statement += "(" + column.Name + ")"
	
	statement += "reader." + GetReaderMethod(column.DataType) + "(" + index.ToString() + ")"
	
	Return statement
End Function
#End Region

#Region "Lookups"

Public Shadows Function GetMemberVariableDefaultValue(myDbType As DbType) As String

	Select Case (myDbType)
		Case DbType.AnsiString
			Return "SqlString.Null"
		Case DbType.AnsiStringFixedLength
			Return "SqlString.Null"
		Case DbType.Binary
			Return "SqlBinary.Null"
		Case DbType.Boolean
			Return "SqlBoolean.Null"
		Case DbType.Byte
			Return "SqlByte.Null"
		Case DbType.Currency
			Return "SqlMoney.Null"
		Case DbType.Date
			Return "SqlDateTime.Null"
		Case DbType.Time
			Return "SqlDateTime.Null"
		Case DbType.DateTime
			Return "SqlDateTime.Null"
		Case DbType.Decimal
			Return "SqlDecimal.Null"
		Case DbType.Double
			Return "SqlDouble.Null"
		Case DbType.Guid
			Return "SqlGuid.Null"
		Case DbType.Int16
			Return "SqlInt16.Null"
		Case DbType.Int32
			Return "SqlInt32.Null"
		Case DbType.Int64
			Return "SqlInt64.Null"
		Case DbType.Object
			Return "Nothing"
		Case DbType.Single
			Return "SqlSingle.Null"
		Case DbType.String
			Return "SqlString.Null"
		Case DbType.StringFixedLength
			Return "SqlString.Null"
		Case DbType.VarNumeric
			Return "SqlDecimal.Null"
		Case Else
			Return "__UNKNOWN__" + myDbType.ToString()
		
	End Select
End Function

Public Function GetSqlType(myDbType As DbType) As String

	Select Case (myDbType)
		Case DbType.AnsiString
			Return "SqlString"
		Case DbType.AnsiStringFixedLength
			Return "SqlString"
		Case DbType.Binary
			Return "SqlBinary"
		Case DbType.Boolean
			Return "SqlBoolean"
		Case DbType.Byte
			Return "SqlByte"
		Case DbType.Currency
			Return "SqlMoney"
		Case DbType.Date
			Return "SqlDateTime"
		Case DbType.Time
			Return "SqlDateTime"
		Case DbType.DateTime
			Return "SqlDateTime"
		Case DbType.Decimal
			Return "SqlDecimal"
		Case DbType.Double
			Return "SqlDouble"
		Case DbType.Guid
			Return "SqlGuid"
		Case DbType.Int16
			Return "SqlInt16"
		Case DbType.Int32
			Return "SqlInt32"
		Case DbType.Int64
			Return "SqlInt64"
		Case DbType.Object
			Return "object"
		Case DbType.Single
			Return "SqlSingle"
		Case DbType.String
			Return "SqlString"
		Case DbType.StringFixedLength
			Return "SqlString"
		Case DbType.VarNumeric
			Return "SqlDecimal"
		Case Else
			Return "__UNKNOWN__" + myDbType.ToString()
	End Select
End Function

Public Function GetAccessModifier() As String
    Select Case (Accessibility)
        Case AccessibilityEnum.Public
			Return "Public"
        Case AccessibilityEnum.Protected
			Return "Protected"
        Case AccessibilityEnum.Internal
			Return "internal"
        Case AccessibilityEnum.ProtectedInternal
			Return "Protected internal"
        Case AccessibilityEnum.Private
			Return "private"
        Case Else
			Return "Public"
    End Select
End Function

Public Enum ResultSchemaEnum
    StronglyTyped = 1
    ADO = 2
    None = 3
End Enum

Public Enum AccessibilityEnum
    [Public] = 1
    [Protected] = 2
    Internal = 3
    ProtectedInternal = 4
    [Private] = 5
End Enum

#End Region

</script>
