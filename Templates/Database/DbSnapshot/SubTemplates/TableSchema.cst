<%--
    Author: 
        Todd Carrico
    
    Description:
        DBSnaptshot will create a file for every database object 
        and if configured will attempt to script your database.
    Remarks:
        Only tested with Sql2000, Sql2005, SqlExpress
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="T-SQL" Description="Template description here." Debug="true" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context" Description="Table that the documentation should be based on." %>
<%@ Property Name="NewDBName" Type="System.String" Default="" Optional="True" Category="2. Optional" Description="If specified this string will replace the DBName where appropraite" %>
<%@ Property Name="AppRole" Type="System.String" Default="" Optional="True" Category="2. Optional" Description="If specified this string will replace the Role in any grant statements" %>
<%@ Property Name="ScriptDrop" Type="System.Boolean" Default="False" Optional="False" Category="1. Context" Description="If true, script out the drop statements" %>
<%@ Property Name="ScriptConstraints" Type="System.Boolean" Default="False" Optional="False" Category="1. Context" Description="If true, script out the drop statements" %>
<%@ Property Name="ScriptIndexes" Type="System.Boolean" Default="False" Optional="False" Category="1. Context" Description="If true, script out the drop statements" %>
<%@ Property Name="ScriptCreate" Type="System.Boolean" Default="False" Optional="False" Category="1. Context" Description="If true, script out the drop statements" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
/*
 * SC Header, do not delete!
 *
 * $Revision: $
 * $Date: <%= DateTime.Now.ToShortDateString() %> $
 * $Author: $
 * $Archive: $
 *
 */
USE <%= this.GetOverRiddenDBName %>
GO
<% if (this.ScriptDrop) { %>
    <% if (this.SourceTable.Keys.Count > 0) { %>
--region Drop constraints that reference this table
        <% foreach ( TableKeySchema fk in this.SourceTable.Keys ) { %>
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'<%= fk.Name %>') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1)
    ALTER TABLE [<%= fk.ForeignKeyTable.Owner %>].[<%= fk.ForeignKeyTable.Name %>] DROP CONSTRAINT <%= fk.Name %>
GO
        <% } %>
--endregion
    <% } %>

--region Drop this table, but copy the data into a backup table just in case ;)
IF (OBJECT_ID(N'[<%= this.SourceTable.Owner %>].[<%= SourceTable.Name %>]')) IS NOT NULL
BEGIN
    IF EXISTS ( SELECT * FROM [<%= this.SourceTable.Owner %>].[<%= SourceTable.Name %>] )
    BEGIN
        DECLARE @newName NVARCHAR(128); SET @newName = N'[<%= this.SourceTable.Owner %>].[<%= SourceTable.Name %>_' + CONVERT(NVARCHAR(128), NEWID()) + N'_MAY_DELETE]'
        EXEC ('SELECT * INTO ' + @newName + ' FROM [<%= this.SourceTable.Owner %>].[<%= SourceTable.Name %>]')
        SELECT 'The existing table had data.  that data was copied into ' + @newName
    END
    DROP TABLE [<%= this.SourceTable.Owner %>].[<%= SourceTable.Name %>]
END
GO
--endregion
<% } %>

<% if ( this.ScriptCreate ) { %>
IF OBJECT_ID(N'[<%= this.SourceTable.Owner %>].[<%= SourceTable.Name %>]') IS NULL
BEGIN
    CREATE TABLE [<%= this.SourceTable.Owner %>].[<%= SourceTable.Name %>] (
    <% 
    for (int i = 0; i < SourceTable.Columns.Count; i++ )
    {       
        Response.Write("\t\t" + this.GetColumnDefinition( SourceTable.Columns[i] ) );
        if ( i < SourceTable.Columns.Count - 1 )
        {
            Response.WriteLine(",");
        }
        else
        {
            Response.WriteLine("");
        }       
    }%>
    ) ON [<%= SafeExtendedProperty(SourceTable.ExtendedProperties[TableEXProps.CS_FileGroup]) %>]
END

<% foreach ( ExtendedProperty prop in this.SourceTable.ExtendedProperties ) { %>
    <% if (!prop.Name.StartsWith("CS_") && prop.Value != null) { %>
EXEC dbo.sp_addextendedproperty N'<%= prop.Name %>', N'<%= prop.Value.ToString().Replace("'", "''") %>', N'user', N'<%= SourceTable.Owner %>', N'TABLE', N'<%= SourceTable.Name %>'
    <% } %>
<% } %>

<% foreach ( ColumnSchema col in this.SourceTable.Columns ) { %>
    <% foreach ( ExtendedProperty prop in col.ExtendedProperties ) { %>
        <% if (!prop.Name.StartsWith("CS_")) { %>
EXEC dbo.sp_addextendedproperty N'<%= prop.Name %>', N'<%= prop.Value.ToString().Replace("'", "''") %>', N'user', N'<%= SourceTable.Owner %>', N'TABLE', N'<%= SourceTable.Name %>', N'COLUMN', N'<%= col.Name %>'
        <% } %>
    <% } %>
<% } %>
GO
<% } %>

<% if ( this.ScriptIndexes ) {
    
   // Sort the indexes to create them in the correct order
    IndexSchemaCollection sortedIndexes = new IndexSchemaCollection(this.SourceTable.Indexes.Count);

    // Get the Clustered first
    foreach ( IndexSchema idx in this.SourceTable.Indexes )
    {
        if (idx.IsClustered)
        {
            sortedIndexes.Add ( idx );
            break;
        }
    }
    
    // get the PK next
    foreach ( IndexSchema idx in this.SourceTable.Indexes )
    {
        if (idx.IsPrimaryKey && idx.IsClustered == false)
        {
            sortedIndexes.Add ( idx );
            break;
        }
    }
    
    // add all nonclustered last
    foreach ( IndexSchema idx in this.SourceTable.Indexes )
    {
        if (idx.IsPrimaryKey == false && idx.IsClustered == false && (bool.Parse( this.SafeExtendedProperty(idx.ExtendedProperties[TableIndexesEXProps.CS_IsConstraint]) ) == false) )
        {
            sortedIndexes.Add ( idx );
        }
    }
%>
<% if ( sortedIndexes.Count > 0 ) { %>
--region Create indexes
<% foreach ( IndexSchema idx in sortedIndexes ) { %>
    <% if ( idx.IsPrimaryKey ) { %>
IF OBJECT_ID('<%= idx.Name %>') IS NULL
    <% } else { %>
IF NOT EXISTS ( SELECT * FROM dbo.sysindexes WHERE [id] = OBJECT_ID('<%= this.SourceTable.Name %>') AND [name] = '<%= idx.Name %>' )
    <% } %>
BEGIN
<% 
    string unique = "";
    string structure = "";
    string template = "";
        
    if ( idx.IsPrimaryKey )
    {   
        structure = SafeExtendedProperty(this.SourceTable.PrimaryKey.ExtendedProperties[TablePrimaryKeyEXProps.CS_IsClustered]) == bool.TrueString ? "CLUSTERED": "NONCLUSTERED";

        this.Response.WriteLine( string.Format( "\tALTER TABLE [{0}].[{1}] ADD CONSTRAINT [{2}] PRIMARY KEY {3}", this.SourceTable.Owner, this.SourceTable.Name, this.SourceTable.PrimaryKey.Name, structure ) );
    
        this.Response.WriteLine("\t(");
        
        for ( int i = 0; i < this.SourceTable.PrimaryKey.MemberColumns.Count ; i++ )
        {
            if ( i < this.SourceTable.PrimaryKey.MemberColumns.Count - 1 )
            {
                template = "\t\t[{0}]{1},";
            }
            else
            {
                template = "\t\t[{0}]{1}";
            }
                                    
            this.Response.WriteLine( string.Format( template, this.SourceTable.PrimaryKey.MemberColumns[i].Name, SafeExtendedProperty(this.SourceTable.PrimaryKey.MemberColumns[i].ExtendedProperties[TablePrimaryKeyEXProps.CS_IsDescending]) == bool.FalseString ? "": " DESC") );
            
        }
        this.Response.WriteLine("\t)");
        
        if ( byte.Parse( SafeExtendedProperty(this.SourceTable.PrimaryKey.ExtendedProperties["CS_OrigFillFactor"])) > 0 )
        {
            this.Response.WriteLine("\tWITH FILLFACTOR = " + SafeExtendedProperty(this.SourceTable.PrimaryKey.ExtendedProperties["CS_OrigFillFactor"]) );
        }

        this.Response.WriteLine("\tON [" + SafeExtendedProperty(this.SourceTable.PrimaryKey.ExtendedProperties["CS_FileGroup"]) + "]");
    }
    else
    {       
        structure = idx.IsClustered ? "CLUSTERED" : "NONCLUSTERED";
        unique = idx.IsUnique ? "UNIQUE" : "";
        
        this.Response.WriteLine( string.Format( "\tCREATE {0} {1} INDEX [{2}] ON [{3}].[{4}]", unique, structure, idx.Name, this.SourceTable.Owner, this.SourceTable.Name ) );
        this.Response.WriteLine("\t(");
        for ( int i = 0; i < idx.MemberColumns.Count ; i++ )
        {
            if ( i < idx.MemberColumns.Count - 1 )
            {
                template = "\t\t[{0}]{1},";
            }
            else
            {
                template = "\t\t[{0}]{1}";
            }
            
            this.Response.WriteLine( string.Format( template, idx.MemberColumns[i].Name, (SafeExtendedProperty(idx.MemberColumns[i].ExtendedProperties["CS_IsDescending"]) == bool.FalseString ? "": " DESC") ) );
            
        }
        this.Response.WriteLine("\t)");
        
        if ( byte.Parse( SafeExtendedProperty(idx.ExtendedProperties["CS_OrigFillFactor"])) > 0 )
        {
            this.Response.WriteLine("\tWITH FILLFACTOR = " + SafeExtendedProperty(idx.ExtendedProperties["CS_OrigFillFactor"]) );
        }
        
        this.Response.WriteLine("\tON [" + SafeExtendedProperty(idx.ExtendedProperties["CS_FileGroup"]) + "]");
    }   
%>
END

<% foreach ( ExtendedProperty prop in idx.ExtendedProperties ) { %>
    <% if (!prop.Name.StartsWith("CS_")) { %>
EXEC dbo.sp_addextendedproperty N'<%= prop.Name %>', N'<%= prop.Value %>', N'user', N'<%= SourceTable.Owner %>', N'TABLE', N'<%= SourceTable.Name %>', N'INDEX', N'<%= idx.Name %>'
    <% } %>
<% } %>

<% } %>
--endregion
<% } 
} %>

<% if ( this.ScriptConstraints ) { %> 
--region Non Primary Key Constraints    
    <% 
    for (int i = 0; i < SourceTable.Columns.Count; i++ )
    {       
        if ( this.SafeExtendedProperty(SourceTable.Columns[i].ExtendedProperties[TableColumnsEXProps.CS_ConstraintName]).Length > 0 )
        {
        %>
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'<%= SourceTable.Columns[i].ExtendedProperties[TableColumnsEXProps.CS_ConstraintName].Value %>') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
    ALTER TABLE [<%= this.SourceTable.Owner %>].[<%= SourceTable.Name %>] ADD<%
        if ( SourceTable.Columns[i].ExtendedProperties[TableColumnsEXProps.CS_ConstraintType].Value.ToString() == "DEFAULT" )
        {
    %>
    CONSTRAINT [<%= SourceTable.Columns[i].ExtendedProperties[TableColumnsEXProps.CS_ConstraintName].Value %>] DEFAULT <%= SourceTable.Columns[i].ExtendedProperties[TableColumnsEXProps.CS_ConstraintDef].Value %> FOR [<%= SourceTable.Columns[i].Name %>]<%        
        }
        else
        {
    %>
    CONSTRAINT [<%= SourceTable.Columns[i].ExtendedProperties[TableColumnsEXProps.CS_ConstraintName].Value %>] CHECK <%= SourceTable.Columns[i].ExtendedProperties[TableColumnsEXProps.CS_ConstraintDef].Value %><%
        }
    %>
GO
    <%
        }
    } %>
    
    <% 
    foreach ( IndexSchema idx in this.SourceTable.Indexes )
    {
        if ( idx.IsPrimaryKey == false &&  bool.Parse(this.SafeExtendedProperty(idx.ExtendedProperties[TableIndexesEXProps.CS_IsConstraint])) )
        {%>
IF NOT EXISTS ( SELECT * FROM dbo.sysindexes WHERE [id] = OBJECT_ID('<%= this.SourceTable.Name %>') AND [name] = '<%= idx.Name %>' )
BEGIN
<%
            string structure = idx.IsClustered ? "CLUSTERED" : "NONCLUSTERED";
            string unique = idx.IsUnique ? "UNIQUE" : "";
            
            this.Response.WriteLine( string.Format( "\tALTER TABLE [{3}].[{4}] ADD\n\tCONSTRAINT [{2}] {0} {1} ", unique, structure, idx.Name, this.SourceTable.Owner, this.SourceTable.Name ) );
            this.Response.WriteLine("\t(");
            for ( int i = 0; i < idx.MemberColumns.Count ; i++ )
            {
                this.Response.Write( string.Format( "\t\t[{0}]{1}", idx.MemberColumns[i].Name, SafeExtendedProperty(idx.MemberColumns[i].ExtendedProperties["CS_IsDescending"]) == bool.FalseString ? "": " DESC") );
                
                if ( i < idx.MemberColumns.Count - 1 )
                {
                    this.Response.Write(",");
                }
            }
            this.Response.WriteLine("\n\t)");
            
            if ( byte.Parse( SafeExtendedProperty(idx.ExtendedProperties["CS_OrigFillFactor"])) > 0 )
            {
                this.Response.WriteLine("\tWITH FILLFACTOR = " + SafeExtendedProperty(idx.ExtendedProperties["CS_OrigFillFactor"]) );
            }
            
            this.Response.WriteLine("\tON [" + SafeExtendedProperty(idx.ExtendedProperties["CS_FileGroup"]) + "]");
            this.Response.WriteLine("END");
            this.Response.WriteLine("GO");
            
            foreach ( ExtendedProperty prop in idx.ExtendedProperties ) 
            {
                if (!prop.Name.StartsWith("CS_")) 
                {
                    this.Response.WriteLine("EXEC dbo.sp_addextendedproperty N'" + prop.Name + "', N'" + prop.Value + "', N'user', N'dbo', N'TABLE', N'" + SourceTable.Name + "', N'INDEX', N'" + idx.Name + "'\nGO");
                }
            }
        }
    }
%>
--endregion

--region Foreign Keys that this table references
<% foreach ( TableKeySchema fk in this.SourceTable.ForeignKeys ) { %>
IF OBJECT_ID('<% = fk.PrimaryKeyTable %>') IS NOT NULL
BEGIN
    ALTER TABLE [<%= this.SourceTable.Owner %>].[<%= this.SourceTable.Name %>] ADD 
        CONSTRAINT [<%= fk.Name %>] FOREIGN KEY 
        (
    <% for ( int i = 0; i < fk.ForeignKeyMemberColumns.Count; i++ ) { %>
            [<%= fk.ForeignKeyMemberColumns[i].Column.Name %>] <% if ( i > 0 ) { %>,<% } %>
    <% } %>
        ) REFERENCES [<% = fk.PrimaryKeyTable.Owner %>].[<% = fk.PrimaryKeyTable.Name %>] (
    <% for ( int i = 0; i < fk.PrimaryKeyMemberColumns.Count; i++ ) { %>
            [<%= fk.PrimaryKeyMemberColumns[i].Column.Name %>] <% if ( i > 0 ) { %>,<% } %>
    <% } %>
        )
END
GO

<% foreach ( ExtendedProperty prop in fk.ExtendedProperties ) { %>
    <% if (!prop.Name.StartsWith("CS_")) { %>
EXEC dbo.sp_addextendedproperty N'<%= prop.Name %>', N'<%= prop.Value %>', N'user', N'dbo', N'TABLE', N'<%= SourceTable.Name %>', N'CONSTRAINT', N'<%= fk.Name %>'
    <% } %>
<% } %>

<% } %>
--endregion

--region Foreign Keys that reference this table
<% if (this.ScriptDrop) { %>
<% foreach ( TableKeySchema fk in this.SourceTable.Keys ) { %>
    <% if ( fk.ForeignKeyTable != this.SourceTable ) { %>
IF (OBJECT_ID(N'[<%= fk.ForeignKeyTable.Owner %>].[<%= fk.ForeignKeyTable.Name %>]')) IS NOT NULL
ALTER TABLE [<% = fk.PrimaryKeyTable.Owner %>].[<%= fk.ForeignKeyTable.Name %>] ADD 
    CONSTRAINT [<%= fk.Name %>] FOREIGN KEY 
    (
<% for ( int i = 0; i < fk.ForeignKeyMemberColumns.Count; i++ ) { %>
        [<%= fk.ForeignKeyMemberColumns[i].Column.Name %>] <% if ( i > 0 ) { %>,<% } %>
<% } %>
    ) REFERENCES [<% = fk.PrimaryKeyTable.Owner %>].[<% = fk.PrimaryKeyTable.Name %>] (
<% for ( int i = 0; i < fk.PrimaryKeyTable.PrimaryKey.MemberColumns.Count; i++ ) { %>
        [<%= fk.PrimaryKeyTable.PrimaryKey.MemberColumns[i].Column.Name %>] <% if ( i > 0 ) { %>,<% } %>
<% } %>
    )
GO
<% } %>

<% foreach ( ExtendedProperty prop in fk.ExtendedProperties ) { %>
    <% if (!prop.Name.StartsWith("CS_")) { %>
EXEC dbo.sp_addextendedproperty N'<%= prop.Name %>', N'<%= prop.Value %>', N'user', N'dbo', N'TABLE', N'<%= SourceTable.Name %>', N'CONSTRAINT', N'<%= fk.Name %>'
    <% } %>
<% } %>
<% } 
} %>
--endregion
<% } %>

<script runat="template">

public string GetOverRiddenDBName
{
    get
    {
        if ( null != this.NewDBName && this.NewDBName.Length > 0 )
        {   
            return this.NewDBName;
        }

        if (SourceTable != null)
        {
            return SourceTable.Database.Name.ToString();
        }

        return null;
    }
}

public string ParseServerName()
{
    string _serverName = "";
    string _scratch = "";
    
    System.Text.RegularExpressions.Regex regExp = new Regex(@"Data Source=\w*;", RegexOptions.IgnoreCase);
    System.Text.RegularExpressions.Match m = regExp.Match(this.SourceTable.Database.ConnectionString);

    if ( m.Success ) 
    {
        _scratch = m.ToString();
        _serverName = _scratch.Substring(_scratch.IndexOf('=') + 1).TrimEnd(';') ;        
    }
    return _serverName;
}

public string GetColumnDefinition( ColumnSchema col )
{
    string rowGuid = "";
    string identity = "";
    string modifier = "";
    string computedDef = "";
    
    rowGuid = bool.Parse(SafeExtendedProperty(col.ExtendedProperties[TableColumnsEXProps.CS_IsRowGuidCol])) ? "ROWGUIDCOL " : "";
    
    if ( bool.Parse( SafeExtendedProperty(col.ExtendedProperties[TableColumnsEXProps.CS_IsIdentity]) ) )
    {
        identity = string.Format( "IDENTITY ({0}, {1}) ", SafeExtendedProperty(col.ExtendedProperties[TableColumnsEXProps.CS_IdentitySeed]), SafeExtendedProperty(col.ExtendedProperties[TableColumnsEXProps.CS_IdentityIncrement]));
    }
    else
    {
        identity = "";
    }
        
    if ( bool.Parse( SafeExtendedProperty(col.ExtendedProperties[TableColumnsEXProps.CS_IsComputed] ) ) )
    {
        computedDef = col.ExtendedProperties[TableColumnsEXProps.CS_ComputedDefinition].Value.ToString();
        
        return string.Format("[{0}] AS {1}",  col.Name, computedDef);
    }
    else
    {
        modifier = rowGuid + identity + (col.AllowDBNull == true ? "NULL " : "NOT NULL ");
    
        return string.Format("[{0}] {1} {2}",  col.Name, this.GetSQLDataType(col), modifier);
    }
}

public string SafeExtendedProperty( SchemaExplorer.ExtendedProperty prop )
{
    if ( null != prop )
        return prop.Value.ToString();
    else
        return "";
}

#region GetSQLDataType
public string GetSQLDataType(ColumnSchema column)
{

    string param = column.NativeType.ToUpper();
    
    if (param.ToLower() == "sysname")
    {
        if ( this.SafeExtendedProperty(column.ExtendedProperties[TableColumnsEXProps.CS_Collation]).Length > 0 )
        {
            param += " COLLATE " + this.SafeExtendedProperty(column.ExtendedProperties[TableColumnsEXProps.CS_Collation]);
        }            
    }
    else
    {
        if ( param.ToLower() != "timestamp" && param.ToLower() != "sql_variant" )
    {
        switch (column.DataType)
        {
            case DbType.Decimal:
            {
                param += "(" + column.Precision + ", " + column.Scale + ")";
                break;
            }
            case DbType.AnsiString:
            case DbType.AnsiStringFixedLength:
                {
                    if (column.NativeType.ToLower() != "text" && column.NativeType.ToLower() != "ntext")
                    {
                        if (column.Size > 0)
                        {
                            param += "(" + column.Size + ")";
                        }
                        if ( this.SafeExtendedProperty(column.ExtendedProperties[TableColumnsEXProps.CS_Collation]).Length > 0 )
                        {
                            param += " COLLATE " + this.SafeExtendedProperty(column.ExtendedProperties[TableColumnsEXProps.CS_Collation]);
                        }            
                    }
                    
                    
                    break;
                }
            case DbType.Binary:
            {
                param += "(" + column.Size + ")";
                break;
            }
            case DbType.String:
            case DbType.StringFixedLength:
            {
                    if (column.NativeType.ToLower() != "text" && column.NativeType.ToLower() != "ntext")
                {
                    if (column.Size > 0)
                    {
                        param += "(" + column.Size + ")";
                    }
                if ( this.SafeExtendedProperty(column.ExtendedProperties[TableColumnsEXProps.CS_Collation]).Length > 0 )
                {
                    param += " COLLATE " + this.SafeExtendedProperty(column.ExtendedProperties[TableColumnsEXProps.CS_Collation]);
                }            
                    }               
                break;
            }        
        }
    }
    }
    // System.Diagnostics.Trace.WriteLine( string.Format("Name: {0} NativeType: {1} DataType: {2}", column.Name, column.NativeType, column.DataType) );
    
    return param;
    
}
#endregion

// Assign an appropriate file name to the output.
public override string GetFileName()
{
    return SourceTable.Name.ToString() + ".sql";
}

#region Enums

public struct TableEXProps
{
    public const string  CS_FileGroup = "CS_FileGroup";
}

public struct TableColumnsEXProps
{
    public const string  CS_IsRowGuidCol = "CS_IsRowGuidCol";
    public const string  CS_IsIdentity = "CS_IsIdentity";
    public const string  CS_IsComputed = "CS_IsComputed";
    public const string  CS_IsDeterministic = "CS_IsDeterministic";
    public const string  CS_IdentitySeed = "CS_IdentitySeed";
    public const string  CS_IdentityIncrement = "CS_IdentityIncrement";
    public const string  CS_Default = "CS_Default";
    public const string  CS_ComputedDefinition = "CS_ComputedDefinition";
    public const string  CS_Collation = "CS_Collation";
    public const string  CS_ConstraintName = "CS_Constraint1Name";
    public const string  CS_ConstraintDef = "CS_Constraint1Definition";
    public const string  CS_ConstraintType = "CS_Constraint1Type";
}


public struct ViewColumnsEXProps
{
    public const string  CS_IsComputed = "CS_IsComputed";
    public const string  CS_IsDeterministic = "CS_IsDeterministic";
}

public struct TablePrimaryKeyEXProps
{
    public const string CS_FileGroup = "CS_FileGroup";
    public const string CS_IsClustered = "CS_IsClustered";
    public const string CS_OrigFillFactor = "CS_OrigFillFactor";
    public const string CS_IsDescending = "CS_IsDescending";
}

public struct TableIndexesEXProps
{
    public const string CS_FileGroup = "CS_FileGroup";
    public const string CS_IsFullTextKey = "CS_IsFullTextKey";
    public const string CS_IsTable = "CS_IsTable";
    public const string CS_IsStatistics = "CS_IsStatistics";
    public const string CS_IsAutoStatistics = "CS_IsAutoStatistics";
    public const string CS_IsHypothetical = "CS_IsHypothetical";
    public const string CS_IgnoreDupKey = "CS_IgnoreDupKey";
    public const string CS_PadIndex = "CS_PadIndex";
    public const string CS_DRIPrimaryKey = "CS_DRIPrimaryKey";
    public const string CS_DRIUniqueKey = "CS_DRIUniqueKey";
    public const string CS_DRIIndex = "CS_DRIIndex";
    public const string CS_DropExist = "CS_DropExist";
    public const string CS_NoRecompute = "CS_NoRecompute";
    public const string CS_OrigFillFactor = "CS_OrigFillFactor";
    public const string CS_IsConstraint = "CS_IsConstraint";
}

public struct IndexMemberColumnsEXProps
{
    public const string CS_IsDescending = "CS_IsDescending";
    public const string CS_IsComputed = "CS_IsComputed";
}

public struct TableKeysEXProps
{
    public const string CS_CascadeDelete = "CS_CascadeDelete";
    public const string CS_CascadeUpdate = "CS_CascadeUpdate";
}

public struct CommandParametersEXProps
{
    public const string CS_Default = "CS_Default";
}

public struct ExtendedPropertiesEXProps
{
    public const string CS_Description = "CS_Description";
}



#endregion

</script>