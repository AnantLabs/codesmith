<%@ CodeTemplate Language="C#" TargetLanguage="T-SQL" Description="Create a drop and create script for a stored procedure" %>
<%@ Property Name="ServerName"        Type="String"                       Category="New"      Optional="True" Description="Name of the server.   it will go into the check syntax tag" %>
<%@ Property Name="DBName"            Type="String"                       Category="New"      Optional="True" Description="Name of the Dev Database.  Used by syntax check tag, also used in the 'USE' statement" %>
<%@ Property Name="ProcName"          Type="String"                       Category="New"      Optional="True" Description="Name of the stored Procedure" %>
<%@ Property Name="ExistingProcedure" Type="SchemaExplorer.CommandSchema" Category="Existing" Optional="True" Description="Existing stored procedure." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<% 

    if ( null != ExistingProcedure ) 
    {
        this.ProcName = this.ExistingProcedure.Name;    
        this.DBName = this.ExistingProcedure.Database.Name;
        this.ServerName = this.ParseServerName();
        
    }

%>
/*
 * SC Header, do not delete!
 *
 * $Revision: $
 * $Date: <%= DateTime.Now.ToShortDateString() %> $
 * $Author: <%= Environment.UserName %> $
 * $Archive: $
 *
 */
GO
USE <%= DBName %>
GO
IF OBJECT_ID('<%= this.ExistingProcedure.Owner %>.<%= ProcName %>') IS NOT NULL
	DROP PROCEDURE <%= this.ExistingProcedure.Owner %>.<%= ProcName %>
GO
/*
Description: 
<%= ParseOldComments() %>
HISTORY:
*/
GO
<%= this.ProcTextWithoutLeadingComments() %>
GO
-- GRANT EXECUTE ON dbo.<%= ProcName %> TO [user or role]
GO
<% foreach ( ExtendedProperty prop in this.ExistingProcedure.ExtendedProperties ) { %>
    <% if (!prop.Name.StartsWith("CS_")) { %>
EXEC dbo.sp_addextendedproperty N'<%= prop.Name %>', N'<%= prop.Value %>', N'user', N'<%= this.ExistingProcedure.Owner %>', N'PROCEDURE', N'<%= ExistingProcedure.Name %>'
GO
    <% } %>
<% } %>

<% foreach ( ParameterSchema parm in this.ExistingProcedure.Parameters ) { %>
    <% foreach ( ExtendedProperty prop in parm.ExtendedProperties ) { %>
        <% if (!prop.Name.StartsWith("CS_")) { %>
EXEC dbo.sp_addextendedproperty N'<%= prop.Name %>', N'<%= prop.Value %>', N'user', N'<%= this.ExistingProcedure.Owner %>', N'PROCEDURE', N'<%= ExistingProcedure.Name %>', N'PARAMETER', N'<%= parm.Name %>'
GO
        <% } %>
    <% } %>
<% } %> 

GO
<script runat="template">

public string ParseServerName()
{
    string _serverName = "";
    string _scratch = "";
    
    System.Text.RegularExpressions.Regex regExp = new Regex(@"Data Source=\w*;", RegexOptions.IgnoreCase);
    System.Text.RegularExpressions.Match m = regExp.Match(this.ExistingProcedure.Database.ConnectionString);

    if ( m.Success ) 
    {
        _scratch = m.ToString();
        _serverName = _scratch.Substring(_scratch.IndexOf('=') + 1).TrimEnd(';') ;        
    }
    return _serverName;
}

public override string GetFileName()
{
    if ( this.ProcName.Length > 0 ) 
    {
        return this.ProcName + ".sql";        
    }
	else
	{
		return base.GetFileName();
	}
}

public string ParseOldComments()
{
    Regex _regEx = new Regex(@"\W.*?CREATE *PROC", RegexOptions.IgnoreCase|RegexOptions.Compiled|RegexOptions.Singleline);
    Match _match;
    string _com = "";

    _match = _regEx.Match( this.ExistingProcedure.CommandText );
    if ( _match.Success )
    {
        _com = _match.ToString();
        _com = Regex.Replace(_com, "CREATE *PROC", "", RegexOptions.IgnoreCase);
        _com = Regex.Replace(_com, @"--VSS.*\$Revision:.*\$", "", RegexOptions.IgnoreCase);
        _com = Regex.Replace(_com, @"--VSS.*\$", "", RegexOptions.IgnoreCase);
        _com = _com.Replace("/*", "").Replace("*/", "").Trim();
    }

    return _com;
}

public string ProcTextWithoutLeadingComments()
{
    Regex _regEx = new Regex(@"CREATE *PROC.*", RegexOptions.IgnoreCase|RegexOptions.Compiled|RegexOptions.Singleline);
    Match _match;
    string _com = "";

    _match = _regEx.Match( this.ExistingProcedure.CommandText );
    if ( _match.Success )
    {
        _com = _match.ToString();
        _com = _com.Trim();
    }

    return _com;
}

</script>
