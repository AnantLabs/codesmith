
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace Petshop.Data
{
    /// <summary>
    /// The class representing the dbo.Item table.
    /// </summary>
    [Table(Name="dbo.Item")]
    [DataContract]
    public partial class Item
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Item"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Item()
        {
            OnCreated();
            _product = default(EntityRef<Product>);
            _supplier1 = default(EntityRef<Supplier>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private string _itemId;

        /// <summary>
        /// Gets or sets the ItemId column value.
        /// </summary>
        [Column(Name="ItemId", Storage="_itemId", DbType="varchar(10) NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        [DataMember]
        public string ItemId
        {
            get { return _itemId; }
            set
            {
                if (_itemId != value)
                {
                    OnItemIdChanging(value);
                    OnPropertyChanging("ItemId");
                    _itemId = value;
                    OnPropertyChanged("ItemId");
                    OnItemIdChanged();
                }
            }
        }
        
        private string _productId;

        /// <summary>
        /// Gets or sets the ProductId column value.
        /// </summary>
        [Column(Name="ProductId", Storage="_productId", DbType="varchar(10) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string ProductId
        {
            get { return _productId; }
            set
            {
                if (_productId != value)
                {
                    if (_product.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnProductIdChanging(value);
                    OnPropertyChanging("ProductId");
                    _productId = value;
                    OnPropertyChanged("ProductId");
                    OnProductIdChanged();
                }
            }
        }
        
        private Nullable<decimal> _listPrice;

        /// <summary>
        /// Gets or sets the ListPrice column value.
        /// </summary>
        [Column(Name="ListPrice", Storage="_listPrice", DbType="decimal(10,2)")]
        [DataMember]
        public Nullable<decimal> ListPrice
        {
            get { return _listPrice; }
            set
            {
                if (_listPrice != value)
                {
                    OnListPriceChanging(value);
                    OnPropertyChanging("ListPrice");
                    _listPrice = value;
                    OnPropertyChanged("ListPrice");
                    OnListPriceChanged();
                }
            }
        }
        
        private Nullable<decimal> _unitCost;

        /// <summary>
        /// Gets or sets the UnitCost column value.
        /// </summary>
        [Column(Name="UnitCost", Storage="_unitCost", DbType="decimal(10,2)")]
        [DataMember]
        public Nullable<decimal> UnitCost
        {
            get { return _unitCost; }
            set
            {
                if (_unitCost != value)
                {
                    OnUnitCostChanging(value);
                    OnPropertyChanging("UnitCost");
                    _unitCost = value;
                    OnPropertyChanged("UnitCost");
                    OnUnitCostChanged();
                }
            }
        }
        
        private Nullable<int> _supplier;

        /// <summary>
        /// Gets or sets the Supplier column value.
        /// </summary>
        [Column(Name="Supplier", Storage="_supplier", DbType="int")]
        [DataMember]
        public Nullable<int> Supplier
        {
            get { return _supplier; }
            set
            {
                if (_supplier != value)
                {
                    if (_supplier1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnSupplierChanging(value);
                    OnPropertyChanging("Supplier");
                    _supplier = value;
                    OnPropertyChanged("Supplier");
                    OnSupplierChanged();
                }
            }
        }
        
        private string _status;

        /// <summary>
        /// Gets or sets the Status column value.
        /// </summary>
        [Column(Name="Status", Storage="_status", DbType="varchar(2)")]
        [DataMember]
        public string Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    OnStatusChanging(value);
                    OnPropertyChanging("Status");
                    _status = value;
                    OnPropertyChanged("Status");
                    OnStatusChanged();
                }
            }
        }
        
        private string _name;

        /// <summary>
        /// Gets or sets the Name column value.
        /// </summary>
        [Column(Name="Name", Storage="_name", DbType="varchar(80)")]
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    OnNameChanging(value);
                    OnPropertyChanging("Name");
                    _name = value;
                    OnPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        
        private string _image;

        /// <summary>
        /// Gets or sets the Image column value.
        /// </summary>
        [Column(Name="Image", Storage="_image", DbType="varchar(80)")]
        [DataMember]
        public string Image
        {
            get { return _image; }
            set
            {
                if (_image != value)
                {
                    OnImageChanging(value);
                    OnPropertyChanging("Image");
                    _image = value;
                    OnPropertyChanged("Image");
                    OnImageChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Product> _product;

        /// <summary>
        /// Gets or sets the Product association.
        /// </summary>
        [Association(Name="Product_Item", Storage="_product", ThisKey="ProductId", OtherKey="ProductId", IsUnique=true, IsForeignKey=true)]
        [DataMember]
        public Product Product
        {
            get { return _product.Entity; }
            set
            {
                Product previousValue = _product.Entity;
                if (previousValue != value || _product.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        _product.Entity = null;
                        previousValue.ItemList.Remove(this);
                    }
                    _product.Entity = value;
                    if (value != null)
                    {
                        value.ItemList.Add(this);
                        _productId = value.ProductId;
                    }
                    else
                    {
                        _productId = default(string);
                    }
                    OnPropertyChanged("Product");
                }
            }
        }
        
        private EntityRef<Supplier> _supplier1;

        /// <summary>
        /// Gets or sets the Supplier association.
        /// </summary>
        [Association(Name="Supplier_Item", Storage="_supplier1", ThisKey="Supplier", OtherKey="SuppId", IsUnique=true, IsForeignKey=true)]
        [DataMember]
        public Supplier Supplier1
        {
            get { return _supplier1.Entity; }
            set
            {
                Supplier previousValue = _supplier1.Entity;
                if (previousValue != value || _supplier1.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Supplier1");
                    if (previousValue != null)
                    {
                        _supplier1.Entity = null;
                        previousValue.ItemList.Remove(this);
                    }
                    _supplier1.Entity = value;
                    if (value != null)
                    {
                        value.ItemList.Add(this);
                        _supplier = value.SuppId;
                    }
                    else
                    {
                        _supplier = default(int);
                    }
                    OnPropertyChanged("Supplier1");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when ItemId is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnItemIdChanging(string value);
        /// <summary>Called after ItemId has Changed.</summary>
        partial void OnItemIdChanged();
        /// <summary>Called when ProductId is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnProductIdChanging(string value);
        /// <summary>Called after ProductId has Changed.</summary>
        partial void OnProductIdChanged();
        /// <summary>Called when ListPrice is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnListPriceChanging(Nullable<decimal> value);
        /// <summary>Called after ListPrice has Changed.</summary>
        partial void OnListPriceChanged();
        /// <summary>Called when UnitCost is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUnitCostChanging(Nullable<decimal> value);
        /// <summary>Called after UnitCost has Changed.</summary>
        partial void OnUnitCostChanged();
        /// <summary>Called when Supplier is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnSupplierChanging(Nullable<int> value);
        /// <summary>Called after Supplier has Changed.</summary>
        partial void OnSupplierChanged();
        /// <summary>Called when Status is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStatusChanging(string value);
        /// <summary>Called after Status has Changed.</summary>
        partial void OnStatusChanged();
        /// <summary>Called when Name is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNameChanging(string value);
        /// <summary>Called after Name has Changed.</summary>
        partial void OnNameChanged();
        /// <summary>Called when Image is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnImageChanging(string value);
        /// <summary>Called after Image has Changed.</summary>
        partial void OnImageChanged();
        #endregion
        
    }
}

