<%-- 
Name: BL Base Class Template
Author: Chris Lasater
Description: Allows generation of BL Base class from parameters
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Base Class Template" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

using System;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base
{
    /// <summary>
    /// IBLBase is used to give the BL interfaces some base functions that should be visible to the UI.
    /// </summary>
    public interface IBLBase : System.Runtime.Serialization.ISerializable
    {
        #region Properties
        /// <summary>
        /// Determines whether or not the BL data object has validtion messages which are exceptions
        /// </summary>
        bool HasExceptionValidationMessages { get; }
        /// <summary>
        /// Determines whether or not the BL data object has validation messages which are messages
        /// </summary>
        bool HasValidationMessages { get; }
        /// <summary>
        /// Gets the ValidationMessages collection for the BL
        /// </summary>
        Base.Validation.ValidationMessages ValidationMessages { get; }
       
        #endregion

        #region Methods
		 /// <summary>
        /// Returns Records from Query
        /// </summary>
        void Get();
        /// <summary>
        /// Used to mask the data pushes, i.e. inserts and updates
        /// </summary>
        void SaveData();
       
        #endregion
    }
}



<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	return "IBLBase";	
}
#endregion



</script>