<%-- 
Name: Factory BL Class Template
Author: Chris Lasater
Description: Allows generation of Factory for BL classes from parameters
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper"  Description="Factory Class Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="SelectCollectionStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="False" Category="Context" Description="Stored Procedure to use for record collection for select." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Factory
{
	/// <summary>
	/// This is our User BL factory which creates our BL classes for us.
	/// This is public and the outside path into our BL facade
	/// </summary>
    public sealed class <%= GetSingularName(RecordSetName)%>Factory
	{
		#region Public Methods
		/// <summary>
		/// Creates instance of raw Bl class, no data
		/// </summary>
		/// <returns></returns>
		public static I<%= GetSingularName(RecordSetName)%>BL Get<%= GetSingularName(RecordSetName)%>BL()
		{
			return new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.<%= GetSingularName(RecordSetName)%>BL();
		}
		
		/// <summary>
		/// Gets instance of BL collection class filled with data
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public static I<%= GetPluralName(RecordSetName)%>BL Get<%= GetPluralName(RecordSetName)%>BL
			(
			<% for(int i = 0; i < SelectCollectionStoredProcedure.AllInputParameters.Count; i++) { %>	
			<%= GetCSharpVariableType(SelectCollectionStoredProcedure.AllInputParameters[i].DataType, CanHaveNullablePrimitives) %> <%= StringUtil.ToCamelCase(GetPropertyName(SelectCollectionStoredProcedure.AllInputParameters[i]).ToLower()) %><% if(i < SelectCollectionStoredProcedure.AllInputParameters.Count - 1) { %>, <% } %>
			<% } %>				
			)
		{
			I<%= GetPluralName(RecordSetName)%>BL recordset = new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.Collections.<%= GetPluralName(RecordSetName)%>BL();
            <% for(int i = 0; i < SelectCollectionStoredProcedure.AllInputParameters.Count; i++) { %>	
			recordset.<%= GetPropertyName(SelectCollectionStoredProcedure.AllInputParameters[i]) %> = <%= StringUtil.ToCamelCase(GetPropertyName(SelectCollectionStoredProcedure.AllInputParameters[i]).ToLower()) %>;
			<% } %>				            
            recordset.Get();
            recordset.GetNextPageSet(1, recordset.TotalRecordCount);
            return recordset;
		}

		
		#endregion		
		
		#region Programmer - Methods
			// Developer Code Goes here 
		#endregion
	}
}


<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	if (RecordSetName != null && RecordSetName.Length > 0)
	{
		return GetSingularName(RecordSetName);
	}
	else
	{
		return SelectCollectionStoredProcedure.Name.Replace(" ", "");
	}
}

#endregion

</script>