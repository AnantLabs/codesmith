<%-- 
Name: Concrete DL Class Template
Author: Chris Lasater
Description: Allows generation of DL Base class from parameters
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Concrete Class Template" %>


<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

using System;
using System.Collections.Generic;
using System.Text;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.Base
{
    /// <summary>Indicates the database stored procedure for importing.</summary>
    [AttributeUsage(AttributeTargets.Class)]
    internal sealed class InsertStoredProcedureNameAttribute : Attribute
    {
        private string _name;

        /// <summary>Indicates the database stored procedure for importing.</summary>
        /// <param name="storedprocedure">The name of the database stored procedure.</param>
        public InsertStoredProcedureNameAttribute(string name)
        {
            if (name.Length > 0)
                this._name = name;
            else
                throw new Exception("The name parameter is required");
        }
        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
        }
    }
}

<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	return "InsertStoredProcedureNameAttribute";	
}
#endregion


</script>