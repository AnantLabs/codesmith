<%--
	Author: Chris Lasater
		
	
	Description: Runs project Build for Solution
		
	Remarks:
		
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="Utility/ProjectHelper.cs" OutputType="None" Inherits="Utility.ProjectHelper" Description="Scripts DatabaseObjects" Debug="True" %>

<%@ XmlProperty Name="ProcedureMap" Schema="ProceduresToMap.xsd" Default="ProceduresToMap.xml" Category="Context" Description="The procedure map XML file." %>

<%@ Register Name="DataLayerTemplate" Template="DataLayer/DataLayerProject.cst" %>
<%@ Register Name="BusinessLayerTemplate" Template="BusinessLayer/BusinessLayerProject.cst" %>
<%@ Register Name="FormsUIComponentTemplate" Template="FormsUIComponent/FormsUIErrorProviderProject.cst" %>
<%@ Register Name="MDIFormsTemplate" Template="MDIForms/MDIFormsProject.cst" %>
<%@ Register Name="ProjectSolutionTemplate" Template="ProjectSolution.cst" %>

<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="Utility" %>
	
<% BuildProject(); %>

<script runat="template">
public void BuildProject()
{
	this.Progress.MaximumValue = 6;	
	this.Progress.Step = 1;
	try
	{
		this.Response.WriteLine("Begin CodeSmith Build of Domain Layer Project...");
		
		this.OutPutDirectory = Path.Combine(this.CodeTemplateInfo.DirectoryName, this.OutPutDirectory);
		if (!Directory.Exists(this.OutPutDirectory)) Directory.CreateDirectory(this.OutPutDirectory);
		
		if(CleanDirectories)
		{
			this.Response.WriteLine("Begin To Clean Directories...");
			this.DeleteSubFolders(this.OutPutDirectory);
			this.DeleteFiles(this.OutPutDirectory,"*.*");
			this.Response.WriteLine("Clean Directories Done.");
			this.Progress.PerformStep();
		}
		// instantiate the sub-template
		DataLayerTemplate dl = this.Create<DataLayerTemplate>();
		DataLayerProjectGuid = dl.ProjectGuid;
		
		this.Response.WriteLine("Copy Project Properties to DataLayer...");
		// Set up the DL project  	
		this.CopyPropertiesTo(dl);		
		this.Response.WriteLine("Copy Project Properties to DataLayer Done.");
		
		this.Response.WriteLine("Begin CodeSmith Build of DataLayer Project....");
		dl.RegisterOutput(this.OutputFile);
		//begin build of project
		dl.BuildProject();		
		dl.Render(this.Response);
		this.Response.WriteLine("CodeSmith Build of DataLayer Project Done.");
		this.Progress.PerformStep();
		
		// instantiate the sub-template
		BusinessLayerTemplate bl = this.Create<BusinessLayerTemplate>();
		BusinessLayerProjectGuid = bl.ProjectGuid;
		
		this.Response.WriteLine("Copy Project Properties to BusinessLayer...");
		// Set up the DL project  	
		this.CopyPropertiesTo(bl);		
		this.Response.WriteLine("Copy Project Properties to BusinessLayer Done.");
		
		this.Response.WriteLine("Begin CodeSmith Build of BusinessLayer Project....");
		bl.RegisterOutput(this.OutputFile);
		//begin build of project
		bl.BuildProject();		
		bl.Render(this.Response);
		this.Response.WriteLine("CodeSmith Build of BusinessLayer Project Done.");
		this.Progress.PerformStep();
		
		if(this.GenerateUI)
		{
			switch(this.TypeOfUserInterface)
			{
				case Utility.UIType.Web:
					GenerateWebUI();
					break;
				case UIType.MDIForm:
					GenerateMDIFormUI();
					break;
				case UIType.WinForm:
					GenerateWinFormUI();
					break;
				default:
					break;
			}
		}
		
		if(this.GenerateSolution)
		{
			// instantiate the sub-template
			ProjectSolutionTemplate sl = this.Create<ProjectSolutionTemplate>();
			SolutionProjectGuid = sl.ProjectGuid;
			sl.GenerateUI = this.GenerateUI;
			sl.TypeOfUserInterface = this.TypeOfUserInterface;
			
			this.Response.WriteLine("Begin CodeSmith Build of Project Solution....");
			sl.RegisterOutput(this.OutputFile);
			this.CopyPropertiesTo(sl);
			//begin build of project
			BuildSubTemplate(this, sl, null, string.Format("{0}.{1}.ProjectSolution.sln",CompanyNameSpace, ProjectNameSpace), OutPutDirectory);
			this.Response.WriteLine("CodeSmith Build of Project Solution Done.");
		}
		this.Response.WriteLine("CodeSmith Build of Domain Layer Project Done.");
				
	}
	catch(Exception ex)
	{
		this.Response.WriteLine(string.Format("Exception Message: {0}",ex.Message));
		this.Response.WriteLine(string.Format("Exception Body: {0}",ex.ToString()));		
	}
	finally
	{
		
	}
	this.Response.WriteLine("CodeSmith Build of Domain Layer Project Done.");
}
private void GenerateMDIFormUI()
{
	// instantiate the sub-template
	FormsUIComponentTemplate cmp = this.Create<FormsUIComponentTemplate>();
	FormsUIComponentProjectGuid = cmp.ProjectGuid;
	
	this.Response.WriteLine("Copy Project Properties to FormsUIComponent...");
	// Set up the DL project  	
	this.CopyPropertiesTo(cmp);		
	this.Response.WriteLine("Copy Project Properties to FormsUIComponent Done.");
	
	this.Response.WriteLine("Begin CodeSmith Build of FormsUIComponent Project....");
	cmp.RegisterOutput(this.OutputFile);
	//begin build of project
	cmp.BuildProject();		
	cmp.Render(this.Response);
	this.Response.WriteLine("CodeSmith Build of FormsUIComponent Project Done.");	
	this.Progress.PerformStep();
	
	// instantiate the sub-template
	MDIFormsTemplate mdi = this.Create<MDIFormsTemplate>();
	UserInterfaceProjectGuid = mdi.ProjectGuid;
	
	this.Response.WriteLine("Copy Project Properties to MDIFormsTemplate...");
	// Set up the DL project  	
	this.CopyPropertiesTo(mdi);		
	this.Response.WriteLine("Copy Project Properties to MDIFormsTemplate Done.");
	
	this.Response.WriteLine("Begin CodeSmith Build of MDIFormsTemplate Project....");
	mdi.RegisterOutput(this.OutputFile);
	//begin build of project
	mdi.BuildProject();		
	mdi.Render(this.Response);
	this.Response.WriteLine("CodeSmith Build of MDIFormsTemplate Project Done.");
	this.Progress.PerformStep();
}
private void GenerateWinFormUI()
{
		
}
private void GenerateWebUI()
{
		
}

</script>