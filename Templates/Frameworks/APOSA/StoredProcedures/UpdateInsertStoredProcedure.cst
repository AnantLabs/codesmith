<%--
	Author: Chris Lasater
		
	
	Description: Generates Stored Procedure to perform an Update/Insert
		
	Remarks:
		
--%>
<%@ CodeTemplate Debug="True" Language="C#" TargetLanguage="T-SQL" OutputType="None"
	Src="../Utility/SQLHelper.cs" Inherits="Utility.SQLHelper"
	Description="Generates standard CRUD UPDATE/INSERT procedures based on a database table schema." %>
<%-- Context --%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>
<%-- Options --%>
<%@ Property Name="IncludeDropStatements" Type="System.Boolean" Default="True" Category="2. Options"
	Description="If true drop statements will be generated to drop existing stored procedures." %>

<%@ Property Name="TablePrefix" Type="System.String" Default="" Category="2. Options" Optional="True"
	Description="If this prefix is found at the start of a table name, it will be stripped off." %>
<%@ Property Name="ProcedurePrefix" Type="System.String" Default="usp_" Category="2. Options" Optional="True"
	Description="Prefix to use for all generated procedure names." %>
<%@ Property Name="ProcedureDescription" Type="System.String" Category="2. Options"
	Description="Description to be included in stored procedure notes." %>
	
<%@ Property Name="AutoExecuteScript" Type="System.Boolean" Default="False" Category="2. Options"
	Description="Whether or not to immediately execute the script on the target database." %>
<%@ Property Name="ExcludedColumns" Type="StringCollection" Default="" Optional="True" Category="2. Options"
	Description="If supplied, any columns in this list will be excluded from all stored procedures unless the column is part of the primary key. (* is treated as a wildcard)" %>



<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%
this.OutputFile = GetFileName();
this.Progress.MaximumValue = 13;
this.Progress.Step = 1;

// this template requires a primary key on the source table
if (!SourceTable.HasPrimaryKey) throw new ApplicationException("SourceTable does not contain a primary key.");

// generate drop statements
if (IncludeDropStatements)
{ %>	
/****** Object:  Procedure <%= GetInsertUpdateProcedureName() %>    Script Date: <%= DateTime.Now.ToString("MM/dd/yyyy")%> <%= DateTime.Now.ToLongTimeString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'<%= GetInsertUpdateProcedureName() %>') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetInsertUpdateProcedureName() %>
GO
<%		
}
%>
/*********************************************************************************************
 
 Created By: This code was generated by APOSA CodeSmith Domain Object Template.
 Date:    <%= DateTime.Now.ToString("MM/dd/yyyy") %>
 Time:    <%= DateTime.Now.ToString("hh:mm tt") %>
 Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>

 Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

 Procedure Name: <%= GetInsertUpdateProcedureName() %>
 
 Description: <%= ProcedureDescription %>
 
 Parameters: 
<%= GenerateParameters(SourceTable.Columns, 2) %>,
		@TransactionType int
       
--region RevisionLog
***************************************  Revision Log  ***************************************
 
Version   Date        Revised By       Description / WO#
--------  ----------  ---------------  -------------------------------------------------------
   
**********************************************************************************************/
--endregion
CREATE PROCEDURE <%= GetInsertUpdateProcedureName() %>
(
<%= GenerateParameters(SourceTable.Columns, 1) %>,
	@TransactionType int
)
AS

SET NOCOUNT ON
DECLARE @ROWCOUNT int
IF @TransactionType in (2,3,4)
BEGIN
	UPDATE <%= GetTableOwner() %>[<%= SourceTable.Name %>] 
	SET    
<%= GenerateUpdates(SourceTable.NonPrimaryKeyColumns, 2) %>
	WHERE
<%= GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 2) %>
	SET @ROWCOUNT = @@ROWCOUNT
	if(@@ERROR <> 0)
	BEGIN
		RAISERROR ('Could not update record.', 16, 1)  	
		RETURN @@ERROR
	END
	IF (@ROWCOUNT < 1)
	BEGIN
<%= GenerateKeyVaraibles(SourceTable.PrimaryKey.MemberColumns, 2) %>		
		INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] 
		(
<%= GenerateInsertColumns(SourceTable.Columns, 3) %>
		) 
		VALUES 
		(
<%= GenerateInsertVariables(SourceTable.Columns, 3) %>
		)
<%= GenerateKeyOutputs(SourceTable.PrimaryKey.MemberColumns, 2) %>		
		if(@@ERROR <> 0)
		BEGIN
			RAISERROR ('Could not insert record.', 16, 1)  
			RETURN @@ERROR
		END
	END
END
ELSE IF @TransactionType in (1)
BEGIN
	DELETE FROM <%= GetTableOwner() %>[<%= SourceTable.Name %>] 	
	WHERE
<%= GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 2) %>
	
	if(@@ERROR <> 0)
	BEGIN
		RAISERROR ('Could not update record.', 16, 1)  	
		RETURN @@ERROR
	END
	
END
ELSE 
	BEGIN
		RAISERROR ('Not a valid TransactionType. This value should be Delete = 1,Insert = 2,Update = 3,InsertUpdate = 4.', 16, 1)  
		RETURN -1	
	END
--region <%= GetInsertUpdateProcedureName() %>
------------------------------------------------------------------------------------------------------------------------");
-- Generated By:   <%= System.Environment.UserName%> using CodeSmith <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
-- Template:       <%= this.CodeTemplateInfo.FileName %>
-- Procedure Name: <%= GetInsertUpdateProcedureName() %>
-- Date Generated: <%= DateTime.Now.ToLongDateString()%>
------------------------------------------------------------------------------------------------------------------------");
--endregion
<%	
	this.Progress.PerformStep();
%>

<script runat="template">

#region Code Generation Helpers
public string GetTableOwner()
{
	return GetTableOwner(true);
}

public string GetTableOwner(bool includeDot)
{
	if (SourceTable.Owner.Length > 0)
	{
		if (includeDot)
		{
			return "[" + SourceTable.Owner + "].";
		}
		else
		{
			return "[" + SourceTable.Owner + "]";
		}
	}
	else
	{
		return "";
	}
}

public string GenerateIndent(int indentLevel)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
    for (int i = 0; i < indentLevel; i++)
	{
		builder.Append('\t');
	}
	return builder.ToString();
}

public string GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	return GenerateParameter(column, indentLevel, isFirst, isLast, false);
}

public string GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool isOutput)
{	
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	builder.Append(GenerateIndent(indentLevel));
	builder.Append(GetSqlParameterStatementFromColumn(column, column.IsPrimaryKeyMember || isOutput));
	if (!isLast) builder.Append(",");
	if (indentLevel >= 0 && !isLast)
	{
		builder.Append("\r\n");
	}
	else if (!isLast)
	{
		builder.Append(" ");
	}
	return builder.ToString();
}

public string GenerateParameters(ColumnSchemaCollection columns, int indentLevel)
{
	return GenerateParameters(columns, indentLevel, false);
}

public string GenerateParameters(ColumnSchemaCollection columns, int indentLevel, bool includeTrailingComma)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		builder.Append(GenerateParameter(filteredColumns[i], indentLevel, i == 0, i == filteredColumns.Count - 1 && !includeTrailingComma));
	}	
	return builder.ToString();
}

public string GenerateInsertColumn(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	if(column.DataType != System.Data.DbType.Guid && column.IsPrimaryKeyMember) return string.Empty;
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	
	builder.Append(GenerateIndent(indentLevel));
	builder.Append("[");
	builder.Append(column.Name);
	builder.Append("]");		
	
	if (!isLast) builder.Append(",");
	if (indentLevel >= 0)
	{
		builder.Append("\r\n");
	}
	else if (!isLast)
	{
		builder.Append(" ");
	}
	return builder.ToString();
}

public string GenerateInsertColumns(ColumnSchemaCollection columns, int indentLevel)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		builder.Append(GenerateInsertColumn(filteredColumns[i], indentLevel, i == 0, i == filteredColumns.Count - 1));
	}
	return builder.ToString();
}

public string GenerateUpdate(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	builder.Append(GenerateIndent(indentLevel));
	builder.Append("[");
	builder.Append(column.Name);
	builder.Append("] = @");
	builder.Append(StringUtil.ToPascalCase(column.Name));
	if (!isLast) builder.Append(",");
	if (indentLevel >= 0)
	{
		builder.Append("\r\n");
	}
	else if (!isLast)
	{
		builder.Append(" ");
	}
	return builder.ToString();
}

public string GenerateUpdates(ColumnSchemaCollection columns, int indentLevel)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		builder.Append(GenerateUpdate(filteredColumns[i], indentLevel, i == 0, i == filteredColumns.Count - 1));
	}
	return builder.ToString();
}
public string GenerateKeyVaraible(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	if(!column.IsPrimaryKeyMember || column.DataType != System.Data.DbType.Guid) return string.Empty;
	builder.Append(GenerateIndent(indentLevel));
	builder.Append("SET ");
	builder.Append("@");
	builder.Append(StringUtil.ToPascalCase(column.Name));
	builder.Append(" = newid()");		
	
	if (indentLevel >= 0)
	{
		builder.Append("\r\n");
	}
	else if (!isLast)
	{
		builder.Append(" ");
	}
	return builder.ToString();
}

public string GenerateKeyVaraibles(ColumnSchemaCollection columns, int indentLevel)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		builder.Append(GenerateKeyVaraible(filteredColumns[i], indentLevel, i == 0, i == filteredColumns.Count - 1));
	}
	return builder.ToString();
}
public string GenerateKeyOutput(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	if(!column.IsPrimaryKeyMember || column.DataType == System.Data.DbType.Guid) return string.Empty;
	
	builder.Append(GenerateIndent(indentLevel));
	if (!isFirst) builder.Append("AND ");
	if (isFirst) builder.Append("SET ");
	builder.Append("@");
	builder.Append(StringUtil.ToPascalCase(column.Name));
	if(column.DataType != System.Data.DbType.Guid)
	{	
		builder.Append(" = SCOPE_IDENTITY()");	
	}
	if (indentLevel >= 0)
	{
		builder.Append("\r\n");
	}
	else if (!isLast)
	{
		builder.Append(" ");
	}
	return builder.ToString();
}

public string GenerateKeyOutputs(ColumnSchemaCollection columns, int indentLevel)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		builder.Append(GenerateKeyOutput(filteredColumns[i], indentLevel, i == 0, i == filteredColumns.Count - 1));
	}
	return builder.ToString();
}
public string GenerateCondition(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	builder.Append(GenerateIndent(indentLevel));
	if (!isFirst) builder.Append("AND ");
	builder.Append("[");
	builder.Append(column.Name);
	builder.Append("] = @");
	builder.Append(StringUtil.ToPascalCase(column.Name));
	if (indentLevel >= 0)
	{
		builder.Append("\r\n");
	}
	else if (!isLast)
	{
		builder.Append(" ");
	}
	return builder.ToString();
}

public string GenerateConditions(ColumnSchemaCollection columns, int indentLevel)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		builder.Append(GenerateCondition(filteredColumns[i], indentLevel, i == 0, i == filteredColumns.Count - 1));
	}
	return builder.ToString();
}

public string GenerateInsertVariable(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	if(column.DataType != System.Data.DbType.Guid && column.IsPrimaryKeyMember) return string.Empty;
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	builder.Append(GenerateIndent(indentLevel));
	builder.Append("@");
	builder.Append(StringUtil.ToPascalCase(column.Name));
	if (!isLast) builder.Append(",");	
	if (indentLevel >= 0)
	{
		builder.Append("\r\n");
	}
	else if (!isLast)
	{
		builder.Append(" ");
	}
	return builder.ToString();
}

public string GenerateInsertVariables(ColumnSchemaCollection columns, int indentLevel)
{
	System.Text.StringBuilder builder = new System.Text.StringBuilder();
	ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		builder.Append(GenerateInsertVariable(filteredColumns[i], indentLevel, i == 0, i == filteredColumns.Count - 1));
	}
	return builder.ToString();
}




public ColumnSchemaCollection FilterExcludedColumns(ColumnSchemaCollection columns)
{
	ColumnSchemaCollection filteredColumns = new ColumnSchemaCollection();
	
	for (int i = 0; i < columns.Count; i++)
	{
		if (!ColumnIsExcluded(columns[i])) filteredColumns.Add(columns[i]);
	}
	
	return filteredColumns;
}



public bool ColumnIsExcluded(ColumnSchema column)
{
	if (column.IsPrimaryKeyMember) return false;
	
	
	if (ExcludedColumns != null && ExcludedColumns.Count > 0)
	{
		
		for (int i = 0; i < ExcludedColumns.Count; i++)
		{
			if(column.Name == ExcludedColumns[i]) return true;
		}			
	}
		
	return false;
}


#endregion

#region Procedure Naming

public string GetInsertUpdateProcedureName()
{
	return String.Format("{0}[{1}Set{2}Data]", GetTableOwner(), ProcedurePrefix, GetEntityName(false));
}


public string GetEntityName(bool plural)
{
	string entityName = SourceTable.Name;
	
	if (!string.IsNullOrEmpty(TablePrefix) && entityName.StartsWith(TablePrefix))
	{
		entityName = entityName.Substring(TablePrefix.Length);
	}
	
	if (plural)
	{
		entityName = StringUtil.ToPlural(entityName);
	}
	else
	{
		entityName = StringUtil.ToSingular(entityName);
	}
	
	return entityName;
}

public string GetBySuffix(ColumnSchemaCollection columns)
{
    System.Text.StringBuilder bySuffix = new System.Text.StringBuilder();
	for (int i = 0; i < columns.Count; i++)
	{
	    if (i > 0) bySuffix.Append("And");
	    bySuffix.Append(columns[i].Name);
	}
	
	return bySuffix.ToString();
}
#endregion

#region Template Overrides
// Assign an appropriate file name to the output.
public override string GetFileName()
{
	if (this.SourceTable != null)
	{
		return this.SourceTable.Database.Name + "." + GetInsertUpdateProcedureName() + ".sql";
	}
	else
	{
		return base.GetFileName();
	}
}

// Override the OutputFile property and assign our specific settings to it.
[Category("2. Options")]
[FileDialog(FileDialogType.Save, Title="Select Output File", Filter="Query Files (*.sql)|*.sql|All Files (*.*)|*.*", DefaultExtension=".sql")]
public override string OutputFile
{
	get {return base.OutputFile;}
	set {base.OutputFile = value;}
}

protected override void OnPostRender(string result) 
{
	if (this.AutoExecuteScript)
	{
		// execute the output on the same database as the source table.
		CodeSmith.BaseTemplates.ScriptResult scriptResult = CodeSmith.BaseTemplates.ScriptUtility.ExecuteScript(this.SourceTable.Database.ConnectionString, result, new System.Data.SqlClient.SqlInfoMessageEventHandler(cn_InfoMessage)); 
		Trace.WriteLine(scriptResult.ToString());
	}
	
	base.OnPostRender(result);
}

private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e)
{
	Trace.WriteLine(e.Message);
}
#endregion

</script>