<%@ CodeTemplate Src="CSLAHelper.vb" Inherits="CSLAHelper" Debug="False" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Root Collection Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
                                          <%-- Code Not Verified - MFA 11/19/2003   --%>
<%-- Generic Variables for code to use  --%><% Dim Col As ColumnSchema %><% Dim PKs As ColumnSchemaCollection = RootTable.primarykey.membercolumns %>
<% Dim NPKs As ColumnSchemaCollection = RootTable.NonPrimaryKeyColumns %> <% Dim PKOrd As integer = PKs.Count - 1 %><% Dim OrdinalColCount as Integer = RootTable.columns.count - 1 %> 
<%=Level(0,True)%>Option Strict On
<%=Level(0,False)%>Option Explicit On
<%=Level(0,False)%>Option Compare Text

<%=Level(0,False)%>Imports CSLA
<%=Level(0,False)%>Imports CSLA.Data
<%=Level(0,False)%>Imports System.Data.SQLClient
<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>Namespace <%= ClassNamespace %>
<% End If %>
   ''' <summary>
   ''' This business object represents the properties and methods of the <%= RootTable.Database.Name %>.<%= RootTable %> Table.
	''' It corresponds to the EDITABLE ROOT COLLECTION OBJECT as outlined in the Book "Expert One-on-One VB.NET Business Objects"
	''' Object was generated on <%= Now() %> - By <%=Environment.UserName %>
   ''' </summary>
   ''' <remarks>
   ''' Parameters used to generate this class.
   ''' Business Object
   '''	ClassNamespace      = <%= ClassNamespace %>
   '''	ObjectName          = <%= ObjectName %>
   '''	RootTable           = <%= RootTable.Database.Name %>.<%= RootTable %>
   '''  BaseClassExt        = <%= BaseClassExt %>
   '''
   '''Business Object's Child Collection
   '''	ChildCollectionName = <%= ChildCollectionName %>
   '''	ChildMemberName     = <%= ChildMemberName %>
   '''
   '''Options
   '''	MemberPrefix        = <%= MemberPrefix %>
   '''	FLCPrefix           = <%= FLCPrefix %>   
   '''	Accessibility       = <%= Accessibility.ToString %>
   '''	Serializable        = <%= Serializable %>
   '''	MustBeInherited     = <%= MustBeInherited %>
   '''	TransactionType     = <%= TransactionType.ToString %>
   '''
   '''Stored Procedure Style
   '''	GeneralSPPrefix     = <%= GeneralSPPrefix %>
   '''	InsertPrefix        = <%= InsertPrefix %>
   '''	UpdatePrefix        = <%= UpdatePrefix %>
   '''	DeletePrefix        = <%= DeletePrefix %>
   '''	SelectPrefix        = <%= SelectPrefix %>
   ''' </remarks>
<%=Level(0,False)%><% If Serializable = True Then %><Serializable()> _<% End If %>
<%=Level(0,False)%><%= GetAccessModifier(Accessibility) %> <%= GetMustInherit(MustBeInherited) %>Class <%=GetBaseCollectionName() %>
<%=Level(1,False)%>Inherits BusinessCollectionBase
	
#Region " Business Properties and Methods "
    	
<%=Level(1,False)%>Default Public ReadOnly Property Item(ByVal Index As Integer) as <%= GetCustomClassName %>
<%=Level(2,False)%>Get
<%=Level(3,False)%>Return CType(list.Item(Index), <%= GetCustomClassName %>)
<%=Level(2,False)%>End Get
<%=Level(1,False)%>End Property

<%=Level(1,False)%>Default Public ReadOnly Property Item(<% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>) As <%= GetCustomClassName %>
<%=Level(2,False)%>Get
<%=Level(3,False)%>Dim obj As <%= GetCustomClassName %>
<%=Level(3,False)%>For Each obj In list
<%=Level(4,False)%>If <% For Each col in PKs %>obj.<%= GetPropertyName(Col) %>.equals(<%= col.name %>)<% IF PKs.Item(PKOrd).name <> col.name Then %> AND _<%=Level(4,True)%><% END IF%><% Next %> Then
<%=Level(5,False)%>Return CType(obj, <%= GetCustomClassName %>)
<%=Level(4,False)%>End If              
<%=Level(3,False)%>Next          
<%=Level(3,False)%>Return Nothing
<%=Level(2,False)%>End Get      
<%=Level(1,False)%>End Property
      
<%=Level(1,False)%>Public Sub Remove(ByVal obj As <%= GetCustomClassName %>)
<%=Level(2,False)%>list.Remove(obj)
<%=Level(1,False)%>End Sub

<%=Level(1,False)%>Public Sub Remove(<% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>)       
<%=Level(2,False)%>Dim obj As <%= GetCustomClassName %>
    
<%=Level(2,False)%>For Each obj In list
<%=Level(3,False)%>If <% For Each col in PKs %>obj.<%= GetPropertyName(Col) %>.Equals(<%= col.name %>)<% IF PKs.Item(PKOrd).name <> col.name Then %> AND _<%= Level(3,True) %><% END IF%><% Next %> Then
<%=Level(4,False)%>Remove(obj)
<%=Level(4,False)%>Exit For
<%=Level(3,False)%>End If
<%=Level(2,False)%>Next
<%=Level(1,False)%>End Sub
      
<%=Level(1,False)%>Public Sub Add(ByVal obj As <%= GetCustomClassName %>)
<%=Level(2,False)%>If Not Contains(obj) Then
<%=Level(3,False)%>List.Add(obj)
<%=Level(2,False)%>End If
<%=Level(1,False)%>End Sub      
    
#End Region ' Business Properties and Methods

#Region " Contains (Evaluate if the Object exists in Collection) "

<%=Level(1,False)%>Public Overloads Function Contains(ByVal item as <%= GetCustomClassName %>) As Boolean
<%=Level(2,False)%>Dim obj as <%= GetCustomClassName %>
<%=Level(2,False)%>For Each obj in list
<%=Level(3,False)%>If obj.Equals(item) then
<%=Level(4,False)%>Return True
<%=Level(3,False)%>End If
<%=Level(2,False)%>Next
<%=Level(2,False)%>Return False
<%=Level(1,False)%>End Function

<%=Level(1,False)%>Public Overloads Function ContainsDeleted(ByVal item as <%= GetCustomClassName %>) As Boolean
<%=Level(2,False)%>Dim obj as <%= GetCustomClassName %>
<%=Level(2,False)%>For Each obj in deletedList
<%=Level(3,False)%>If obj.Equals(item) Then
<%=Level(4,False)%>Return True
<%=Level(3,False)%>End If
<%=Level(2,False)%>Next
<%=Level(2,False)%>Return False            
<%=Level(1,False)%>End Function

#End Region 'Contains (Evaluate if the Object exists in Collection)

#Region " Shared Methods "

<%=Level(1,False)%>Public Shared Function New<%= GetCustomCollectionName %>() As <%= GetCustomCollectionName %>
<%=Level(2,False)%>Return New <%= GetCustomCollectionName %>
<%=Level(1,False)%>End Function

<%=Level(1,False)%>Public Shared Function Get<%= GetCustomCollectionName %>() As <%= GetCustomCollectionName %> 
<%=Level(2,False)%>Return CType(DataPortal.Fetch(New Criteria()), <%= GetCustomCollectionName %> )
<%=Level(1,False)%>End Function

<%=Level(1,False)%>Public Shared Sub Delete<%= GetCustomCollectionName %>()
<%=Level(2,False)%>DataPortal.Delete(New Criteria())
<%=Level(1,False)%>End Sub

#End Region ' Shared Methods

#Region " Constructors "

<%=Level(1,False)%>Protected Sub New()
<%=Level(2,False)%>' prevent direct creation
<%=Level(2,False)%><% If AllowSort And IsCollectionCode Then %>AllowSort = True<% End If %><% If AllowFind And IsCollectionCode Then %><%=Level(2,True)%>AllowFind = True<% End If %>
<%=Level(1,False)%>End Sub
	
#End Region ' Constructors 

#Region " Criteria Class (identifies the Individual Object/ Primary Key) "

<%=Level(1,False)%>' criteria for identifying existing object and is always serializable
<%=Level(1,False)%><Serializable()> _
<%=Level(1,False)%>Protected Class Criteria
<%=Level(2,False)%>Inherits CSLA.Server.CriteriaBase

<%=Level(2,False)%>Public Sub New()
<%=Level(3,False)%>MyBase.New(GetType(<%= GetCustomCollectionName() %>))
<%=Level(2,False)%>End Sub  
  
<%=Level(1,False)%>End Class

#End Region ' Criteria

#Region " Data Access "

<%=Level(1,False)%>Protected Overrides Sub DataPortal_Fetch(ByVal Criteria as Object)
<%=Level(2,False)%>Dim crit As Criteria = CType(Criteria, Criteria)
    
<%=Level(2,False)%>'Retrieve all objects via the safe data reader
<%=Level(2,False)%>Dim cn As New SqlConnection(db("<%= RootTable.database.name %>"))
<%=Level(2,False)%>Dim cmd As New SqlCommand
<%=Level(3,False)%>cn.Open()
			  
<%=Level(2,False)%>Try
<%=Level(3,False)%>With cmd
<%=Level(4,False)%>.Connection = cn
<%=Level(4,False)%>.CommandType = CommandType.StoredProcedure
<%=Level(4,False)%>.CommandText = "<%= GeneralSPPrefix %><%= SelectPrefix %><%= GetCustomCollectionName %>"
<%=Level(4,False)%>Dim dr As New SafeDataReader(.ExecuteReader)
<%=Level(4,False)%>Try
<%=Level(5,False)%>'and loop through it to create the individual collection objects
<%=Level(5,False)%>While dr.read
<%=Level(6,False)%>list.add(<%= GetCustomClassName %>.Get<%= GetCustomClassName %>(<% For Each col in PKs %>dr.<%= GetReaderMethod(col) %>(<%= RootTable.Columns.IndexOf(col.Name) %>)<% Next %>))
<%=Level(5,False)%>End While	                  	
<%=Level(4,False)%>Finally
<%=Level(5,False)%>dr.Close()
<%=Level(4,False)%>End Try
	        
<%=Level(3,False)%>End With
		  		
<%=Level(2,False)%>Finally
<%=Level(3,False)%>cn.Close()
<%=Level(2,False)%>End Try
<%=Level(1,False)%>End Sub

<%=Level(1,False)%>Protected Overrides Sub DataPortal_Update()
<%=Level(2,False)%>'Loop through the deleted objects and call their Update methods
<%=Level(2,False)%>For Each obj as <%= GetCustomClassName %> In DeletedList
<%=Level(3,False)%>obj.Update(Me)
<%=Level(2,False)%>Next
    
<%=Level(2,False)%>'Now clear the deleted objects from the list
<%=Level(2,False)%>DeletedList.Clear()
    
<%=Level(2,False)%>'Loop through the objects to add and update, calling the Update Method
<%=Level(2,False)%>For Each obj as <%= GetCustomClassName %> In List
<%=Level(3,False)%>obj.Update(me)
<%=Level(2,False)%>Next    
<%=Level(1,False)%>End Sub

<%=Level(1,False)%>Protected Overrides Sub DataPortal_Delete(ByVal Criteria as Object)
<%=Level(2,False)%>Dim crit As Criteria = CType(Criteria, Criteria)
<%=Level(2,False)%>'Delete the objects that match the criteria
<%=Level(1,False)%>End Sub

#End Region ' Data Access

<%=Level(0,False)%>End Class

<%=Level(0,False)%><% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>End Namespace
<% End If %>
