<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 EditableChildList" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;
using System.Collections.Generic;
using Csla;

#endregion

namespace <%= BusinessProjectName %>
{
	[Serializable]
	public partial class <%= BusinessClassName %> : BusinessListBase< <%= BusinessClassName %>, <%= ChildBusinessClassName %> >
	{
		#region Factory Methods 
		
		internal static <%= ChildBusinessClassName %> New<%= ChildBusinessClassName %>()
		{
			return DataPortal.CreateChild< <%= ChildBusinessClassName %> >();
		}
		
		internal static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
			return DataPortal.FetchChild< <%= ChildBusinessClassName %> >(
				new <%= ChildBusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>));
		}
        
        internal static <%= ChildBusinessClassName %> GetAll()
        {
            return DataPortal.FetchChild< <%= ChildBusinessClassName %> >(new <%= ChildBusinessClassName %>Criteria());
        }
		<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { foreach(SearchCriteria sc in association.ListSearchCriteria) { %>
        
        internal static <%= BusinessClassName %> <%= sc.MethodName %>(<%= sc.Members[0].BuildParametersVariablesCriteria(false) %>)
		{
            return DataPortal.FetchChild< <%= BusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria { <%= sc.Members[0].BuildCriteriaObjectInitializer() %> });
        }
 <% } } %>

		private <%= BusinessClassName %>()
		{
			AllowNew = true;
            MarkAsChild();
		}
		
		#endregion

		#region Business Methods
		
		protected override object AddNewCore()
		{
			<%= ChildBusinessClassName %> item = <%= BusinessProjectName %>.<%= ChildBusinessClassName %>.New<%= ChildBusinessClassName %>();
			Add(item);
			return item;
		}
		
		#endregion
	}
}