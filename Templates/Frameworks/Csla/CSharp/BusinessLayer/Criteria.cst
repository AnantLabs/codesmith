<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="Criteria" Template="Internal\Criteria.cst" %>
<%@ Register Name="CriteriaGenerated" Template="Internal\Criteria.Generated.cst" %>
<%@ Register Name="IGeneratedCriteriaTemplate" Template="Internal\IGeneratedCriteria.cst" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    string parentFileName = System.IO.Path.Combine(this.Location, String.Format("Criteria\\{0}.cs", BusinessClassName));
    string fileName = System.IO.Path.Combine(Location, String.Format("Criteria\\{0}.Generated.cs", BusinessClassName));
    
    RenderToFileHelper<Criteria>(parentFileName, false);
    RenderToFileHelper<CriteriaGenerated>(fileName, parentFileName, true);
    RenderToFileHelper<IGeneratedCriteriaTemplate>(System.IO.Path.Combine(this.Location, "Criteria\\Interfaces\\IGeneratedCriteria.cs"), true);
}

public override bool OnEntityChanging()
{
    if (string.IsNullOrEmpty(BusinessClassName))
    {
        BusinessClassName = string.Concat(Entity.Name, "Criteria");
    }

    if (string.IsNullOrEmpty(CriteriaClassName) || CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase))
        CriteriaClassName = String.Concat(Entity.Name, "Criteria");

    return false;
}

</script>