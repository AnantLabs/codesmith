<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="DynamicListBase" Template="Internal\DynamicListBase.cst" %>
<%@ Register Name="DynamicListBaseDataAccess" Template="Internal\DynamicListBase.DataAccess.cst" %>
<%@ Register Name="DynamicListBaseDataAccessLinqToSQL" Template="Internal\DynamicListBase.DataAccess.LinqToSQL.cst" %>
<%@ Register Name="DynamicListBaseDataAccessParameterized" Template="Internal\DynamicListBase.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="DynamicListBaseDataAccessStoredProcedures" Template="Internal\DynamicListBase.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="DynamicListBaseGenerated" Template="Internal\DynamicListBase.Generated.cst" %>
<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    string parentFileName = System.IO.Path.Combine(this.Location, String.Format("Collections\\{0}.cs", BusinessClassName));
    string fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.Generated.cs", BusinessClassName));
    RenderToFileHelper<DynamicListBase>(parentFileName);
    RenderToFileHelper<DynamicListBaseGenerated>(fileName, parentFileName, true);
 
    fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.DataAccess.cs", BusinessClassName));
    if(DataAccessImplementation == DataAccessMethod.None)
    {
        RenderToFileHelper<DynamicListBaseDataAccess>(fileName, parentFileName, false);
    }
    else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
    {
        RenderToFileHelper<DynamicListBaseDataAccessParameterized>(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.LinqToSQL)
    {
        RenderToFileHelper<DynamicListBaseDataAccessLinqToSQL>(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        RenderToFileHelper<DynamicListBaseDataAccessStoredProcedures>(fileName, parentFileName, true);

        fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.StoredProcedures.sql", BusinessClassName));
        RenderProceduresToFileHelper<SqlStoredProcedures>(fileName, parentFileName, true, false, true);
    }
}

public override bool OnEntityChanging()
{
    if (string.IsNullOrEmpty(BusinessClassName))
    {
        BusinessClassName = string.Concat(Entity.Name, "List");
        ChildBusinessClassName = Entity.Name;
    }

    if (string.IsNullOrEmpty(CriteriaClassName) || CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase))
        CriteriaClassName = String.Concat(Entity.Name, "Criteria");

    return false;
}

</script>