<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Debug="False" Inherits="CodeSmith.QuickStart.EntityMasterCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Entities" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections.Generic" %>

<%@ Register Name="CommandObjectTemplate" Template="CommandObject.cst" %>
<%@ Register Name="CriteriaTemplate" Template="Criteria.cst" %>
<%@ Register Name="DynamicListBaseTemplate" Template="DynamicListBase.cst" %>
<%@ Register Name="DynamicRootTemplate" Template="DynamicRoot.cst" %>
<%@ Register Name="DynamicRootListTemplate" Template="DynamicRootList.cst" %>
<%@ Register Name="EditableChildTemplate" Template="EditableChild.cst" %>
<%@ Register Name="EditableChildListTemplate" Template="EditableChildList.cst" %>
<%@ Register Name="EditableRootTemplate" Template="EditableRoot.cst" %>
<%@ Register Name="EditableRootListTemplate" Template="EditableRootList.cst" %>
<%@ Register Name="NameValueListTemplate" Template="NameValueList.cst" %>
<%@ Register Name="ReadOnlyChildTemplate" Template="ReadOnlyChild.cst" %>
<%@ Register Name="ReadOnlyChildListTemplate" Template="ReadOnlyChildList.cst" %>
<%@ Register Name="ReadOnlyListTemplate" Template="ReadOnlyList.cst" %>
<%@ Register Name="ReadOnlyRootTemplate" Template="ReadOnlyRoot.cst" %>
<%@ Register Name="SwitchableObjectTemplate" Template="SwitchableObject.cst" %>

<%@ Register Name="ADOHelperTemplate" Template="Internal\ADOHelper.cst" %>
<%@ Register Name="FactoryNamesTemplate" Template="Internal\FactoryNames.cst" %>
<%@ Register Name="ExistsCommandTemplate" Template="Internal\ExistsCommand.cst" %>
<% Generate(); %>

<script runat="template">

public override void Generate()
{
    #region CommandObjectTemplate

    if(this.CommandObject != null)
    {
        foreach(TableSchema table in this.CommandObject)
        {
            CommandObjectTemplate template = this.Create<CommandObjectTemplate>();
            RenderHelper(template, table);
        }
    }
    
    #endregion
    
    #region CriteriaTemplate

    if(this.Criteria != null)
    {
        foreach(TableSchema table in this.Criteria)
        {
            CriteriaTemplate template = this.Create<CriteriaTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion
    
    #region DynamicRootTemplate

    if(this.DynamicRoot != null)
    {
        foreach(TableSchema table in this.DynamicRoot)
        {
            DynamicRootTemplate template = this.Create<DynamicRootTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion
    
    #region DynamicRootListTemplate

    if(this.DynamicRootList != null)
    {
        foreach(TableSchema table in this.DynamicRootList)
        {
            DynamicRootListTemplate template = this.Create<DynamicRootListTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion    
    
    #region EditableChildTemplate

    if(this.EditableChild != null)
    {
        foreach(TableSchema table in this.EditableChild)
        {
            EditableChildTemplate template = this.Create<EditableChildTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion
    
    #region EditableChildListTemplate

    if(this.EditableChildList != null)
    {
        foreach(TableSchema table in this.EditableChildList)
        {
            EditableChildListTemplate template = this.Create<EditableChildListTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion    
    
    #region EditableRootTemplate

    if(this.EditableRoot != null)
    {
        foreach(TableSchema table in this.EditableRoot)
        {
            EditableRootTemplate template = this.Create<EditableRootTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion    
    
    #region EditableRootListTemplate

    if(this.EditableRootList != null)
    {
        foreach(TableSchema table in this.EditableRootList)
        {
            EditableRootListTemplate template = this.Create<EditableRootListTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion
     
    #region DynamicListBase

    if(this.DynamicListBase != null)
    {
        foreach(TableSchema table in this.DynamicListBase)
        {
            DynamicListBaseTemplate template = this.Create<DynamicListBaseTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion
    
    #region NameValueListTemplate

    if(this.NameValueList != null)
    {
        foreach(TableSchema table in this.NameValueList)
        {
            NameValueListTemplate template = this.Create<NameValueListTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion    
    
    #region ReadOnlyChildTemplate

    if(this.ReadOnlyChild != null)
    {
        foreach(TableSchema table in this.ReadOnlyChild)
        {
            ReadOnlyChildTemplate template = this.Create<ReadOnlyChildTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion
    
    #region ReadOnlyChildListTemplate

    if(this.ReadOnlyChildList != null)
    {
        foreach(TableSchema table in this.ReadOnlyChildList)
        {
            ReadOnlyChildListTemplate template = this.Create<ReadOnlyChildListTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion    
    
    #region ReadOnlyListTemplate

    if(this.ReadOnlyList != null)
    {
        foreach(TableSchema table in this.ReadOnlyList)
        {
            ReadOnlyListTemplate template = this.Create<ReadOnlyListTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion
    
    #region ReadOnlyRootTemplate

    if(this.ReadOnlyRoot != null)
    {
        foreach(TableSchema table in this.ReadOnlyRoot)
        {
            ReadOnlyRootTemplate template = this.Create<ReadOnlyRootTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion    
    
    #region SwitchableObjectTemplate

    if(this.SwitchableObject != null)
    {
        foreach(TableSchema table in this.SwitchableObject)
        {
            SwitchableObjectTemplate template = this.Create<SwitchableObjectTemplate>();
            RenderHelper(template, table);
        }
    }

    #endregion
    
    PreserveRegionsMergeStrategy strategy = new PreserveRegionsMergeStrategy();
    strategy.RegionNameRegex = "^[ \\t]*[ \\s]*\"?(?i:Preserved Code)\"?";
    
    #region ADOHelperTemplate
    
    if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL || DataAccessImplementation == DataAccessMethod.StoredProcedures || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures)
    {
        ADOHelperTemplate ADOHelper = this.Create<ADOHelperTemplate>();
        this.CopyPropertiesTo(ADOHelper);
        ADOHelper.RenderToFile(System.IO.Path.Combine(this.Location, "Utility\\ADOHelper.cs"), strategy);
    }

    #endregion
    
    #region FactoryNamesTemplate

    if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures)
    {
        FactoryNamesTemplate factoryNames = this.Create<FactoryNamesTemplate>();
        this.CopyPropertiesTo(factoryNames);
        factoryNames.RenderToFile(System.IO.Path.Combine(this.Location, "Factory\\FactoryNames.cs"), strategy);
    }

    #endregion

    #region ExistsCommandTemplate

    ExistsCommandTemplate ExistsCommand = this.Create<ExistsCommandTemplate>();
    this.CopyPropertiesTo(ExistsCommand);
    ExistsCommand.RenderToFile(System.IO.Path.Combine(this.Location, "Commands\\ExistsCommand.cs"), true);

    #endregion
}

</script>