<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.CSLA" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= Entity.Name %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
<% if(DataAccessImplementation == DataAccessMethod.LinqToSQL) {%>
using <%=LinqToSQLContextNamespace%>;
using DAL=<%=LinqToSQLContextNamespace%>;
<% } %>
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
using Csla.Core;
#if <%= RenderSharedCompilerDirectiveDirective() %>
using Csla.Serialization;
#endif
using Csla.Serialization.Mobile;
<% } %>
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#if <%= RenderSharedCompilerDirectiveDirective(true) %>
<% } %>
using System.Data.SqlClient;
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#endif
<% } %>

using Csla;

namespace <%= BusinessProjectName %>
{
    [Serializable]
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %> : CriteriaBase<% if(IsCSLA43 || IsCSLA45) { %><<%= BusinessClassName %><%= Entity.GenericProperty %>><% } %>, IGeneratedCriteria
    {
        private readonly Dictionary<string, object> _bag = new Dictionary<string, object>();
        
        #region Constructors

        public <%= BusinessClassName %>()<% if(IsCSLA38) { %> : base(typeof(<%= BusinessProjectName %>.<%= ResolveTargetClassName(ChildBusinessClassName, "Info", IsReadOnlyBusinessObject("Info")) %><%= Entity.GenericProperty %>))<% } %>{}
<% if(Entity.HasKey) { %>

        public <%= BusinessClassName %>(<%= Entity.GetProperties(PropertyType.Key).BuildParametersVariables() %>)<% if(IsCSLA38) { %> : base(typeof(<%= BusinessProjectName %>.<%= ResolveTargetClassName(ChildBusinessClassName, "Info", IsReadOnlyBusinessObject("Info")) %><%= Entity.GenericProperty %>))<% } %>
        {
<%  foreach(var property in Entity.GetProperties(PropertyType.Key)) { %>
            <%= property.Name %> = <%= property.VariableName %>;
<% } %>
        }
<% } %>

        #endregion

        #region Public Properties

        #region Read-Write
<% if(!Entity.IsCommand()) { %>
<% foreach(var property in Entity.GetProperties(PropertyType.NoConcurrency)){ %>

        public <%= property.SystemType %> <%= property.Name %>
        {
            get { return GetValue<<%= property.SystemType %>>("<%= property.KeyName %>"); }
            set { _bag["<%= property.KeyName %>"] = value; }
        }
<% } %>
<% } else { %>
    <% foreach(var property in Entity.GetCommandParameters()){ %>

        public <%= property.SystemType %> <%= property.Name %>
        {
            get { return GetValue<<%= property.SystemType %>>("<%= property.KeyName %>"); }
            set { _bag["<%= property.KeyName %>"] = value; }
        }
<% } } %>

        #endregion
        
        #region Read-Only
<% if(!Entity.IsCommand() && (DataAccessImplementation == DataAccessMethod.StoredProcedures || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures)){
foreach(var property in Entity.GetProperties(PropertyType.NoConcurrency)){ if(property.IsNullable) { %>

        public bool <%= property.Name %>HasValue
        {
            get { return _bag.ContainsKey("<%= property.KeyName %>"); }
        }
<% } } } %>

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public Dictionary<string, object> StateBag
        {
            get
            {
                return _bag;
            }
        }

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public string TableFullName
        {
            get
            {
                return "[<%= Entity.SchemaName%>].[<%= Entity.EntityKeyName%>]";
            }
        }

        #endregion

        #endregion

        #region Overrides
        
        public override string ToString()
        {
            var result = String.Empty;
            var cancel = false;
            
            OnToString(ref result, ref cancel);
            if(cancel && !String.IsNullOrEmpty(result))
                return result;
            
            if (_bag.Count == 0)
                return "No criterion was specified.";

            foreach (KeyValuePair<string, object> key in _bag)
            {
                result += String.Format("[{0}] = '{1}' AND ", key.Key, key.Value);
            }

            return result.Remove(result.Length - 5, 5);
        }

        #endregion

        #region Private Methods
        private T GetValue<T>(string name)
        {
            object value;
            if (_bag.TryGetValue(name, out value))
                return (T) value;
        
            return default(T);
        }
        
        #endregion
        
        #region Partial Methods
        
        partial void OnToString(ref string result, ref bool cancel);
        
        #endregion
        
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
        #region Serialization
        
        protected override void OnGetState(SerializationInfo info, StateMode mode)
        {
            base.OnGetState(info, mode);
    <% foreach(var property in Entity.GetProperties(PropertyType.NoConcurrency)){ %>
            if (_bag.ContainsKey("<%= property.KeyName %>")) info.AddValue("<%= property.KeyName %>", GetValue<<%= property.SystemType %>>("<%= property.KeyName %>"));
    <% } %>
        }

        protected override void OnSetState(SerializationInfo info, StateMode mode)
        {
            base.OnSetState(info, mode);
    <% foreach(var property in Entity.GetProperties(PropertyType.NoConcurrency)){ %>
            if(info.Values.ContainsKey("<%= property.KeyName %>")) _bag["<%= property.KeyName %>"] = info.GetValue<<%= property.SystemType %>>("<%= property.KeyName %>");
    <% } %>
        }

        #endregion
<% } %>
<% if(DataAccessImplementation == DataAccessMethod.LinqToSQL) {%>

        public Type EntityType
        {
            get
            {
                return typeof(DAL.<%= Entity.Name %>);
            }
        }

<% } %>
    }
}