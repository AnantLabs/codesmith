<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.CSLA" %>
<%@ Import Namespace="System.Linq" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//       Changes to this template will not be lost.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
using System.Data;
using System.Data.SqlClient;
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>

using Csla;
using Csla.Data;

<% 
var properties = new System.Collections.Generic.List<IProperty>();  
if(Entity.HasKey)
    properties.AddRange(Entity.Key.Properties);

properties.AddRange(Entity.GetProperties(PropertyType.NoKey).Take(2 - properties.Count));

if(properties.Count < 2)
    throw new ApplicationException(String.Format("NameValueList cannot be generated for Entity '{0}' as it requires atleast two properties to be present.", Entity.Name));
%>
namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %>
    {
        #region "Preserved Code"

<% if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL){ %>
        #region Custom Data Access

        private void DataPortal_Fetch()
        {
            RaiseListChangedEvents = false;
            IsReadOnly = false;

            var criteria = new <%= CriteriaClassName %>();
            string commandText = String.Format("SELECT <%= properties.BuildDataBaseColumns() %> FROM <%= Entity.EntityKeyName %> {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                            do
                            {
                                this.Add(new NameValuePair(reader.<%= properties[0].GetReaderMethod() %>("<%= properties[0].KeyName %>"), reader.<%= properties[1].GetReaderMethod() %>("<%= properties[1].KeyName %>")));
                            } while(reader.Read());
                        }
                        else
                            throw new Exception(String.Format("The record was not found in '<%= Entity.EntityKeyName %>' using the following criteria: {0}.", criteria));
                    }
                }
            }

            IsReadOnly = true;
            RaiseListChangedEvents = true;
        }

        #endregion
<% } else if(DataAccessImplementation == DataAccessMethod.StoredProcedures || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
        #region Custom Data Access

        private void DataPortal_Fetch()
        {
            RaiseListChangedEvents = false;
            IsReadOnly = false;

            var criteria = new <%= CriteriaClassName %>();
            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("<%= GetSelectStoredProcedureName() %>", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    <%= properties.BuildHasValueCommandParameters() %>
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
                            do
                            {
                                this.Add(new NameValuePair(reader.<%= properties[0].GetReaderMethod() %>("<%= properties[0].KeyName %>"), reader.<%= properties[1].GetReaderMethod() %>("<%= properties[1].KeyName %>")));
                            } while(reader.Read());
                        }
                        else
                            throw new Exception(String.Format("The record was not found in '<%= Entity.EntityKeyName %>' using the following criteria: {0}.", criteria));
                    }
                }
            }

            IsReadOnly = true;
            RaiseListChangedEvents = true;
        }

        #endregion
<% } else if(DataAccessImplementation == DataAccessMethod.LinqToSQL ){ %>
        #region Custom Data Access

        private void DataPortal_Fetch()
        {
            RaiseListChangedEvents = false;
            IsReadOnly = false;

            // Check criteria
            // Build a collection of <%=ChildBusinessClassName%><%= Entity.GenericProperty %> objects based on a specified criteria
            using (var ctx = ContextManager<DAL.PetshopDataContext>.GetManager(LinqToSQLHelper.ConnectionString, true))
            {
                var items = ctx.DataContext.<%= Entity.Name %>.Where(LinqToSQLHelper.BuildWhereStatement(criteria.StateBag), criteria.StateBag.Values.ToArray());
                // Add each item retrieved from the data base to the current collection object
                foreach(var item in items)
                {
                    this.Add(new <%= ChildBusinessClassName%><% if(BusinessClassName.Contains("InfoList")) { %>Info<% }%>(item));
                }
            }

            IsReadOnly = true;
            RaiseListChangedEvents = true;
        }

        #endregion
<% } %>

        #endregion
    }
}