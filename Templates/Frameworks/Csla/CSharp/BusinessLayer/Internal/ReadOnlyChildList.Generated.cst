<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA ReadOnlyChildList" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Collections.Generic;

using Csla;
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
#endif
<% } else { %>
using Csla.Data;
<% } %>

#endregion

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.ClassName %>InfoListFactoryName)]
<% } %>
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %> : ReadOnlyListBase< <%= BusinessClassName %><%= Entity.GenericProperty %>, <%= ResolveTargetClassName(ChildBusinessClassName, "Info", IsReadOnlyBusinessObject("Info")) %><%= Entity.GenericProperty %> >
    {
    
        #region Constructor(s)

<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
        public <%= BusinessClassName %>()
        { /* Require use of factory methods */ }
#else
<% } %>
        private <%= BusinessClassName %>()
        { /* Require use of factory methods */ }
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
        
        #endregion
    
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        #region Synchronous Factory Methods     
<% foreach(SearchCriteria sc in Entity.SearchCriteria()) { %>

        internal static <%= BusinessClassName %> <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %>{<%= sc.Members.BuildObjectInitializer() %>};
            <%= sc.Members.BuildNullableObjectInitializer()%>
            
            return DataPortal.FetchChild< <%= BusinessClassName %> >(criteria);
        }
<% } %>

        internal static <%= BusinessClassName %> GetAll()
        {
            return DataPortal.FetchChild< <%= BusinessClassName %> >(new <%= CriteriaClassName %>());
        }
    
        #endregion
<% if(IncludeSilverlightSupport) { %>
#endif

        #region Asynchronous Factory Methods

#if SILVERLIGHT
<% foreach(SearchCriteria sc in Entity.SearchCriteria()) { %>

        internal static void <%= sc.MethodName %>Async(<%= sc.Members.BuildParametersVariables() %>, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{ <%= sc.Members.BuildObjectInitializer() %>};
            <%= sc.Members.BuildNullableObjectInitializer()%>
            
            // Mark as child?
            var dp = new DataPortal< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }
<% } %>

        internal static void GetAllAsync(EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            // Mark as child?
            var dp = new DataPortal< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(new <%= CriteriaClassName %>());
        }
#endif

        #endregion

<% } %>

<% RenderHelper(new PartialMethods()); %>
<% RenderHelper(new Exists()); %>
    }
}