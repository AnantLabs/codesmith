<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="Constructor" Template="..\..\Common\Constructor.cst" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" %>
<%@ Register Name="ListEnhancements" Template="..\..\Common\ListEnhancements.cst" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
<% if(IsCSLA45) { %>
using System.Threading.Tasks;
<% } %>

using Csla;
<% if( DataAccessImplementation == DataAccessMethod.LinqToSQL) {%>
using <%=LinqToSQLContextNamespace%>;
using DAL=<%=LinqToSQLContextNamespace%>;
<% }%>
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#if <%= RenderSharedCompilerDirectiveDirective() %>
using Csla.Serialization;
#else
using Csla.Data;
#endif
<% } else { %>
using Csla.Data;
<% } %>

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.Name %>InfoListFactoryName)]
<% } %>
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %> : ReadOnlyListBase<<%= BusinessClassName %><%= Entity.GenericProperty %>, <%= ChildBusinessClassName %><%= Entity.GenericProperty %>>
    {
<% RenderHelper(new Constructor()); %>
    
        #region Synchronous Factory Methods
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#if <%= RenderSharedCompilerDirectiveDirective(true) %>
<% } %>   
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        /// <summary>
        /// Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria. 
        /// </summary>
<% foreach(var item in sc.Properties) { %>
        /// <param name="<%= item.VariableName%>"><%if(item.HasDescription){%><%=item.Description%>.<%}else{%>No additional detail available.<%}%></param>
<%}%>
        /// <returns>A <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria.</returns>

        public static <%= BusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>(<%= sc.Properties.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>
            
            return DataPortal.Fetch<<%= BusinessClassName %>>(criteria);
        }
        
<% } %>

        public static <%= BusinessClassName %><%= Entity.GenericProperty %> GetByCriteria(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
            return DataPortal.Fetch<<%= BusinessClassName %><%= Entity.GenericProperty %>>(criteria);
        }

        public static <%= BusinessClassName %><%= Entity.GenericProperty %> GetAll()
        {
            return DataPortal.Fetch<<%= BusinessClassName %><%= Entity.GenericProperty %>>(new <%= CriteriaClassName %><%= Entity.GenericProperty %>());
        }

<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#endif
<% } %>
        #endregion

        #region Asynchronous Factory Methods
<% if(IsCSLA45) { %>
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        public static async Task<<%= BusinessClassName %><%= Entity.GenericProperty %>> <%= sc.MethodName %>Async(<% if(sc.Properties.Count > 0) { %><%= sc.Properties.BuildParametersVariables() %><% } %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>
            
            return await DataPortal.FetchAsync<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(criteria).ContinueWith(t => t.Result.Child);
        }
<% } %>

        public static async Task<<%= BusinessClassName %><%= Entity.GenericProperty %>> GetByCriteriaAsync(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {  
            return await DataPortal.FetchAsync<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(criteria).ContinueWith(t => t.Result.Child);
        }

        public static async Task<<%= BusinessClassName %><%= Entity.GenericProperty %>> GetAllAsync()
        {
            return await DataPortal.FetchAsync<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(new <%= CriteriaClassName %><%= Entity.GenericProperty %>()).ContinueWith(t => t.Result.Child);
        }
<% } else { %>
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        public static void <%= sc.MethodName %>Async(<% if(sc.Properties.Count > 0) { %><%= sc.Properties.BuildParametersVariables() %>, <% }%>EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>
            
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }
<% } %>

        public static void GetByCriteriaAsync(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {  
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void GetAllAsync(EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(new <%= CriteriaClassName %>());
        }
<% } %>

        #endregion

<%/*  Documentation code handled in the appropriate PartialMethods template  */
   RenderHelper(new PartialMethods()); %>
<%/*  Documentation code handled in the Exists.cst template  */
   RenderHelper(new Exists()); %>
<% RenderHelper(new ListEnhancements()); %>
    }
}