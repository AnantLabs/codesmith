<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="MapDataReader" Template="..\..\Common\MapDataReader.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalCreate" Template="..\..\Common\DataPortalCreate.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalFetch" Template="..\..\Common\DataPortalFetch.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalInsert" Template="..\..\Common\DataPortalInsert.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalUpdate" Template="..\..\Common\DataPortalUpdate.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalDelete" Template="..\..\Common\DataPortalDelete.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildCreate" Template="..\..\Common\ChildCreate.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildFetch" Template="..\..\Common\ChildFetch.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildInsert" Template="..\..\Common\ChildInsert.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildUpdate" Template="..\..\Common\ChildUpdate.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
using System;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

using Csla;
using Csla.Data;

namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %>
    {
        #region Root Data Access

        [RunLocal]
        protected override void DataPortal_Create()
        {
<% RenderHelper(new DataPortalCreate()); %>
        }

        private void DataPortal_Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new DataPortalFetch()); %>
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Insert()
        {
<% RenderHelper(new DataPortalInsert()); %>
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Update()
        {
<% RenderHelper(new DataPortalUpdate()); %>
        }

        protected override void DataPortal_DeleteSelf()
        {
            bool cancel = false;
            OnSelfDeleting(ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<% if(UseMemberVariables) { %><%= Entity.GetProperties(PropertyType.Key).BuildPrivateMemberVariableArguments() %><% } else { %><%= Entity.GetProperties(PropertyType.Key).BuildPropertyVariableArguments() %><% } %>));
        
            OnSelfDeleted();
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new DataPortalDelete()); %>
        }

        //[Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria, SqlConnection connection)
        {
<% RenderHelper(new DataPortalDelete(), true); %>
        }

        #endregion

        #region Child Data Access

        protected override void Child_Create()
        {
<% RenderHelper(new ChildCreate()); %>
        }

        private void Child_Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new ChildFetch()); %>

            MarkAsChild();
        }

        #region Child_Insert

        private void Child_Insert(SqlConnection connection)
        {
<% RenderHelper(new ChildInsert(), true); %>
        }
<% if (Entity.Associations.Count(a => a.AssociationType == AssociationType.ManyToOne) > 0) {%>
<% if (Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().Count() > 1) { int index = 0; foreach(Association association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct()) { %>

        private void Child_Insert(<%= association.BuildParametersVariables(true) %>)
        {
            Child_Insert(<%= association.BuildUpdateStatementVariables(Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().ToList(), index++, true) %>);
        }

<% } }%>

        private void Child_Insert(<%= Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().ToList().BuildParametersVariables(true) %>)
        {
<% RenderHelper(new ChildInsert()); %>
        }
<% } %>

        #endregion

        #region Child_Update

        private void Child_Update(SqlConnection connection)
        {
<% RenderHelper(new ChildUpdate(), true); %>
        }
<% if (Entity.Associations.Count(a => a.AssociationType == AssociationType.ManyToOne) > 0) {%>
<% if (Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().Count() > 1) { int index = 0; foreach(Association association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct()) { %>

        private void Child_Update(<%= association.BuildParametersVariables(true) %>)
        {
            Child_Update(<%= association.BuildUpdateStatementVariables(Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().ToList(), index++, true) %>);
        }

<% } }%>
 
        private void Child_Update(<%= Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().ToList().BuildParametersVariables(true) %>)
        {
<% RenderHelper(new ChildUpdate()); %>
        }
<% }%>
        #endregion

        private void Child_DeleteSelf()
        {
            bool cancel = false;
            OnChildSelfDeleting(ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<% if(UseMemberVariables) { %><%= Entity.GetProperties(PropertyType.Key).BuildPrivateMemberVariableArguments() %><% } else { %><%= Entity.GetProperties(PropertyType.Key).BuildPropertyVariableArguments() %><% } %>));
        
            OnChildSelfDeleted();
        }

        private void Child_DeleteSelf(params object[] args)
        {
            var connection = args.OfType<SqlConnection>().FirstOrDefault();
            if(connection == null)
                throw new ArgumentNullException("args", "Must contain a SqlConnection parameter.");

            bool cancel = false;
            OnChildSelfDeleting(ref cancel);
            if (cancel) return;

            DataPortal_Delete(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<% if(UseMemberVariables) { %><%= Entity.GetProperties(PropertyType.Key).BuildPrivateMemberVariableArguments() %><% } else { %><%= Entity.GetProperties(PropertyType.Key).BuildPropertyVariableArguments() %><% } %>), connection);

            OnChildSelfDeleted();
        }

        #endregion

        private void Map(SafeDataReader reader)
        {
<% RenderHelper(new MapDataReader()); %>

            MarkOld();
        }
    }
}
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>