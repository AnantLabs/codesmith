<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA SwitchableObject" %>
<%@ Register Name="CompositeKeyMethods" Template="..\..\Common\CompositeKeyMethods.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Constructor" Template="..\..\Common\Constructor.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Exists" Template="..\..\Common\Exists.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirty.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Properties" Template="..\..\Common\Properties.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ValidationRules" Template="..\..\Common\ValidationRules.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\DataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
<% if(IsCSLA40) { %>
using Csla.Rules;
<% } else { %>
using Csla.Validation;
<% } %>
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
using System.Data.SqlClient;
#endif
<% } else { %>
using Csla.Data;
using System.Data.SqlClient;
<% } %>

#endregion

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.ClassName %>FactoryName)]
<% } %>
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %> : BusinessBase< <%= BusinessClassName %><%= Entity.GenericProperty %> >
    {
<% RenderHelper(new Constructor(), true); %>

<% RenderHelper(new ValidationRules()); %>

<% RenderHelper(new Properties()); %>

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        #region Synchronous Root Factory Methods 
        
        public static <%= BusinessClassName %><%= Entity.GenericProperty %> New<%= BusinessClassName %>()
        {
            return DataPortal.Create< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria()) { %>

        public static <%= BusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %> {<%= sc.Members.BuildObjectInitializer() %>};
            <%= sc.Members.BuildNullableObjectInitializer()%>
            
            return DataPortal.Fetch< <%= BusinessClassName %><%= Entity.GenericProperty %> >(criteria);
        }
<% } %>

<% if(UseDeferredDeletion){ %>
        //public static void Delete<%= BusinessClassName %><%= Entity.GenericProperty %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
        //{
        //      DataPortal.Delete<% if(IsCSLA40) { %>< <%= BusinessClassName %><%= Entity.GenericProperty %> ><% } %>(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>));
        //}
<% } else { %> 
        public static void Delete<%= BusinessClassName %><%= Entity.GenericProperty %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
        {
                DataPortal.Delete<% if(IsCSLA40) { %>< <%= BusinessClassName %><%= Entity.GenericProperty %> ><% } %>(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>));
        }
<% } %>
        
        #endregion
<% if(IncludeSilverlightSupport) { %>
#endif        

        #region Asynchronous Root Factory Methods
        
        public static void New<%= BusinessClassName %>Async(EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var dp = new DataPortal< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria()) { %>

        public static void <%= sc.MethodName %>Async(<%= sc.Members.BuildParametersVariables() %>, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= sc.Members.BuildObjectInitializer() %>};
            <%= sc.Members.BuildNullableObjectInitializer()%>

            var dp = new DataPortal< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }
<% } %> 

<% if(UseDeferredDeletion){ %>
        //public static void Delete<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
        //{
            //var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= Entity.PrimaryKey.KeyMembers.BuildObjectInitializer() %>};
            //<%= Entity.PrimaryKey.KeyMembers.BuildNullableObjectInitializer()%>

            //var dp = new DataPortal< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
            //dp.BeginDelete(criteria);
        //}
<% } else { %>
        public static void Delete<%= BusinessClassName %>Async(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables()%>, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= Entity.PrimaryKey.KeyMembers.BuildObjectInitializer() %>};
            <%= Entity.PrimaryKey.KeyMembers.BuildNullableObjectInitializer()%>

            var dp = new DataPortal< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
            dp.DeleteCompleted += handler;
            dp.BeginDelete(criteria);
        }
<% } %>
        
        #endregion

#if !SILVERLIGHT
<% } %>

        #region Synchronous Child Factory Methods 
        
        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> New<%= BusinessClassName %>Child()
        {
            return DataPortal.CreateChild< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria()) { %>

        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>Child(<%= sc.Members.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %> {<%= sc.Members.BuildObjectInitializer() %>};
            <%= sc.Members.BuildNullableObjectInitializer()%>

            return DataPortal.FetchChild< <%= ChildBusinessClassName %><%= Entity.GenericProperty %> >(criteria);
        }
<% } %>

        #endregion
<% if(IncludeSilverlightSupport) { %>
#endif        

        #region Asynchronous Child Factory Methods
        
        internal static void New<%= BusinessClassName %>ChildAsync(EventHandler<DataPortalResult<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            DataPortal<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>> dp = new DataPortal<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria()) { %>

        internal static void <%= sc.MethodName %>ChildAsync(<%= sc.Members.BuildParametersVariables() %>, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{ <%= sc.Members.BuildObjectInitializer() %>};
            <%= sc.Members.BuildNullableObjectInitializer()%>
            
            // Mark as child?
            var dp = new DataPortal< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }
<% } %>

        #endregion
<% } %>
<% RenderHelper(new PartialMethods()); %>

        #region ChildPortal partial methods

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        partial void OnChildCreating(ref bool cancel);
        partial void OnChildCreated();
        partial void OnChildFetching(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria, ref bool cancel);
        partial void OnChildFetched();
        partial void OnChildInserting(SqlConnection connection, ref bool cancel);
        partial void OnChildInserted();
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel);
        partial void OnChildUpdated();
        partial void OnChildSelfDeleting(ref bool cancel);
        partial void OnChildSelfDeleted();
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
        #endregion
<% RenderHelper(new IsDirty()); %>
<% RenderHelper(new Exists()); %>
<% RenderHelper(new CompositeKeyMethods()); %>
    }
}