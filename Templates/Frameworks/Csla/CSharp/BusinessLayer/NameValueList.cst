<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA 3.8.X NameValueList" %>

<%@ Register Name="NameValueList" Template="Internal\NameValueList.cst" %>
<%@ Register Name="NameValueListDataAccess" Template="Internal\NameValueList.DataAccess.cst" %>
<%@ Register Name="NameValueListGenerated" Template="Internal\NameValueList.Generated.cst" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    PreserveRegionsMergeStrategy strategy = new PreserveRegionsMergeStrategy();
    strategy.RegionNameRegex = "^[ \\t]*[ \\s]*\"?(?i:Custom)\"?;";

    #region NameValueList
    
    NameValueList nameValueList = this.Create<NameValueList>();
    this.CopyPropertiesTo(nameValueList);
    nameValueList.BusinessClassName = string.Format("{0}List", nameValueList.BusinessClassName);
    
    string parentFileName = System.IO.Path.Combine(this.Location, string.Format("Collections\\{0}.cs", nameValueList.BusinessClassName));
    nameValueList.RenderToFile(parentFileName, strategy);
    
    #region NameValueList.Generated
    
    string fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.Generated.cs", nameValueList.BusinessClassName));
    
    NameValueListGenerated nameValueListGenerated = this.Create<NameValueListGenerated>();
    this.CopyPropertiesTo(nameValueListGenerated);
    nameValueListGenerated.BusinessClassName = string.Format("{0}List", nameValueListGenerated.BusinessClassName);
    
    nameValueListGenerated.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #region NameValueList.DataAccess
    
    fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.DataAccess.cs", nameValueList.BusinessClassName));
    
    NameValueListDataAccess nameValueListDataAccess = this.Create<NameValueListDataAccess>();
    this.CopyPropertiesTo(nameValueListDataAccess);
    nameValueListDataAccess.BusinessClassName = string.Format("{0}List", nameValueListDataAccess.BusinessClassName);
    
    nameValueListDataAccess.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #endregion
}

</script>