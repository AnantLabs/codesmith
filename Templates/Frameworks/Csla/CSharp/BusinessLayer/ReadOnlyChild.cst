<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="ReadOnlyChild" Template="Internal\ReadOnlyChild.cst" %>
<%@ Register Name="ReadOnlyChildDataAccess" Template="Internal\ReadOnlyChild.DataAccess.cst" %>
<%@ Register Name="ReadOnlyChildDataAccessParameterized" Template="Internal\ReadOnlyChild.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="ReadOnlyChildDataAccessLinqToSQL" Template="Internal\ReadOnlyChild.DataAccess.LinqToSQL.cst" %>
<%@ Register Name="ReadOnlyChildDataAccessStoredProcedures" Template="Internal\ReadOnlyChild.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="ReadOnlyChildGenerated" Template="Internal\ReadOnlyChild.Generated.cst" %>
<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    #region ReadOnlyChild
    
    ReadOnlyChild readOnlyChild = this.Create<ReadOnlyChild>();
    this.CopyPropertiesTo(readOnlyChild);
    
    string parentFileName = System.IO.Path.Combine(this.Location, String.Format("Entities\\{0}.cs", readOnlyChild.BusinessClassName));
    if (!System.IO.File.Exists(parentFileName))
    {
        readOnlyChild.RenderToFile(parentFileName, false);
    }
    
    #region ReadOnlyChild.Generated
    
    string fileName = System.IO.Path.Combine(Location, String.Format("Entities\\{0}.Generated.cs", readOnlyChild.BusinessClassName));
    
    ReadOnlyChildGenerated readOnlyChildGenerated = this.Create<ReadOnlyChildGenerated>();
    this.CopyPropertiesTo(readOnlyChildGenerated);
    
    readOnlyChildGenerated.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #region ReadOnlyChild.DataAccess
    
    fileName = System.IO.Path.Combine(Location, String.Format("Entities\\{0}.DataAccess.cs", readOnlyChild.BusinessClassName));
    if(DataAccessImplementation == DataAccessMethod.None)
    {
        ReadOnlyChildDataAccess readOnlyChildDataAccess = this.Create<ReadOnlyChildDataAccess>();
        this.CopyPropertiesTo(readOnlyChildDataAccess);
        
        readOnlyChildDataAccess.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
    {
        ReadOnlyChildDataAccessParameterized readOnlyChildDataAccessParameterized = this.Create<ReadOnlyChildDataAccessParameterized>();
        this.CopyPropertiesTo(readOnlyChildDataAccessParameterized);
        
        readOnlyChildDataAccessParameterized.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.LinqToSQL)
    {
        ReadOnlyChildDataAccessLinqToSQL readOnlyChildDataAccessLinqToSQL = this.Create<ReadOnlyChildDataAccessLinqToSQL>();
        this.CopyPropertiesTo(readOnlyChildDataAccessLinqToSQL);
        
        readOnlyChildDataAccessLinqToSQL.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        ReadOnlyChildDataAccessStoredProcedures readOnlyChildDataAccessStoredProcedures = this.Create<ReadOnlyChildDataAccessStoredProcedures>();
        this.CopyPropertiesTo(readOnlyChildDataAccessStoredProcedures);

        readOnlyChildDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, true);

        //StoredProcedures
        fileName = System.IO.Path.Combine(Location, String.Format("Entities\\{0}.StoredProcedures.sql", readOnlyChild.BusinessClassName));
        SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
        this.CopyPropertiesTo(sqlStoredProcedures);
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
    }
    
    #endregion
    
    #endregion
}

public override bool OnEntityChanging()
{
    if (string.IsNullOrEmpty(BusinessClassName))
    {
        BusinessClassName = string.Concat(Entity.Name, "Info");
    }

    if (string.IsNullOrEmpty(CriteriaClassName) || CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase))
        CriteriaClassName = String.Concat(Entity.Name, "Criteria");

    return false;
}

</script>