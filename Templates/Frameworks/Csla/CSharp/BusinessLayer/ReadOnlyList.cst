<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X ReadOnlyList" %>

<%@ Register Name="ReadOnlyList" Template="Internal\ReadOnlyList.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyListDataAccess" Template="Internal\ReadOnlyList.DataAccess.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyListDataAccessParameterized" Template="Internal\ReadOnlyList.DataAccess.ParameterizedSQL.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyListDataAccessStoredProcedures" Template="Internal\ReadOnlyList.DataAccess.StoredProcedures.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyListGenerated" Template="Internal\ReadOnlyList.Generated.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    #region ReadOnlyList
    
    ReadOnlyList readOnlyList = this.Create<ReadOnlyList>();
    this.CopyPropertiesTo(readOnlyList);
    readOnlyList.BusinessClassName = string.Format("{0}List", readOnlyList.BusinessClassName);
    
    string parentFileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.cs", readOnlyList.BusinessClassName));
    if (!System.IO.File.Exists(parentFileName))
    {
        readOnlyList.RenderToFile(parentFileName, false);
    }
    
    #region ReadOnlyList.Generated
    
    string fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.Generated.cs", readOnlyList.BusinessClassName));
    
    ReadOnlyListGenerated readOnlyListGenerated = this.Create<ReadOnlyListGenerated>();
    this.CopyPropertiesTo(readOnlyListGenerated);
    readOnlyListGenerated.BusinessClassName = string.Format("{0}List", readOnlyListGenerated.BusinessClassName);
    
    readOnlyListGenerated.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #region ReadOnlyList.DataAccess
    
    fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.DataAccess.cs", readOnlyList.BusinessClassName));
    if(DataAccessImplementation == DataAccessMethod.None)
    {
        ReadOnlyListDataAccess readOnlyListDataAccess = this.Create<ReadOnlyListDataAccess>();
        this.CopyPropertiesTo(readOnlyListDataAccess);
        readOnlyListDataAccess.BusinessClassName = string.Format("{0}List", readOnlyListDataAccess.BusinessClassName);
        
        readOnlyListDataAccess.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
    {
        ReadOnlyListDataAccessParameterized readOnlyListDataAccessParameterized = this.Create<ReadOnlyListDataAccessParameterized>();
        this.CopyPropertiesTo(readOnlyListDataAccessParameterized);
        readOnlyListDataAccessParameterized.BusinessClassName = string.Format("{0}List", readOnlyListDataAccessParameterized.BusinessClassName);
        
        readOnlyListDataAccessParameterized.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        ReadOnlyListDataAccessStoredProcedures readOnlyListDataAccessStoredProcedures = this.Create<ReadOnlyListDataAccessStoredProcedures>();
        this.CopyPropertiesTo(readOnlyListDataAccessStoredProcedures);
        readOnlyListDataAccessStoredProcedures.BusinessClassName = string.Format("{0}List", readOnlyListDataAccessStoredProcedures.BusinessClassName);

        readOnlyListDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, true);

        //StoredProcedures
        fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.StoredProcedures.sql", readOnlyList.BusinessClassName));
        SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
        this.CopyPropertiesTo(sqlStoredProcedures);
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
    }
    
    #endregion
    
    #endregion
}

</script>