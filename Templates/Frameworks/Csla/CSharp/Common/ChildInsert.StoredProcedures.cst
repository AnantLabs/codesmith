<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
            bool cancel = false;
<% var associations = Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne || a.AssociationType == AssociationType.ManyToZeroOrOne).GroupBy(a => a.TypeName).Select(a => a.FirstOrDefault()).ToList();
   if(!RenderOptionalContent && associations.Count() > 0) { %>
            OnChildInserting(<%= associations.BuildArgumentVariables(true) %>, ref cancel);
<% } else { %>
            OnChildInserting(connection, ref cancel);
<% } %>
            if (cancel) return;

<% if(Entity.CanInsert) { %>  
            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("<%= GetInsertStoredProcedureName() %>", connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                <%= Entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(false, false, !RenderOptionalContent, true) %>
<% if(Entity.ConcurrencyProperty != null) { %>
                command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp);
                command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Value = this.<%= Entity.ConcurrencyProperty.Name %>;
                command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Direction = ParameterDirection.InputOutput;
<% } %>

                command.ExecuteNonQuery();
<% if(Entity.ConcurrencyProperty != null) { %>

                <%= Entity.ConcurrencyProperty.Name %> = (<%= Entity.ConcurrencyProperty.SystemType %>)command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Value;
<% }%> 
<% foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(property.IsType(PropertyType.Identity) || (property.IsDbType(DbType.Guid) && !property.IsType(PropertyType.Foreign))) { %> 
               
                // Update identity primary key value.
<%if(UseMemberVariables) { %>
                <%= property.PrivateMemberVariableName %> = (<%= property.SystemType %>)command.Parameters["<%= property.BuildParameterVariableName() %>"].Value;
<% } else { %>
                LoadProperty(<%= property.PrivateMemberVariableName %>Property,(<%= property.SystemType %>)command.Parameters["<%= property.BuildParameterVariableName() %>"].Value);
<% } } } %>
<%  if(!RenderOptionalContent) { foreach(IProperty property in Entity.Properties) { if(property.IsType(PropertyType.Foreign)) { if(String.IsNullOrEmpty(property.ResolveAssociationPropertyClassName())) continue; %> 

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
<% string localParameterName = property.ResolveAssociationPropertyVariable();
   string localParameterNameWithChildProperty = property.ResolveAssociationPropertyVariableWithChildProperty();%>
            if(<%= localParameterName %> != null && <%= localParameterNameWithChildProperty %> != this.<%= property.Name %>)
<% if(UseMemberVariables) { %>
                <%= property.PrivateMemberVariableName %> = <%= localParameterNameWithChildProperty %>;
<% } else { %>
                LoadProperty(<%= property.PrivateMemberVariableName %>Property, <%= localParameterNameWithChildProperty %>);
<% } } } } %>
<% foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(!property.IsType(PropertyType.Identity) || property.IsDbType(DbType.Guid)) {%> 

                // Update the original non-identity primary key value.
<% if(UseMemberVariables) { %>
                _original<%= property.Name %> = this.<%= property.Name %>;
<% } else { %>
                LoadProperty(_original<%= property.Name %>Property, this.<%= property.Name %>);
<% } } } %>
            }
<% if(Entity.Associations.Count() > 0){ 
    if(!RenderOptionalContent) { 
        int childCount = 0;
        foreach(IAssociation a in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany  || a.AssociationType == AssociationType.ZeroOrOneToMany  || a.AssociationType == AssociationType.ManyToMany)) {
            if(IsChildBusinessObject(a)) childCount++; 
        }%>
<% if(childCount > 0) { %>
    
            FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>);
<% } else { %>
            
            // A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            // TODO: Please override OnChildInserted() and insert this child manually.
            // FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>);
<% } } else { %>

            FieldManager.UpdateChildren(this, connection);
<% } } %>

            OnChildInserted();
<% } else { %>
            throw new NotSupportedException("This business object cannot be inserted.");
<% } %>
