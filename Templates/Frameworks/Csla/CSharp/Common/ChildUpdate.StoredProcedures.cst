<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
            bool cancel = false;
            OnChildUpdating(connection, ref cancel);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(SqlCommand command = new SqlCommand("<%= GetUpdateStoredProcedureName() %>", connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                <%= Entity.MembersNoRowVersion.BuildCommandParameters(false, false, !RenderOptionalContent, false, true) %>
<% if(Entity.HasRowVersionMember) { %>
                command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>", SqlDbType.Timestamp);
                command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Value = this.<%= Entity.RowVersionMember.PropertyName %>;
                command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Direction = ParameterDirection.InputOutput;
<% } %>

                //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                int result = command.ExecuteNonQuery();
                if (result == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
<% if(Entity.HasRowVersionMember) { %>

                <%= Entity.RowVersionMember.PropertyName %> = (<%= Entity.RowVersionMember.SystemType %>)command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Value;
<% } foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(member.IsIdentity || member.DataType == DbType.Guid.ToString()) {%> 

                // Update identity or guid primary key value.
<% if(UseMemberVariables) { %>
                <%= member.PrivateMemberVariableName %> = (<%= member.SystemType %>)command.Parameters["<%= member.BuildParameterVariableName() %>"].Value;
<% } else { %>
                LoadProperty(<%= member.PrivateMemberVariableName %>Property,(<%= member.SystemType %>)command.Parameters["<%= member.BuildParameterVariableName() %>"].Value);
<% } } } %>
<%  if(!RenderOptionalContent) { foreach(Member member in Entity.Members) { if(member.IsForeignKey && !member.IsPrimaryKey) { if(string.IsNullOrEmpty(member.ResolveAssociationPropertyClassName())) continue; %> 

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
<% string localParameterName = member.ResolveAssociationPropertyVariable();
   string localParameterNameWithChildProperty = member.ResolveAssociationPropertyVariableWithChildProperty();%>
                if(<%= localParameterName %> != null && <%= localParameterNameWithChildProperty %> != this.<%= member.PropertyName %>)
<% if(UseMemberVariables) { %>
                    <%= member.PrivateMemberVariableName %> = <%= localParameterNameWithChildProperty %>;
<% } else { %>
                    LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%= localParameterNameWithChildProperty %>);
<% } } } } %>
<% foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(!member.IsIdentity) {%> 

                // Update non-identity primary key value.
<% if(UseMemberVariables) { %>
                _original<%= member.PropertyName %> = this.<%= member.PropertyName %>;
<% } else { %>
                LoadProperty(_original<%= member.PropertyName %>Property, this.<%= member.PropertyName %>);
<% } } } %>
            }
<% if(Entity.AssociatedToManyUnion.Count > 0 || Entity.AssociatedManyToOne.Count > 0){ if(!RenderOptionalContent) { 
    int childCount = 0;
    foreach(Association a in Entity.AssociatedOneToMany) {
        if(IsChildBusinessObject(a)) childCount++; 
    }

    if(childCount > 0) { %>
    
            FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>);
<% } else { %>
            
            // A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            // TODO: Please override OnChildUpdated() and update this child manually.
            // FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>);
<% } } else { %>

            FieldManager.UpdateChildren(this, connection);
<% } } %>

            OnChildUpdated();
