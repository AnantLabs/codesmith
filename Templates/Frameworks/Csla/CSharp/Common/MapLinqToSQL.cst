<%-- Author: Blake Niemyjski --%>
<%--         Joe McPherson   --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
			//LinqToSQL Modification
            bool cancel = false;
			OnMapping(ref cancel);
            if (cancel) return;

            using(BypassPropertyChecks)
            {
<% 	if(Entity.HasRowVersionMember) 
	{ %>
                <%= Entity.RowVersionMember.PropertyName %> = LinqToSQLHelper.GetBytes(DataSource, "<%= Entity.RowVersionMember.ColumnName %>");
<% 	} %>
<% 	foreach(Member member in Entity.MembersNoRowVersion) 
	{ 
		if(UseMemberVariables) 
		{ %>
<% 			if( member.IsNullable && member.SystemType != "System.String" && member.SystemType != "System.Byte[]") 
			{%>
                <%= member.PrivateMemberVariableName %> = DataSource.IsDBNull("<%= member.ColumnName %>") ? (<%= member.SystemType %>)null : <%if(!member.HasByteArrayColumn()) { %>DataSource.<%= member.PropertyName %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= member.ColumnName %>);<% } %>
<%				if (member.IsPrimaryKey && !member.IsIdentity) 
				{ %>
                _original<%= member.PropertyName %> = DataSource.IsDBNull("<%= member.ColumnName %>") ? (<%= member.SystemType %>)null : <%if(!member.HasByteArrayColumn()) { %>DataSource.<%= member.PropertyName %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= member.ColumnName %>);<% } %>
<% 				}
			} 
			else 
			{%>
                <%= member.PrivateMemberVariableName %> = <%if(!member.HasByteArrayColumn()) { %>DataSource.<%= member.PropertyName %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= member.ColumnName %>);<% } %>
<%				if (member.IsPrimaryKey && !member.IsIdentity) 
				{ %>
                _original<%= member.PropertyName %> = <%if(!member.HasByteArrayColumn()) { %>DataSource.<%= member.PropertyName %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= member.ColumnName %>);<% } %>
<% 				} 
			} 
		} 
		else 
		{ %>
                LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%if(!member.HasByteArrayColumn()) { %>DataSource.<%= member.PropertyName %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= member.ColumnName %>));<% } %>
<%			if (member.IsPrimaryKey && !member.IsIdentity) 
			{ %>
                LoadProperty(_original<%= member.PropertyName %>Property, <%if(!member.HasByteArrayColumn()) { %>DataSource.<%= member.PropertyName %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= member.ColumnName %>));<% } %>
<% 			} 
		} 
	} %>
            }

            OnMapped();
