<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
        #region Properties
<% if(Entity.HasRowVersionMember) { %>

        /// <summary>
        /// Used for optimistic concurrency.
        /// </summary>
        [NotUndoable]
        private <%= Entity.RowVersionMember.SystemType %> _timestamp = new <%= Entity.RowVersionMember.SystemTypeWithSize %>;
<% } %>

<%  foreach(Member member in Entity.MembersNoRowVersion){ if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);
        private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue;<%= member.BuildDataObjectField() %>
<% if(member.HasDescription) { %>
        /// <summary>
        /// <%= member.Description %>
        /// </summary>
<% } %>
        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>); }
<% if(!member.IsReadOnly) { %>
            set { SetProperty(<%= member.PrivateMemberVariableName %>Property, ref <%= member.PrivateMemberVariableName %>, value); }
<% } %>
        }

<% } else { %>
        private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);<%= member.BuildDataObjectField() %>
<% if(member.HasDescription) { %>
        /// <summary>
        /// <%= member.Description %>
        /// </summary>
<% } %>
        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetProperty(<%= member.PrivateMemberVariableName %>Property); }
<% if(!member.IsReadOnly) { %>
            set { SetProperty(<%= member.PrivateMemberVariableName %>Property, value); }
<% } %>
        }

<% } } %>
<%-- One-To-Zero-Or-One --%>
<% foreach(Association association in Entity.AssociatedOneToZeroOrOne) { %>
        //AssociatedOneToZeroOrOne
        private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %><% if(UseLazyLoading) { %>, RelationshipTypes.LazyLoad<% } %>);
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= association.ClassName %> <%= association.PropertyName %>
        {
            get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= association.ClassName %>.New<%= association.ClassName %>());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= association.ClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
                }
<% } %>
                   return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } %>
<%-- Many-To-One --%>
<% foreach(Association association in Entity.AssociatedManyToOne) { %>
        //AssociatedManyToOne
        private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %><% if(UseLazyLoading) { %>, RelationshipTypes.LazyLoad<% } %>);
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= association.ClassName %> <%= association.PropertyName %>
        {
            get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= association.ClassName %>.New<%= association.ClassName %>());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= association.ClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
                }

<% } %>
                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } %>

<%-- One-To-Many & Many-To-Many --%>
<% foreach(Association association in Entity.AssociatedOneToMany) { %>
        //AssociatedOneToMany
        private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %><% if(UseLazyLoading) { %>, RelationshipTypes.LazyLoad<% } %>);
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= association.ClassName %>List <%= association.PropertyName %>
        {
            get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= association.ClassName %>List.NewList());
                    else
                    
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= association.ClassName %>List.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
                }

<% } %>
                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } %>
        #endregion
