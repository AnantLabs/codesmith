<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>

        #region Properties

<%  foreach(IProperty property in Entity.GetProperties(PropertyType.NoConcurrency)){ if (UseMemberVariables){ %>
        private static readonly PropertyInfo<<%= property.SystemType %>> <%= property.PrivateMemberVariableName %>Property = RegisterProperty<<%= property.SystemType %>>(p => p.<%= property.Name %>, string.Empty<% if(property.IsNullable) { %>, (<%= property.SystemType %>)null<% } %><%if (IsLatestCSLA) { %>, RelationshipTypes.PrivateField<% }%>);
        private <%= property.SystemType %> <%= property.PrivateMemberVariableName %> = <%= property.PrivateMemberVariableName %>Property.DefaultValue;<%= property.BuildDataObjectField(IncludeSilverlightSupport) %>
        /// <summary>
        <% if(property.HasDescription) { %>/// <%= property.Description %><%}else{%>/// No description available from the database.<%}%>
        /// </summary>
        public <%= property.SystemType %> <%= property.Name %>
        {
            get { return GetProperty(<%= property.PrivateMemberVariableName %>Property, <%= property.PrivateMemberVariableName %>); }
        }

<% } else { %>
        private static readonly PropertyInfo<<%= property.SystemType %>> <%= property.PrivateMemberVariableName %>Property = RegisterProperty<<%= property.SystemType %>>(p => p.<%= property.Name %>, string.Empty<% if(property.IsNullable) { %>, (<%= property.SystemType %>)null<% } %>);<%= property.BuildDataObjectField(IncludeSilverlightSupport) %>
        /// <summary>
        <% if(property.HasDescription) { %>/// <%= property.Description %><%}else{%>/// No description available from the database.<%}%>
        /// </summary>
        public <%= property.SystemType %> <%= property.Name %>
        {
            get { return GetProperty(<%= property.PrivateMemberVariableName %>Property); }
        }

<% } } %>
<%-- One-To-Zero-Or-One --%>
<% foreach(Association association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToZeroOrOne)) { 
    // For now, don't generate properties based on tables generated as generics.
    if(association.GenericProperty == string.Empty) {
    string associationClassName = association.Name;
    if(IsReadOnlyBusinessObject( association, "Info")) {
        associationClassName += "Info";
    } %>
        //Associations.Where(a => a.AssociationType == AssociationType.OneToZeroOrOne)
        private static readonly PropertyInfo<<%= associationClassName %><%= association.GenericProperty %>> <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= associationClassName %><%= association.GenericProperty %>>(p => p.<%= association.Name %>, "<%= association.Name %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %><%= association.GenericProperty %> <%= association.Name %>
        {
            get
            {
                bool cancel = false;
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, ref cancel);

                if (!cancel)
                {
<% if(UseLazyLoading) { %>
                    if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    {
                        var criteria = new <%= BusinessProjectName %>.<%= association.Name %><%= association.GenericProperty %>Criteria {<%= association.BuildObjectInitializer(true) %>};
                        <%= association.BuildNullableObjectInitializer(true)%>

<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
                        //MarkBusy();
                        if(<%= association.BuildNullCheckStatement(true, false, false, false, true) %>)
                        {
                            <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria, (o,e) =>
                            {
                                if (e.Error != null)
                                    throw e.Error;
                            
                                if (!e.Object.Result)
                                {
                                    <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>, (o1, e1) =>
                                    {
                                        if (e1.Error != null)
                                            throw e1.Error; 

                                        this.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e1.Object);

                                        //MarkIdle();
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property);
                                    });
                                }
                            });
                        }
#else
<% } %>
                        if(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria))
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>));
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
                    }
<% } %>
                }

                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } } %>
<%-- Many-To-One --%>
<% foreach(Association association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne)) {
    // For now, don't generate properties based on tables generated as generics.
    if(association.GenericProperty == string.Empty) {
    string associationClassName = association.Name;
    if(IsReadOnlyBusinessObject(association, "Info")) {
        associationClassName = association.Name + "Info";
    } %>
        //Associations.Where(a => a.AssociationType == AssociationType.ManyToOne)
        private static readonly PropertyInfo<<%= associationClassName %><%= association.GenericProperty %>> <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= associationClassName %><%= association.GenericProperty %>>(p => p.<%= association.Name %>, "<%= association.Name %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %><%= association.GenericProperty %> <%= association.Name %>
        {
            get
            {
                bool cancel = false;
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, ref cancel);

                if (!cancel)
                {
<% if(UseLazyLoading) { %>
<% string result = association.BuildNullCheckStatement(true, true, false, true, false);
if(!result.Equals("(true)", StringComparison.CurrentCultureIgnoreCase) && !result.Equals("(false)", StringComparison.CurrentCultureIgnoreCase)) {%>
                    if<%= association.BuildNullCheckStatement(true, true, false, true, false) %>
                        return null;

<% }%>
                    if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    {
                        var criteria = new <%= BusinessProjectName %>.<%= association.Name %><%= association.GenericProperty %>Criteria {<%= association.BuildObjectInitializer(true) %>};
                        <%= association.BuildNullableObjectInitializer(true)%>
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
                        //MarkBusy();
                        <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria, (o,e) =>
                        {
                            if(e.Error != null)
                                throw e.Error;
                                
                            if(e.Object.Result)
                                <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>, (o1, e1) =>
                                    {
                                        if (e1.Error != null)
                                            throw e1.Error; 
    
                                        this.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e1.Object<% if(IsChildBusinessObject(association)) { %>.Child<% } %>);
    
                                        //MarkIdle();
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property);
                                    });
                        });
#else
<% } %>
                        if(<%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria))
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>));
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
                    }
<% } %>
                }

                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(Association association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany)) { 
    // For now, don't generate properties based on tables generated as generics.
    if(association.GenericProperty == string.Empty) {
    string associationClassName = association.Name;
    if(IsReadOnlyBusinessObject(association, "InfoList")) {
        associationClassName = association.Name + "Info";
    }
    %>
        //Where(a => a.AssociationType == AssociationType.OneToMany)
        private static readonly PropertyInfo<<%= associationClassName %>List<%= association.GenericProperty %>> <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= associationClassName %>List<%= association.GenericProperty %>>(p => p.<%= association.Name %>, "<%= association.Name %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %>List<%= association.GenericProperty %> <%= association.Name %>
        {
            get
            {
                bool cancel = false;
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, ref cancel);
    
                if (!cancel)
                {
<% if(UseLazyLoading) { %>
                    if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    {
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
                        //MarkBusy();
<% if(IsNameValueListBusinessObject(association, "NameValueList")) { %>
                        <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.GetAllAsync((o, e) =>
                                {
                                    if (e.Error != null)
                                        throw e.Error; 
    
                                    this.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object);
    
                                    //MarkIdle();
                                    OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property);
                                });
<% } else { %>
                        var criteria = new <%= BusinessProjectName %>.<%= association.Name %><%= association.GenericProperty %>Criteria {<%= association.BuildObjectInitializer(true) %>};
                        <%= association.BuildNullableObjectInitializer(true)%>

                        if(<%= association.BuildNullCheckStatement(true, false, false, false, true) %>)
                        {
                            <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria, (o,e) =>
                            {
                                if (e.Error != null)
                                    throw e.Error;

                                if(!e.Object.Result)
                                    <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>, (o1, e1) =>
                                    {
                                        if (e1.Error != null)
                                            throw e1.Error; 
    
                                        this.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e1.Object);
    
                                        //MarkIdle();
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property);
                                    });
                            });
                        }
<% } %>
#else
<% } %>
<% if(IsNameValueListBusinessObject(association, "NameValueList")) { %>
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.GetAll());
<% } else { %>
                        var criteria = new <%= BusinessProjectName %>.<%= association.Name %><%= association.GenericProperty %>Criteria {<%= association.BuildObjectInitializer(true) %>};
                        <%= association.BuildNullableObjectInitializer(true)%>
    
                        if(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria))
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>));
<% } %>
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
                    }
<% } %>
                }

                return GetProperty(<%= association.PrivateMemberVariableName %>Property);
            }
        }

<% } } %>

        #endregion
