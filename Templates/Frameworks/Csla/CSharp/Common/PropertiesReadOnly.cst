<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
        #region Properties

<%  foreach(Member member in Entity.MembersNoRowVersion){ if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>, string.Empty<% if(member.IsNullable) { %>, null<% } %>);
        private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue;<%= member.BuildDataObjectField(IncludeSilverlightSupport) %>
<% if(member.HasDescription) { %>
        /// <summary>
        /// <%= member.Description %>
        /// </summary>
<% } %>
        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>); }
        }

<% } else { %>
        private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>, string.Empty<% if(member.IsNullable) { %>, null<% } %>);<%= member.BuildDataObjectField(IncludeSilverlightSupport) %>
<% if(member.HasDescription) { %>
        /// <summary>
        /// <%= member.Description %>
        /// </summary>
<% } %>
        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetProperty(<%= member.PrivateMemberVariableName %>Property); }
        }

<% } } %>

<%-- One-To-Zero-Or-One --%>
<% foreach(Association association in Entity.AssociatedOneToZeroOrOne) { 
    string associationClassName = association.ClassName;
    if(IsReadOnlyBusinessObject( association, "Info")) {
        associationClassName = association.ClassName + "Info";
    } %>
        //AssociatedOneToZeroOrOne
        private static readonly PropertyInfo< <%= associationClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= associationClassName %> >(p => p.<%= association.PropertyName %>, "<%= association.PropertyName %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %> <%= association.PropertyName %>
        {
            get
            {
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(<%= BusinessProjectName %>.<%= associationClassName %>.Exists(new <%= BusinessProjectName %>.<%= association.ClassName %>Criteria {<%= association.BuildObjectInitializer(true) %>}))
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
                }

<% } %>
                   return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
            }
        }

<% } %>
<%-- Many-To-One --%>
<% foreach(Association association in Entity.AssociatedManyToOne) {
    string associationClassName = association.ClassName;
    if(IsReadOnlyBusinessObject(association, "Info")) {
        associationClassName = association.ClassName + "Info";
    } %>
        //AssociatedManyToOne
        private static readonly PropertyInfo< <%= associationClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= associationClassName %> >(p => p.<%= association.PropertyName %>, "<%= association.PropertyName %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %> <%= association.PropertyName %>
        {
            get
            {
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(<%= BusinessProjectName %>.<%= associationClassName %>.Exists(new <%= BusinessProjectName %>.<%= association.ClassName %>Criteria {<%= association.BuildObjectInitializer(true) %>}))
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
                }

<% } %>
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } %>

<%-- One-To-Many & Many-To-Many --%>
<% foreach(Association association in Entity.AssociatedOneToMany) { 
    string associationClassName = association.ClassName;
    if(IsReadOnlyBusinessObject(association, "InfoList")) {
        associationClassName = association.ClassName + "Info";
    }
    %>

        //AssociatedOneToMany
        private static readonly PropertyInfo< <%= associationClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= associationClassName %>List>(p => p.<%= association.PropertyName %>, "<%= association.PropertyName %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %>List <%= association.PropertyName %>
        {
            get
            {
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
<% if(IsNameValueListBusinessObject(association, "NameValueList")) { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.GetAll());
<% } else { %>
                    if(<%= BusinessProjectName %>.<%= associationClassName %>List.Exists(new <%= BusinessProjectName %>.<%= association.ClassName %>Criteria {<%= association.BuildObjectInitializer(true) %>}))
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
<% } %>
                }

<% } %>
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
                return GetProperty(<%= association.PrivateMemberVariableName %>Property);
            }
        }

<% } %>

        #endregion
