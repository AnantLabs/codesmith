<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="QuickStart.DataAccessCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.7.X DataAccessLayer" %>

<%@ Register Name="ObjectFactory" Template="Internal\ObjectFactory.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ObjectFactoryDataAccess" Template="Internal\ObjectFactory.DataAccess.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ObjectFactoryDataAccessParameterized" Template="Internal\ObjectFactory.DataAccess.ParameterizedSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ObjectFactoryDataAccessStoredProcedures" Template="Internal\ObjectFactory.DataAccess.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Register Name="ADOHelperTemplate" Template="Internal\ADOHelper.cst" %>

<%@ Register Name="SqlStoredProcedures" Template="Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Property Name="BusinessProjectName" Type="System.String" Optional="False" Category="3. Business Project" Description="" %>
<% Generate(); %>

<script runat="template">

public override void Generate()
{
    RegisterReferences();
    
    foreach(Entity entity in Entities)
    {
        #region ObjectFactory
        
        ObjectFactory objectFactory = this.Create<ObjectFactory>();
        this.CopyPropertiesTo(objectFactory);
        objectFactory.SourceTable = entity.Table;
        objectFactory.BusinessClassName = entity.ClassName + "Factory";

        string parentFileName = System.IO.Path.Combine(this.Location, string.Format("{0}.cs", objectFactory.BusinessClassName));
        if (!System.IO.File.Exists(parentFileName))
        {
            objectFactory.RenderToFile(parentFileName, false);
        }

        var fileName = System.IO.Path.Combine(Location, string.Format("{0}.DataAccess.cs", objectFactory.BusinessClassName));
        if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone)
        {
            ObjectFactoryDataAccess objectFactoryDataAccess = this.Create<ObjectFactoryDataAccess>();
            this.CopyPropertiesTo(objectFactoryDataAccess);
            objectFactoryDataAccess.SourceTable = entity.Table;
            
            objectFactoryDataAccess.RenderToFile(fileName, parentFileName, true);
        }
        else if(DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL)
        {
            ObjectFactoryDataAccessParameterized objectFactoryDataAccessParameterized = this.Create<ObjectFactoryDataAccessParameterized>();
            this.CopyPropertiesTo(objectFactoryDataAccessParameterized);
            objectFactoryDataAccessParameterized.SourceTable = entity.Table;
            
            objectFactoryDataAccessParameterized.RenderToFile(fileName, parentFileName, true);
            
            ADOHelperTemplate ADOHelper = this.Create<ADOHelperTemplate>();
            this.CopyPropertiesTo(ADOHelper);
            ADOHelper.SourceTable = entity.Table;
            
            fileName = System.IO.Path.Combine(this.Location, "Utility\\ADOHelper.cs");
            if (!System.IO.File.Exists(fileName))
            {
                ADOHelper.RenderToFile(fileName, false);
            }
        }
        else if(DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures)
        {
            //ObjectFactoryDataAccessStoredProcedures
            ObjectFactoryDataAccessStoredProcedures objectFactoryDataAccessStoredProcedures = this.Create<ObjectFactoryDataAccessStoredProcedures>();
            this.CopyPropertiesTo(objectFactoryDataAccessStoredProcedures);
            objectFactoryDataAccessStoredProcedures.SourceTable = entity.Table;
            
            objectFactoryDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, true);
            
            //SqlStoredProcedures
            SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
            this.CopyPropertiesTo(sqlStoredProcedures);
            sqlStoredProcedures.SourceTable = entity.Table;
            
            fileName = System.IO.Path.Combine(Location, string.Format("{0}.StoredProcedures.sql", objectFactory.BusinessClassName));
            sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
            
            //ADOHelperTemplate
            ADOHelperTemplate ADOHelper = this.Create<ADOHelperTemplate>();
            this.CopyPropertiesTo(ADOHelper);
            ADOHelper.SourceTable = entity.Table;
            
            fileName = System.IO.Path.Combine(this.Location, "Utility\\ADOHelper.cs");
            if (!System.IO.File.Exists(fileName))
            {
                ADOHelper.RenderToFile(fileName, false);
            }
        }

        #endregion
    }
}

</script>