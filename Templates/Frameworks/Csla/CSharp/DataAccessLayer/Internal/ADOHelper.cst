<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA 3.8.X DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this template will not be lost.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% RegisterReferences(); %>
#region Using declarations

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;

using Csla.Data;


#endregion

namespace <%= DataProjectName %>
{
    public static class ADOHelper
    {
        #region "Preserved Code"

        private static string _connectionString = string.Empty;

        /// <summary>
        /// Returns the Connection String.
        /// </summary>
        public static string ConnectionString
        {
            get
            {
                if(string.IsNullOrEmpty(_connectionString))
                {
                    _connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["<%= SourceTable.Database.Name %>ConnectionString"].ConnectionString;
                }
                
                return _connectionString;
            }
        }

        #endregion

        #region Methods
        
        /// <summary>
        /// Returns an array of SqlParameters
        /// </summary>
        public static SqlParameter[] SqlParameters(Dictionary<string, object> bag)
        {
            return new List<SqlParameter>(bag.Select(pair => new SqlParameter(string.Format("<%= ParameterPrefix %>{0}", pair.Key), pair.Value))).ToArray();
        }

        /// <summary>
        /// Returns a where clause for the current Criteria object.
        /// </summary>
        /// <returns>Returns a where clause for the current Criteria object.</returns>
        public static string BuildWhereStatement(Dictionary<string, object> bag)
        {
            if (bag.Count == 0)
                return string.Empty;

            string columnNames = bag.Keys.Aggregate(string.Empty, (current, columnName) => current + string.Format("[{0}] = <%= ParameterPrefix %>{0} AND ", columnName));
            return string.Format("WHERE {0}", columnNames.Remove(columnNames.Length - 5, 5));
        }

        /// <summary>
        /// Returns the Bytes stored in a binary column.
        /// </summary>
        /// <param name="reader">The reader.</param>
        /// <param name="columnName">The column name.</param>
        /// <returns>Bytes Stored in a column.</returns>
        public static byte[] GetBytes(SafeDataReader reader, string columnName)
        {
            var buffer = new byte[1024];
            long fieldOffset = 0;
            
            using (var stream = new MemoryStream())
            {
                long bytesRead;

                while ((bytesRead = reader.GetBytes(columnName, fieldOffset, buffer, 0, buffer.Length)) > 0)
                {
                    var actualRead = new byte[bytesRead];
                    Buffer.BlockCopy(buffer, 0, actualRead, 0, (int)bytesRead);
                    stream.Write(actualRead, 0, actualRead.Length);
                    fieldOffset += bytesRead;
                }

                return stream.ToArray();
            }
        }

        #endregion
        
        #region Nullable Helpers //This code is here to help in the Data access implementation of handling DBNull.Value.

        /// <summary>
        /// Simple empty string to DBNull.Value function.
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        internal static object NullStrings(string value)
        {
            return string.IsNullOrEmpty(value) ? (object) DBNull.Value : value;
        }

        internal static object NullStrings(char? value)
        {
            return value ?? (object) DBNull.Value;
        }

        internal static object NullNumbers(byte? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(sbyte? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(float? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(short? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(ushort? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(int? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(uint? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(long? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(ulong? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(decimal? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullNumbers(double? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullBoolean(bool? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        internal static object NullDates(DateTime? value)
        {
            return value ?? (object)DBNull.Value;
        }
        
        #endregion
    }
}
