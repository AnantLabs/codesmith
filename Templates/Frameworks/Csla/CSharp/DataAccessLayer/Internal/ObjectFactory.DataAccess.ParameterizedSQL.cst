<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.DataCodeTemplate" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\DataPortalPartialMethods.cst" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;
using Csla.Server;

using <%= BusinessProjectName %>;

namespace <%= DataProjectName %>
{
    public partial class <%= BusinessClassName %>Factory : ObjectFactory
    {
<% if(!IsReadOnlyBusinessObject) { %>
        #region Create

        /// <summary>
        /// Creates new <%= BusinessClassName %> with default values.
        /// </summary>
        /// <returns>new <%= BusinessClassName %>.</returns>
        [RunLocal]
        public <%= BusinessClassName %> Create()
        {
            var item = (<%= BusinessClassName %>)Activator.CreateInstance(typeof(<%= BusinessClassName %>), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            using (BypassPropertyChecks(item))
            {
                // Default values.
<% if(Entity.HasKey) {
    foreach(var property in Entity.GetProperties(PropertyType.Key)) {
if(property.SystemType == "System.Guid") { %>
                item.<%= property.Name %> = Guid.NewGuid();
<%} } } 
    foreach(IAssociation association in Entity.Associations) { foreach(AssociationProperty property in association.Properties) {
if(property.Property.SystemType == "System.String" && !property.Property.IsType(PropertyType.Identity) && property.Property.IsType(PropertyType.Foreign)) { %>
                item.<%= property.Property.Name %> = "BN";
<%} } } %>
            }

            CheckRules(item);
            MarkNew(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            OnCreated();

            return item;
        }

        /// <summary>
        /// Creates new <%= BusinessClassName %> with default values.
        /// </summary>
        /// <returns>new <%= BusinessClassName %>.</returns>
        [RunLocal]
        private <%= BusinessClassName %> Create(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
            var item = (<%= BusinessClassName %>)Activator.CreateInstance(typeof(<%= BusinessClassName %>), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            var resource = Fetch(criteria);
            using (BypassPropertyChecks(item))
            {
<% foreach(var property in Entity.GetProperties(PropertyType.NoKeysOrConcurrency)){ %>
                item.<%= property.Name %> = resource.<%= property.Name %>;
<% } %>
            }

            CheckRules(item);
            MarkNew(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>

            OnCreated();

            return item;
        }

        #endregion
<% } %>

        #region Fetch

        /// <summary>
        /// Fetch <%= BusinessClassName %>.
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns></returns>
        public <%= BusinessClassName %> Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return null;

            <%= BusinessClassName %> item;
            string commandText = String.Format("SELECT <%= Entity.Properties.BuildDataBaseColumns() %> FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if (reader.Read())
                            item = Map(reader);
                        else
                            throw new System.Exception(String.Format("The record was not found in '<%= Entity.SchemaName %>.<%= Entity.EntityKeyName %>' using the following criteria: {0}.", criteria));
                    }
                }
            }

            MarkOld(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            OnFetched();
            return item;
        }

        #endregion

<% if(!IsReadOnlyBusinessObject) { %>
        #region Insert

        private void DoInsert(ref <%= BusinessClassName %> item, bool stopProccessingChildren)
        {
            // Don't update if the item isn't dirty.
            if (!item.IsDirty) return;

            bool cancel = false;
            OnInserting(ref cancel);
            if (cancel) return;

            const string commandText = "INSERT INTO [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] (<%= Entity.GetProperties(PropertyType.UpdateInsert).BuildDataBaseColumns() %>) VALUES (<%= Entity.GetProperties(PropertyType.UpdateInsert).BuildDataBaseParameters() %>)<%= Entity.BuildInsertSelectStatement() %>";
            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(var command = new SqlCommand(commandText, connection))
                {
                    <%= Entity.GetProperties(PropertyType.UpdateInsert).BuildCommandParameters(true, true, false, true) %>
<% if(Entity.ConcurrencyProperty != null) { %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp);
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Value = item.<%= Entity.ConcurrencyProperty.Name %>;
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Direction = ParameterDirection.InputOutput;
<% } %>

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
<% if(Entity.ConcurrencyProperty != null) { %>
                            item.<%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>");
<% } if(Entity.HasKey && Entity.IdentityProperty != null) { foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(property.IsType(PropertyType.Identity) || property.IsDbType(DbType.Guid)) { %>
                            item.<%= property.Name %> = <%if(!property.HasByteArrayColumn()) { %>reader.<%= property.GetReaderMethod() %>("<%= property.KeyName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= property.KeyName %>");<% } %>
<% } } } %>
                        }
                    }
                }
            }

<% if(Entity.HasKey) { foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(!property.IsType(PropertyType.Identity)) {%>
            item.Original<%= property.Name %> = item.<%= property.Name %>;
<% } } } %>

            MarkOld(item);
            CheckRules(item);
            
            if(!stopProccessingChildren)
            {
            // Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToZeroOrOne || a.AssociationType == AssociationType.OneToOne)) { %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
<%-- Many-To-One --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne || a.AssociationType == AssociationType.ManyToZeroOrOne)) { %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany  || a.AssociationType == AssociationType.ZeroOrOneToMany  || a.AssociationType == AssociationType.ManyToMany)) { %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
            }

            OnInserted();
        }

        #endregion

        #region Update

        [Transactional(TransactionalTypes.TransactionScope)]
        public <%= BusinessClassName %> Update(<%= BusinessClassName %> item)
        {
            return Update(item, false);
        }

        public <%= BusinessClassName %> Update(<%= BusinessClassName %> item, bool stopProccessingChildren)
        {
            if(item.IsDeleted)
            {
                DoDelete(ref item);
                MarkNew(item);
            }
            else if(item.IsNew)
            {
                DoInsert(ref item, stopProccessingChildren);
            }
            else
            {
                DoUpdate(ref item, stopProccessingChildren);
            }

            return item;
        }

        private void DoUpdate(ref <%= BusinessClassName %> item, bool stopProccessingChildren)
        {
            bool cancel = false;
            OnUpdating(ref cancel);
            if (cancel) return;

            // Don't update if the item isn't dirty.
            if (item.IsDirty)
            {
<% if(Entity.HasKey && Entity.IdentityProperty == null) { %>
                if(<%= Entity.GetProperties(PropertyType.Key).BuildIdentityKeyEqualityStatements("item.")%>)
                {
                    // Insert new child.
                    var temp = (<%= BusinessClassName %>)Activator.CreateInstance(typeof(<%= BusinessClassName %>), true);
<% foreach(var property in Entity.GetProperties(PropertyType.NoConcurrency)) { %>
                    temp.<%= property.Name %> = item.<%= property.Name %>;
<% } %>
                    temp = temp.Save();
    
                    // Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany  || a.AssociationType == AssociationType.ZeroOrOneToMany  || a.AssociationType == AssociationType.ManyToMany)) { %>
                    foreach(<%= association.TypeName %> itemToUpdate in item.<%= association.Name %>)
                    {
<%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate", "item.") %>
                    }
<% } %>

                    // Update Children
<%-- One-To-Zero-Or-One --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToZeroOrOne || a.AssociationType == AssociationType.OneToOne)) { %>
                    Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
<%-- Many-To-One --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne || a.AssociationType == AssociationType.ManyToZeroOrOne)) { %>
                    Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany  || a.AssociationType == AssociationType.ZeroOrOneToMany  || a.AssociationType == AssociationType.ManyToMany)) { %>
                    Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
    
                    // Delete the old.
<% if(Entity.HasKey) { %>
                    var criteria = new <%= CriteriaClassName %> {<%= Entity.GetProperties(PropertyType.Key).BuildObjectInitializer(true, false, true) %>};
                    <%= Entity.GetProperties(PropertyType.Key).BuildNullableObjectInitializer(true, false, true)%>
<% } else { %>
                    var criteria = new <%= CriteriaClassName %>();
<% } %>
                    Delete(criteria);
    
                    // Mark the original as the new one.
<% if(Entity.HasKey) { foreach(var property in Entity.GetProperties(PropertyType.Key)) { if(!property.IsType(PropertyType.Identity)) { %>
                    item.Original<%= property.Name %> = item.<%= property.Name %>;
<% } } } %>

                    MarkOld(item);
                    CheckRules(item);
                    OnUpdated();

                    return;
                }

<% } %>
                const string commandText = "UPDATE [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] <%= Entity.GetProperties(PropertyType.UpdateInsert).BuildSetStatements() %> <%= Entity.GetProperties(PropertyType.Key).BuildWhereStatements() %><% if(Entity.ConcurrencyProperty != null) { %> AND [<%= Entity.ConcurrencyProperty.KeyName %>] = <%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %><% } %><%= Entity.BuildUpdateSelectStatement() %>";
                using (var connection = new SqlConnection(ADOHelper.ConnectionString))
                {
                    connection.Open();
                    using(var command = new SqlCommand(commandText, connection))
                    {
                        <%= Entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(true, false, false, false, true) %>
<% if(Entity.ConcurrencyProperty != null) { %>
                        command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp);
                        command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Value = item.<%= Entity.ConcurrencyProperty.Name %>;
                        command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Direction = ParameterDirection.InputOutput;
<% } %>

<% if(Entity.ConcurrencyProperty != null || Entity.IdentityProperty != null) { %>
                        using(var reader = new SafeDataReader(command.ExecuteReader()))
                        {
                            //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                            if(reader.RecordsAffected == 0)
                                throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
    
                            if(reader.Read())
                            {
<% if(Entity.ConcurrencyProperty != null) { %>
                                item.<%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>");
<% } if(Entity.HasKey) { foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(property.IsType(PropertyType.Identity) || property.IsDbType(DbType.Guid)) { %>
                                item.<%= property.Name %> = <%if(!property.HasByteArrayColumn()) { %>reader.<%= property.GetReaderMethod() %>("<%= property.KeyName %>");<% } else { %>ADOHelper.GetBytes(reader);<% } %>
<% } } } %>
                            }
                        }
<% } else { %>
                        //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        int result = command.ExecuteNonQuery();
                        if (result == 0)
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
<% } %>
                    }
                }
            }

<% if(Entity.HasKey) {
    foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(!property.IsType(PropertyType.Identity)) { %>
            item.Original<%= property.Name %> = item.<%= property.Name %>;
<% } } }%>

            MarkOld(item);
            CheckRules(item);

            if(!stopProccessingChildren)
            {
                // Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToZeroOrOne || a.AssociationType == AssociationType.OneToOne)) { %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
<%-- Many-To-One --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne || a.AssociationType == AssociationType.ManyToZeroOrOne)) { %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany  || a.AssociationType == AssociationType.ZeroOrOneToMany  || a.AssociationType == AssociationType.ManyToMany)) { %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref item);
<% } %>
            }

            OnUpdated();
        }
        #endregion

        #region Delete

        [Transactional(TransactionalTypes.TransactionScope)]
        public void Delete(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
            // Note: this call to delete is for immediate deletion and doesn't keep track of any entity state.
            DoDelete(criteria);
        }

        protected void DoDelete(ref <%= BusinessClassName %> item)
        {
            // If we're not dirty then don't update the database.
            if (!item.IsDirty) return;

            // If we're new then don't call delete.
            if (item.IsNew) return;

<% if(Entity.HasKey) { %>
            var criteria = new <%= CriteriaClassName %>{<%= Entity.GetProperties(PropertyType.Key).BuildObjectInitializer(true) %>};
            <%= Entity.GetProperties(PropertyType.Key).BuildNullableObjectInitializer(true)%>
<% } else { %>
            var criteria = new <%= CriteriaClassName %>();
<% } %>
            DoDelete(criteria);

            MarkNew(item);
        }

        /// <summary>
        /// This call to delete is for immediate deletion and doesn't keep track of any entity state.
        /// </summary>
        /// <param name="criteria">The Criteria.</param>
        private void DoDelete(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            string commandText = String.Format("DELETE FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
        }

        #endregion
<% } %>

        #region Helper Methods

        public <%= BusinessClassName %> Map(SafeDataReader reader)
        {
            var item = (<%= BusinessClassName %>)Activator.CreateInstance(typeof(<%= BusinessClassName %>), true);
            using (BypassPropertyChecks(item))
            {
<% if(Entity.ConcurrencyProperty != null) { %>
                item.<%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>");
<% } %>
<% foreach(IProperty property in Entity.GetProperties(PropertyType.NoConcurrency)) { %>
<% if( property.IsNullable && property.SystemType != "System.String" && property.SystemType != "System.Byte[]") {%>
                item.<%= property.Name %> = reader.IsDBNull("<%= property.KeyName %>") ? (<%= property.SystemType %>)null : <%if(!property.HasByteArrayColumn()) { %>reader.<%= property.GetReaderMethod() %>("<%= property.KeyName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= property.KeyName %>");<% } %>
<%  if(!property.IsType(PropertyType.Identity) && property.IsType(PropertyType.Key) && !IsReadOnlyBusinessObject) { %>
                item.Original<%= property.Name %> = reader.IsDBNull("<%= property.KeyName %>") ? (<%= property.SystemType %>)null : <%if(!property.HasByteArrayColumn()) { %>reader.<%= property.GetReaderMethod() %>("<%= property.KeyName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= property.KeyName %>");<% } %>
<% } } else {%>
                item.<%= property.Name %> = <%if(!property.HasByteArrayColumn()) { %>reader.<%= property.GetReaderMethod() %>("<%= property.KeyName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= property.KeyName %>");<% } %>
<%if (property.IsType(PropertyType.Key) && !property.IsType(PropertyType.Identity) && !IsReadOnlyBusinessObject) { %>
                item.Original<%= property.Name %> = <%if(!property.HasByteArrayColumn()) { %>reader.<%= property.GetReaderMethod() %>("<%= property.KeyName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= property.KeyName %>");<% } %>
<% } } }%>
            }
            
            MarkOld(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>

            return item;
        }
<% if (!IsReadOnlyBusinessObject) { %>

<%-- One-To-Zero-Or-One --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToZeroOrOne || a.AssociationType == AssociationType.OneToOne)) { %>
        //Associations.Where(a => a.AssociationType == AssociationType.OneToZeroOrOne || a.AssociationType == AssociationType.OneToOne)
        private static void Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref <%= BusinessClassName %> item)
        {
<%= association.SearchCriteria.BuildUpdateStatements("item." + association.Name) %>

            new <%= association.TypeName %>Factory().Update(item.<%= association.Name %>, true);
        }
<% } %>
<%-- Many-To-One --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne || a.AssociationType == AssociationType.ManyToZeroOrOne)) { %>
        //Associations.Where(a => a.AssociationType == AssociationType.ManyToOne || a.AssociationType == AssociationType.ManyToZeroOrOne)
        private static void Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref <%= BusinessClassName %> item)
        {
<%= association.SearchCriteria.BuildUpdateStatements("item." + association.Name) %>

            new <%= association.TypeName %>Factory().Update(item.<%= association.Name %>, true);
        }
<% } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(IAssociation association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany  || a.AssociationType == AssociationType.ZeroOrOneToMany  || a.AssociationType == AssociationType.ManyToMany)) { %>
        //Where(a => a.AssociationType == AssociationType.OneToMany  || a.AssociationType == AssociationType.ZeroOrOneToMany  || a.AssociationType == AssociationType.ManyToMany)
        private static void Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ref <%= BusinessClassName %> item)
        {
            foreach(<%= association.TypeName %> itemToUpdate in item.<%= association.Name %>)
            {
<%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate") %>

                new <%= association.TypeName %>Factory().Update(itemToUpdate, true);
            }
        }
<% } } %>

        #endregion

<% RenderHelper(new PartialMethods()); %>
    }
}