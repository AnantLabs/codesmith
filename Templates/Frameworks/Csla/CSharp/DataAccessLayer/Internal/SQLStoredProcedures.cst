<%--------------------------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Modified By: Blake Niemyjski
* Description: This template will generate standard CRUD stored procedures for a given database table.
--------------------------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Debug="True" Language="C#"  TargetLanguage="T-SQL"  Inherits="QuickStart.DataCodeTemplate" CompilerVersion="v3.5" Description="Generates standard CRUD procedures based on a database table schema." %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>

<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%
// this template requires a primary key on the source table
if (!SourceTable.HasPrimaryKey) throw new ApplicationException("SourceTable does not contain a primary key.");

// generate drop statements
Response.WriteLine("--region Drop Existing Procedures");
Response.WriteLine("");

GenerateDropStatement(GetInsertStoredProcedureName());
GenerateDropStatement(GetUpdateStoredProcedureName());
GenerateDropStatement(GetDeleteStoredProcedureName());
GenerateDropStatement(GetSelectStoredProcedureName());

Response.WriteLine("--endregion");
Response.WriteLine("");
Response.WriteLine("GO");
Response.WriteLine("");
%>
<%------------------------------------------------------------------------------------------
*
* Insert Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetInsertStoredProcedureName());
    
    /*
     * Check to see if the primary key is a single column primary key and also if it's either an
     * identity column or a GUID.  If so, we will not include the primary key column in the
     * list of input parameters.
     */
    
    if (SourceTable.PrimaryKey.MemberColumns.Count == 1
        && (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid
        || ((SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int16
        || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int32
        || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int64)
        && (bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value == true)))
    {
        ColumnSchema primaryKeyColumn = SourceTable.PrimaryKey.MemberColumns[0];
%>

CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% GenerateParameters(SourceTable.NonPrimaryKeyColumns, 1, true, false); %>
<% GenerateParameter(primaryKeyColumn, 1, false, true, true, false); %>
AS

SET NOCOUNT ON

<%-- If the primary key is a GUID, then assign a new GUID using NEWID(). --%>
<% if (primaryKeyColumn.DataType == DbType.Guid) { %>
SET @<%= primaryKeyColumn.Name %> = NEWID()

<% } %>
INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] (
    <% if (primaryKeyColumn.DataType == DbType.Guid) { %>
    [<%= primaryKeyColumn.Name %>],
    <% } %>
    <% GenerateColumns(SourceTable.NonPrimaryKeyColumns, 1, false); %>
) VALUES (
    <% if (primaryKeyColumn.DataType == DbType.Guid) { %>
    @<%= primaryKeyColumn.Name %>,
    <% } %>
    <% GenerateVariables(SourceTable.NonPrimaryKeyColumns, 1, false); %>
)
<%-- If the primary key is an identity column, then capture the newly assigned identity using SCOPE_IDENTITY(). --%>
<% if (primaryKeyColumn.DataType == DbType.Int16 || primaryKeyColumn.DataType == DbType.Int32 || primaryKeyColumn.DataType == DbType.Int64) { %>

SET @<%= primaryKeyColumn.Name %> = SCOPE_IDENTITY()
<% } %>

<%-- Primary key is not a identity column or a GUID, so include all columns as input parameters. --%>
<% } else { %>

CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% GenerateParameters(SourceTable.Columns, 1, false); %>
AS

SET NOCOUNT ON

INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] (
    <% GenerateColumns(SourceTable.Columns, 1, false); %>
) VALUES (
    <% GenerateVariables(SourceTable.Columns, 1, false); %>
)

<%
    }
    GenerateProcedureFooter(GetInsertStoredProcedureName());
%>
<%------------------------------------------------------------------------------------------
*
* Update Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetUpdateStoredProcedureName());
%>

CREATE PROCEDURE <%= GetUpdateStoredProcedureName() %>
<% GenerateParameters(SourceTable.Columns, 1, false); %>
AS

SET NOCOUNT ON

UPDATE <%= GetTableOwner() %>[<%= SourceTable.Name %>] SET
    <% GenerateUpdates(SourceTable.NonPrimaryKeyColumns, 1, false); %>
WHERE
    <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1); %>

<%
    GenerateProcedureFooter(GetUpdateStoredProcedureName());
%>
<%------------------------------------------------------------------------------------------
*
* Delete Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetDeleteStoredProcedureName());
%>

CREATE PROCEDURE <%= GetDeleteStoredProcedureName() %>
    @WhereCondition nvarchar(500)
AS

SET NOCOUNT ON

DECLARE @SQL nvarchar(3250)

SET @SQL = '
DELETE FROM
    <%= GetTableOwner() %>[<%= SourceTable.Name %>]
WHERE
    ' + @WhereCondition

EXEC sp_executesql @SQL

<%
    GenerateProcedureFooter(GetDeleteStoredProcedureName());
%>
<%------------------------------------------------------------------------------------------
*
* Select Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetSelectStoredProcedureName());
%>

CREATE PROCEDURE <%= GetSelectStoredProcedureName() %>
    @WhereCondition nvarchar(500),
    @OrderByExpression nvarchar(250) = NULL
AS

SET NOCOUNT ON
<% GenerateSetTransactionIsolationLevelStatement(IsolationLevel); %>

DECLARE @SQL nvarchar(3250)

SET @SQL = '
SELECT
    <% GenerateColumns(SourceTable.Columns, 1, true); %>
FROM
    <%= GetTableOwner() %>[<%= SourceTable.Name %>]
WHERE
    ' + @WhereCondition

IF @OrderByExpression IS NOT NULL AND LEN(@OrderByExpression) > 0
BEGIN
    SET @SQL = @SQL + '
ORDER BY
    ' + @OrderByExpression
END

EXEC sp_executesql @SQL

<%
    GenerateProcedureFooter(GetSelectStoredProcedureName());
%>
<script runat="template">
#region Member Variables
private StringCollection _droppedProcedureNames = new StringCollection();
private StringCollection _generatedProcedureNames = new StringCollection();
#endregion

#region Isolation Level

public void GenerateSetTransactionIsolationLevelStatement(TransactionIsolationLevelEnum isolationLevel)
{
    Response.Write("SET TRANSACTION ISOLATION LEVEL ");
    
    switch (isolationLevel)
    {
        case TransactionIsolationLevelEnum.ReadUncommitted:
        {
            Response.WriteLine("READ UNCOMMITTED");
            break;
        }
        case TransactionIsolationLevelEnum.RepeatableRead:
        {
            Response.WriteLine("REPEATABLE READ");
            break;
        }
        case TransactionIsolationLevelEnum.Serializable:
        {
            Response.WriteLine("SERIALIZABLE");
            break;
        }
        default:
        {
            Response.WriteLine("READ COMMITTED");
            break;
        }
    }
}
#endregion

#region Code Generation Helpers

private IList<ColumnSchema> ConvertMemberColumnSchemaToColumnSchema(IList<MemberColumnSchema> memberColumns)
{
    var columns = new List<ColumnSchema>();
    columns.AddRange(memberColumns.Cast<ColumnSchema>());
    return columns;
}

public void GenerateDropStatement(string procedureName)
{
    // check to see if this procedure has already been dropped.
    if (!_droppedProcedureNames.Contains(procedureName))
    {
        Response.WriteLine("IF OBJECT_ID(N'{0}') IS NOT NULL", procedureName);
        GenerateIndent(1);
        Response.WriteLine("DROP PROCEDURE {0}", procedureName);
        Response.WriteLine("");
        
        // add this procedure to the list of dropped procedures
        _droppedProcedureNames.Add(procedureName);
    }
}

public void GenerateProcedureHeader(string procedureName)
{
    Response.WriteLine("--region {0}", procedureName);
    Response.WriteLine("");
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------");
    Response.WriteLine("-- Generated By:   {0} using CodeSmith {1}", System.Environment.UserName, typeof(CodeTemplate).Assembly.GetName().Version.ToString());
    Response.WriteLine("-- Procedure Name: {0}", procedureName);
    Response.WriteLine("-- Date Generated: {0}", DateTime.Now.ToLongDateString());
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------");
}

public void GenerateProcedureFooter(string procedureName)
{
    Response.WriteLine("--endregion");
    Response.WriteLine("");
    Response.WriteLine("GO");
    Response.WriteLine("");
}

public void GenerateIndent(int indentLevel)
{
    for (int i = 0; i < indentLevel; i++)
    {
        Response.Write('\t');
    }
}

public void GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    GenerateParameter(column, indentLevel, isFirst, isLast, false, includeTimeStamp);
}

public void GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool isOutput, bool includeTimeStamp)
{
    if(!includeTimeStamp && ColumnIsTimestamp(column))
        return;
    
    GenerateIndent(indentLevel);
    Response.Write(GetSqlParameterStatement(column, isOutput));
    if (!isLast) Response.Write(",");
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public string GetSqlParameterStatement( DataObjectBase column, bool isOutput )
{
    string param = string.Format("{0}{1} {2}", ParameterPrefix, column.Name, column.NativeType);

    if ( !IsUserDefinedType( column ) )
        switch ( column.DataType )
        {
            case DbType.Decimal:
                {
                    param += string.Format("({0}, {1})", column.Precision, column.Scale);
                    break;
                }
            case DbType.Binary:
            case DbType.AnsiString:
            case DbType.AnsiStringFixedLength:
            case DbType.String:
            case DbType.StringFixedLength:
                {
                    if ( column.NativeType != "text" && column.NativeType != "ntext" )
                        if ( column.Size > 0 )
                            param += string.Format("({0})", column.Size);
                        else if ( column.Size == -1 )
                            param += "(max)";
                    break;
                }
        }

    if ( isOutput )
        param += " OUTPUT";

    return param;
}

/// <summary>
/// Determine if the given column is using a UDT.
/// </summary>
/// <param name="column"></param>
/// <returns></returns>
public bool IsUserDefinedType( DataObjectBase column )
{
    switch ( column.NativeType.Trim().ToLower() )
    {
        case "bigint":
        case "binary":
        case "bit":
        case "char":
        case "date":
        case "datetime":
        case "datetime2":
        case "time":
        case "decimal":
        case "float":
        case "image":
        case "int":
        case "money":
        case "nchar":
        case "ntext":
        case "numeric":
        case "nvarchar":
        case "real":
        case "smalldatetime":
        case "smallint":
        case "smallmoney":
        case "sql_variant":
        case "sysname":
        case "text":
        case "timestamp":
        case "tinyint":
        case "uniqueidentifier":
        case "varbinary":
        case "xml":
        case "varchar":
            return false;
        default:
            return true;
    }
}

public void GenerateParameters(IList<MemberColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    GenerateParameters(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel, false, includeTimeStamp);
}

public void GenerateParameters(IList<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    GenerateParameters(columns, indentLevel, false, includeTimeStamp);
}

public void GenerateParameters(IList<ColumnSchema> columns, int indentLevel, bool includeTrailingComma, bool includeTimeStamp)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateParameter(column.Value, indentLevel, column.IsFirst, column.IsLast && !includeTrailingComma, includeTimeStamp);
    }
}

public void GenerateColumn(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(!includeTimeStamp && ColumnIsTimestamp(column))
        return;
    
    GenerateIndent(indentLevel);
    Response.Write("[");
    Response.Write(column.Name);
    Response.Write("]");
    if (!isLast) Response.Write(",");
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public void GenerateColumns(IList<MemberColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    GenerateColumns(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel, includeTimeStamp);
}

public void GenerateColumns(IList<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateColumn(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp);
    }
}

public void GenerateUpdate(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(!includeTimeStamp && ColumnIsTimestamp(column))
        return;
    
    GenerateIndent(indentLevel);
    Response.Write("[");
    Response.Write(column.Name);
    Response.Write("] = ");
    Response.Write(ParameterPrefix);
    Response.Write(column.Name);
    if (!isLast) Response.Write(",");
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public void GenerateUpdates(IList<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateUpdate(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp);
    }
}

public void GenerateCondition(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
    GenerateIndent(indentLevel);
    if (!isFirst) Response.Write("AND ");
    Response.Write("[");
    Response.Write(column.Name);
    Response.Write("] = ");
    Response.Write(ParameterPrefix);
    Response.Write(column.Name);
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public void GenerateConditions(IList<MemberColumnSchema> columns, int indentLevel)
{
    GenerateConditions(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel);
}

public void GenerateConditions(IList<ColumnSchema> columns, int indentLevel)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateCondition(column.Value, indentLevel, column.IsFirst, column.IsLast);
    }
}

public void GenerateVariable(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(!includeTimeStamp && ColumnIsTimestamp(column))
        return;
    
    GenerateIndent(indentLevel);
    Response.Write(ParameterPrefix);
    Response.Write(column.Name);
    if (!isLast) Response.Write(",");
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public void GenerateVariables(List<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateVariable(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp);
    }
}

public void GenerateVariables(IList<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateVariable(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp);
    }
}

public bool ColumnIsTimestamp(ColumnSchema column)
{
    if (column.NativeType.ToLower() == "timestamp" || column.NativeType.ToLower() == "rowversion")
        return true;

    return false;
}

#endregion

#region Events

protected override void OnPostRender(string result)
{
    if (AutoExecuteStoredProcedures)
    {
        // execute the output on the same database as the source table.
        CodeSmith.BaseTemplates.ScriptResult scriptResult = CodeSmith.BaseTemplates.ScriptUtility.ExecuteScript(this.SourceTable.Database.ConnectionString, result, new System.Data.SqlClient.SqlInfoMessageEventHandler(cn_InfoMessage));
        Trace.WriteLine(scriptResult.ToString());
    }

    base.OnPostRender(result);
}

private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs ex)
{
    Trace.WriteLine(ex.Message);
}

#endregion

</script>