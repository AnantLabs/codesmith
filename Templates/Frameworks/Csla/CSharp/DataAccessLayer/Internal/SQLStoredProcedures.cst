<%--------------------------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Modified By: Blake Niemyjski
* Description: This template will generate standard CRUD stored procedures for a given database table.
--------------------------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Language="C#"  TargetLanguage="T-SQL" Inherits="Generator.CSLA.DataCodeTemplate" %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.CSLA" %>
<%
// this template requires a primary key on the source table
if (!Entity.HasKey) 
    throw new ApplicationException("Entity does not contain a key.");

// generate drop statements
Response.WriteLine("--region Drop Existing Procedures");
Response.WriteLine("");

if(IncludeInsert)
    GenerateDropStatement(GetInsertStoredProcedureShortName());

if(IncludeUpdate)
    GenerateDropStatement(GetUpdateStoredProcedureShortName());

if(IncludeDelete) 
    GenerateDropStatement(GetDeleteStoredProcedureShortName());

GenerateDropStatement(GetSelectStoredProcedureShortName());

Response.WriteLine("--endregion");
Response.WriteLine("");
Response.WriteLine("GO");
Response.WriteLine("");
%>
<% if(IncludeInsert) { %>
<%------------------------------------------------------------------------------------------
*
* Insert Procedure
*
------------------------------------------------------------------------------------------%>
<% GenerateProcedureHeader(GetInsertStoredProcedureName()); %>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetInsertStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetInsertStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetInsertStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customized. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

<%
    /*
     * Check to see if the primary key is a single property primary key and also if it's either an
     * identity property or a GUID.  If so, we will not include the primary key property in the
     * list of input parameters.
     */
    if (HasGuidOrIdentityColumn(Entity.Key))
    {
%>
CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% if(Entity.ConcurrencyProperty != null){ %>
<% GenerateParameter(Entity.ConcurrencyProperty, 1, true, false, true, true); %>,
<%}%>
<% GenerateParameters(Entity.GetProperties(PropertyType.NoKey), 1, true, false); %>
<%-- Loop through all primary keys. --%>
<% if(Entity.HasKey) {
    foreach(var property in Entity.GetProperties(PropertyType.Key).AsIndexedEnumerable()) {
 GenerateParameter(property.Value, 1, false, property.IsLast, IsGuidOrIdentityColumn(property.Value) && !property.Value.IsType(PropertyType.Foreign), false, false);
} } %>

AS

<%-- Loop through all primary keys. If the primary key is a GUID, then assign a new GUID using NEWID(). --%>
<% if(Entity.HasKey) {
    foreach(var property in Entity.GetProperties(PropertyType.Key)) {
     if (property.IsDbType(DbType.Guid) && !property.IsType(PropertyType.Foreign)) {%>
SET <%= ParameterPrefix %><%= property.KeyName %> = NEWID()

<% } } } %>
INSERT INTO [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] (
<% if(Entity.HasKey) {
    foreach(var property in Entity.GetProperties(PropertyType.Key)) {
     if (property.IsDbType(DbType.Guid) || !IsIdentityColumn(property)) {%>
    [<%= property.KeyName %>],
<% } } } %>
    <% GenerateColumns(Entity.GetProperties(PropertyType.NoKey), 1, false); %>
    
) VALUES (
<% if(Entity.HasKey) {
    foreach(var property in Entity.GetProperties(PropertyType.Key)) {
     if (property.IsDbType(DbType.Guid) || !IsIdentityColumn(property)) {%>
    <%= ParameterPrefix %><%= property.KeyName %>,
<% } } } %>
    <% GenerateVariables(Entity.GetProperties(PropertyType.NoKey), 1, false); %>
)

<%-- If the primary key is an identity property, then capture the newly assigned identity using SCOPE_IDENTITY(). --%>
<% if(Entity.HasKey) {
    foreach(var property in Entity.GetProperties(PropertyType.Key)) {
     if (IsIdentityColumn(property)) {%>
SET <%= ParameterPrefix %><%= property.KeyName %> = SCOPE_IDENTITY()

<% } } } %>
<% if(Entity.ConcurrencyProperty != null){ %>
SET <%= ParameterPrefix %><%= Entity.ConcurrencyProperty.KeyName %> = (SELECT [<%= Entity.ConcurrencyProperty.KeyName %>] FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] WHERE <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, false); %>)

<%}%>

<%-- Primary key is not a identity property or a GUID, so include all columns as input parameters. --%>
<% } else { %>
CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% if(Entity.ConcurrencyProperty != null){ %>
<% GenerateParameter(Entity.ConcurrencyProperty, 1, true, false, true, true); %>,
<%}%>
<% GenerateParameters(Entity.Properties, 1, false); %>

AS

SET NOCOUNT ON

INSERT INTO [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] (
    <% GenerateColumns(Entity.Properties, 1, false); %>

) VALUES (
    <% GenerateVariables(Entity.Properties, 1, false); %>
)

<% if(Entity.ConcurrencyProperty != null){ %>
SET <%= ParameterPrefix %><%= Entity.ConcurrencyProperty.KeyName %> = (SELECT [<%= Entity.ConcurrencyProperty.KeyName %>] FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] WHERE <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, false); %>)
<%}%>
<% } %>

GO
IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetInsertStoredProcedureName()); %>
<% } %>
<% if(IncludeUpdate) { %>
<%------------------------------------------------------------------------------------------
*
* Update Procedure
*
------------------------------------------------------------------------------------------%>
<% GenerateProcedureHeader(GetUpdateStoredProcedureName()); %>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetUpdateStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetUpdateStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetUpdateStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customized. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetUpdateStoredProcedureName() %>
<% if(Entity.ConcurrencyProperty != null){ %>
<% GenerateParameter(Entity.ConcurrencyProperty, 1, true, false, true, true); %>,
<%}%>
<% GenerateParameters(Entity.Properties, 1, false, false, false, true); %>

AS

UPDATE [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] SET
    <% GenerateUpdates(Entity.Properties, 1, false); %>

WHERE
    <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, true); %>
<% if(Entity.ConcurrencyProperty != null){ %>
    <% GenerateCondition(Entity.ConcurrencyProperty, 1, false, true, false); %>
<%}%>

<% if(Entity.ConcurrencyProperty != null){ %>
SET <%= ParameterPrefix %><%= Entity.ConcurrencyProperty.KeyName %> = (SELECT [<%= Entity.ConcurrencyProperty.KeyName %>] FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] WHERE <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, false); %>)
<%}%>

GO
IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetUpdateStoredProcedureName()); %>
<% } %>
<% if(IncludeDelete) { %>
<%------------------------------------------------------------------------------------------
*
* Delete Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetDeleteStoredProcedureName());
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetDeleteStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetDeleteStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetDeleteStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customized. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetDeleteStoredProcedureName() %>
<% GenerateParameters(Entity.GetProperties(PropertyType.Key), 1, false); %>

AS

DELETE FROM
    [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>]
WHERE
    <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, false); %>

GO
IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetDeleteStoredProcedureName()); %>
<% } %>
<%------------------------------------------------------------------------------------------
*
* Select Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetSelectStoredProcedureName());
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetSelectStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetSelectStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetSelectStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customized. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetSelectStoredProcedureName() %>
<% GenerateParameters(Entity.Properties, 1, false, false, true); %>

AS

<% GenerateSetTransactionIsolationLevelStatement(IsolationLevel); %>

SELECT
    <% GenerateColumns(Entity.Properties, 1, true); %>

FROM
    [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>]
WHERE
    <% GenerateFindConditions(Entity.Properties, 1); %>

GO
IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetSelectStoredProcedureName()); %>
<script runat="template">
#region IProperty Variables
private StringCollection _droppedProcedureNames = new StringCollection();
private StringCollection _generatedProcedureNames = new StringCollection();
#endregion

#region Isolation Level

public void GenerateSetTransactionIsolationLevelStatement(Generator.CSLA.TransactionIsolationLevelEnum isolationLevel)
{
    Response.Write("SET TRANSACTION ISOLATION LEVEL ");
    
    switch (isolationLevel)
    {
        case Generator.CSLA.TransactionIsolationLevelEnum.ReadUncommitted:
        {
            Response.WriteLine("READ UNCOMMITTED");
            break;
        }
        case Generator.CSLA.TransactionIsolationLevelEnum.RepeatableRead:
        {
            Response.WriteLine("REPEATABLE READ");
            break;
        }
        case Generator.CSLA.TransactionIsolationLevelEnum.Serializable:
        {
            Response.WriteLine("SERIALIZABLE");
            break;
        }
        default:
        {
            Response.WriteLine("READ COMMITTED");
            break;
        }
    }
}
#endregion

#region Code Generation Helpers

public void GenerateDropStatement(string procedureName)
{
    // check to see if this procedure has already been dropped.
    if (!_droppedProcedureNames.Contains(procedureName))
    {
        Response.WriteLine("SET NUMERIC_ROUNDABORT OFF");
        Response.WriteLine("GO");
        Response.WriteLine("SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON");
        Response.WriteLine("GO");
        Response.WriteLine("IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors");
        Response.WriteLine("GO");
        Response.WriteLine("CREATE TABLE #tmpErrors (Error int)");
        Response.WriteLine("GO");
        Response.WriteLine("SET XACT_ABORT ON");
        Response.WriteLine("GO");
        Response.WriteLine("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE");
        Response.WriteLine("GO");
        Response.WriteLine("BEGIN TRANSACTION");
        Response.WriteLine("GO");
        
        Response.WriteLine("PRINT N'Dropping {0}'", procedureName);
        Response.WriteLine("GO");
        
        Response.WriteLine("IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '{0}', default, default) WHERE name = 'CustomProcedure' and value = '1')", procedureName);
        Response.WriteLine("BEGIN");
        Response.WriteLine("    RAISERROR ('The procedure {0} has an Extended Property \"CustomProcedure\" which means is has been customized. Please review and remove the property if you wish to drop the procedure.',16,1)", procedureName);
        Response.WriteLine("    INSERT INTO #tmpErrors (Error) SELECT 1");
        Response.WriteLine("END");
        Response.WriteLine("GO");
        Response.WriteLine("");
        
        Response.WriteLine("IF OBJECT_ID(N'{0}') IS NOT NULL", procedureName);
        GenerateIndent(1);
        Response.WriteLine("DROP PROCEDURE {0}", procedureName);
        Response.WriteLine("");
        
        Response.WriteLine("GO");
        Response.WriteLine("IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION");
        Response.WriteLine("GO");
        Response.WriteLine("");
        Response.WriteLine("IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END");
        Response.WriteLine("GO");
        Response.WriteLine("");
        Response.WriteLine("IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION");
        Response.WriteLine("GO");
        Response.WriteLine("");
        Response.WriteLine("IF @@TRANCOUNT>0 BEGIN");
        Response.WriteLine("PRINT 'The stored procedure drop has succeeded'");
        Response.WriteLine("COMMIT TRANSACTION");
        Response.WriteLine("END");
        Response.WriteLine("ELSE PRINT 'The stored procedure drop has failed'");
        Response.WriteLine("GO");
        Response.WriteLine("");
        Response.WriteLine("DROP TABLE #tmpErrors");
        Response.WriteLine("GO");

        // add this procedure to the list of dropped procedures
        _droppedProcedureNames.Add(procedureName);
    }
}

public void GenerateProcedureHeader(string procedureName)
{
    Response.WriteLine("--region {0}", procedureName);
    Response.WriteLine("");
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------");
    Response.WriteLine("-- Generated By:   {0} using {1}", System.Environment.UserName, VersionInfo);
    Response.WriteLine("-- Procedure Name: {0}", procedureName);
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------");
}

public void GenerateProcedureFooter(string procedureName)
{
    Response.WriteLine("--endregion");
    Response.WriteLine("");
    Response.WriteLine("GO");
    Response.WriteLine("");
}

public void GenerateIndent(int indentLevel)
{
    for (int i = 0; i < indentLevel; i++)
    {
        Response.Write('\t');
    }
}

public void GenerateParameter(IProperty property, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    GenerateParameter(property, indentLevel, isFirst, isLast, false, includeTimeStamp);
}

public void GenerateParameter(IProperty property, int indentLevel, bool isFirst, bool isLast, bool isOutput, bool includeTimeStamp)
{
    GenerateParameter(property, indentLevel, isFirst, isLast, isOutput, includeTimeStamp, false);
}

public void GenerateParameter(IProperty property, int indentLevel, bool isFirst, bool isLast, bool isOutput, bool includeTimeStamp, bool makeParametersNullable)
{
    GenerateParameter(property, indentLevel, isFirst, isLast, isOutput, includeTimeStamp, makeParametersNullable, false);
}

public void GenerateParameter(IProperty property, int indentLevel, bool isFirst, bool isLast, bool isOutput, bool includeTimeStamp, bool makeParametersNullable, bool includeOriginalParam)
{
    if(ColumnIsIgnored(property) || (!includeTimeStamp && property.IsType(PropertyType.Concurrency)))
        return;

    if (!isFirst)
    {
        Response.Write(",");
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }
    }
    
    // Is Guid property.
    if(includeOriginalParam && property.IsDbType(DbType.Guid) && property.IsType(PropertyType.Key) && !property.IsType(PropertyType.Foreign))
        isOutput = true;

    GenerateIndent(indentLevel);
    Response.Write(GetSqlParameterStatement(property, isOutput));
    if(makeParametersNullable) Response.Write(" = NULL");
    if(makeParametersNullable && property.IsNullable)
    {
        Response.Write(String.Format(",\r\n\t{0}{1}HasValue BIT = 0", ParameterPrefix, property.KeyName));
    }
    
    if(includeOriginalParam && property.IsType(PropertyType.Key) && !property.IsType(PropertyType.Identity))
    {
        Response.Write(",");
        
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }

        GenerateIndent(indentLevel);
        Response.Write(GetSqlParameterStatement(property, false, includeOriginalParam));
    }
}

public string GetSqlParameterStatement(IProperty property, bool isOutput )
{
    return GetSqlParameterStatement(property, isOutput, false);
}

public string GetSqlParameterStatement(IProperty property, bool isOutput, bool includeOriginalParam)
{
    if((property is ISchemaProperty) == false)
        throw new ArgumentException("property must be of type IProperty", "property");

    var prop = (ISchemaProperty)property;

    string param = String.Format("{0}{1}{2} {3}", ParameterPrefix, includeOriginalParam ? "Original" : "", prop.KeyName, prop.NativeType);
    if (!IsUserDefinedType(prop) && !prop.IsType(PropertyType.Concurrency))
    {
        switch (prop.DataType)
        {
            case DbType.Decimal:
                {
                    param += String.Format("({0}, {1})", prop.Precision, prop.Scale);
                    break;
                }
            case DbType.Binary:
            case DbType.AnsiString:
            case DbType.AnsiStringFixedLength:
            case DbType.String:
            case DbType.StringFixedLength:
                {
                    if (prop.NativeType != "text" && prop.NativeType != "ntext")
                        if ( property.Size > 0 )
                            param += String.Format("({0})", prop.Size);
                        else if ( property.Size == -1 )
                            param += "(max)";
                    break;
                }
        }
    }

    if ( isOutput )
        param += " OUTPUT";

    return param;
}

/// <summary>
/// Determine if the given property is using a UDT.
/// </summary>
/// <param name="property"></param>
/// <returns></returns>
public bool IsUserDefinedType(IProperty property)
{
    if(property.ExtendedProperties.ContainsKey("CS_UserDefinedType"))
        return true;

    return false;
}

public void GenerateParameters(IList<IProperty> columns, int indentLevel, bool includeTimeStamp)
{
    GenerateParameters(columns, indentLevel, false, includeTimeStamp);
}

public void GenerateParameters(IList<IProperty> columns, int indentLevel, bool includeTrailingComma, bool includeTimeStamp)
{
    GenerateParameters(columns, indentLevel, includeTrailingComma, includeTimeStamp, false);
}

public void GenerateParameters(IList<IProperty> columns, int indentLevel, bool includeTrailingComma, bool includeTimeStamp, bool makeParametersNullable)
{
    GenerateParameters(columns, indentLevel, includeTrailingComma, includeTimeStamp, makeParametersNullable, false);
}

public void GenerateParameters(IList<IProperty> columns, int indentLevel, bool includeTrailingComma, bool includeTimeStamp, bool makeParametersNullable, bool includeOriginalParam)
{
    foreach(var property in columns.AsIndexedEnumerable())
    {
        GenerateParameter(property.Value, indentLevel, property.IsFirst, property.IsLast && !includeTrailingComma, false, includeTimeStamp, makeParametersNullable, includeOriginalParam);
    }
}

public void GenerateColumn(IProperty property, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(ColumnIsIgnored(property) || (!includeTimeStamp && property.IsType(PropertyType.Concurrency)))
        return;

    if (!isFirst)
    {
        Response.Write(",");
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }
    }
    GenerateIndent(indentLevel);
    Response.Write("[");
    Response.Write(property.KeyName);
    Response.Write("]");
}

public void GenerateColumns(IList<IProperty> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var property in columns.AsIndexedEnumerable())
    {
        GenerateColumn(property.Value, indentLevel, property.IsFirst, property.IsLast, includeTimeStamp);
    }
}

public void GenerateUpdate(IProperty property, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(ColumnIsIgnored(property) || (!includeTimeStamp && property.IsType(PropertyType.Concurrency)))
        return;

    if (!isFirst) 
    {
        Response.Write(",");
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }
    }
    
    GenerateIndent(indentLevel);
    Response.Write("[");
    Response.Write(property.KeyName);
    Response.Write("] = ");
    Response.Write(ParameterPrefix);
    Response.Write(property.KeyName);
}

public void GenerateUpdates(IList<IProperty> columns, int indentLevel, bool includeTimeStamp)
{
    bool isFirst = true;
    foreach(var property in columns.AsIndexedEnumerable())
    {
        if(property.Value.IsType(PropertyType.Key) && property.Value.IsType(PropertyType.Identity))
            continue;

        GenerateUpdate(property.Value, indentLevel, isFirst, property.IsLast, includeTimeStamp);
        isFirst = false;
    }
}

public void GenerateCondition(IProperty property, int indentLevel, bool isFirst, bool isLast, bool includeOriginal)
{
    if(ColumnIsIgnored(property))
        return;
    
    GenerateIndent(indentLevel);
    if (!isFirst) Response.Write("AND ");
    Response.Write("[");
    Response.Write(property.KeyName);
    Response.Write("] = ");
    Response.Write(ParameterPrefix);
    
    if(includeOriginal && property.IsType(PropertyType.Key) && !property.IsType(PropertyType.Identity))
    {
        Response.Write("Original");
    }
    
    Response.Write(property.KeyName);
    
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public void GenerateConditions(IList<IProperty> columns, int indentLevel)
{
    GenerateConditions(columns, indentLevel, false);
}
public void GenerateConditions(IList<IProperty> columns, int indentLevel, bool includeOriginal)
{
    foreach(var property in columns.AsIndexedEnumerable())
    {
        GenerateCondition(property.Value, indentLevel, property.IsFirst, property.IsLast, includeOriginal);
    }
}

public void GenerateFindConditions(IList<IProperty> columns, int indentLevel)
{
    foreach(var property in columns.AsIndexedEnumerable())
    {
        GenerateFindCondition(property.Value, indentLevel, property.IsFirst, property.IsLast);
    }
}

public void GenerateFindCondition(IProperty property, int indentLevel, bool isFirst, bool isLast)
{
    if (ColumnIsIgnored(property) || !IsColumnFindable(property))
        return;

    GenerateIndent(indentLevel);
    if (!isFirst) Response.Write("AND ");
    Response.Write("([");
    Response.Write(property.KeyName);
    Response.Write("] = ");
    Response.Write(ParameterPrefix);
    Response.Write(property.KeyName);
    if(property.IsNullable)
    {
        Response.Write(" OR (");
        Response.Write(ParameterPrefix);
        Response.Write(property.KeyName);
        Response.Write(" IS NULL AND ");
        Response.Write(ParameterPrefix);
        Response.Write(property.KeyName);
        Response.Write("HasValue = 0))");
    }
    else
    {
        Response.Write(" OR ");
        Response.Write(ParameterPrefix);
        Response.Write(property.KeyName);
        Response.Write(" IS NULL)");
    }
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public bool IsColumnFindable(IProperty property)
{
    if(property is ISchemaProperty)
    {
        var prop = (ISchemaProperty)property;
        if (prop.DataType == DbType.Binary || 
            prop.NativeType == "text" ||
            prop.NativeType == "ntext" ||
            prop.NativeType == "timestamp" ||
            prop.NativeType == "image" ||
            prop.NativeType == "xml")
        {
            return false;
        }
    }
    
    return true;
}

/// <summary>
/// This method adds support for composite primary keys.
/// </summary>
/// <param name="key"></param>
/// <returns></returns>
public bool HasGuidOrIdentityColumn(IKey key)
{
    if(key == null)
        return false;

    foreach(IProperty property in key.Properties)
    {
        if(IsGuidOrIdentityColumn(property))
            return true;   
    }

    return false;
}

public bool IsGuidOrIdentityColumn(IProperty property)
{
    if(property.IsDbType(DbType.Guid) || IsIdentityColumn(property))
        return true;   
        
    return false;
}

public bool IsIdentityColumn(IProperty property)
{
    if(property == null) 
        return false;
    
    bool correctDataType = property.IsDbType(DbType.Int16) || property.IsDbType(DbType.Int32) || property.IsDbType(DbType.Int64);
    if(correctDataType && property.IsType(PropertyType.Identity))
        return true;   
        
    return false;
}

public void GenerateVariable(IProperty property, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(ColumnIsIgnored(property) || (!includeTimeStamp && property.IsType(PropertyType.Concurrency)))
        return;

    if (!isFirst)
    {
        Response.Write(",");
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }
    }
    GenerateIndent(indentLevel);
    Response.Write(ParameterPrefix);
    Response.Write(property.KeyName);
}

public void GenerateVariables(List<IProperty> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var property in columns.AsIndexedEnumerable())
    {
        GenerateVariable(property.Value, indentLevel, property.IsFirst, property.IsLast, includeTimeStamp);
    }
}

public void GenerateVariables(IList<IProperty> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var property in columns.AsIndexedEnumerable())
    {
        GenerateVariable(property.Value, indentLevel, property.IsFirst, property.IsLast, includeTimeStamp);
    }
}

public bool ColumnIsIgnored(IProperty property)
{
    return CodeSmith.SchemaHelper.Configuration.Instance.ExcludeRegexIsMatch(property.ToString());
}

#endregion

#region Events

protected override void OnPostRender(string result)
{
    if (AutoExecuteStoredProcedures)
    {
        string connectionString = Entity is ISchemaEntity ? ((ISchemaEntity)Entity).ConnectionString : null;
        if(!String.IsNullOrEmpty(connectionString))
        {
            // execute the output on the same database as the source table.
            var scriptResult = CodeSmith.BaseTemplates.ScriptUtility.ExecuteScript(connectionString, result, new System.Data.SqlClient.SqlInfoMessageEventHandler(cn_InfoMessage));
            Trace.WriteLine(scriptResult.ToString());
        }
    }

    base.OnPostRender(result);
}

private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs ex)
{
    Trace.WriteLine(ex.Message);
}

#endregion

</script>