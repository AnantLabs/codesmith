<%--------------------------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Modified By: Blake Niemyjski
* Description: This template will generate standard CRUD stored procedures for a given database table.
--------------------------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Debug="True" Language="C#"  TargetLanguage="T-SQL" Inherits="QuickStart.DataCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="Generates standard CRUD procedures based on a database table schema." %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>

<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%
// this template requires a primary key on the source table
if (!SourceTable.HasPrimaryKey) throw new ApplicationException("SourceTable does not contain a primary key.");

// generate drop statements
Response.WriteLine("--region Drop Existing Procedures");
Response.WriteLine("");

GenerateDropStatement(GetInsertStoredProcedureName());
GenerateDropStatement(GetUpdateStoredProcedureName());
GenerateDropStatement(GetDeleteStoredProcedureName());
GenerateDropStatement(GetSelectStoredProcedureName());

Response.WriteLine("--endregion");
Response.WriteLine("");
Response.WriteLine("GO");
Response.WriteLine("");
%>
<%------------------------------------------------------------------------------------------
*
* Insert Procedure
*
------------------------------------------------------------------------------------------%>

<% GenerateProcedureHeader(GetInsertStoredProcedureName()); %>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetInsertStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetInsertStoredProcedureName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetInsertStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customised. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

<%
    /*
     * Check to see if the primary key is a single column primary key and also if it's either an
     * identity column or a GUID.  If so, we will not include the primary key column in the
     * list of input parameters.
     */
    
    if (SourceTable.PrimaryKey.MemberColumns.Count == 1
        && (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid
        || ((SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int16
        || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int32
        || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int64)
        && (bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value == true)))
    {
        ColumnSchema primaryKeyColumn = SourceTable.PrimaryKey.MemberColumns[0];
%>

CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% if(Entity.HasRowVersionMember){ %>
<% GenerateParameter(SourceTable.Columns[Entity.RowVersionMember.ColumnName], 1, true, false, true, true); %>,
<%}%>
<% GenerateParameters(SourceTable.NonPrimaryKeyColumns, 1, true, false); %>
<% GenerateParameter(primaryKeyColumn, 1, false, true, true, false, false); %>

AS

<%-- If the primary key is a GUID, then assign a new GUID using NEWID(). --%>
<% if (primaryKeyColumn.DataType == DbType.Guid) { %>
SET @<%= primaryKeyColumn.Name %> = NEWID()

<% } %>
INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] (
    <% if (primaryKeyColumn.DataType == DbType.Guid) { %>
    [<%= primaryKeyColumn.Name %>],
    <% } %>
    <% GenerateColumns(SourceTable.NonPrimaryKeyColumns, 1, false); %>
) VALUES (
    <% if (primaryKeyColumn.DataType == DbType.Guid) { %>
    @<%= primaryKeyColumn.Name %>,
    <% } %>
    <% GenerateVariables(SourceTable.NonPrimaryKeyColumns, 1, false); %>
)
<%-- If the primary key is an identity column, then capture the newly assigned identity using SCOPE_IDENTITY(). --%>
<% if (primaryKeyColumn.DataType == DbType.Int16 || primaryKeyColumn.DataType == DbType.Int32 || primaryKeyColumn.DataType == DbType.Int64) { %>

SET <%= ParameterPrefix %><%= primaryKeyColumn.Name %> = SCOPE_IDENTITY()
<% } %>

<% if(Entity.HasRowVersionMember){ %>
SET <%= ParameterPrefix %><%= Entity.RowVersionMember.ColumnName %> = (SELECT [<%= Entity.RowVersionMember.ColumnName %>] FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, false); %>)
<%}%>

<%-- Primary key is not a identity column or a GUID, so include all columns as input parameters. --%>
<% } else { %>

CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% if(Entity.HasRowVersionMember){ %>
<% GenerateParameter(SourceTable.Columns[Entity.RowVersionMember.ColumnName], 1, true, false, true, true); %>,
<%}%>
<% GenerateParameters(SourceTable.Columns, 1, false); %>

AS

SET NOCOUNT ON

INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] (
    <% GenerateColumns(SourceTable.Columns, 1, false); %>

) VALUES (
    <% GenerateVariables(SourceTable.Columns, 1, false); %>
)

<% if(Entity.HasRowVersionMember){ %>
SET <%= ParameterPrefix %><%= Entity.RowVersionMember.ColumnName %> = (SELECT [<%= Entity.RowVersionMember.ColumnName %>] FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, false); %>)
<%}%>

<% } %>

IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succedded was succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetInsertStoredProcedureName()); %>
<%------------------------------------------------------------------------------------------
*
* Update Procedure
*
------------------------------------------------------------------------------------------%>

<% GenerateProcedureHeader(GetUpdateStoredProcedureName()); %>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetUpdateStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetUpdateStoredProcedureName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetUpdateStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customised. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetUpdateStoredProcedureName() %>
<% if(Entity.HasRowVersionMember){ %>
<% GenerateParameter(SourceTable.Columns[Entity.RowVersionMember.ColumnName], 1, true, false, true, true); %>,
<%}%>
<% GenerateParameters(SourceTable.Columns, 1, false, false, false, true); %>

AS

UPDATE <%= GetTableOwner() %>[<%= SourceTable.Name %>] SET
    <% GenerateUpdates(SourceTable.Columns, 1, false); %>

WHERE
    <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, true); %>
<% if(Entity.HasRowVersionMember){ %>
    <% GenerateCondition(SourceTable.Columns[Entity.RowVersionMember.ColumnName], 1, false, true, false); %>
<%}%>

<% if(Entity.HasRowVersionMember){ %>
SET <%= ParameterPrefix %><%= Entity.RowVersionMember.ColumnName %> = (SELECT [<%= Entity.RowVersionMember.ColumnName %>] FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, false); %>)
<%}%>

IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succedded was succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<%
    GenerateProcedureFooter(GetUpdateStoredProcedureName());
%>
<%------------------------------------------------------------------------------------------
*
* Delete Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetDeleteStoredProcedureName());
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetDeleteStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetDeleteStoredProcedureName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetDeleteStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customised. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetDeleteStoredProcedureName() %>
<% GenerateParameters(SourceTable.PrimaryKey.MemberColumns, 1, false); %>

AS

DELETE FROM
    <%= GetTableOwner() %>[<%= SourceTable.Name %>]
WHERE
    <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, false); %>

<%
    GenerateProcedureFooter(GetDeleteStoredProcedureName());
%>
<%------------------------------------------------------------------------------------------
*
* Select Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetSelectStoredProcedureName());
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetSelectStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetSelectStoredProcedureName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetSelectStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customised. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetSelectStoredProcedureName() %>
<% GenerateParameters(SourceTable.Columns, 1, false, false, true); %>

AS

<% GenerateSetTransactionIsolationLevelStatement(IsolationLevel); %>

SELECT
    <% GenerateColumns(SourceTable.Columns, 1, true); %>

FROM
    <%= GetTableOwner() %>[<%= SourceTable.Name %>]
WHERE
    <% GenerateFindConditions(SourceTable.Columns, 1); %>

IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succedded was succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<%
    GenerateProcedureFooter(GetSelectStoredProcedureName());
%>
<script runat="template">
#region Member Variables
private StringCollection _droppedProcedureNames = new StringCollection();
private StringCollection _generatedProcedureNames = new StringCollection();
#endregion

#region Isolation Level

public void GenerateSetTransactionIsolationLevelStatement(TransactionIsolationLevelEnum isolationLevel)
{
    Response.Write("SET TRANSACTION ISOLATION LEVEL ");
    
    switch (isolationLevel)
    {
        case TransactionIsolationLevelEnum.ReadUncommitted:
        {
            Response.WriteLine("READ UNCOMMITTED");
            break;
        }
        case TransactionIsolationLevelEnum.RepeatableRead:
        {
            Response.WriteLine("REPEATABLE READ");
            break;
        }
        case TransactionIsolationLevelEnum.Serializable:
        {
            Response.WriteLine("SERIALIZABLE");
            break;
        }
        default:
        {
            Response.WriteLine("READ COMMITTED");
            break;
        }
    }
}
#endregion

#region Code Generation Helpers

private IList<ColumnSchema> ConvertMemberColumnSchemaToColumnSchema(IList<MemberColumnSchema> memberColumns)
{
    var columns = new List<ColumnSchema>();
    columns.AddRange(memberColumns.Cast<ColumnSchema>());
    return columns;
}

public void GenerateDropStatement(string procedureName)
{
    // check to see if this procedure has already been dropped.
    if (!_droppedProcedureNames.Contains(procedureName))
    {
        Response.WriteLine("SET NUMERIC_ROUNDABORT OFF");
        Response.WriteLine("GO");
        Response.WriteLine("SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON");
        Response.WriteLine("GO");
        Response.WriteLine("IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors");
        Response.WriteLine("GO");
        Response.WriteLine("CREATE TABLE #tmpErrors (Error int)");
        Response.WriteLine("GO");
        Response.WriteLine("SET XACT_ABORT ON");
        Response.WriteLine("GO");
        Response.WriteLine("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE");
        Response.WriteLine("GO");
        Response.WriteLine("BEGIN TRANSACTION");
        Response.WriteLine("GO");
        
        Response.WriteLine("PRINT N'Dropping {0}'", procedureName);
        Response.WriteLine("GO");
        
        Response.WriteLine("IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '{0}', default, default) WHERE name = 'CustomProcedure' and value = '1')", procedureName);
        Response.WriteLine("BEGIN");
        Response.WriteLine("    RAISERROR ('The procedure {0} has an Extended Property \"CustomProcedure\" which means is has been customised. Please review and remove the property if you wish to drop the procedure.',16,1)", procedureName);
        Response.WriteLine("    INSERT INTO #tmpErrors (Error) SELECT 1");
        Response.WriteLine("END");
        Response.WriteLine("GO");
        Response.WriteLine("");
        
        Response.WriteLine("IF OBJECT_ID(N'{0}') IS NOT NULL", procedureName);
        GenerateIndent(1);
        Response.WriteLine("DROP PROCEDURE {0}", procedureName);
        Response.WriteLine("");
        
        Response.WriteLine("IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION");
        Response.WriteLine("GO");
        Response.WriteLine("");
        Response.WriteLine("IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END");
        Response.WriteLine("GO");
        Response.WriteLine("");
        Response.WriteLine("IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION");
        Response.WriteLine("GO");
        Response.WriteLine("");
        Response.WriteLine("IF @@TRANCOUNT>0 BEGIN");
        Response.WriteLine("PRINT 'The stored procedure drop has succeeded'");
        Response.WriteLine("COMMIT TRANSACTION");
        Response.WriteLine("END");
        Response.WriteLine("ELSE PRINT 'The stored procedure drop has failed'");
        Response.WriteLine("GO");
        Response.WriteLine("");
        Response.WriteLine("DROP TABLE #tmpErrors");
        Response.WriteLine("GO");
        
        // add this procedure to the list of dropped procedures
        _droppedProcedureNames.Add(procedureName);
    }
}

public void GenerateProcedureHeader(string procedureName)
{
    Response.WriteLine("--region {0}", procedureName);
    Response.WriteLine("");
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------");
    Response.WriteLine("-- Generated By:   {0} using {1}", System.Environment.UserName, VersionInfo);
    Response.WriteLine("-- Procedure Name: {0}", procedureName);
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------");
}

public void GenerateProcedureFooter(string procedureName)
{
    Response.WriteLine("--endregion");
    Response.WriteLine("");
    Response.WriteLine("GO");
    Response.WriteLine("");
}

public void GenerateIndent(int indentLevel)
{
    for (int i = 0; i < indentLevel; i++)
    {
        Response.Write('\t');
    }
}

public void GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    GenerateParameter(column, indentLevel, isFirst, isLast, false, includeTimeStamp);
}

public void GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool isOutput, bool includeTimeStamp)
{
    GenerateParameter(column, indentLevel, isFirst, isLast, isOutput, includeTimeStamp, false);
}

public void GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool isOutput, bool includeTimeStamp, bool makeParametersNullable)
{
    GenerateParameter(column, indentLevel, isFirst, isLast, isOutput, includeTimeStamp, makeParametersNullable, false);
}

public void GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool isOutput, bool includeTimeStamp, bool makeParametersNullable, bool includeOriginalParam)
{
    if(!includeTimeStamp && ColumnIsTimestamp(column))
        return;

    if (!isFirst)
    {
        Response.Write(",");
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }
    }

    GenerateIndent(indentLevel);
    Response.Write(GetSqlParameterStatement(column, isOutput));
    if(makeParametersNullable) Response.Write(" = NULL");
    if(makeParametersNullable && column.AllowDBNull)
    {
        Response.Write(string.Format(",\r\n\t{0}{1}HasValue BIT = 0", ParameterPrefix, column.Name));
    }
    
    if(includeOriginalParam && column.IsPrimaryKeyMember && column.ExtendedProperties.Contains("CS_IsIdentity") && !((bool)column.ExtendedProperties["CS_IsIdentity"].Value))
    {
        Response.Write(",");
        
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }

        GenerateIndent(indentLevel);
        Response.Write(GetSqlParameterStatement(column, isOutput, includeOriginalParam));
    }
}

public string GetSqlParameterStatement( DataObjectBase column, bool isOutput )
{
    return GetSqlParameterStatement(column, isOutput, false);
}

public string GetSqlParameterStatement( DataObjectBase column, bool isOutput, bool includeOriginalParam)
{
    string param = string.Format("{0}{1}{2} {3}", ParameterPrefix, includeOriginalParam ? "Original" : "", column.Name, column.NativeType);

    if ( !IsUserDefinedType( column ) && !ColumnIsTimestamp(column) )
        switch ( column.DataType )
        {
            case DbType.Decimal:
                {
                    param += string.Format("({0}, {1})", column.Precision, column.Scale);
                    break;
                }
            case DbType.Binary:
            case DbType.AnsiString:
            case DbType.AnsiStringFixedLength:
            case DbType.String:
            case DbType.StringFixedLength:
                {
                    if ( column.NativeType != "text" && column.NativeType != "ntext" )
                        if ( column.Size > 0 )
                            param += string.Format("({0})", column.Size);
                        else if ( column.Size == -1 )
                            param += "(max)";
                    break;
                }
        }

    if ( isOutput )
        param += " OUTPUT";

    return param;
}

/// <summary>
/// Determine if the given column is using a UDT.
/// </summary>
/// <param name="column"></param>
/// <returns></returns>
public bool IsUserDefinedType( DataObjectBase column )
{
    switch ( column.NativeType.Trim().ToLower() )
    {
        case "bigint":
        case "binary":
        case "bit":
        case "char":
        case "date":
        case "datetime":
        case "datetime2":
        case "time":
        case "decimal":
        case "float":
        case "image":
        case "int":
        case "money":
        case "nchar":
        case "ntext":
        case "numeric":
        case "nvarchar":
        case "real":
        case "smalldatetime":
        case "smallint":
        case "smallmoney":
        case "sql_variant":
        case "sysname":
        case "text":
        case "timestamp":
        case "tinyint":
        case "uniqueidentifier":
        case "varbinary":
        case "xml":
        case "varchar":
            return false;
        default:
            return true;
    }
}

public void GenerateParameters(IList<MemberColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    GenerateParameters(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel, false, includeTimeStamp);
}

public void GenerateParameters(IList<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    GenerateParameters(columns, indentLevel, false, includeTimeStamp);
}

public void GenerateParameters(IList<ColumnSchema> columns, int indentLevel, bool includeTrailingComma, bool includeTimeStamp)
{
    GenerateParameters(columns, indentLevel, includeTrailingComma, includeTimeStamp, false);
}

public void GenerateParameters(IList<ColumnSchema> columns, int indentLevel, bool includeTrailingComma, bool includeTimeStamp, bool makeParametersNullable)
{
    GenerateParameters(columns, indentLevel, includeTrailingComma, includeTimeStamp, makeParametersNullable, false);
}

public void GenerateParameters(IList<ColumnSchema> columns, int indentLevel, bool includeTrailingComma, bool includeTimeStamp, bool makeParametersNullable, bool includeOriginalParam)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateParameter(column.Value, indentLevel, column.IsFirst, column.IsLast && !includeTrailingComma, false, includeTimeStamp, makeParametersNullable, includeOriginalParam);
    }
}

public void GenerateColumn(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(!includeTimeStamp && ColumnIsTimestamp(column))
        return;

    if (!isFirst)
    {
        Response.Write(",");
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }
    }
    GenerateIndent(indentLevel);
    Response.Write("[");
    Response.Write(column.Name);
    Response.Write("]");
}

public void GenerateColumns(IList<MemberColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    GenerateColumns(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel, includeTimeStamp);
}

public void GenerateColumns(IList<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateColumn(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp);
    }
}

public void GenerateUpdate(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(!includeTimeStamp && ColumnIsTimestamp(column))
        return;

    if (!isFirst) 
    {
        Response.Write(",");
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }
    }
    
    GenerateIndent(indentLevel);
    Response.Write("[");
    Response.Write(column.Name);
    Response.Write("] = ");
    Response.Write(ParameterPrefix);
    Response.Write(column.Name);
}

public void GenerateUpdates(IList<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    bool isFirst = true;
    foreach(var column in columns.AsIndexedEnumerable())
    {
        if(column.Value.IsPrimaryKeyMember && (column.Value.ExtendedProperties.Contains("CS_IsIdentity") && (bool)column.Value.ExtendedProperties["CS_IsIdentity"].Value))
            continue;

        GenerateUpdate(column.Value, indentLevel, isFirst, column.IsLast, includeTimeStamp);
        isFirst = false;
    }
}

public void GenerateCondition(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeOriginal)
{
    GenerateIndent(indentLevel);
    if (!isFirst) Response.Write("AND ");
    Response.Write("[");
    Response.Write(column.Name);
    Response.Write("] = ");
    Response.Write(ParameterPrefix);
    
    if(includeOriginal && column.IsPrimaryKeyMember && column.ExtendedProperties.Contains("CS_IsIdentity") && !((bool)column.ExtendedProperties["CS_IsIdentity"].Value))
    {
        Response.Write("Original");
    }
    
    Response.Write(column.Name);
    
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public void GenerateConditions(IList<MemberColumnSchema> columns, int indentLevel, bool includeOriginal)
{
    GenerateConditions(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel, includeOriginal);
}

public void GenerateConditions(IList<ColumnSchema> columns, int indentLevel)
{
    GenerateConditions(columns, indentLevel, false);
}
public void GenerateConditions(IList<ColumnSchema> columns, int indentLevel, bool includeOriginal)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateCondition(column.Value, indentLevel, column.IsFirst, column.IsLast, includeOriginal);
    }
}

public void GenerateFindConditions(IList<ColumnSchema> columns, int indentLevel)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateFindCondition(column.Value, indentLevel, column.IsFirst, column.IsLast);
    }
}

public void GenerateFindCondition(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
    if (!IsColumnFindable(column))
        return;

    GenerateIndent(indentLevel);
    if (!isFirst) Response.Write("AND ");
    Response.Write("([");
    Response.Write(column.Name);
    Response.Write("] = ");
    Response.Write(ParameterPrefix);
    Response.Write(column.Name);
    if(column.AllowDBNull)
    {
        Response.Write(" OR (");
        Response.Write(ParameterPrefix);
        Response.Write(column.Name);
        Response.Write(" IS NULL AND ");
        Response.Write(ParameterPrefix);
        Response.Write(column.Name);
        Response.Write("HasValue = 0))");
    }
    else
    {
        Response.Write(" OR ");
        Response.Write(ParameterPrefix);
        Response.Write(column.Name);
        Response.Write(" IS NULL)");
    }
    if (indentLevel >= 0)
    {
        Response.WriteLine("");
    }
    else if (!isLast)
    {
        Response.Write(" ");
    }
}

public bool IsColumnFindable(ColumnSchema column)
{
    if (column.DataType == DbType.Binary || column.NativeType == "text" ||
        column.NativeType == "ntext" ||
        column.NativeType == "timestamp" ||
        column.NativeType == "image" ||
        column.NativeType == "xml")
        return false;

    return true;
}

public void GenerateVariable(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool includeTimeStamp)
{
    if(!includeTimeStamp && ColumnIsTimestamp(column))
        return;

    if (!isFirst)
    {
        Response.Write(",");
        if (indentLevel >= 0)
        {
            Response.WriteLine("");
        }
        else if (!isLast)
        {
            Response.Write(" ");
        }
    }
    GenerateIndent(indentLevel);
    Response.Write(ParameterPrefix);
    Response.Write(column.Name);
}

public void GenerateVariables(List<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateVariable(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp);
    }
}

public void GenerateVariables(IList<ColumnSchema> columns, int indentLevel, bool includeTimeStamp)
{
    foreach(var column in columns.AsIndexedEnumerable())
    {
        GenerateVariable(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp);
    }
}

public bool ColumnIsTimestamp(DataObjectBase column)
{
    if (column.NativeType.ToLower() == "timestamp" || column.NativeType.ToLower() == "rowversion")
        return true;

    return false;
}

#endregion

#region Events

protected override void OnPostRender(string result)
{
    if (AutoExecuteStoredProcedures)
    {
        // execute the output on the same database as the source table.
        CodeSmith.BaseTemplates.ScriptResult scriptResult = CodeSmith.BaseTemplates.ScriptUtility.ExecuteScript(this.SourceTable.Database.ConnectionString, result, new System.Data.SqlClient.SqlInfoMessageEventHandler(cn_InfoMessage));
        Trace.WriteLine(scriptResult.ToString());
    }

    base.OnPostRender(result);
}

private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs ex)
{
    Trace.WriteLine(ex.Message);
}

#endregion

</script>