<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 Criteria" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

<%@ Property Name="UseDeferredDeletion" Type="System.Boolean" Default="False" Category="3. Business Project" Description="Changes how the Business Objects are deleted, defaults to immediate deletion" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CSLA 3.6.x CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
#Region "Using declarations"

Imports System
Imports System.Collections.Generic
Imports System.Data.SqlClient

Imports Csla

#End Region

Namespace <%= BusinessProjectName %>

    <Serializable()> _
	Public Partial Class <%= BusinessClassName %>
        Inherits CriteriaBase
	
        #Region "Private Read-Only Members"
        
        Private ReadOnly _bag As New Dictionary(Of String, Object)()
        
        #End Region
        
        #Region "Constructors"

        Public Sub New()
            MyBase.New(GetType(<%= ChildBusinessClassName %>))
        End Sub
        
        Public Sub New(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>) 
            MyBase.New(GetType(<%= ChildBusinessClassName %>))
            
<% For Each member As Member In Entity.PrimaryKey.KeyMembers %>
            <%= member.PropertyName %> = <%= member.VariableName %>
<% Next %>
        End Sub

<% If (Entity.HasRowVersionMember) Then %>
        Public <%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>, <%= Entity.RowVersionMember.SystemType %> timestamp) : this(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>)
        {
			Timestamp = timestamp
        }
<% End If %>
        
        #End Region
        
		#Region "Public Properties"
        
        #Region "Read-Write"
<% If(Entity.HasRowVersionMember) %>

		''' <summary>
        ''' Used for optimistic concurrency.
        ''' </summary>
        Public Property Timestamp() As <%= Entity.RowVersionMember.SystemType %>
            Get
                Return GetValue(Of <%= Entity.RowVersionMember.SystemType %>)("<%= Entity.RowVersionMember.ColumnName %>")
            End Get
            
            Set
                _bag("<%= Entity.RowVersionMember.ColumnName %>") = value
            End Set
		End Property
<% End If %>		
<% For Each member As MemberBase In Entity.GetUniqueSearchCriteriaMembers() %>
		
        Public Property <%= member.Entity.ResolveCriteriaPropertyName( member.ColumnName, true ) %>() As <%= member.SystemType %>
            Get
                Return GetValue(Of <%= member.SystemType %>)("<%= member.ColumnName %>")
            End Get
            Set
                _bag("<%= member.ColumnName %>") = value
            End Set
		End Property
<% Next %>

        #End Region
        
        #Region "Read-Only"
        
        ''' <summary>
        ''' Returns a list of all the modified properties and values.
        ''' </summary>
        Public ReadOnly Property StateBag() As Dictionary(Of String, Object)
            Get
                Return _bag
            End Get
        End Property

        #End Region

        #End Region
        
        #Region "Private Methods"
        
        Private Function GetValue(Of T)(name As String) As T
            Dim value As T
            If _bag.TryGetValue(name, value) Then
                Return DirectCast(value, T)
            End If
        
            Return Nothing
        End Function
        
        #End Region

	End Class
    
End Namespace