<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 Criteria" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

<%@ Property Name="UseDeferredDeletion" Type="System.Boolean" Default="False" Category="3. Business Project" Description="Changes how the Business Objects are deleted, defaults to immediate deletion" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CSLA 3.6.x CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.cs'.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http:'code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
#region using declarations

using System
using System.Collections.Generic
using System.Data.SqlClient

using Csla

#endregion

namespace <%= BusinessProjectName %>
{
	[Serializable]
	Public Partial Class <%= BusinessClassName %> : CriteriaBase
	{
        #region Private Read-Only Members
        
        Private readonly Dictionary<string, object> _bag = new Dictionary<string, object>()
        
        #endregion
        
        #region Constructors

        Public <%= BusinessClassName %>() : base(typeof(<%= ChildBusinessClassName %>)){}

        Public <%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>) : base(typeof(<%= ChildBusinessClassName %>))
        {
<%  foreach(Member member in Entity.PrimaryKey.KeyMembers){ %>
            <%= member.PropertyName %> = <%= member.VariableName %>
<% } %>
        }

<% if(Entity.HasRowVersionMember) { %>
        Public <%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>, <%= Entity.RowVersionMember.SystemType %> timestamp) : this(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>)
        {
			Timestamp = timestamp
        }
<% } %>
        
        #endregion
        
		#region Public Properties
        
        #region Read-Write
<% if(Entity.HasRowVersionMember) { %>

		''' <summary>
        ''' Used for optimistic concurrency.
        ''' </summary>
        Public <%= Entity.RowVersionMember.SystemType %> Timestamp
		{
            Get { Return GetValue< <%= Entity.RowVersionMember.SystemType %> >( "<%= Entity.RowVersionMember.ColumnName %>") }				
			set { _bag[ "<%= Entity.RowVersionMember.ColumnName %>"] = value }
		}
<% } %>		
<%  foreach(MemberBase member in Entity.GetUniqueSearchCriteriaMembers()){ %>
		
        Public <%= member.SystemType %> <%= member.Entity.ResolveCriteriaPropertyName( member.ColumnName, true ) %>
		{
            Get { Return GetValue< <%= member.SystemType %> >("<%= member.ColumnName %>") }				
			set { _bag["<%= member.ColumnName %>"] = value }
		}
<% } %>

        #endregion
        
        #region Read-Only
        
        ''' <summary>
        ''' Returns a list of all the modified properties and values.
        ''' </summary>
        Public Dictionary<string, object> StateBag
	    {
	        Get
	        {
	            Return _bag
	        }
	    }
        
        #endregion

        #endregion
        
        #region Private Methods
        
        Private T GetValue<T>(string name)
        {
            object value
            if (_bag.TryGetValue(name, out value))
                Return (T) value
        
            Return default(T)
        }
        
        #endregion
	}
}