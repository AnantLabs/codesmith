<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.7.X DynamicRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>

'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.7.X CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
<% If Entity.HasByteArrayColumn() Then %>
Imports System.Data
Imports System.IO
<% End If %>

Imports Csla
Imports Csla.Data

Imports <%= DataProjectName %>

Namespace <%= BusinessProjectName %>

	Public Partial Class <%= BusinessClassName %>
    
		#Region "Data Access"

<% If (DataAccessImplementation = DataAccessMethod.None) Then %>
		<RunLocal()> _
		Protected Sub DataPortal_Create()
			' TODO: load default values
			' omit this override if you have no defaults to set
			MyBase.DataPortal.Create()
		End Sub
		
		Private Sub Fetch(object rootData)
			' TODO: load values from rootData
			MarkOld()
		End Sub
		
        Private Shadows Sub DataPortal_Fetch(ByVal criteria As <%= BusinessClassName %>Criteria)     
			' TODO: load values
		End Sub
		
		<Transactional(TransactionalTypes.TransactionScope)> _
		Protected Overrides Sub DataPortal_Insert()
			' TODO: insert values
		End Sub
		
		<Transactional(TransactionalTypes.TransactionScope)> _
		Protected Overrides Sub DataPortal_Update()		
			' TODO: update values
		End Sub
		
		<Transactional(TransactionalTypes.TransactionScope)> _
		Protected Overrides Sub DataPortal_DeleteSelf()
            ' TODO: delete values
		End Sub
<% Else If (DataAccessImplementation = DataAccessMethod.ParameterizedSQL) Then %>
		<RunLocal()> _
		Protected Overrides Sub DataPortal_Create()
			'MyBase.DataPortal_Create()
<% If (Entity.PrimaryKey.KeyMember.SystemType = "Guid") Then
        If (UseMemberVariables) Then %>
			<%= Entity.PrimaryKey.KeyMember.PrivateMemberVariableName %> = Guid.NewGuid()
<%      Else %>
			LoadProperty(Of <%= Entity.PrimaryKey.KeyMember.SystemType %>)(<%= Entity.PrimaryKey.KeyMember.PrivateMemberVariableName %>Property, Guid.NewGuid())
<%      End If
   End If%>

			ValidationRules.CheckRules()
		End Sub
		
		Private Shadows Sub DataPortal_Fetch(ByVal criteria As <%= BusinessClassName %>Criteria)
		    Using reader As SafeDataReader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Fetch(criteria.StateBag)
	            If reader.Read() Then
		            Fetch(reader)
	            End If
            End Using
        End Sub
		
        Private Sub Fetch(ByVal reader As SafeDataReader)
<% If Entity.HasRowVersionMember Then %>
			_timestamp = GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
			
<% End If %>
<% for each [member] as Member in Entity.MembersNoRowVersionIncludePrimaryKey 
	If UseMemberVariables Then %>
			<%= [member].PrivateMemberVariableName %> = <%If not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>GetBytes(reader)<% End If %>
<%  else  %>
			LoadProperty(<%= [member].PrivateMemberVariableName %>Property, <%If not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>"))<% else %>GetBytes(reader," <%= [member].ColumnName %>"))<% End If %>
<% End If 
Next %>

<%-- Many-To-One --%>
<% for each association As AssociationMember in Entity.ManyToOne
	If UseMemberVariables Then  %>
            <%= association.Entity.ResolveCriteriaPrivateMemberVariableName(association.ColumnName) %> = <%If Not association.HasByteArrayColumn() Then %>reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>")<% else %>GetBytes(reader)<% End If %>
<%  else  %>
			LoadProperty(<%= association.Entity.ResolveCriteriaPrivateMemberVariableName(association.ColumnName) %>Property, <%If Not association.HasByteArrayColumn() Then %>reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>"))<% else %>GetBytes(reader," <%= association.ColumnName %>"))<% End If %>
<% End If
 Next  %>
<%-- One-To-Many & Many-To-Many --%>
<% for each association2 As AssociationMember in Entity.ToManyUnion
	If Not UseLazyLoading Then %>

<% If (UseMemberVariables) Then %>
			<%= association2.PrivateMemberVariableName %> = New <%= association2.ClassName %>List.NewList()
<%  else  %>
			LoadProperty(<%= association2.PrivateMemberVariableName %>Property, <%= association2.ClassName %>List.NewList())
<% End If
	End If
Next %> 

            MarkOld()
        End Sub
		
		<Transactional(TransactionalTypes.TransactionScope)> _
		Protected Overrides Sub DataPortal_Insert()
			Using reader As SafeDataReader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Insert(<% If(UseMemberVariables) Then %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertPrivateMemberVariableParameters(Entity.MembersForeignKey) %><% else %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertReadPropertyParametersVariables(Entity.MembersForeignKey) %><% End If %>)
				If reader.Read() Then
<% If (Entity.HasRowVersionMember) Then %>
					_timestamp = GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
<% End If %>

<% If (Entity.PrimaryKey.IsIdentity) Then %>
<% for each [member] As Member in Entity.PrimaryKey.KeyMembers
	If(UseMemberVariables) Then %>
					<%= [member].PrivateMemberVariableName %> = <%If Not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>GetBytes(reader)<% End If %>
<% else %>
					LoadProperty(<%= [member].PrivateMemberVariableName %>Property, <% If NOT [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>"))<% else %>GetBytes(reader," <%= [member].ColumnName %>"))<% End If %>
<%  End If
   Next %>
<% End If %>
				End If
			End Using
            
<% If (Entity.ToManyUnion.Count > 0 OrElse Entity.ManyToOne.Count > 0)Then %>
            FieldManager.UpdateChildren(Me)
<% End If %>
		End Sub
		
		<Transactional(TransactionalTypes.TransactionScope)> _
		Protected Overrides Sub DataPortal_Update()
<% If(Entity.Table.ForeignKeyColumns.Count = 0) Then %>
            Using reader As SafeDataReader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Update(<% If (UseMemberVariables) Then %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildPrivateMemberVariableParameters() %><% else %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildReadPropertyParametersVariables() %><% End If %><% If Entity.HasRowVersionMember then %>, _timestamp<% End If %>)
<% else %>
            Using reader As SafeDataReader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Update(<% If (UseMemberVariables) Then %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildPrivateMemberVariableParameters(Entity.MembersForeignKey) %><% else %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildReadPropertyParametersVariables(Entity.MembersForeignKey) %><% End If %><% If Entity.HasRowVersionMember Then %>, _timestamp<% End If %>)
<% End If %>     
<% If (Entity.HasRowVersionMember) Then %>	
				If reader.Read() then
					_timestamp = GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
				End If
<% End If %>
            End Using
            
<% If (Entity.ToManyUnion.Count > 0 OrElse Entity.ManyToOne.Count > 0) Then %>
            FieldManager.UpdateChildren(Me)
<% End If %>
		End Sub
		
		<Transactional(TransactionalTypes.TransactionScope)> _
		Protected Overrides Sub DataPortal_DeleteSelf()
            DataPortal_Delete(new <%= BusinessClassName %>Criteria(<% If (UseMemberVariables) Then %><%= Entity.PrimaryKey.KeyMembers.BuildPrivateMemberVariableParameters() %><% else %><%= Entity.PrimaryKey.KeyMembers.BuildPropertyVariableArguments() %><% End If %><% If Entity.HasRowVersionMember Then %>, _timestamp<% End If %>))
        End Sub
		
		<Transactional(TransactionalTypes.TransactionScope)> _
		Protected Overrides Sub DataPortal_Delete(ByVal criteria As Object)
			Dim theCriteria As <%= BusinessClassName %>Criteria = DirectCast(criteria, <%= BusinessClassName %>Criteria)
            If Not theCriteria Is Nothing Then
				Using reader As SafeDataReader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Delete(theCriteria.StateBag)
				End Using
			End If
        End Sub

        #End Region
<% If (Entity.HasByteArrayColumn()) Then %>

		#Region "Helper Methods"

        ''' <summary>
        ''' Returns the Bytes stored in a binary column.
        ''' </summary>
        ''' <param name="reader">The reader.</param>
        ''' <param name="columnName">The column name.</param>
        ''' <Returns>Bytes Stored in a column.</Returns>
        Friend Shared Function GetBytes(reader As SafeDataReader, columnName As String) As Byte()
            Dim buffer as Var = new byte[1024]
            Dim fieldOffset as Long = 0
            
            using (var stream = new MemoryStream())
                Dim bytesRead as Long
            
                Do While (bytesRead = reader.GetBytes(columnName, fieldOffset, buffer, 0, buffer.Length)) > 0
                    Dim actualRead as Var = new byte[bytesRead]
                    Buffer.BlockCopy(buffer, 0, actualRead, 0, (int)bytesRead)
                    stream.Write(actualRead, 0, actualRead.Length)
                    fieldOffset += bytesRead
                Loop

                Return stream.ToArray()
            End Using
        End Function
        
        #End Region
        
<%  End If
 End If %>
    End Class
    
End Namespace