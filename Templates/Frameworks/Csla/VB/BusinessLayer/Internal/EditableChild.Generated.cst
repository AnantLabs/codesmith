<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.7.X EditableRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.7.X CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Validation

<Serializable()> _
Public Partial Class <%= BusinessClassName %> 
    Inherits BusinessBase(Of <%= BusinessClassName %>)

    #Region "Contructor(s)"

	Private Sub New()
    	' require use of factory method 
End Sub
    
    Friend Sub New(Byval reader As SafeDataReader)
<% If(DataAccessImplementation = DataAccessMethod.ParameterizedSQL) Then %>
        Fetch(reader)
<% End If %>
	End Sub
    
	#End Region
    
	#Region "Validation Rules"
	
	Protected Overrides Sub AddBusinessRules()
	
        If AddBusinessValidationRules() Then Exit Sub
       
<% 	For Each member As Member in Entity.MembersNoRowVersion %>
<% If (member.SystemType.ToLower = "string" ) Then  %>
<% If Not member.IsNullable Then %>
		ValidationRules.AddRule(AddressOf CommonRules.StringRequired, "<%= member.PropertyName %>")
<%  End If %>
		ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs("<%= member.PropertyName %>", <%= member.Size %>))
<%  End If 
Next %>
	End Sub
	
	#End Region
    
    #Region "Business Methods"

<% If(Entity.HasRowVersionMember) Then %>
	''' <summary>
    ''' Used for optimistic concurrency.
    ''' </summary>
    <NotUndoable()> _
    Private <%= Entity.RowVersionMember.SystemType %> _timestamp = New <%= Entity.RowVersionMember.SystemType(True) %>
<% End If %>

<%  For Each member As Member in Entity.MembersNoRowVersionIncludePrimaryKey
If UseMemberVariables Then %>

	Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>)
	Private <%= member.PrivateMemberVariableName %> As <%= member.SystemType %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue<%= member.BuildDataObjectField() %>
	Public <% If member.IsReadOnly Then %>ReadOnly <% End If %>Property <%= member.PropertyName %>() As <%= member.SystemType %>
	
		Get 
			Return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>) 
		End Get
<% If Not member.IsReadOnly Then %>
        Set (value As <%= member.SystemType %>)
            OnPropertyChanging("<%= member.PropertyName %>")
            SetProperty(<%= member.PrivateMemberVariableName %>Property, ByRef <%= member.PrivateMemberVariableName %>, value)
            OnPropertyChanged("<%= member.PropertyName %>")
		End Set
<% End If %>
	
	
<% else %>
	
	Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>)<%= member.BuildDataObjectField() %>
	Public <% If member.IsReadOnly Then %>ReadOnly <% End If %>Property <%= member.PropertyName %>() As <%= member.SystemType %>
		Get 
			Return GetProperty(<%= member.PrivateMemberVariableName %>Property)
		End Get
<% 
If Not member.IsReadOnly Then %>
        Set (ByVal value As <%= member.SystemType %>)
            OnPropertyChanging("<%= member.PropertyName %>")
            SetProperty(<%= member.PrivateMemberVariableName %>Property, value)
            OnPropertyChanged("<%= member.PropertyName %>")
        End Set
<% End If 
End If %>
	End Property
	
<% Next %>
<%-- Foreign Keys --%>
<% For Each member As AssociationMember In Entity.MembersForeignKey
	Dim columnName As String = member.ResolveManyToOneNameConflict(Entity) 
	If (UseMemberVariables) Then %>
	Private Shared <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property As PropertyInfo(Of <%= member.SystemType %> ) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>)
	Private <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %> As <%= member.BaseSystemType %> = <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property.DefaultValue<%= member.BuildDataObjectField() %>
	Public Property <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>() As <%= member.BaseSystemType %>
		Get 
			Return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>) 
		End Get				
        Set (ByVal value As <%= member.BaseSystemType %>)          
            OnPropertyChanging("<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>")
            SetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, ByRef <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>, value)
            OnPropertyChanged("<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>")
        End Set
	End Property
	
<% else %>
    Private Shared <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property As PropertyInfo(Of <%= member.BaseSystemType %>) = RegisterProperty(Of <%= member.BaseSystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>)<%= member.BuildDataObjectField() %>
	Public Property <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>() As <%= member.BaseSystemType %> 
		Get  
			Return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property)				
		End Get
        Set (ByVal value As <%= member.BaseSystemType %>)
            OnPropertyChanging("<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>")
            SetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, value) 
            OnPropertyChanged("<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>")
        End Set
	End Property
	
<% End If
Next %>
<%-- One-To-Zero-Or-One --%>
<% For Each association As AssociationMember in Entity.OneToZeroOrOne 
If UseMemberVariables then %>
	Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= association.ClassName %>) = RegisterProperty(Of <%= association.ClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, <% If(UseLazyLoading)  %>Csla.RelationshipTypes.LazyLoad<%  else  %>Csla.RelationshipTypes.Child<% End If %>)
	Private <%= association.PrivateMemberVariableName %> As <%= association.ClassName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
	Public ReadOnly Property <%= association.PropertyName %>() As <%= association.ClassName %>
		Get
<% If UseLazyLoading Then %>
            If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>))
            End If
            
<% End If %> 
            Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
        End Get
	End Property

<% else %>
	Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= association.ClassName %>) = RegisterProperty(Of <%= association.ClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, <% If(UseLazyLoading)  %>Csla.RelationshipTypes.LazyLoad<%  else  %>Csla.RelationshipTypes.Child<% End If %>)
	Public ReadOnly Property <%= association.PropertyName %>() As <%= association.ClassName %>
		Get
<% If UseLazyLoading Then %>
            If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>))
            End If
            
<% End If %>  
               Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
        End Get
    End Property

<% End If
Next %>
<%-- Many-To-One --%>
<% For Each association  As AssociationMember in Entity.ManyToOne 
If UseMemberVariables Then %>
	Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= association.ClassName %>) = RegisterProperty(Of <%= association.ClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, <% If(UseLazyLoading)  %>Csla.RelationshipTypes.LazyLoad<%  else  %>Csla.RelationshipTypes.Child<% End If %>)
	Private <%= association.PrivateMemberVariableName %> As <%= association.ClassName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
	Public ReadOnly Property <%= association.PropertyName %>() As <%= association.ClassName %>
		Get
<% If UseLazyLoading Then  %>
            If Not(FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>))
            End If
            
<% End If %> 
            Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
        End Get
    End Property
    
<%  else  %>
	Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= association.ClassName %>) = RegisterProperty(Of <%= association.ClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, <% If(UseLazyLoading)  %>Csla.RelationshipTypes.LazyLoad<%  else  %>Csla.RelationshipTypes.Child<% End If %>)
	Public ReadOnly Property <%= association.PropertyName %>() As <%= association.ClassName %>
		Get
        
<% If UseLazyLoading Then %>
            If Not(FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>))
            End If
            
<% End If %>  
            Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
        End Get
    End Property
    
<% End If
Next  %>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As AssociationMember in Entity.ToManyUnion 
If (UseMemberVariables) Then %>
    Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= association.ClassName %>List) = RegisterProperty(Of <%= association.ClassName %>List)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, <% If(UseLazyLoading)  %>Csla.RelationshipTypes.LazyLoad<%  else  %>Csla.RelationshipTypes.Child<% End If %>)
	Private <%= association.PrivateMemberVariableName %> As <%= association.ClassName %>List  = <%= association.PrivateMemberVariableName %>Property.DefaultValue
	Public ReadOnly Property <%= association.PropertyName %>() As <%= association.ClassName %>List 
		Get
<% If(UseLazyLoading) Then %>
            If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property)) Then
<% If Not string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name)) Then %>
                SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% else %>
                SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% End If %>
            End If
<% End If%> 

            Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
        End Get
    End Property

<% else %>
	Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= association.ClassName %>List) = RegisterProperty(Of <%= association.ClassName %>List)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, <% If(UseLazyLoading)  %>Csla.RelationshipTypes.LazyLoad<%  else  %>Csla.RelationshipTypes.Child<% End If %>)
	Public ReadOnly Property <%= association.PropertyName %>() As <%= association.ClassName %>List 
		Get
<% If(UseLazyLoading) Then %>
            If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property)) Then
<% If Not string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName))  %>
                SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% else %>
                SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))
<% End If %>
            End If
<% End If%>   
            Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
        End Get
    End Property
    
<% End If
Next %>
	#End Region
			
	#Region "Factory Methods"
	
	Friend Shared Function New<%= BusinessClassName %>() As <%= BusinessClassName %> 
		Return DataPortal.Create(Of <%= BusinessClassName %>)()
	End Function
	
	Friend Shared Function Get<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>) As <%= BusinessClassName %> 		
		Return DataPortal.Fetch(Of <%= BusinessClassName %>)(New <%= BusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
	End Function
<%-- One-To-Zero-Or-One --%>
<%If (Entity.HasOneToZeroOrZeroMember AndAlso Entity.PrimaryKey.KeyMembers.Count > 1)Then %>

    Friend Shared Function Get<%= BusinessClassName %>(<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroParametersVariable() %>) As <%= BusinessClassName %> 
	    Dim criteria As New <%= BusinessClassName %>Criteria()
        criteria.<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroObjectInitializer() %>
        
        Return DataPortal.Fetch(Of <%= BusinessClassName %>)(criteria)
    End Function
<% End If%>
	
	#End Region
	
<% If(Entity.PrimaryKey.IsCompositeKey) Then %>
	#Region "Protected Overriden Method(s)"
	
	' NOTE: This is needed for Composite Keys. 
    Private ReadOnly _guidID As Guid = Guid.NewGuid()
    Protected Overrides Function GetIdValue() As Object
        Return _guidID
    End Function
    
	#End Region
<% End If %>

End Class
