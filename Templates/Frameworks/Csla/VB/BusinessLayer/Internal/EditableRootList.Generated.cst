<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 EditableRootList" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CSLA 3.6.x CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data

Namespace <%= BusinessProjectName %>

	<Serializable()> _
	Public Partial Class <%= BusinessClassName %> 
        Inherits BusinessListBase(Of <%= BusinessClassName %>, Of <%= ChildBusinessClassName %>)
	
        #Region "Contructor(s)"
        
        Private <%= BusinessClassName %>()
		{ 
			AllowNew = true
            MarkAsChild()
		}
        
        #End Region
        
		#Region "Factory Methods"
		
		Public Shared Function <%= BusinessClassName %> NewList()
		{
			Return DataPortal.Create< <%= BusinessClassName %> >()
		}
		
        Public Shared Function <%= BusinessClassName %> Get<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
			Return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
		}
        
        Public Shared Function <%= BusinessClassName %> GetAll()
        {
            Return DataPortal.Fetch< <%= BusinessClassName %> >(new <%= ChildBusinessClassName %>Criteria())
        }
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As AssociationMember In Entity.ManyToOne
    For Each sc As SearchCriteria In association.ListSearchCriteria %>
        
        Public Shared Function <%= BusinessClassName %> <%= sc.GetListMethodName(association) %>(<%= association.BuildParametersVariable() %>)
		{
            Return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria { <%= association.BuildObjectInitializer() %> })
        }
<%  Next
Next %>
		
		#End Region
		
		#Region Business Methods
		
		protected override object AddNewCore()
		{
			<%= ChildBusinessClassName %> item = <%= BusinessProjectName %>.<%= ChildBusinessClassName %>.New<%= ChildBusinessClassName %>()
			Add(item)
			Return item
		}
		
		#End Region
    
    End Class
    
End Namespace