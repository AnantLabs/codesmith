<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 SwitchableObject" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports Csla 3.6.x CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
#Region using declarations

Imports System
<% If (Entity.HasByteArrayColumn()) { %>
Imports System.Data
Imports System.IO
<% } %>

Imports Csla
Imports Csla.Data

Imports <%= DataProjectName %>

#End Region

Namespace <%= BusinessProjectName %>
{
	Public Partial Class <%= BusinessClassName %>
	{
		#Region Root Data Access
		
<% If (DataAccessImplementation == DataAccessMethod.None) { %>		
		[RunLocal]
		Protected Overrides Sub DataPortal_Create()
		{
			' TODO: load default values
			' omit this override if you have no defaults to set
			base.DataPortal.Create()
		}
		
		Private Sub DataPortal_Fetch(<%= BusinessClassName %>Criteria criteria)
		{
			' TODO: load values
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		Protected Overloads Overrides Sub DataPortal_Insert()
		{
			' TODO: insert values
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		Protected Overrides Sub DataPortal_Update()
		{
			' TODO: update values
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		Protected Overrides Sub DataPortal_DeleteSelf()
		{
            ' TODO: delete values
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		Protected Overrides Sub DataPortal_Delete(<%= BusinessClassName %>Criteria criteria)  
		{
			' TODO: delete values
		}
<% } else If (DataAccessImplementation == DataAccessMethod.ParameterizedSQL) { %>
		[RunLocal]
		Protected Overrides Sub DataPortal_Create()
		{
			'base.DataPortal_Create()

<% If (Entity.PrimaryKey.KeyMember.SystemType == "Guid") { If (UseMemberVariables) { %>
			<%= Entity.PrimaryKey.KeyMember.PrivateMemberVariableName %> = Guid.NewGuid()
<% } else { %>
			LoadProperty< <%= Entity.PrimaryKey.KeyMember.SystemType %> >(<%= Entity.PrimaryKey.KeyMember.PrivateMemberVariableName %>Property, Guid.NewGuid())
<% } } %>
			ValidationRules.CheckRules()
		}
		
		Private Sub DataPortal_Fetch(<%= BusinessClassName %>Criteria criteria)
		{
            using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Fetch(criteria.StateBag)) 
			{
				If (reader.Read())
				{	
					Fetch(reader)
				}
			}
        }
		
		[Transactional(TransactionalTypes.TransactionScope)]
		Protected Overloads Overrides Sub DataPortal_Insert()
		{
			using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Insert(<% If (UseMemberVariables) { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertPrivateMemberVariableParameters(Entity.MembersForeignKey) %><% } else { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertReadPropertyParametersVariables(Entity.MembersForeignKey) %><% } %>))
			{
				If (reader.Read())
				{
<% If (Entity.HasRowVersionMember) { %>
					_timestamp = GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
<% } %>

<% If (Entity.PrimaryKey.IsIdentity) { %>
<% foreach(Member member in Entity.PrimaryKey.KeyMembers) { If (UseMemberVariables) { %>
					<%= member.PrivateMemberVariableName %> = <%If Not (member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>")<% } else { %>GetBytes(reader)<% } %>
<% } else { %>
					LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%If Not (member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>"))<% } else { %>GetBytes(reader," <%= member.ColumnName %>"))<% } %>
<% } } %>
<% } %>
				}
			}
            
<% If (Entity.ToManyUnion.Count > 0 || Entity.ManyToOne.Count > 0){ %>
            FieldManager.UpdateChildren(this)
<% } %>
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		Protected Overrides Sub DataPortal_Update()
		{
<% If (Entity.Table.ForeignKeyColumns.Count == 0) { %>
            using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Update(<% If (UseMemberVariables) { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildPrivateMemberVariableParameters() %><% } else { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildReadPropertyParametersVariables() %><% } %><% If (Entity.HasRowVersionMember) { %>, _timestamp<% } %>))
<% } else { %>
            using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Update(<% If (UseMemberVariables) { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildPrivateMemberVariableParameters(Entity.MembersForeignKey) %><% } else { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildReadPropertyParametersVariables(Entity.MembersForeignKey) %><% } %><% If (Entity.HasRowVersionMember) { %>, _timestamp<% } %>))
<% } %>
            {
<% If (Entity.HasRowVersionMember) { %>	
				If (reader.Read())
				{
					_timestamp = GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
				}
<% } %>
			}
            
<% If (Entity.ToManyUnion.Count > 0 || Entity.ManyToOne.Count > 0){ %>
            FieldManager.UpdateChildren(this)
<% } %>
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		Protected Overrides Sub DataPortal_DeleteSelf()
		{
            DataPortal_Delete(new <%= BusinessClassName %>Criteria(<% If (UseMemberVariables) { %><%= Entity.PrimaryKey.KeyMembers.BuildPrivateMemberVariableParameters() %><% } else { %><%= Entity.PrimaryKey.KeyMembers.BuildPropertyVariableArguments() %><% } %>))
        }
		
		[Transactional(TransactionalTypes.TransactionScope)]
		Protected Overrides Sub DataPortal_Delete(object criteria)
		{
			<%= BusinessClassName %>Criteria theCriteria = criteria as <%= BusinessClassName %>Criteria
            If (theCriteria != null)
            {
				using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Delete(theCriteria.StateBag)) 
				{
				}
			}
        }
<% } %>

		#End Region
		
		#Region Child Data Access

<% If (DataAccessImplementation == DataAccessMethod.None) { %>	
		Protected Overrides Sub Child_Create()
		{
			' TODO: load default values
			' omit this override if you have no defaults to set
			base.Child_Create()
		}
	
		Private Sub Child_Fetch(object childData)
		{
			' TODO: load values
		}
	
		Private Sub Child_Insert(object parent)
		{
			' TODO: insert values
		}
	
		Private Sub Child_Update(object parent)
		{
			' TODO: update values
		}
	
		Private Sub Child_DeleteSelf(object parent)
		{
			' TODO: delete values
		}
<% } else { %>
		Protected Overrides Sub Child_Create()
		{
			' TODO: load default values
			' omit this override if you have no defaults to set
		    'base.Child_Create()
		}
	
		Private Sub Child_Fetch(ByVal reader As SafeDataReader)
		{
			Fetch(reader)
            
            MarkAsChild()
		}
		
		Private Sub Child_Insert()
		{
			using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Insert(<% If (UseMemberVariables) { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertPrivateMemberVariableParameters(Entity.MembersForeignKey) %><% } else { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertReadPropertyParametersVariables(Entity.MembersForeignKey) %><% } %>))
			{
				If (reader.Read())
				{
<% If (Entity.HasRowVersionMember) { %>
					_timestamp = GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
<% } %>

<% If (Entity.PrimaryKey.IsIdentity) { %>
<% foreach(Member member in Entity.PrimaryKey.KeyMembers) { If (UseMemberVariables) { %>
					<%= member.PrivateMemberVariableName %> = <%If Not (member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>")<% } else { %>GetBytes(reader)<% } %>
<% } else { %>
					LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%If Not (member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>"))<% } else { %>GetBytes(reader," <%= member.ColumnName %>"))<% } %>
<% } } %>
<% } %>
				}
			}
		}
		
		Private Sub Child_Update()
		{
<% If (Entity.Table.ForeignKeyColumns.Count == 0) { %>
            using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Update(<% If (UseMemberVariables) { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildPrivateMemberVariableParameters() %><% } else { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildReadPropertyParametersVariables() %><% } %><% If (Entity.HasRowVersionMember) { %>, _timestamp<% } %>))
<% } else { %>
            using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Update(<% If (UseMemberVariables) { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildPrivateMemberVariableParameters(Entity.MembersForeignKey) %><% } else { %><%= Entity.MembersNoRowVersionIncludePrimaryKey.BuildReadPropertyParametersVariables(Entity.MembersForeignKey) %><% } %><% If (Entity.HasRowVersionMember) { %>, _timestamp<% } %>))
<% } %>     
            {
<% If (Entity.HasRowVersionMember) { %>	
				If (reader.Read())
				{
					_timestamp = GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
				}
<% } %>
			}
		}
		
		Private Sub Child_DeleteSelf()
		{
			DataPortal_Delete(new <%= BusinessClassName %>Criteria(<% If (UseMemberVariables) { %><%= Entity.PrimaryKey.KeyMembers.BuildPrivateMemberVariableParameters() %><% } else { %><%= Entity.PrimaryKey.KeyMembers.BuildPropertyVariableArguments() %><% } %><% If (Entity.HasRowVersionMember) { %>, _timestamp<% } %>))
		}
<% } %>

		#End Region

<% If (DataAccessImplementation == DataAccessMethod.ParameterizedSQL) { %>
        Private Sub Fetch(ByVal reader As SafeDataReader)
		{
<% If (Entity.HasRowVersionMember) { %>
			_timestamp = GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")

<% } %>
<% foreach(Member member in Entity.MembersNoRowVersionIncludePrimaryKey) { If (UseMemberVariables) { %>
			<%= member.PrivateMemberVariableName %> = <%If Not (member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>")<% } else { %>GetBytes(reader)<% } %>
<% } else { %>
			LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%If Not (member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>"))<% } else { %>GetBytes(reader," <%= member.ColumnName %>"))<% } %>
<% } } %>

<%-- Many-To-One --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { If (UseMemberVariables){  %>
            <%= association.Entity.ResolveCriteriaPrivateMemberVariableName(association.ColumnName) %> = <%If Not (association.HasByteArrayColumn()) { %>reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>")<% } else { %>GetBytes(reader)<% } %>
<% } else { %>
			LoadProperty(<%= association.Entity.ResolveCriteriaPrivateMemberVariableName(association.ColumnName) %>Property, <%If Not (association.HasByteArrayColumn()) { %>reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>"))<% } else { %>GetBytes(reader," <%= association.ColumnName %>"))<% } %>
<% } }  %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association2 in Entity.ToManyUnion) { If Not (UseLazyLoading){ %>

<% If (UseMemberVariables){ %>
			<%= association2.PrivateMemberVariableName %> = new <%= association2.ClassName %>List.NewList()
<% } else { %>
			LoadProperty(<%= association2.PrivateMemberVariableName %>Property, <%= association2.ClassName %>List.NewList())
<% } } } %> 

            MarkOld()
        }

<% } %>
<% If (Entity.HasByteArrayColumn()) { %>		
		#Region Helper Methods

        ''' <summary>
        ''' Returns the Bytes stored in a binary column.
        ''' </summary>
        ''' <param name="reader">The reader.</param>
        ''' <param name="columnName">The column name.</param>
        ''' <Returns>Bytes Stored in a column.</Returns>
        Friend Shared Function GetBytes(reader As SafeDataReader, columnName As String) As Byte()
        {
            var buffer = new byte[1024]
            long fieldOffset = 0
            
            using (var stream = new MemoryStream())
            {
                long bytesRead
            
                while ((bytesRead = reader.GetBytes(columnName, fieldOffset, buffer, 0, buffer.Length)) > 0)
                {
                    var actualRead = new byte[bytesRead]
                    Buffer.BlockCopy(buffer, 0, actualRead, 0, (int)bytesRead)
                    stream.Write(actualRead, 0, actualRead.Length)
                    fieldOffset += bytesRead
                }

                Return stream.ToArray()
            }
        }
		
		#End Region	
<% } %>
	}
}