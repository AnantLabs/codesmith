<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.DataAccessCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//	   Changes to this template will not be lost.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% RegisterReferences(); %>
#region using declarations

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

using Csla;
using Csla.Data;

#endregion

namespace <%= DataProjectName %>
{
	[Serializable]
	public class <%= DataClassName %> : BusinessBase< <%= DataClassName %> >
	{
		#region Instance
		
		public static <%= DataClassName %> Instance
        {
            get { return Nested.Current; }
        }
		
		private class Nested
        {
            static Nested()
            {
                Current = new <%= DataClassName %>();
            }

            /// <summary>
            /// Current singleton instance.
            /// </summary>
            internal readonly static <%= DataClassName %> Current;
        }
		
		#endregion
		
        #region Methods

        private string _connectionString = string.Empty;

        /// <summary>
        /// Returns the Connection String.
        /// </summary>
	    public virtual string ConnectionString
	    {
	        get
	        {
                if(string.IsNullOrEmpty(_connectionString))
                {
                    _connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["PetShopConnectionString"].ConnectionString;
                }
                
                return _connectionString;
	        }    
	    }

        private SqlConnection _sqlConnection;
        
        /// <summary>
        /// Returns an opened SQLConnection.
        /// </summary>
        /// <returns>Returns an opened SQLConnection.</returns>
        public virtual SqlConnection GetSqlConnection()
        {
            if (_sqlConnection == null)
            {
                _sqlConnection = new SqlConnection(ConnectionString);
                _sqlConnection.Open();
            }

            return _sqlConnection;
        }
        
        /// <summary>
        /// Returns an array of SqlParameters
        /// </summary>
        public virtual SqlParameter[] SqlParameters(Dictionary<string, object> bag)
        {
            List<SqlParameter> parameters = new List<SqlParameter>(bag.Keys.Count);

            foreach (KeyValuePair<string, object> pair in bag)
            {
                parameters.Add(new SqlParameter(string.Format("@p_{0}", pair.Key), pair.Value));
            }

            return parameters.ToArray();
        }
        
        /// <summary>
        /// Returns a where clause for the current Criteria object.
        /// </summary>
        /// <returns>Returns a where clause for the current Criteria object.</returns>
        public virtual string BuildWhereStatement(Dictionary<string, object> bag)
        {
            if (bag.Count == 0)
                return string.Empty;
            
            string columnNames = string.Empty;

            foreach (string columnName in bag.Keys)
            {
                columnNames += string.Format("[{0}] = @p_{0} AND ", columnName);
            }

            return string.Format("WHERE {0}", columnNames.Remove(columnNames.Length - 5, 5));
        }

        #endregion
        
		#region Data Access
        
<% foreach(Entity entity in Entities) { %>
		#region <%= entity.ClassName %>
		
		#region Insert
		
		public virtual SafeDataReader <%= entity.ClassName %>Insert(<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertParametersVariables(entity.MembersForeignKey) %>)
		{
			const string commandText = "INSERT INTO [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] (<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertDataBaseColumns(entity.MembersForeignKey) %>) VALUES (<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertDataBaseParameters(entity.MembersForeignKey) %>)<%= entity.BuildInsertSelectStatement() %>";
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertCommandParameters(entity.MembersForeignKey) %>
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
		
		#endregion

		#region Update

<% if(entity.Table.ForeignKeyColumns.Count == 0) { %>
        public virtual SafeDataReader <%= entity.ClassName %>Update(<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildParametersVariables() %><% if(entity.HasRowVersionMember) { %>, <%= entity.RowVersionMember.SystemType %> timestamp<% } %>)
<% } else { %>
        public virtual SafeDataReader <%= entity.ClassName %>Update(<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildParametersVariables(entity.MembersForeignKey) %><% if(entity.HasRowVersionMember) { %>, <%= entity.RowVersionMember.SystemType %> timestamp<% } %>)
<% } %>
		{
<% if(entity.Table.ForeignKeyColumns.Count == 0) { %>
			const string commandText = "UPDATE [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] <%= entity.MembersNoKeysOrRowVersion.BuildSetStatements() %> <%= entity.PrimaryKey.KeyMembers.BuildWhereStatements() %><% if(entity.HasRowVersionMember) { %> AND [<%= entity.RowVersionMember.ColumnName %>] = @p_<%= entity.RowVersionMember.ColumnName %><% } %><%= entity.BuildUpdateSelectStatement() %>";
<% } else { %>
			const string commandText = "UPDATE [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] <%= entity.MembersNoRowVersion.BuildSetStatements() %> <%= entity.PrimaryKey.KeyMembers.BuildWhereStatements() %><% if(entity.HasRowVersionMember) { %> AND [<%= entity.RowVersionMember.ColumnName %>] = @p_<%= entity.RowVersionMember.ColumnName %><% } %><%= entity.BuildUpdateSelectStatement() %>";
<% } %>
            using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
<% if(entity.Table.ForeignKeyColumns.Count == 0) { %>
				<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildCommandParameters() %>
<% } else { %>
				<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildCommandParameters(entity.MembersForeignKey) %>
<% } %>
<% if(entity.HasRowVersionMember) { %>
				command.Parameters.AddWithValue("@p_<%= entity.RowVersionMember.ColumnName %>", timestamp);
<% } %>

				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#region Fetch
		
		public virtual SafeDataReader <%= entity.ClassName %>Fetch(Dictionary<string, object> bag)
		{
<%if(entity.Table.ForeignKeyColumns.Count == 0) {%>
            string commandText = string.Format("SELECT <%= entity.MembersPrimaryKeyUnion.BuildDataBaseColumns() %> FROM [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] {0}", BuildWhereStatement(bag));
<%} else {%>
            string commandText = string.Format("SELECT <%= entity.MembersManyUnion.BuildDataBaseColumns() %> FROM [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] {0}", BuildWhereStatement(bag));
<%}%>
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				return new SafeDataReader(command.ExecuteReader());
			}
		}
     	
		#endregion
		
		#region Delete
		
		public virtual SafeDataReader <%= entity.ClassName %>Delete(Dictionary<string, object> bag)
		{
			string commandText = string.Format("DELETE FROM [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] {0}", BuildWhereStatement(bag));
			using(SqlCommand command = new SqlCommand(commandText, GetSqlConnection()))
			{
				command.Parameters.AddRange(SqlParameters(bag));
				
				SafeDataReader reader = new SafeDataReader(command.ExecuteReader());

                //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                if(reader.RecordsAffected == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

			    return reader;
			}
		}
		
		#endregion
		
		#endregion
				
<% } %>
		#endregion
    }
}
