<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA 3.8.X Criteria" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

#Region "Using declarations"

Imports System
Imports System.Collections.Generic
Imports System.Runtime.InteropServices

<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
<% End If %>
Imports System.Data.SqlClient
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>

<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
Imports Csla.Serialization
#End If
<% End If %>

Imports Csla
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
Imports Csla.Serialization
#End If
<% End If %>


#End Region

<Serializable(), ClassInterface(ClassInterfaceType.None)> _
Public Partial Class <%= BusinessClassName %><%= Entity.GenericProperty %>
    Inherits CriteriaBase<% If (IsCSLA40) Then %>(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)<% End If %>
    Implements IGeneratedCriteria

    #Region "Private Read-Only Members"
    
    Private ReadOnly _bag As New Dictionary(Of String, Object)()
    
    #End Region

    #Region "Constructors"

    Public Sub New()
       <% If Not(IsCSLA40) Then %>MyBase.New(GetType(<%= ChildBusinessClassName %><%= Entity.GenericProperty %>))<% End If %>
    End Sub
    
    Public Sub New(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>) 
        <% If Not(IsCSLA40) Then %>MyBase.New(GetType(<%= ChildBusinessClassName %><%= Entity.GenericProperty %>))<% End If %>
        
<% For Each member As Member In Entity.PrimaryKey.KeyMembers %>
        Me.<%= member.PropertyName %> = <%= member.VariableName %>
<% Next %>
    End Sub

    #End Region

    #Region "Public Properties"
    
    #Region "Read-Write"

<% For Each member As Member In Entity.MembersNoRowVersion %>
    
    Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
        Get
            Return GetValue(Of <%= member.SystemType %>)("<%= member.ColumnName %>")
        End Get
        Set
            _bag("<%= member.ColumnName %>") = value
        End Set
    End Property
<% Next %>

    #End Region
    
    #Region "Read-Only"
<% If(DataAccessImplementation = DataAccessMethod.StoredProcedures Or DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures)
    For Each member As Member In Entity.MembersNoRowVersion
        If(member.IsNullable) Then
%>

    Public ReadOnly Property <%= member.PropertyName %>HasValue As Boolean
        Get
            Return _bag.ContainsKey("<%= member.ColumnName %>")
        End Get
    End Property
<%      End If
    Next
End If
%>

    ''' <summary>
    ''' Returns a list of all the modified properties and values.
    ''' </summary>
    Public ReadOnly Property StateBag() As Dictionary(Of String, Object) Implements IGeneratedCriteria.StateBag
        Get
            Return _bag
        End Get
    End Property

    ''' <summary>
    ''' Returns a list of all the modified properties and values.
    ''' </summary>
    Public ReadOnly Property TableFullName() As String Implements IGeneratedCriteria.TableFullName
        Get
            Return "[<%= Entity.Table.Owner%>].<%= Entity.Table.Name%>"
        End Get
    End Property

    #End Region

    #End Region

    #region "Overrides"

    Public Overrides Function ToString() As String
        Dim result As String = String.Empty
        Dim cancel As Boolean = False
        
        OnToString(result, cancel)
        If(cancel AndAlso Not String.IsNullOrEmpty(result)) Then
            Return result
        End If
    
        If _bag.Count = 0 Then
            Return "No criterion was specified."
        End If

        For Each key As KeyValuePair(Of String, Object) In _bag
            result += String.Format("[{0}] = '{1}' AND ", key.Key, key.Value)
        Next

        Return result.Remove(result.Length - 5, 5)
    End Function

    #End Region

    #Region "Private Methods"
    
    Private Function GetValue(Of T)(name As String) As T
        Dim value As New Object
        If _bag.TryGetValue(name, value) Then
            Return DirectCast(value, T)
        End If
    
        Return Nothing
    End Function
    
    #End Region
    
    #Region "Partial Methods"

    Partial Private Sub OnToString(ByRef result As String, ByRef cancel As Boolean)
    End Sub

    #End Region

End Class