<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="Constructor" Template="..\..\Common\Constructor.cst" %>
<%@ Register Name="Exists" Template="..\..\Common\Exists.cst" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirty.cst" %>
<%@ Register Name="Properties" Template="..\..\Common\Properties.cst" %>
<%@ Register Name="ValidationRules" Template="..\..\Common\ValidationRules.cst" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ChildPartialMethods.cst" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
Imports Csla.Serialization
#Else
Imports Csla.Data
Imports System.Data.SqlClient
#End If
<% Else %>
Imports Csla.Data
Imports System.Data.SqlClient
<% End If %>

<% If(IsLatestCSLA) Then %>
Imports Csla.Rules
<% Else %>
Imports Csla.Validation
<% End If %>

Namespace <%= BusinessProjectName %>
    <Serializable()> _
    <% If(DataAccessImplementation = DataAccessMethod.ObjectFactoryNone Or DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL Or DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures) %>
    <Csla.Server.ObjectFactory(FactoryNames.<%= Entity.Name %>FactoryName)> _
    <% End If %>
    Public Partial Class <%= BusinessClassName %><%= Entity.GenericProperty %>
        Inherits BusinessBase(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)
    
    <% RenderHelper(New Constructor()) %>
    
    <% RenderHelper(New ValidationRules()) %>
    <% RenderHelper(New Properties()) %>
    
#Region "Synchronous Factory Methods"
<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
<% End If %>

        ''' <summary>
        ''' Creates a new object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        ''' </summary>
        ''' <returns>Returns a newly instantiated collection of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>.</returns>
        Friend Shared Function New<%= ChildBusinessClassName %><%= Entity.GenericProperty %>() As <%= ChildBusinessClassName %> 
            Return DataPortal.Create(Of <%= BusinessClassName %>)()
        End Function
    <% For Each sc As SearchCriteria In  Entity.SearchCriteria %>

        ''' <summary>
        ''' Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria. 
        ''' </summary>
<% For Each item As IProperty In sc.Properties %>
        ''' <param name="<%= item.VariableName%>"><%If(item.HasDescription) Then%><%=item.Description%>.<% Else %>No additional detail available.<% End If %></param>
<% Next %>
        ''' <returns>A <see cref="<%=BusinessClassName%>"/> object of the specified criteria.</returns>
        Friend Shared Function <%= sc.MethodName %>(<%= sc.Properties.BuildParametersVariables() %>) As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
            <%= sc.Properties.BuildObjectInitializer() %>
    
            Return DataPortal.Fetch<% If( Not DataAccessImplementation = DataAccessMethod.ObjectFactoryNone AndAlso Not DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL AndAlso Not DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures) Then %>Child<% End If %>(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)(criteria)
        End Function
    <% Next %>
<%If(DataAccessImplementation = DataAccessMethod.ParameterizedSQL Or DataAccessImplementation = DataAccessMethod.StoredProcedures) Then %>

        Friend Shared Function Get<%= BusinessClassName %>(ByVal reader As SafeDataReader) As <%= BusinessClassName %>
            Return DataPortal.FetchChild(Of <%= BusinessClassName %>)(reader)
        End Function
<% End If %>

<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
#End Region

#Region "Asynchronous Factory Methods"

        Friend Shared Sub New<%= BusinessClassName %>Async(ByVal handler As EventHandler(Of DataPortalResult(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    <% For Each sc As SearchCriteria In  Entity.SearchCriteria %>
    
        Friend Shared Sub <%= sc.MethodName %>Async(<% If(sc.Properties.Count > 0) Then %><%= sc.Properties.BuildParametersVariables() %>, <% End If %>ByVal handler As EventHandler(Of DataPortalResult(Of AsyncChildLoader(Of <%= BusinessClassName %><%= Entity.GenericProperty %>))))
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
    <%For Each prop As IProperty In sc.Properties %>
            criteria.<%= prop.Name %> = <%= prop.VariableName %>
    <% Next %>

            DataPortal.BeginFetch(Of AsyncChildLoader(Of <%= BusinessClassName %><%= Entity.GenericProperty %>))(criteria, handler)
        End Sub
    <% Next %>

#End Region
    
    <% RenderHelper(New IsDirty()) %>
    <% RenderHelper(New PartialMethods()) %>
    <% RenderHelper(New Exists()) %>
    End Class
End Namespace
