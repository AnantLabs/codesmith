<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
Imports Csla.Serialization
#End If
<% End If %>

Namespace <%= BusinessProjectName %>
    <Serializable()> _
    Public Partial Class <%= BusinessClassName %> 
        Inherits NameValueListBase(Of Integer, String)

        public Sub New()
            ' require use of factory method 
        End Sub
    
#Region "Synchronous Factory Methods"
<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
<% End If %>

        Private Shared _list As <%= BusinessClassName %>
        Public Shared Function GetAll() As <%= BusinessClassName %>
            If (_list Is Nothing) Then
                _list = DataPortal.Fetch(Of <%= BusinessClassName %>)()
            End If
            
            Return _list
        End Function

<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
#End Region 
    
#Region "Asynchronous Factory Methods"

        Public Shared Sub GetAllAsync(ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler
            dp.BeginFetch()
        End Sub 
#End If

#End Region

        Public Shared Sub InvalidateCache()
            _list = Nothing
        End Sub

    <% If DataAccessImplementation = DataAccessMethod.ObjectFactoryNone OrElse DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL OrElse DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures Then %>
#Region "Property overrides"
    
            ''' <summary>
            ''' Returns true if any children are dirty
            ''' </summary>
            Public Shadows ReadOnly Property IsDirty() As Boolean
                Get
                    Return False
                End Get
            End Property
    
#End Region
    
    <% End If %>
    End Class
End Namespace
