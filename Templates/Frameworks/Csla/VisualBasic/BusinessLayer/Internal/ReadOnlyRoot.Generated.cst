<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X ReadOnlyRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.8.X CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Validation

<Serializable()> _
Public Partial Class <%= BusinessClassName %> 
    Inherits ReadOnlyBase(Of <%= BusinessClassName %>)

    #Region "Contructor(s)"

    Private Sub New()
        ' require use of factory method 
    End Sub
    
    Friend Sub New(Byval reader As SafeDataReader)
<% If(DataAccessImplementation = DataAccessMethod.ParameterizedSQL) Then %>
        Fetch(reader)
<% End If %>
    End Sub
    
    #End Region
    
    #Region "Business Methods"
            
<% If(Entity.HasRowVersionMember) Then %>
    ''' <summary>
    ''' Used for optimistic concurrency.
    ''' </summary>
    <NotUndoable()> _
    Private _timestamp As <%= Entity.RowVersionMember.SystemType %>
<% End If %>

<%  For Each member As Member in Entity.MembersNoRowVersionIncludePrimaryKey
If UseMemberVariables Then %>

    Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>)
    Private <%= member.PrivateMemberVariableName %> As <%= member.SystemType %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue<%= member.BuildDataObjectField() %>
    Public ReadOnly Property <%= member.PropertyName %>() As <%= member.SystemType %>
    
        Get 
            Return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>) 
        End Get
<% else %>
    
    Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>)<%= member.BuildDataObjectField() %>
    Public ReadOnly Property <%= member.PropertyName %>() As <%= member.SystemType %>
        Get 
            Return GetProperty(<%= member.PrivateMemberVariableName %>Property)
        End Get
<% End If %>
    End Property
    
<% Next %>
<%-- Foreign Keys --%>
<% For Each member As AssociationMember In Entity.MembersForeignKey
    Dim columnName As String = member.ResolveManyToOneNameConflict(Entity) 
    If (UseMemberVariables) Then %>
    Private Shared <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property As PropertyInfo(Of <%= member.SystemType %> ) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>)
    Private <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %> As <%= member.BaseSystemType %> = <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property.DefaultValue<%= member.BuildDataObjectField() %>
    Public ReadOnly Property <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>() As <%= member.BaseSystemType %>
        Get 
            Return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>) 
        End Get                
    End Property
    
<% else %>
    Private Shared <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property As PropertyInfo(Of <%= member.BaseSystemType %>) = RegisterProperty(Of <%= member.BaseSystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>)<%= member.BuildDataObjectField() %>
    Public ReadOnly Property <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>() As <%= member.BaseSystemType %> 
        Get  
            Return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property)                
        End Get
    End Property
    
<% End If
Next %>

    #End Region
            
    #Region "Factory Methods"
    
    Public Shared Function Get<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>) As <%= BusinessClassName %>         
        Return DataPortal.Fetch(Of <%= BusinessClassName %>)(New <%= BusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
    End Function
<%-- One-To-Zero-Or-One --%>
<%If (Entity.HasOneToZeroOrZeroMember AndAlso Entity.PrimaryKey.KeyMembers.Count > 1)Then %>

    Public Shared Function Get<%= BusinessClassName %>(<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroParametersVariable() %>) As <%= BusinessClassName %> 
        Dim criteria As New <%= BusinessClassName %>Criteria()
        criteria.<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroObjectInitializer() %>
        
        Return DataPortal.Fetch(Of <%= BusinessClassName %>)(criteria)
    End Function
<% End If%>
<%-- One-To-Many & Many-To-Many --%>
<% For Each sc As SearchCriteria in Entity.SearchCriteria
If sc.IsUniqueResult AndAlso Not ((sc.Members.Count = Entity.PrimaryKey.KeyMembers.Count) AndAlso (sc.Members.item(0).Name = Entity.PrimaryKey.KeyMember.Name)) Then %>
    Public Shared Function <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariablesCriteria(False) %>) As <%= BusinessClassName %> 
        Dim criteria As New <%= BusinessClassName %>Criteria()
<% For Each member As MemberBase In sc.Members %>
        criteria.<%= member.BuildCriteriaObjectInitializer(Entity.Table.Name) %>
<% Next %>
        
        Return DataPortal.Fetch(Of <%= BusinessClassName %>)(criteria)
    End Function
<% End If
Next %>

    #End Region
    
<% If(Entity.PrimaryKey.IsCompositeKey) Then %>
    #Region "Protected Overriden Method(s)"
    
    ' NOTE: This is needed for Composite Keys. 
    Private ReadOnly _guidID As Guid = Guid.NewGuid()
    Protected Overrides Function GetIdValue() As Object
        Return _guidID
    End Function
    
    #End Region
<% End If %>

End Class