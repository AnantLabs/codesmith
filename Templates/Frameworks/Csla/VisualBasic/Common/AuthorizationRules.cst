<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
#Region "Authorization Rules"
    
<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
    <% End If %>
        ''' <summary>
        ''' Allows the specification of CSLA based authorization rules.  Specifies what roles can 
        ''' perform which operations for a given business object
        ''' </summary>
    <% If(IsLatestCSLA) Then %>
        Protected Shared Sub AddObjectAuthorizationRules()
            'Csla.Rules.BusinessRules.AddRule(GetType(<%= BusinessClassName %>), New Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.CreateObject, "SomeRole"))
            'Csla.Rules.BusinessRules.AddRule(GetType(<%= BusinessClassName %>), New Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.EditObject, "SomeRole"))
            'Csla.Rules.BusinessRules.AddRule(GetType(<%= BusinessClassName %>), New Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.DeleteObject, "SomeRole", "SomeAdminRole"))
    <% Else %>
    
        Protected Overrides Sub AddAuthorizationRules()
            ''More information on these rules can be found here (http://www.devx.com/codemag/Article/40663/1763/page/2).
    
            'Dim canWrite As String() = { "AdminUser", "RegularUser" }
            'Dim canRead As String() = { "AdminUser", "RegularUser", "ReadOnlyUser" }
            'Dim admin As String() = { "AdminUser" }
    
            'AuthorizationRules.AllowCreate(GetType(<%= BusinessClassName %>), admin)
            'AuthorizationRules.AllowDelete(GetType(<%= BusinessClassName %>), admin)
            'AuthorizationRules.AllowEdit(GetType(<%= BusinessClassName %>), canWrite)
            'AuthorizationRules.AllowGet(GetType(<%= BusinessClassName %>), canRead)
    
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.NoConcurrency) %>
            ''<%= prop.Name %>
    <% If Not prop.IsReadOnly Then %>
            'AuthorizationRules.AllowWrite(<%= prop.PrivateMemberVariableName %>Property, canWrite)
    <% End If %>
            'AuthorizationRules.AllowRead(<%= prop.PrivateMemberVariableName %>Property, canRead)
    
    <% Next%>
    <%-- One-To-Zero-Or-One --%>
    <% For Each association As Association In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne) %>
            ''<%= association.Name %>
            'AuthorizationRules.AllowRead(<%= association.PrivateMemberVariableName %>Property, canRead)
    
    <% Next%>
    <%-- Many-To-One --%>
    <% For Each association As Association In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne) %>
            ''<%= association.Name %>
            'AuthorizationRules.AllowRead(<%= association.PrivateMemberVariableName %>Property, canRead)
    
    <% Next%>
    <%-- One-To-Many & Many-To-Many --%>
    ' NOTE: Many-To-Many support coming soon.
    <% For Each association As Association In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany) %>
            ''<%= association.Name %>
            'AuthorizationRules.AllowRead(<%= association.PrivateMemberVariableName %>Property, canRead)
    
    <% Next
    End If %>
        End Sub
    
<% If(IncludeSilverlightSupport) Then %>
#End If
    <% End If %>
#End Region
