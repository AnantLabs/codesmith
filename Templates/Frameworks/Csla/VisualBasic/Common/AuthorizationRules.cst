<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
    #Region "Authorization Rules"

    Protected Overrides Sub AddAuthorizationRules()
        ''More information on these rules can be found here (http://www.devx.com/codemag/Article/40663/1763/page/2).

        'Dim canWrite As String() = { "AdminUser", "RegularUser" }
        'Dim canRead As String() = { "AdminUser", "RegularUser", "ReadOnlyUser" }
        'Dim admin As String() = { "AdminUser" }

        'AuthorizationRules.AllowCreate(GetType(<%= BusinessClassName %>), admin)
        'AuthorizationRules.AllowDelete(GetType(<%= BusinessClassName %>), admin)
        'AuthorizationRules.AllowEdit(GetType(<%= BusinessClassName %>), canWrite)
        'AuthorizationRules.AllowGet(GetType(<%= BusinessClassName %>), canRead)

<% For Each member As Member in Entity.MembersNoRowVersion %>
        ''<%= member.PropertyName %>
<% If Not member.IsReadOnly Then %>
        'AuthorizationRules.AllowWrite(<%= member.PrivateMemberVariableName %>Property, canWrite)
<% End If %>
        'AuthorizationRules.AllowRead(<%= member.PrivateMemberVariableName %>Property, canRead)

<% Next%>
<%-- One-To-Zero-Or-One --%>
<% For Each association As Association in Entity.AssociatedOneToZeroOrOne %>
        ''<%= association.PropertyName %>
        'AuthorizationRules.AllowRead(<%= association.PrivateMemberVariableName %>Property, canRead)

<% Next%>
<%-- Many-To-One --%>
<% For Each association As Association in Entity.AssociatedManyToOne %>
        ''<%= association.PropertyName %>
        'AuthorizationRules.AllowRead(<%= association.PrivateMemberVariableName %>Property, canRead)

<% Next%>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As Association in Entity.AssociatedOneToMany %>
        ''<%= association.PropertyName %>
        'AuthorizationRules.AllowRead(<%= association.PrivateMemberVariableName %>Property, canRead)

<% Next%>
    End Sub

    #End Region
