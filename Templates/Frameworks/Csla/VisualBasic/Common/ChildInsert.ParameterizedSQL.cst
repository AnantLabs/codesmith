<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
            Dim cancel As Boolean = False
            OnChildInserting(connection, cancel)
            If (cancel) Then
                Return
            End If
    
            If Not (connection.State = ConnectionState.Open) Then connection.Open()
            Const commandText As String = "INSERT INTO [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] (<%= entity.MembersUpdateInsert.BuildDataBaseColumns() %>) VALUES (<%= entity.MembersUpdateInsert.BuildDataBaseParameters() %>)<%= entity.BuildInsertSelectStatement() %>"
            Using command As New SqlCommand(commandText, connection)
                <%= entity.MembersUpdateInsert.BuildCommandParameters(False, False, Not RenderOptionalContent) %>
    
    <% If (entity.HasRowVersionMember Or entity.HasIdentityMember) Then %>
                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    If reader.Read() Then
    <% If (Entity.HasRowVersionMember) Then %>
                        <%= Entity.RowVersionMember.PropertyName %> = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
    <% End If %>
    <% For Each member As Member In Entity.PrimaryKey.KeyMembers
        If(member.IsIdentity OrElse member.DataType = DbType.Guid.ToString()) Then %>
    
                        ' Update identity or guid primary key value.
            <% If(UseMemberVariables) Then %>
                        <%= [member].PrivateMemberVariableName %> = <%If Not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>ADOHelper.GetBytes(reader)<% End If %>
            <% Else %>
                        LoadProperty(<%= [member].PrivateMemberVariableName %>Property, <% If NOT [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>"))<% else %>ADOHelper.GetBytes(reader," <%= [member].ColumnName %>"))<% End If %>
            <% End If
        End If
    Next %>
                    End If
                End Using
    <% Else %>
                'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                Dim result As Integer = command.ExecuteNonQuery()
                If (result = 0) Then
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    <% End If %>
            End Using
    <% If Not RenderOptionalContent Then
        For Each member As Member In Entity.Members
                If member.IsForeignKey AndAlso Not member.IsPrimaryKey Then
                
            If String.IsNullOrEmpty(member.ResolveAssociationPropertyClassName()) Then
                Continue For
            End If  %>
    
            ' Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
    <% Dim localParameterName As String = member.ResolveAssociationPropertyVariable()
    Dim localParameterNameWithChildProperty As String = member.ResolveAssociationPropertyVariableWithChildProperty() %>
            If(Not IsNothing(<%= localParameterName %>) AndAlso Not <%= localParameterNameWithChildProperty %> = Me.<%= member.PropertyName %>) Then
    <% If(UseMemberVariables) Then %>
                <%= member.PrivateMemberVariableName %> = <%= localParameterNameWithChildProperty %>
    <% Else %>
                LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%= localParameterNameWithChildProperty %>)
    <% End If %>
            End If
            <% End If 
        Next
    End If %>
    <% For Each member As Member In Entity.PrimaryKey.KeyMembers
        If(Not member.IsIdentity OrElse member.DataType = DbType.Guid.ToString()) Then %>
    
        ' Update non-identity primary key value.
    <% If(UseMemberVariables) Then %>
        _original<%= member.PropertyName %> = Me.<%= member.PropertyName %>
    <% Else %>
        LoadProperty(_original<%= member.PropertyName %>Property, Me.<%= member.PropertyName %>)
    <% End If 
        End If
    Next %>
    <% If (Entity.AssociatedToManyUnion.Count > 0 OrElse Entity.AssociatedManyToOne.Count > 0 OrElse Entity.AssociatedOneToZeroOrOne.Count > 0) Then
        If (Not RenderOptionalContent) Then
        Dim childCount As Integer = 0
        For Each a As Association In Entity.AssociatedOneToMany
            If IsChildBusinessObject(a) Then
                childCount += 1
            End If
        Next
    
        If childCount > 0 Then %>
    
            FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>)
        <% Else %>
    
            ' A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            ' TODO: Please override OnChildInserted() and insert this child manually.
            'FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>)
        <% End If 
        Else %>
    
            FieldManager.UpdateChildren(Me, connection)
    <% End If
    End If %>
    
            OnChildInserted()
