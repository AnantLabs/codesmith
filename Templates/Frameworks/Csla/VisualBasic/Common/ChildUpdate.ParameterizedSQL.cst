<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
            Dim cancel As Boolean = False
            OnChildUpdating(connection, cancel)
            If (cancel) Then
                Return
            End If

<% If(Entity.CanUpdate) Then %> 
            If Not connection.State = ConnectionState.Open Then connection.Open()
            Const commandText As String = "UPDATE <%= Entity.EntityKeyName %> <%= entity.GetProperties(PropertyType.UpdateInsert).BuildSetStatements() %> <%= entity.Key.Properties.BuildWhereStatements(True) %><% If entity.ConcurrencyProperty IsNot Nothing Then %> AND [<%= entity.ConcurrencyProperty.KeyName %>] = <%= ParameterPrefix  %><%= entity.ConcurrencyProperty.KeyName %><% End If %><%= entity.BuildUpdateSelectStatement() %>"
            Using command As New SqlCommand(commandText, connection)
                <%= entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(False, False, Not RenderOptionalContent, False, True) %>
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp)
                command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value = Me.<%= Entity.ConcurrencyProperty.Name %>
                command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
    <% If (entity.ConcurrencyProperty IsNot Nothing OrElse entity.IdentityProperty IsNot Nothing) Then %>
                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    If reader.Read() Then
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                        <%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>")
    <% End If %>
    <%For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If(Not prop.IsType(PropertyType.Identity)) Then %>
                        ' Update non-identity primary key value.
            <% If(UseMemberVariables) Then %>
                        <%= prop.PrivateMemberVariableName %> = <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>
        <% Else %>
                        LoadProperty(<%= prop.PrivateMemberVariableName %>Property, <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>)
        <% End If
        End If
    Next %>
                    End If
                End Using
    <%Else %>
                'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                Dim result As Integer = command.ExecuteNonQuery()
                If (result = 0) Then
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    <% End If %>
    <% If Not RenderOptionalContent Then
        For Each prop As IProperty In Entity.Properties
            If prop.IsType(PropertyType.Foreign) Then
                If String.IsNullOrEmpty(prop.ResolveAssociationPropertyClassName()) Then
                    Continue For
                End If  %>
    
                ' Update foreign keys values. This code will update the values passed In from the parent only if no errors occurred after executing the query.
    <% Dim localParameterName As String = prop.ResolveAssociationPropertyVariable()
    Dim localParameterNameWithChildProperty As String = prop.ResolveAssociationPropertyVariableWithChildProperty() %>
                If(Not IsNothing(<%= localParameterName %>) AndAlso Not <%= localParameterNameWithChildProperty %> = Me.<%= prop.Name %>) Then
    <% If(UseMemberVariables) Then %>
                    <%= prop.PrivateMemberVariableName %> = <%= localParameterNameWithChildProperty %>
    <% Else %>
                    LoadProperty(<%= prop.PrivateMemberVariableName %>Property, <%= localParameterNameWithChildProperty %>)
    <% End If %>
                End If
            <% End If
        Next
    End If %>
    
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If Not (prop.IsType(PropertyType.Identity)) Then %>
                ' Update non-identity primary key value.
        <% If(UseMemberVariables) Then %>
                _original<%= prop.Name %> = Me.<%= prop.Name %>
    <%      Else %>
                LoadProperty(_original<%= prop.Name %>Property, Me.<%= prop.Name %>)
    <%      End If
        End If
    Next %>
            End Using
    <% If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne).Count() > 0) Then
        If (Not RenderOptionalContent) Then
        Dim childCount As Integer = 0
        For Each a As Association In Entity.Associations.Where(Function(assoc) assoc.AssociationType = AssociationType.OneToMany)
            If IsChildBusinessObject(a) Or IsSwitchableObject(a) Then
                childCount += 1
            End If
        Next
    
        If childCount > 0 Then %>
            FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>)
        <% Else %>
            ' A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            ' TODO: Please override OnChildUpdated() and update this child manually.
            'FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>)
        <% End If 
        Else %>
            FieldManager.UpdateChildren(Me, connection)
    <% End If
    End If %>
    
            OnChildUpdated()
<% Else %>
            Throw New  NotSupportedException("This business object cannot be updated.")
<% End If %>