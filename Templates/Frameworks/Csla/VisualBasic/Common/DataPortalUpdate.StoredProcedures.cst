<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
            Dim cancel As Boolean = False
            OnUpdating(cancel)
            If (cancel) Then
                Return
            End If
    
<% If(Entity.CanUpdate) Then %>  
    <% If Not(Entity.IdentityProperty Is Nothing) Then %>
            If <%= Entity.GetProperties(PropertyType.Key).BuildIdentityKeyEqualityStatements()%> Then
                ' Insert new child.
                Dim item As New <%= BusinessClassName %>()
                <%= Entity.GetProperties(PropertyType.NoConcurrency).BuildObjectInitializer(false, true, false, "item.") %>
                item = item.Save()
    
                ' Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
    <% For Each association As Association In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany)
            If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject(association, "Info")) Then
                Continue For
            End If %>
    
                For Each itemToUpdate As <%= association.Name %> In <%= association.Name %>
    <%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate", "") %>
                Next
    <% Next %>
    
                ' Create a new connection.
                Using connection As New SqlConnection(ADOHelper.ConnectionString)
                    connection.Open()
                    FieldManager.UpdateChildren(Me, connection)
                End Using
    
                ' Delete the old.
                Dim criteria As New <%= CriteriaClassName %>()
                <%= Entity.GetProperties(PropertyType.Key).BuildObjectInitializer(false, false, true) %>
                DataPortal_Delete(criteria)
    
                ' Mark the original as the new one.
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
    If Not(prop.IsType(PropertyType.Identity)) Then %>
                Original<%= prop.Name %> = <%= prop.Name %>
    <% End If
    Next
    %>
                OnUpdated()
    
                Return
            End If
    
    <% End If %>
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("<%= GetUpdateStoredProcedureName() %>", connection)
                    command.CommandType = CommandType.StoredProcedure
                    <%= entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(False, False, False, False, True) %>
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp)
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value = Me.<%= Entity.ConcurrencyProperty.Name %>
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
                    'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    Dim result As Integer = command.ExecuteNonQuery()
                    If (result = 0) Then
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
    
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                    <%= Entity.ConcurrencyProperty.Name %> = DirectCast(command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value, <%= Entity.ConcurrencyProperty.SystemType %>)
    <% End If 
    For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If(Not prop.IsType(PropertyType.Identity) AndAlso prop.IsNullable) Then %> 
                    ' Update non-identity nullable primary key value.
            <% If(UseMemberVariables) Then %>
                    <%= prop.PrivateMemberVariableName %> = DirectCast(command.Parameters("<%= prop.BuildParameterVariableName() %>").Value, <%= prop.SystemType %>)
    <%      Else %>
                    LoadProperty(<%= prop.PrivateMemberVariableName %>Property, DirectCast(command.Parameters("<%= prop.BuildParameterVariableName() %>").Value, <%= prop.SystemType %>))
    <%      End If
        End If
    Next %>
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If Not (prop.IsType(PropertyType.Identity)) Then
            If(UseMemberVariables) Then %>
                _original<%= prop.Name %> = Me.<%= prop.Name %>
    <%      Else %>
                LoadProperty(_original<%= prop.Name %>Property, Me.<%= prop.Name %>)
    <%      End If
        End If
    Next %>
                End Using
    <% If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne).Count() > 0) Then %>
    
                FieldManager.UpdateChildren(Me, connection)
    <% End If %>
            End Using
    
            OnUpdated()
<% Else %>
            Throw New NotSupportedException("This business object cannot be updated.")
<% End If %>
