<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>

#Region "Properties"
    
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
        ''' <summary>
        ''' Used for optimistic concurrency.
        ''' </summary>
        <NotUndoable()> _
        Friend <%= Entity.ConcurrencyProperty.Name %> As <%= Entity.ConcurrencyProperty.SystemType %> = New <%= Entity.ConcurrencyProperty.SystemTypeWithSize %> {}
        
    <% End If %>
    <%  For Each prop As IProperty In Entity.GetProperties(PropertyType.NoConcurrency)
    If UseMemberVariables Then %>
        Private Shared ReadOnly <%= prop.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= prop.SystemType %>) = RegisterProperty(Of <%= prop.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= prop.Name %>, "<%= prop.FriendlyName() %>"<% If(prop.IsNullable And prop.SystemType = "System.String") Then %>, vbNullString<% Else If(prop.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= prop.SystemType %>)<%End If%><% If (IsCSLA43 OrElse IsCSLA45) Then %>, RelationshipTypes.PrivateField<% End If %>)
        Private <%= prop.PrivateMemberVariableName %> As <%= prop.SystemType %> = <%= prop.PrivateMemberVariableName %>Property.DefaultValue
    <% If(prop.HasDescription) Then %>
        ''' <summary>
        ''' <%= prop.Description %>
        ''' </summary>
    <% End If %>
    <%If IncludeSilverlightSupport And prop.IsType(PropertyType.Key) Then %>
#If Not SILVERLIGHT Then
    <% End If %>
        <%If prop.IsType(PropertyType.Key) Then %><%= prop.BuildDataObjectField(IncludeSilverlightSupport) %><% End If %>
        Public Property <%= prop.Name %>() As <%= prop.SystemType %>
    <%If IncludeSilverlightSupport And prop.IsType(PropertyType.Key) Then %>
#Else
        Public Property <%= prop.Name %>() As <%= prop.SystemType %>
#End If
    <% End If %>
            Get 
                Return GetProperty(<%= prop.PrivateMemberVariableName %>Property, <%= prop.PrivateMemberVariableName %>) 
            End Get
            <% If prop.IsReadOnly Then %>Friend <% End If %>Set (value As <%= prop.SystemType %>)
                SetProperty(<%= prop.PrivateMemberVariableName %>Property, <%= prop.PrivateMemberVariableName %>, value)
            End Set
        End Property

    <%If(prop.IsType(PropertyType.Key) And Not prop.IsType(PropertyType.Identity)) %>
        Private Shared ReadOnly _original<%= prop.Name %>Property As PropertyInfo(Of <%= prop.SystemType %>) = RegisterProperty(Of <%= prop.SystemType %>)(Function(p As <%= BusinessClassName %>) p.Original<%= prop.Name %>, "Original <%= prop.FriendlyName() %>"<% If(prop.IsNullable And prop.SystemType = "System.String") Then %>, vbNullString<% Else If(prop.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= prop.SystemType %>)<%End If%><% If (IsCSLA43 OrElse IsCSLA45) Then %>, RelationshipTypes.PrivateField<% End If %>)
        Private _original<%= prop.Name %> As <%= prop.SystemType %> = _original<%= prop.Name %>Property.DefaultValue
        ''' <summary>
        ''' Holds the original value for <%= prop.Name %>. This is used for non identity primary keys.
        ''' </summary>
        Friend Property Original<%= prop.Name %>() As <%= prop.SystemType %>
            Get 
                Return GetProperty(_original<%= prop.Name %>Property, _original<%= prop.Name %>) 
            End Get
            Set (value As <%= prop.SystemType %>)
                SetProperty(_original<%= prop.Name %>Property, _original<%= prop.Name %>, value)
            End Set
        End Property

    <% End If %>
    <% Else %>
        Private Shared ReadOnly <%= prop.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= prop.SystemType %>) = RegisterProperty(Of <%= prop.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= prop.Name %>, "<%= prop.FriendlyName() %>"<% If(prop.IsNullable And prop.SystemType = "System.String") Then %>, vbNullString<% Else If(prop.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= prop.SystemType %>)<%End If%>)
    <% If(prop.HasDescription) Then %>
        ''' <summary>
        ''' <%= prop.Description %>
        ''' </summary>
    <% End If %>
    <%If IncludeSilverlightSupport And prop.IsType(PropertyType.Key) Then %>
#If Not SILVERLIGHT Then
    <% End If %>
        <%If prop.IsType(PropertyType.Key) Then %><%= prop.BuildDataObjectField(IncludeSilverlightSupport) %><% End If %>
        Public Property <%= prop.Name %>() As <%= prop.SystemType %>
    <%If IncludeSilverlightSupport And prop.IsType(PropertyType.Key) Then %>
#Else
        Public Property <%= prop.Name %>() As <%= prop.SystemType %>
#End If
    <% End If %>
            Get 
                Return GetProperty(<%= prop.PrivateMemberVariableName %>Property)
            End Get
            <% If prop.IsReadOnly Then %>Friend <% End If %>Set (ByVal value As <%= prop.SystemType %>)
                SetProperty(<%= prop.PrivateMemberVariableName %>Property, value)
            End Set
        End Property

    <%If(prop.IsType(PropertyType.Key) And Not prop.IsType(PropertyType.Identity)) %>
        Private Shared ReadOnly _original<%= prop.Name %>Property As PropertyInfo(Of <%= prop.SystemType %>) = RegisterProperty(Of <%= prop.SystemType %>)(Function(p As <%= BusinessClassName %>) p.Original<%= prop.Name %>, "Original <%= prop.FriendlyName() %>"<% If(prop.IsNullable And prop.SystemType = "System.String") Then %>, vbNullString<% Else If(prop.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= prop.SystemType %>)<%End If%>)
        ''' <summary>
        ''' Holds the original value for <%= prop.Name %>. This is used for non identity primary keys.
        ''' </summary>
        Friend Property Original<%= prop.Name %>() As <%= prop.SystemType %>
            Get 
                Return GetProperty(_original<%= prop.Name %>Property) 
            End Get
            Set (value As <%= prop.SystemType %>)
                SetProperty(_original<%= prop.Name %>Property, value)
            End Set
        End Property

    <% End If %>
    <% End If %>
    <% Next %>
    <%-- One-To-Zero-Or-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.OneToOne) 
        ' For now, don't generate properties based on tables generated as generics.
        If(association.GenericProperty = String.Empty) Then
    Dim associationClassName As String = association.TypeName
    If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then
        associationClassName += "Info"
    End If %>
        '<%= association.AssociationType.ToString() %>
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %><%= association.GenericProperty %>) = RegisterProperty(Of <%= associationClassName %><%= association.GenericProperty %>)(Function(p As <%= BusinessClassName %>) p.<%= association.Name %>, Csla.RelationshipTypes.Child)
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
        Public ReadOnly Property <%= association.Name %>() As <%= associationClassName %><%= association.GenericProperty %>
            Get
                Dim cancel As Boolean = False
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, cancel)
                
                If Not cancel Then
<% If UseLazyLoading Then %>
                    If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                        Dim criteria As New <%= BusinessProjectName %>.<%= association.Name %>Criteria<%= association.GenericProperty %>()
                        <%= association.BuildObjectInitializer(true) %>
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
                        'Markbusy()
    <% If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then %>
                        If(<%= association.BuildNullCheckStatement(true, false, false, false, true) %>) Then
                            <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.ExistsAsync(criteria, Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If
                                
                                If Not (e.Object.Result) Then
                                    <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.AssociatedMethodName%>Async(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>, Sub(o1, e1)
                                        If Not (e1.Error Is Nothing) Then
                                            Throw e1.Error
                                        End If

                                        Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e1.Object)

                                        'MarkIdle()
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                                    End Sub)
                                End If
                            End Sub)
                        End If
    <% Else %>
                        If (<%= association.BuildNullCheckStatement(true, true, false, false, true) %>) Then
                            <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.ExistsAsync(criteria, Sub(o, e) 
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                If Not (e.Object.Result) Then
                                    <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.New<%= associationClassName %>Async(Sub(o1, e1)
                                        If Not (e1.Error Is Nothing) Then
                                        Throw e1.Error
                                        End If
    
                                        Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e1.Object)
    
                                        'MarkIdle()
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                                    End Sub)
                                Else
                                    <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.AssociatedMethodName%>Async(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>, Sub(o2, e2)
                                        If Not (e2.Error Is Nothing) Then
                                            Throw e2.Error
                                        End If
    
                                        Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e2.Object)
    
                                        'MarkIdle()
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                                    End Sub)
                                End If
                            End Sub)
                        End If
    <% End If %>
#Else
<% End If %>
    <% If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then %>
                        If(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.AssociatedMethodName%>(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>))
                        End If
    <% Else %>
                        If (<%= association.BuildNullCheckStatement(true, true, false, false) %>Not <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.New<%= associationClassName %>())
                        Else
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.AssociatedMethodName%>(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>))
                        End If
    <% End If %>
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
                    End If

<% End If %>  
                End If

                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            End Get
        End Property

    <% End If
    Next %>
    <%-- Many-To-One --%>
    <% For Each association  As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne) 
        ' For now, don't generate properties based on tables generated as generics.
        If(association.GenericProperty = String.Empty) Then
    Dim associationClassName As String = association.TypeName
    If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject(association, "Info")) Then
        associationClassName += "Info"
    End If %>
        'Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne)
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>) = RegisterProperty(Of <%= associationClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.Name %>, Csla.RelationshipTypes.Child)
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
        Public ReadOnly Property <%= association.Name %>() As <%= associationClassName %>
            Get
                Dim cancel As Boolean = False
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, cancel)
                
                If Not cancel Then
    <% If UseLazyLoading Then %>
                    If<%= association.BuildNullCheckStatement(true, true, false, true, false) %> Then
                        Return Nothing
                    End If
    
                    If Not(FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                        Dim criteria As New <%= BusinessProjectName %>.<%= association.TypeName %>Criteria<%= association.GenericProperty %>()
                        <%= association.BuildObjectInitializer(true) %>

<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
                        'Markbusy()
                        <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.ExistsAsync(criteria, Sub(o, e)
                            If Not (e.Error Is Nothing) Then
                                Throw e.Error
                            End If
                            
                            If (e.Object.Result) Then
                                <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.AssociatedMethodName%>Async(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>, Sub(o1, e1)
                                    If Not (e1.Error Is Nothing) Then
                                        Throw e1.Error
                                    End If

                                    Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e1.Object<% If(IsChildBusinessObject(association)) Then %>.Child<% End If %>)

                                    'MarkIdle()
                                    OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                                End Sub)
                            End If
                        End Sub)
#Else
<% End If %>
                        If (<%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.AssociatedMethodName%>(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>))
                        End If
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
                    End If
<% End If %>
                End If

                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            End Get
        End Property

    <% End If
    Next %>
    <%-- One-To-Many & Many-To-Many --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ManyToMany) 
        ' For now, don't generate properties based on tables generated as generics.
        If(association.GenericProperty = String.Empty) Then
        Dim associationClassName As String = association.TypeName
        If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject( association, "InfoList")) Then
            associationClassName += "Info"
        End If %>
        '<%= association.AssociationType.ToString() %>
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>List<%= association.GenericProperty %>) = RegisterProperty(Of <%= associationClassName %>List<%= association.GenericProperty %>)(Function(p As <%= BusinessClassName %>) p.<%= association.Name %>, Csla.RelationshipTypes.Child)
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
    Public ReadOnly Property <%= association.Name %>() As <%= associationClassName %>List<%= association.GenericProperty %>
            Get
                Dim cancel As Boolean = False
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, cancel)
                
                If Not cancel Then
    <% If(UseLazyLoading) Then %>
                    If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property)) Then
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
                        'Markbusy()
    <% If(IsNameValueListBusinessObject(association, "NameValueList")) Then %>
                    <%= BusinessProjectName %>.<%= association.TypeName %>List<%= association.GenericProperty %>.GetAllAsync(Sub(o, e)
                                    If Not (e.Error Is Nothing) Then
                                        Throw e.Error
                                    End If

                                    Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                    'MarkIdle()
                                    OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                                End Sub)
    <% Else %>
                        Dim criteria As New <%= BusinessProjectName %>.<%= association.TypeName %>Criteria<%= association.GenericProperty %>()
                        <%= association.BuildObjectInitializer(true) %>

        <% If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject( association, "InfoList")) Then %>
                        If(<%= association.BuildNullCheckStatement(true, false, false, false, true) %>)
                            <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.ExistsAsync(criteria, Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If
                            
                                If Not (e.Object.Result) Then
                                    <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.AssociatedMethodName%>Async(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>, Sub(o1, e1)
                                        If Not (e1.Error Is Nothing) Then
                                            Throw e1.Error
                                        End If

                                        Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e1.Object)

                                        'MarkIdle()
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                                    End Sub)
                                End If
                            End Sub)
                        End If
        <% Else %>
                        If (<%= association.BuildNullCheckStatement(true, true, false, false, true) %>) Then
                            <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.ExistsAsync(criteria, Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                If Not (e.Object.Result) Then
                                    <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.NewListAsync(Sub(o1, e1)
                                        If Not (e1.Error Is Nothing) Then
                                            Throw e1.Error
                                        End If

                                        Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e1.Object)

                                        'MarkIdle()
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                                    End Sub)
                                Else
                                    <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.<%= association.SearchCriteria.AssociatedMethodName%>Async(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>, Sub(o2, e2)
                                        If Not (e2.Error Is Nothing) Then
                                            Throw e2.Error
                                        End If

                                        Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e2.Object<% If(IsChildBusinessObject(association, "List")) Then %>.Child<% End If %>)

                                        'MarkIdle()
                                        OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                                    End Sub)
                                End If
                            End Sub)
                        End If
        <% End If
    End If %>
#Else
<% End If %>
    <% If(IsNameValueListBusinessObject(association, "NameValueList")) Then %>
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= association.TypeName %>List<%= association.GenericProperty %>.GetAll())
    <% Else %>
                        Dim criteria As New <%= BusinessProjectName %>.<%= association.TypeName %>Criteria<%= association.GenericProperty %>()
                        <%= association.BuildObjectInitializer(true) %>
    
        <% If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject( association, "InfoList")) Then %>
                        If(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria)) Then
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.AssociatedMethodName %>(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>))
                        End If
        <% Else %>
                        If (<%= association.BuildNullCheckStatement(true, true, false, false) %>Not <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria)) Then
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.NewList())
                        Else
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.<%= association.SearchCriteria.AssociatedMethodName%>(<%= association.SearchCriteria.Properties.BuildPropertyVariableArguments() %>))
                        End If
        <% End If
    End If %>
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
                    End If
    <% End If%>
                End If

                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            End Get
        End Property

    <% End If
    Next %>
#End Region
