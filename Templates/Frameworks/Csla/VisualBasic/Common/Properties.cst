<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="True" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>

#Region "Properties"
    
    <% If(Entity.HasRowVersionMember) Then %>
        ''' <summary>
        ''' Used for optimistic concurrency.
        ''' </summary>
        <NotUndoable()> _
        Friend <%= Entity.RowVersionMember.PropertyName %> As <%= Entity.RowVersionMember.SystemType %> = New <%= Entity.RowVersionMember.SystemTypeWithSize %> {}
        
    <% End If %>
    <%  For Each member As Member in Entity.MembersNoRowVersion
    If UseMemberVariables Then %>  
        Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= member.SystemType %>)<%End If%>)
        Private <%= member.PrivateMemberVariableName %> As <%= member.SystemType %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue
    <% If(member.HasDescription) Then %>
        ''' <summary>
        ''' <%= member.Description %>
        ''' </summary>
    <% End If %>
    <%If IncludeSilverlightSupport Then %>
    #If Not SILVERLIGHT Then
    <% End If %>
        <%If member.IsPrimaryKey Then %><%= member.BuildDataObjectField(IncludeSilverlightSupport) %><% End If %>
        Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
    <%If IncludeSilverlightSupport Then %>
    #Else
        Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
    #End If
    <% End If %>
            Get 
                Return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>) 
            End Get
            <% If member.IsReadOnly Then %>Friend <% End If %>Set (value As <%= member.SystemType %>)
                SetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>, value)
            End Set
        End Property

    <%If(member.IsPrimaryKey And Not member.IsIdentity) %>
        Private Shared ReadOnly _original<%= member.PropertyName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.Original<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= member.SystemType %>)<%End If%>)
        Private _original<%= member.PropertyName %> As <%= member.SystemType %> = _original<%= member.PropertyName %>Property.DefaultValue
        ''' <summary>
        ''' Holds the original value for <%= member.PropertyName %>. This is used for non identity primary keys.
        ''' </summary>
        Friend Property Original<%= member.PropertyName %>() As <%= member.SystemType %>
            Get 
                Return GetProperty(_original<%= member.PropertyName %>Property, _original<%= member.PropertyName %>) 
            End Get
            Set (value As <%= member.SystemType %>)
                SetProperty(_original<%= member.PropertyName %>Property, _original<%= member.PropertyName %>, value)
            End Set
        End Property

    <% End If %>
    <% Else %>
        Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= member.SystemType %>)<%End If%>)
    <% If(member.HasDescription) Then %>
        ''' <summary>
        ''' <%= member.Description %>
        ''' </summary>
    <% End If %>
    <%If IncludeSilverlightSupport Then %>
    #If Not SILVERLIGHT Then
    <% End If %>
        <%If member.IsPrimaryKey Then %><%= member.BuildDataObjectField(IncludeSilverlightSupport) %><% End If %>
        Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
    <%If IncludeSilverlightSupport Then %>
    #Else
        Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
    #End If
    <% End If %>
            Get 
                Return GetProperty(<%= member.PrivateMemberVariableName %>Property)
            End Get
            <% If member.IsReadOnly Then %>Friend <% End If %>Set (ByVal value As <%= member.SystemType %>)
                SetProperty(<%= member.PrivateMemberVariableName %>Property, value)
            End Set
        End Property

    <%If(member.IsPrimaryKey And Not member.IsIdentity) %>
        Private Shared ReadOnly _original<%= member.PropertyName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.Original<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= member.SystemType %>)<%End If%>)
        ''' <summary>
        ''' Holds the original value for <%= member.PropertyName %>. This is used for non identity primary keys.
        ''' </summary>
        Friend Property Original<%= member.PropertyName %>() As <%= member.SystemType %>
            Get 
                Return GetProperty(_original<%= member.PropertyName %>Property) 
            End Get
            Set (value As <%= member.SystemType %>)
                SetProperty(_original<%= member.PropertyName %>Property, value)
            End Set
        End Property

    <% End If %>
    <% End If %>
    <% Next %>
    <%-- One-To-Zero-Or-One --%>
    <% For Each association As Association in Entity.AssociatedOneToZeroOrOne 
        ' For now, don't generate properties based on tables generated as generics.
        If(association.GenericProperty = string.Empty) Then
    Dim associationClassName As String = association.ClassName
    If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then
        associationClassName += "Info"
    End If %>
        'AssociatedOneToZeroOrOne
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %><%= association.GenericProperty %>) = RegisterProperty(Of <%= associationClassName %><%= association.GenericProperty %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, Csla.RelationshipTypes.Child)
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
        Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %><%= association.GenericProperty %>
            Get
<% If UseLazyLoading Then %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria<%= association.GenericProperty %>()
                    <%= association.BuildObjectInitializer(true) %>
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
                    MarkBusy()
    <% If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then %>
                    If(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                        <%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>, Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                MarkIdle()
                                OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                            End Sub)
                    End If
    <% Else %>
                    If (Me.IsNew OrElse <%= association.BuildNullCheckStatement(true, true, false, false) %>Not <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                        <%= associationClassName %><%= association.GenericProperty %>.New<%= associationClassName %>Async(Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                MarkIdle()
                                OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                            End Sub)
                    Else
                        <%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>, Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                MarkIdle()
                                OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                            End Sub)
                    End If
    <% End If %>
#Else
<% Else %>
    <% If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then %>
                    If(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                    End If
    <% Else %>
                    If (Me.IsNew OrElse <%= association.BuildNullCheckStatement(true, true, false, false) %>Not <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %><%= association.GenericProperty %>.New<%= associationClassName %>())
                    Else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                    End If
    <% End If %>
<% End If %>
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
                End If

<% End If %>  
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            End Get
        End Property

    <% End If
    Next %>
    <%-- Many-To-One --%>
    <% For Each association  As Association in Entity.AssociatedManyToOne 
        ' For now, don't generate properties based on tables generated as generics.
        If(association.GenericProperty = string.Empty) Then
    Dim associationClassName As String = association.ClassName
    If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then
        associationClassName += "Info"
    End If %>
        'AssociatedManyToOne
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>) = RegisterProperty(Of <%= associationClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, Csla.RelationshipTypes.Child)
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
        Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>
            Get
    <% If UseLazyLoading Then %>
				If<%= association.BuildNullCheckStatement(true, true, false, true, false) %> Then
					Return Nothing
				End If
    
                If Not(FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria<%= association.GenericProperty %>()
                    <%= association.BuildObjectInitializer(true) %>

<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
                    MarkBusy()
                    If (<%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                        <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>, Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                MarkIdle()
                                OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                            End Sub)
                    End If
#Else
<% Else %>
                    If (<%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria)) Then
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                    End If
<% End If %>
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
                End If
                
    <% End If %>  
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            End Get
        End Property 

    <% End If
    Next %>
    <%-- One-To-Many & Many-To-Many --%>
    <% For Each association As Association in Entity.AssociatedOneToMany 
        ' For now, don't generate properties based on tables generated as generics.
        If(association.GenericProperty = string.Empty) Then
        Dim associationClassName As String = association.ClassName
        If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject( association, "InfoList")) Then
            associationClassName += "Info"
        End If %>
        'AssociatedOneToMany
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>List<%= association.GenericProperty %>) = RegisterProperty(Of <%= associationClassName %>List<%= association.GenericProperty %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, Csla.RelationshipTypes.Child)
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
    Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>List<%= association.GenericProperty %>
            Get
    <% If(UseLazyLoading) Then %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property)) Then
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
                    MarkBusy()
                    
                    <% If(IsNameValueListBusinessObject(association, "NameValueList")) Then %>
                    <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.GetAllAsync(Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                MarkIdle()
                                OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                            End Sub)
    <% Else %>
                    Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria<%= association.GenericProperty %>()
                    <%= association.BuildObjectInitializer(true) %>

    <% If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject( association, "InfoList")) Then %>
                    If(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria)) Then
                        <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>, Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                MarkIdle()
                                OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                            End Sub)
                    End If
    <% Else %>
                    If (Me.IsNew OrElse <%= association.BuildNullCheckStatement(true, true, false, false) %>Not <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria)) Then
                        <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.NewListAsync(Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                MarkIdle()
                                OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                            End Sub)
                    Else
                        <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>, Sub(o, e)
                                If Not (e.Error Is Nothing) Then
                                    Throw e.Error
                                End If

                                Me.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object)

                                MarkIdle()
                                OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property)
                            End Sub)
                    End If
    <% End If
    End If %>
#Else
<% Else %>
                    <% If(IsNameValueListBusinessObject(association, "NameValueList")) Then %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.GetAll())
    <% Else %>
                    Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria<%= association.GenericProperty %>()
                    <%= association.BuildObjectInitializer(true) %>
    
    <% If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject( association, "InfoList")) Then %>
                    If(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria)) Then
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                    End If
    <% Else %>
                    If (Me.IsNew OrElse <%= association.BuildNullCheckStatement(true, true, false, false) %>Not <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria)) Then
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.NewList())
                    Else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                    End If
    <% End If
    End If
End If %>
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
                End If
                
    <% End If%>
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            End Get
        End Property

    <% End If
    Next %>
#End Region
