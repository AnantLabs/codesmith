<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
    #Region "Properties"

<% If(Entity.HasRowVersionMember) Then %>
    ''' <summary>
    ''' Used for optimistic concurrency.
    ''' </summary>
    <NotUndoable()> _
    Friend <%= Entity.RowVersionMember.PropertyName %> As <%= Entity.RowVersionMember.SystemType %> = New <%= Entity.RowVersionMember.SystemTypeWithSize %> {}
    
<% End If %>
<%  For Each member As Member in Entity.MembersNoRowVersion
If UseMemberVariables Then %>

    Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.IsNullable) Then %>, Nothing<%End If%>)
    Private <%= member.PrivateMemberVariableName %> As <%= member.SystemType %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue
<% If(member.HasDescription) Then %>
    ''' <summary>
    ''' <%= member.Description %>
    ''' </summary>
<% End If %>
    <%= member.BuildDataObjectField() %>
    Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
        Get 
            Return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>) 
        End Get
        <% If member.IsReadOnly Then %>Friend <% End If %>Set (value As <%= member.SystemType %>)
            SetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>, value)
        End Set
    End Property
<%If(member.IsPrimaryKey And Not member.IsIdentity) %>

    Private Shared ReadOnly _original<%= member.PropertyName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.Original<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.IsNullable) Then %>, Nothing<%End If%>)
    Private _original<%= member.PropertyName %> As <%= member.SystemType %> = _original<%= member.PropertyName %>Property.DefaultValue
    ''' <summary>
    ''' Holds the original value for <%= member.PropertyName %>. This is used for non identity primary keys.
    ''' </summary>
    Friend Property Original<%= member.PropertyName %>() As <%= member.SystemType %>
        Get 
            Return GetProperty(_original<%= member.PropertyName %>Property, _original<%= member.PropertyName %>) 
        End Get
        Set (value As <%= member.SystemType %>)
            SetProperty(_original<%= member.PropertyName %>Property, _original<%= member.PropertyName %>, value)
        End Set
    End Property
<% End If %>
<% else %>

    Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.IsNullable) Then %>, Nothing<%End If%>)
<% If(member.HasDescription) Then %>
    ''' <summary>
    ''' <%= member.Description %>
    ''' </summary>
<% End If %>
    <%= member.BuildDataObjectField() %>
    Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
        Get 
            Return GetProperty(<%= member.PrivateMemberVariableName %>Property)
        End Get
        <% If member.IsReadOnly Then %>Friend <% End If %>Set (ByVal value As <%= member.SystemType %>)
            SetProperty(<%= member.PrivateMemberVariableName %>Property, value)
        End Set
    End Property
<%If(member.IsPrimaryKey And Not member.IsIdentity) %>

    Private Shared ReadOnly _original<%= member.PropertyName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.Original<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.IsNullable) Then %>, Nothing<%End If%>)
    ''' <summary>
    ''' Holds the original value for <%= member.PropertyName %>. This is used for non identity primary keys.
    ''' </summary>
    Friend Property Original<%= member.PropertyName %>() As <%= member.SystemType %>
        Get 
            Return GetProperty(_original<%= member.PropertyName %>Property) 
        End Get
        Set (value As <%= member.SystemType %>)
            SetProperty(_original<%= member.PropertyName %>Property, value)
        End Set
    End Property
<% End If %>
<% End If %>
    
<% Next %>
<%-- One-To-Zero-Or-One --%>
<% For Each association As Association in Entity.AssociatedOneToZeroOrOne 
Dim associationClassName As String = association.ClassName
If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then
    associationClassName += "Info"
End If
If UseMemberVariables then %>
    'OneToZeroOrOne
    Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>) = RegisterProperty(Of <%= associationClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, Csla.RelationshipTypes.Child)
    Private <%= association.PrivateMemberVariableName %> As <%= associationClassName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
<% If(association.HasDescription) Then %>
    ''' <summary>
    ''' <%= association.Description %>
    ''' </summary>
<% End If %>
    Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>
        Get
<% If UseLazyLoading Then %>
            If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria()
                <%= association.BuildObjectInitializer(true) %>

<% If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then %>
                If(<%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% Else %>
                If (Me.IsNew Or Not <%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %>.New<%= associationClassName %>())
                Else
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% End If %> 
            End If
            
<% End If %> 
            Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
        End Get
    End Property

<% else %>
    'OneToZeroOrOne
    Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>) = RegisterProperty(Of <%= associationClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, Csla.RelationshipTypes.Child)
<% If(association.HasDescription) Then %>
    ''' <summary>
    ''' <%= association.Description %>
    ''' </summary>
<% End If %>
    Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>
        Get
<% If UseLazyLoading Then %>
            If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria()
                <%= association.BuildObjectInitializer(true) %>

<% If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then %>
                If(<%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% Else %>
                If (Me.IsNew Or Not <%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %>.New<%= associationClassName %>())
                Else
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% End If %>  
            End If
            
<% End If %>  
               Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
        End Get
    End Property

<% End If
Next %>
<%-- Many-To-One --%>
<% For Each association  As Association in Entity.AssociatedManyToOne 
Dim associationClassName As String = association.ClassName
If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then
    associationClassName += "Info"
End If
If UseMemberVariables Then %>
    'ManyToOne
    Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>) = RegisterProperty(Of <%= associationClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, Csla.RelationshipTypes.Child)
    Private <%= association.PrivateMemberVariableName %> As <%= associationClassName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
<% If(association.HasDescription) Then %>
    ''' <summary>
    ''' <%= association.Description %>
    ''' </summary>
<% End If %>
    Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>
        Get
<% If UseLazyLoading Then  %>
            If Not(FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria()
                <%= association.BuildObjectInitializer(true) %>

<% If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then %>
                If(<%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% Else %>
                If (Me.IsNew Or Not <%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>.New<%= associationClassName %>())
                Else
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% End If %> 
            End If
            
<% End If %> 
            Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
        End Get
    End Property
    
<%  else  %>
    'ManyToOne
    Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>) = RegisterProperty(Of <%= associationClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, Csla.RelationshipTypes.Child)
    Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>
        Get
<% If UseLazyLoading Then %>
            If Not(FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria()
                <%= association.BuildObjectInitializer(true) %>

<% If(BusinessObjectExists(association) = False AndAlso IsReadOnlyBusinessObject( association, "Info")) Then %>
                If(<%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% Else %>
                If (Me.IsNew Or Not <%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>.New<%= associationClassName %>())
                Else
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% End If %> 
            End If
            
<% End If %>  
            Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
        End Get
    End Property
    
<% End If
Next  %>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As Association in Entity.AssociatedOneToMany 
    Dim associationClassName As String = association.ClassName
    If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject( association, "InfoList")) Then
        associationClassName += "Info"
    End If %>
    'OneToMany
    Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>List) = RegisterProperty(Of <%= associationClassName %>List)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, Csla.RelationshipTypes.Child)
<% If(association.HasDescription) Then %>
    ''' <summary>
    ''' <%= association.Description %>
    ''' </summary>
<% End If %>
Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>List 
        Get
<% If(UseLazyLoading) Then %>
            If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property)) Then
<% If(IsNameValueListBusinessObject(association, "List")) Then %>
                LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.GetAll())
<% Else %>
                Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria()
                <%= association.BuildObjectInitializer(true) %>

<% If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject( association, "InfoList")) Then %>
                If(<%= BusinessProjectName %>.<%= associationClassName %>List.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% Else %>
                If (Me.IsNew Or Not <%= BusinessProjectName %>.<%= associationClassName %>List.Exists(criteria)) Then
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.NewList())
                Else
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                End If
<% End If
End If%>
            End If
            
<% End If%>
            Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
        End Get
    End Property
    
<% Next %>
    #End Region
