<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.DataCodeTemplate" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\DataPortalPartialMethods.cst" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb'.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Data
Imports System.Data.SqlClient

Imports Csla
Imports Csla.Data
Imports Csla.Server

Imports <%= BusinessProjectName %>

Namespace <%= DataProjectName %>
    Public Partial Class <%= Entity.Name %>Factory
        Inherits ObjectFactory
    <% If Not(IsReadOnlyBusinessObject) Then %>
    
#Region "Create"
    
        ''' <summary>
        ''' Creates New <%= Entity.Name %> with default values.
        ''' </summary>
        ''' <Returns>New <%= Entity.Name %>.</Returns>
        <RunLocal()> _
        Public Function Create() As <%= Entity.Name %>
            Dim item As <%= Entity.Name %> = CType(Activator.CreateInstance(GetType(<%= Entity.Name %>), True), <%= Entity.Name %>)
    
            Dim cancel As Boolean = False
            OnCreating(cancel)
            If (cancel) Then
                Return item
            End If
    
            Using BypassPropertyChecks(item)
                ' Default values.
<% If(Entity.HasKey) Then %>
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
    If (prop.SystemType = "System.Guid") Then %>
                item.<%=prop.Name %> = Guid.NewGuid()
    <% End If
    Next
End If
    For Each association As IAssociation In Entity.Associations
        For Each prop As AssociationProperty In association.Properties
            If (prop.Property.SystemType = "System.String" And Not prop.Property.IsType(PropertyType.Identity) And prop.Property.IsType(PropertyType.Foreign)) Then %>
                item.<%= prop.Property.Name %> = "BN"
            <% End If
        Next
    Next
    %>
    
                CheckRules(item)
                MarkNew(item)
    <% If(IsChildBusinessObject) Then %>
                MarkAsChild(item)
    <% End If %>
            End Using
    
            OnCreated()
    
            Return item
        End Function
    
        ''' <summary>
        ''' Creates New <%= Entity.Name %> with default values.
        ''' </summary>
        ''' <Returns>New <%= Entity.Name %>.</Returns>
        <RunLocal()> _
        Private Function Create(ByVal criteria As <%= Entity.Name %>Criteria) As  <%= Entity.Name %>
            Dim item As <%= Entity.Name %> = CType(Activator.CreateInstance(GetType(<%= Entity.Name %>), True), <%= Entity.Name %>)
    
            Dim cancel As Boolean = False
            OnCreating(cancel)
            If (cancel) Then
                Return item
            End If
    
            Dim resource As <%= Entity.Name %> = Fetch(criteria)
    
            Using BypassPropertyChecks(item)
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.NoKeysOrConcurrency) %>
                item.<%= prop.Name %> = resource.<%= prop.Name %>
    <% Next %>
            End Using
    
            CheckRules(item)
            MarkNew(item)
    <% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
    <% End If %>
    
            OnCreated()
    
            Return item
        End Function
    
#End Region
    <% End If %>
    
#Region "Fetch
    
        ''' <summary>
        ''' Fetch <%= Entity.Name %>.
        ''' </summary>
        ''' <param name="criteria">The criteria.</param>
        Public Function Fetch(ByVal criteria As <%= Entity.Name %>Criteria) As <%= Entity.Name %>
            Dim item As <%= Entity.Name %> = Nothing
            
            Dim cancel As Boolean = False
            OnFetching(criteria, cancel)
            If (cancel) Then
                Return item
            End If
    
            Dim commandText As String = String.Format("SELECT <%= entity.Properties.BuildDataBaseColumns() %> FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag))
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand(commandText, connection)
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        If reader.Read() Then
                            item = Map(reader)
                        Else
                            Throw New System.Exception(String.Format("The record was not found In '<%= Entity.SchemaName %>.<%= Entity.EntityKeyName %>' using the following criteria: {0}.", criteria))
                        End If
                    End Using
                End Using
            End Using
    
            MarkOld(item)
    <% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
    <% End If %>
    
            OnFetched()
    
            Return item
        End Function
    
#End Region
    
    <% If Not(IsReadOnlyBusinessObject) Then %>
#Region "Insert"
    
        Private Sub DoInsert(ByRef item As <%= Entity.Name %>, ByVal stopProccessingChildren As Boolean)
            ' Don't update If the item isn't dirty.
            If Not (item.IsDirty) Then
                Return
            End If
    
            Dim cancel As Boolean = False
            OnInserting(cancel)
            If (cancel) Then
                Return
            End If
    
            Const commandText As String = "INSERT INTO [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] (<%= entity.GetProperties(PropertyType.UpdateInsert).BuildDataBaseColumns() %>) VALUES (<%= entity.GetProperties(PropertyType.UpdateInsert).BuildDataBaseParameters() %>)<%= entity.BuildInsertSelectStatement() %>"
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand(commandText, connection)
                    <%= entity.GetProperties(PropertyType.UpdateInsert).BuildCommandParameters(True, True, False, True) %>
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp)
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value = item.<%= Entity.ConcurrencyProperty.Name %>
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        If reader.Read() Then
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                            item.<%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>")
    <% End If %>
    
    <% If (Entity.HasKey AndAlso Entity.IdentityProperty IsNot Nothing) Then %>
    <% for each prop As IProperty In Entity.GetProperties(PropertyType.Key) 
        If(prop.IsType(PropertyType.Identity) OrElse prop.IsDbType(DbType.Guid)) Then%>
                            item.<%= prop.Name %> = <%If Not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>
    <% End If
    Next
    End If %>
                        End If
                    End Using
                End Using
            End Using
    
    <% If (Entity.HasKey) Then
    For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
    If Not(prop.IsType(PropertyType.Identity)) Then %>
            item.Original<%= prop.Name %> = item.<%= prop.Name %>
    <% End If
    Next
End If %>
    
            MarkOld(item)
            CheckRules(item)
            
            If Not (stopProccessingChildren) Then
                ' Update Child Items.
    <%-- One-To-Zero-Or-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.OneToOne) %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
    <%-- Many-To-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne) %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
    <%-- One-To-Many & Many-To-Many --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.OneToOne OrElse a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.ZeroOrOneToMany) %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
            End If
    
            OnInserted()
        End Sub
    
#End Region
    
#Region "Update"
    
        <Transactional(TransactionalTypes.TransactionScope)> _
        Public Function Update(ByVal item As <%= Entity.Name %>) As <%= Entity.Name %>
            Return Update(item, false)
        End Function
    
        Public Function Update(ByVal item As <%= Entity.Name %>, ByVal stopProccessingChildren as Boolean) As <%= Entity.Name %>
            If(item.IsDeleted) Then
                DoDelete(item)
                MarkNew(item)
            Else If(item.IsNew) Then
                DoInsert(item, stopProccessingChildren)
            Else
            DoUpdate(item, stopProccessingChildren)
            End If
    
            Return item
        End Function
    
        Private Sub DoUpdate(ByRef item As <%= Entity.Name %>, ByVal stopProccessingChildren As Boolean)
            Dim cancel As Boolean = False
            OnUpdating(cancel)
            If (cancel) Then
                Return
            End If
            
            ' Don't update If the item isn't dirty.
            If (item.IsDirty) Then
    <% If Entity.HasKey AndAlso Entity.IdentityProperty Is Nothing Then %>
                If <%= Entity.GetProperties(PropertyType.Key).BuildIdentityKeyEqualityStatements("item.")%> Then
                    ' Insert new child.
                    Dim temp As <%= Entity.Name %> = CType(Activator.CreateInstance(GetType(<%= Entity.Name %>), True), <%= Entity.Name %>)
                    <%= Entity.GetProperties(PropertyType.NoConcurrency).BuildObjectInitializer(true, true, false, "temp.") %>
                    temp = temp.Save()
    
                    ' Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.ManyToMany)  %>
                    For Each itemToUpdate As <%= association.TypeName %> In item.<%= association.Name %>
    <%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate", "item.") %>
                    Next
    <% Next %>
                    ' Update Child Items.
    <%-- One-To-Zero-Or-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.OneToOne) %>
                    Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
    <%-- Many-To-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse AssociationType.ManyToZeroOrOne) %>
                    Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
    <%-- One-To-Many & Many-To-Many --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.ManyToMany) %>
                    Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
        
                    ' Delete the old.
                    Dim criteria As New <%= CriteriaClassName %>()
<% If(Entity.HasKey) Then %>
                    <%= Entity.GetProperties(PropertyType.Key).BuildObjectInitializer(true, false, true) %>
<% End If %>
                    Delete(criteria)
        
                    ' Mark the original as the new one.
<% If(Entity.HasKey) Then %>
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
    If Not(prop.IsType(PropertyType.Identity)) Then %>
                    item.Original<%= prop.Name %> = item.<%= prop.Name %>
    <% End If
    Next
    %>
<% End If %>

                    MarkOld(item)
                    CheckRules(item)
    
                    OnUpdated()
            
                    Return
                End If
    
    <% End If %>
                Const commandText As String = "UPDATE [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] <%= entity.GetProperties(PropertyType.UpdateInsert).BuildSetStatements() %> <%= entity.Key.Properties.BuildWhereStatements() %><% If entity.ConcurrencyProperty IsNot Nothing Then %> AND [<%= entity.ConcurrencyProperty.KeyName %>] = <%= ParameterPrefix  %><%= entity.ConcurrencyProperty.KeyName %><% End If %><%= entity.BuildUpdateSelectStatement() %>"
                Using connection As New SqlConnection(ADOHelper.ConnectionString)
                    connection.Open()
                    Using command As New SqlCommand(commandText, connection)
                        <%= entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(True, False, False, False, True) %>
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                        command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp)
                        command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value = item.<%= Entity.ConcurrencyProperty.Name %>
                        command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
    <% If (entity.ConcurrencyProperty IsNot Nothing OrElse entity.IdentityProperty IsNot Nothing) Then %>
                        Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                            'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                            If reader.RecordsAffected = 0 Then
                                Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                            End If
        
                            If reader.Read() Then
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                                item.<%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>")
    <% End If %>
<% If(Entity.HasKey) Then %>
    <%For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If(prop.IsType(PropertyType.Identity) OrElse prop.IsDbType(DbType.Guid)) Then %>
                                item.<%= prop.Name %> = <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>
    <%  End If
    Next %>
<% End If %>
                            End If
                        End Using
    <%Else %>
                        'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        Dim result As Integer = command.ExecuteNonQuery()
                        If (result = 0) Then
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                        End If
    <% End If %>
                    End Using
                End Using
            End If
    
<% If(Entity.HasKey) Then %>
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If Not (prop.IsType(PropertyType.Identity)) Then %>
            item.Original<%= prop.Name %> = item.<%= prop.Name %>
    <% End If
    Next %>
<% End If %>

    
            MarkOld(item)
            CheckRules(item)
    
            If Not (stopProccessingChildren) Then
                ' Update Child Items.
    <%-- One-To-Zero-Or-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.OneToOne) %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
    <%-- Many-To-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne) %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
    <%-- One-To-Many & Many-To-Many --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.ManyToMany) %>
                Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(item)
    <% Next %>
            End If
    
            OnUpdated()
        End Sub
    
#End Region
    
#Region "Delete"
    
        <Transactional(TransactionalTypes.TransactionScope)> _
        Public Sub Delete(ByVal criteria As <%= Entity.Name %>Criteria)
            ' Note: this call to delete is for immediate deletion and doesn't keep track of any entity state.
            DoDelete(criteria)
        End Sub
    
        Protected Sub DoDelete(ByRef item As <%= Entity.Name %>)
            ' If we're not dirty then don't update the database.
            If Not (item.IsDirty) Then
                Return
            End If
    
            ' If we're New then don't call delete.
            If (item.IsNew) Then
                Return
            End If
    
            Dim criteria As New <%= CriteriaClassName %>()
<% If(Entity.HasKey) Then %>
    <%= Entity.GetProperties(PropertyType.Key).BuildObjectInitializer(True) %>
<% End If %>
            DoDelete(criteria)
    
            MarkNew(item)
        End Sub
    
        ''' <summary>
        ''' This call to delete is for immediate deletion and doesn't keep track of any entity state.
        ''' </summary>
        ''' <param name="criteria">The Criteria.</param>
        Private Sub DoDelete(ByVal criteria As <%= Entity.Name %>Criteria)
            Dim cancel As Boolean = False
            OnDeleting(criteria, cancel)
            If (cancel) Then
                Return
            End If
    
            Dim commandText As String = String.Format("DELETE FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag))
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand(commandText, connection)
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
    
                    'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    Dim result As Integer = command.ExecuteNonQuery()
                    If (result = 0) Then
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
                End Using
            End Using
    
            OnDeleted()
        End Sub
    
#End Region
    <% End If %>
    
#Region "Helper Methods"
    
        Public Function Map(ByVal reader As SafeDataReader) As <%= Entity.Name %>
            Dim item As <%= Entity.Name %> = CType(Activator.CreateInstance(GetType(<%= Entity.Name %>), True), <%= Entity.Name %>)
            Using BypassPropertyChecks(item)
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                item.<%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>")
    <% End If %>
    <% for each prop as IProperty In Entity.GetProperties(PropertyType.NoConcurrency) 
        If prop.IsNullable And Not prop.SystemType = "System.String" And Not prop.SystemType = "System.Byte()" Then %>
                item.<%= prop.Name %> = If(reader.IsDBNull("<%= prop.KeyName %>"), Nothing, <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>)
    <%If(prop.IsType(PropertyType.Key) And Not prop.IsType(PropertyType.Identity)) %>
                item.Original<%= prop.Name %> = If(reader.IsDBNull("<%= prop.KeyName %>"), Nothing, <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>)
    <% End If %>
    <% Else%>
                item.<%= prop.Name %> = <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>
    <%If(prop.IsType(PropertyType.Key) And Not prop.IsType(PropertyType.Identity)) %>
                item.Original<%= prop.Name %> = <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>
    <% End If 
    End If %>
    <% Next %>
            End Using
            MarkOld(item)
    <% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
    <% End If %>
    
            Return item
        End Function
    
    <%-- One-To-Zero-Or-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.OneToOne) %>
        'Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.OneToOne)
        Private Shared Sub Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ByRef item As <%= Entity.Name %>)
    <%= association.SearchCriteria.BuildUpdateStatements("item." + association.Name) %>
    
            Dim factory As New <%= association.TypeName %>Factory
            factory.Update(item.<%= association.Name %>, True)
        End Sub
    <% Next %>
    <%-- Many-To-One --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne) %>
        'Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne)
        Private Shared Sub  Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ByRef item As <%= Entity.Name %>)
    <%= association.SearchCriteria.BuildUpdateStatements("item." + association.Name) %>
    
            Dim factory As New <%= association.TypeName %>Factory
            factory.Update(item.<%= association.Name %>, True)
        End Sub
    <% Next %>
    <%-- One-To-Many & Many-To-Many --%>
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.ManyToMany) %>
        'Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.ManyToMany)
        Private Shared Sub  Update_<%= association.Name %>_<%= association.Name %>_<%= StringUtil.ToPascalCase(association.AssociationKeyName) %>(ByRef item As <%= Entity.Name %>)
            For Each itemToUpdate As <%= association.TypeName %> In item.<%= association.Name %>
    <%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate") %>
    
                Dim factory As New <%= association.TypeName %>Factory
                factory.Update(itemToUpdate, True)
            Next
        End Sub
    <% Next %>
    
#End Region
    
    <% RenderHelper(New PartialMethods()) %>
    End Class
End Namespace