<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA DataAccessLayer" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\DataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

<% RegisterReferences() %>
#Region "Imports declarations"

Imports System
Imports System.Data
Imports System.Data.SqlClient

Imports Csla
Imports Csla.Data
Imports Csla.Server

Imports <%= BusinessProjectName %>

#End Region

Public Partial Class <%= Entity.ClassName %>Factory
    Inherits ObjectFactory
<% If Not(IsReadOnlyBusinessObject) Then %>

    #Region "Create"

    ''' <summary>
    ''' Creates New <%= Entity.ClassName %> with default values.
    ''' </summary>
    ''' <Returns>New <%= Entity.ClassName %>.</Returns>
    <RunLocal()> _
    Public Function Create() As <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %> = CType(Activator.CreateInstance(GetType(<%= Entity.ClassName %>), True), <%= Entity.ClassName %>)

        Dim cancel As Boolean = False
        OnCreating(cancel)
        If (cancel) Then
            Return item
        End If

        Using BypassPropertyChecks(item)
            ' Default values.

<% For Each member As Member in Entity.PrimaryKey.KeyMembers
If (member.SystemType = "System.Guid") Then %>
            item.<%=member.PropertyName %> = Guid.NewGuid()
<% End If
Next
For Each association As Association in Entity.AssociatedForeignKeys
    For Each member As AssociationMember in association
If (member.AssociatedColumn.SystemType = "System.String" And Not member.AssociatedColumn.IsIdentity And member.AssociatedColumn.IsForeignKey) Then %>
            item.<%= member.AssociatedColumn.PropertyName %> = "BN"
<% End If
Next
Next
%>

            CheckRules(item)
            MarkNew(item)
<% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
<% End If%>
        End Using

        OnCreated()

        Return item
    End Function

    ''' <summary>
    ''' Creates New <%= Entity.ClassName %> with default values.
    ''' </summary>
    ''' <Returns>New <%= Entity.ClassName %>.</Returns>
    <RunLocal()> _
    Private Function Create(ByVal criteria As <%= Entity.ClassName %>Criteria) As  <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %> = CType(Activator.CreateInstance(GetType(<%= Entity.ClassName %>), True), <%= Entity.ClassName %>)

        Dim cancel As Boolean = False
        OnCreating(cancel)
        If (cancel) Then
            Return item
        End If

        Dim resource As <%= Entity.ClassName %> = Fetch(criteria)

        Using BypassPropertyChecks(item)
<% For Each member As Member in Entity.MembersNoKeysOrRowVersion %>
            item.<%= member.PropertyName %> = resource.<%= member.PropertyName %>
<% Next %>
        End Using

        CheckRules(item)
        MarkNew(item)
<% If(IsChildBusinessObject) Then %>
        MarkAsChild(item)
<% End If%>

        OnCreated()

        Return item
    End Function

    #End Region
<% End If %>

    #Region "Fetch"

    ''' <summary>
    ''' Fetch <%= Entity.ClassName %>.
    ''' </summary>
    ''' <param name="criteria">The criteria.</param>
    ''' <Returns></Returns>
    Public Function Fetch(ByVal criteria As <%= Entity.ClassName %>Criteria) As <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %> = Nothing
        
        Dim cancel As Boolean = False
        OnFetching(criteria, cancel)
        If (cancel) Then
            Return item
        End If

        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand("<%= GetSelectStoredProcedureName() %>", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
                <%= Entity.Members.BuildHasValueCommandParameters() %>
                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    If reader.Read() Then
                        item = Map(reader)
                    Else
                        Throw New Exception(String.Format("The record was not found in '<%= entity.Table.Name %>' using the following criteria: {0}.", criteria))
                    End If
                End Using
            End Using
        End Using

        MarkOld(item)
<% If(IsChildBusinessObject) Then %>
        MarkAsChild(item)
<% End If %>

        OnFetched()

        Return item
    End Function

    #End Region

<% If Not(IsReadOnlyBusinessObject) Then %>
    #Region "Insert"

    Private Sub DoInsert(ByRef item As <%= Entity.ClassName %>, ByVal stopProccessingChildren As Boolean)
        ' Don't update If the item isn't dirty.
        If Not (item.IsDirty) Then
            Return
        End If

        Dim cancel As Boolean = False
        OnInserting(cancel)
        If (cancel) Then
            Return
        End If

        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand("<%= GetInsertStoredProcedureName() %>", connection)
                command.CommandType = CommandType.StoredProcedure
                <%= entity.MembersNoRowVersion.BuildCommandParameters(True, True, False, True) %>
<% If(Entity.HasRowVersionMember) Then %>
                command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>", SqlDbType.Timestamp)
                command.Parameters("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>").Value = item.<%= Entity.RowVersionMember.PropertyName %>
                command.Parameters("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>").Direction = ParameterDirection.InputOutput
<% End If %>

                command.ExecuteNonQuery()

<% If (Entity.HasRowVersionMember) Then %>
                    item.<%= Entity.RowVersionMember.PropertyName %> = DirectCast(command.Parameters("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>").Value, <%= Entity.RowVersionMember.SystemType %>)
<% End If %>
<% for each member As Member in Entity.PrimaryKey.KeyMembers
    If(member.IsIdentity OrElse member.DataType = DbType.Guid.ToString()) Then %>
                    item.<%= [member].PropertyName %> = DirectCast(command.Parameters("<%= member.BuildParameterVariableName() %>").Value, <%= member.SystemType %>)
<% End If
Next %>
            End Using
        End Using

<% For Each member As Member In Entity.PrimaryKey.KeyMembers
 If Not(member.IsIdentity) Then %>
        item.Original<%= member.PropertyName %> = item.<%= member.PropertyName %>
<% End If
Next %>

        MarkOld(item)
        CheckRules(item)
        
        If Not (stopProccessingChildren) Then
            ' Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% For Each association As Association in Entity.AssociatedOneToZeroOrOne %>
            Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
<%-- Many-To-One --%>
<% For Each association As Association in Entity.AssociatedManyToOne %>
            Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As Association in Entity.AssociatedOneToMany %>
            Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
        End If

        OnInserted()
    End Sub

    #End Region

    #Region "Update"

    <Transactional(TransactionalTypes.TransactionScope)> _
    Public Function Update(ByVal item As <%= Entity.ClassName %>) As <%= Entity.ClassName %>
        Return Update(item, false)
    End Function

    Public Function Update(ByVal item As <%= Entity.ClassName %>, ByVal stopProccessingChildren as Boolean) As <%= Entity.ClassName %>
        If(item.IsDeleted) Then
            DoDelete(item)
            MarkNew(item)
        Else If(item.IsNew) Then
            DoInsert(item, stopProccessingChildren)
        Else
           DoUpdate(item, stopProccessingChildren)
        End If

        Return item
    End Function

    Private Sub DoUpdate(ByRef item As <%= Entity.ClassName %>, ByVal stopProccessingChildren As Boolean)
        Dim cancel As Boolean = False
        OnUpdating(cancel)
        If (cancel) Then
            Return
        End If

        ' Don't update If the item isn't dirty.
        If (item.IsDirty) Then

<% If Not(Entity.HasIdentityMember) Then %>
            If <%= Entity.PrimaryKey.KeyMembers.BuildIdentityKeyEqualityStatements("item.")%> Then
                ' Insert new child.
                Dim temp As <%= Entity.ClassName %> = CType(Activator.CreateInstance(GetType(<%= Entity.ClassName %>), True), <%= Entity.ClassName %>)
                <%= Entity.MembersNoRowVersion.BuildObjectInitializer(true, true, false, "temp.") %>
                temp = temp.Save()

                ' Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
<% For Each association As Association in Entity.AssociatedOneToMany  %>
                For Each itemToUpdate As <%= association.ClassName %> In item.<%= association.PropertyName %>
<%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate", "item.") %>
                Next
<% Next %>

                ' Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% For Each association As Association in Entity.AssociatedOneToZeroOrOne %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
<%-- Many-To-One --%>
<% For Each association As Association in Entity.AssociatedManyToOne %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As Association in Entity.AssociatedOneToMany %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
    
                ' Delete the old.
                Dim criteria As New <%= BusinessClassName %>Criteria()
                <%= Entity.PrimaryKey.KeyMembers.BuildObjectInitializer(true, false, true) %>
                Delete(criteria)
    
                ' Mark the original as the new one.
<% For Each member As Member In Entity.PrimaryKey.KeyMembers
 If Not(member.IsIdentity) Then %>
                item.Original<%= member.PropertyName %> = item.<%= member.PropertyName %>
<% End If
Next %>
                MarkOld(item)
                CheckRules(item)

                OnUpdated()

                Return
            End If

<% End If %>
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("<%= GetUpdateStoredProcedureName() %>", connection)
                    command.CommandType = CommandType.StoredProcedure
                    <%= entity.MembersNoRowVersion.BuildCommandParameters(True, False, False, False, True) %>
<% If(Entity.HasRowVersionMember) Then %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>", SqlDbType.Timestamp)
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>").Value = item.<%= Entity.RowVersionMember.PropertyName %>
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>").Direction = ParameterDirection.InputOutput
<% End If %>

                    'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    Dim result As Integer = command.ExecuteNonQuery()
                    If (result = 0) Then
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
                    
<% If(Entity.HasRowVersionMember) Then %>
                    item.<%= Entity.RowVersionMember.PropertyName %> = DirectCast(command.Parameters("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>").Value, <%= Entity.RowVersionMember.SystemType %>)
<% End If 
For Each member As Member In Entity.PrimaryKey.KeyMembers
    If(member.IsIdentity OrElse member.DataType = DbType.Guid.ToString()) Then %>
                    item.<%= member.PropertyName %> = DirectCast(command.Parameters("<%= member.BuildParameterVariableName() %>").Value, <%= member.SystemType %>)
<%End If
Next %>
                End Using
            End Using
        End If

<% For Each member As Member In Entity.PrimaryKey.KeyMembers
    If Not (member.IsIdentity) Then %>
        item.Original<%= member.PropertyName %> = item.<%= member.PropertyName %>
<%  End If
Next %>

        MarkOld(item)
        CheckRules(item)

        If Not (stopProccessingChildren) Then
            ' Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% For Each association As Association in Entity.AssociatedOneToZeroOrOne %>
            Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
<%-- Many-To-One --%>
<% For Each association As Association in Entity.AssociatedManyToOne %>
            Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As Association in Entity.AssociatedOneToMany %>
            Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(item)
<% Next %>
        End If

        OnUpdated()
    End Sub

    #End Region

    #Region "Delete"

    <Transactional(TransactionalTypes.TransactionScope)> _
    Public Sub Delete(ByVal criteria As <%= Entity.ClassName %>Criteria)
        ' Note: this call to delete is for immediate deletion and doesn't keep track of any entity state.
        DoDelete(criteria)
    End Sub

    Protected Sub DoDelete(ByRef item As <%= Entity.ClassName %>)
        ' If we're not dirty then don't update the database.
        If Not (item.IsDirty) Then
            Return
        End If

        ' If we're New then don't call delete.
        If (item.IsNew) Then
            Return
        End If

        Dim criteria As New <%= ChildBusinessClassName %>Criteria()
<%= Entity.PrimaryKey.KeyMembers.BuildObjectInitializer(True) %>
        DoDelete(criteria)

        MarkNew(item)
    End Sub

    Private Sub DoDelete(ByVal criteria As <%= Entity.ClassName %>Criteria)
        Dim cancel As Boolean = False
        OnDeleting(criteria, cancel)
        If (cancel) Then
            Return
        End If

        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand("<%= GetDeleteStoredProcedureName() %>", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))

                'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                Dim result As Integer = command.ExecuteNonQuery()
                If (result = 0) Then
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
            End Using
        End Using

        OnDeleted()
    End Sub

    #End Region
<% End If %>

    #Region "Helper Methods"

    Public Function Map(ByVal reader As SafeDataReader) As <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %> = CType(Activator.CreateInstance(GetType(<%= Entity.ClassName %>), True), <%= Entity.ClassName %>)
        Using BypassPropertyChecks(item)
<% If Entity.HasRowVersionMember Then %>
            item.<%= Entity.RowVersionMember.PropertyName %> = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
<% End If %>
<% for each [member] as Member in Entity.MembersNoRowVersion 
    If member.IsNullable And Not member.SystemType = "System.String" And Not member.SystemType = "System.Byte()" Then %>
            item.<%= [member].PropertyName %> = If(reader.IsDBNull("<%= [member].ColumnName %>"), Nothing, <%If not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>")<% End If %>)
<%If(member.IsPrimaryKey And Not member.IsIdentity) %>
            item.Original<%= member.PropertyName %> = If(reader.IsDBNull("<%= [member].ColumnName %>"), Nothing, <%If not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>")<% End If %>)
<% End If %>
<% Else%>
            item.<%= [member].PropertyName %> = <%If not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>")<% End If %>
<%If(member.IsPrimaryKey And Not member.IsIdentity) %>
            item.Original<%= member.PropertyName %> = <%If not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>")<% End If %>
<% End If 
End If %>
<% Next %>
        End Using

        MarkOld(item)
        Return item
    End Function

<%-- One-To-Zero-Or-One --%>
<% For Each association As Association in Entity.AssociatedOneToZeroOrOne %>
    'AssociatedOneToZeroOrOne
    Private Shared Sub Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ByRef item As <%= Entity.ClassName %>)
<%= association.SearchCriteria.BuildUpdateStatements("item." + association.PropertyName) %>

        Dim factory As New <%= association.ClassName %>Factory
        factory.Update(item.<%= association.PropertyName %>, True)
    End Sub
<% Next %>
<%-- Many-To-One --%>
<% For Each association As Association in Entity.AssociatedManyToOne %>
    'AssociatedManyToOne
    Private Shared Sub Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ByRef item As <%= Entity.ClassName %>)
<%= association.SearchCriteria.BuildUpdateStatements("item." + association.PropertyName) %>

        Dim factory As New <%= association.ClassName %>Factory
        factory.Update(item.<%= association.PropertyName %>, True)
    End Sub
<% Next %>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As Association in Entity.AssociatedOneToMany %>
    'AssociatedOneToMany
    Private Shared Sub Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ByRef item As <%= Entity.ClassName %>)
        For Each itemToUpdate As <%= association.ClassName %> In item.<%= association.PropertyName %>
<%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate") %>

            Dim factory As New <%= association.ClassName %>Factory
            factory.Update(itemToUpdate, True)
        Next
    End Sub
<% Next %>

    #End Region

<% RenderHelper(New PartialMethods()) %>
End Class