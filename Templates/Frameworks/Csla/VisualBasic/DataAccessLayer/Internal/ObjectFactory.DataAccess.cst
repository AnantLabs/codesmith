<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.DataCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<% RegisterReferences() %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb'.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Server

Imports <%= BusinessProjectName %>

Namespace <%= DataProjectName %>
    Public Function Partial class <%= Entity.Name %>Factory
        Inherits ObjectFactory
    <% If Not(IsReadOnlyBusinessObject) Then %>
#Region "Create"
    
        ''' <summary>
        ''' Creates new <%= Entity.Name %> with default values.
        ''' </summary>
        ''' <Returns>new <%= Entity.Name %>.</Returns>
        <RunLocal()> _
        Public Function Create() As <%= Entity.Name %>
            Dim item As <%= Entity.Name %> = (<%= Entity.Name %>)Activator.CreateInstance(typeof(<%= Entity.Name %>), True)
    
            Dim cancel As Boolean = False
            OnCreating(cancel)
            If (cancel) Then
                Return
            End If
    
            Using BypassPropertyChecks(item)
                ' Default values.
    
                CheckRules(item)
                MarkNew(item)
    <% If(IsChildBusinessObject) Then %>
                MarkAsChild(item)
    <% End If %>
            End Using
    
            OnCreated()
    
            Return item
        End Function
    
        ''' <summary>
        ''' Creates new <%= Entity.Name %> with default values.
        ''' </summary>
        ''' <Returns>new <%= Entity.Name %>.</Returns>
        <RunLocal()> _
        Private Create(ByVal criteria As <%= Entity.Name %>Criteria) As <%= Entity.Name %>
            Dim item As <%= Entity.Name %> = (<%= Entity.Name %>)Activator.CreateInstance(typeof(<%= Entity.Name %>), True)
    
            Dim cancel As Boolean = False
            OnCreating(cancel)
            If (cancel) Then
                Return
            End If
    
            Using BypassPropertyChecks(item)
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.NoConcurrency) %>
                'item.<%= prop.Name %> = resource.<%= prop.Name %>
    <% Next %>
            End Using
    
            CheckRules(item)
            MarkNew(resource)
    <% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
    <% End If %>
    
            OnCreated()
    
            Return item
        End Function
    
#End Region
    
    <% End If %>
#Region "Fetch"
    
        ''' <summary>
        ''' Fetch <%= Entity.Name %>.
        ''' </summary>
        ''' <param name="criteria">The criteria.</param>
        ''' <Returns></Returns>
        Public Function Fetch(ByVal criteria As <%= Entity.Name %>Criteria) As <%= Entity.Name %>
            Dim item As <%= Entity.Name %> = Nothing
            
            Dim cancel As Boolean = False
            OnFetching(criteria, cancel)
            If (cancel) Then
                Return item
            End If

            'Do Fetch

            MarkOld(item)
    <% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
    <% End If %>
    
            OnFetched()
    
            Return item
        End Function
    
#End Region
    <% If Not(IsReadOnlyBusinessObject) Then %>
    
#Region "Update"
    
        <Transactional(TransactionalTypes.TransactionScope)> _
        Public Function Update(ByVal item As <%= Entity.Name %>) As <%= Entity.Name %>
            Return Update(item, False)
        End Function
    
        Public Function Update(ByVal item As <%= Entity.Name %>, ByVal stopProccessingChildren as Boolean) As <%= Entity.Name %>
            If(item.IsDeleted) Then
                'DoDelete(item)
                MarkNew(item)
            Else If(item.IsNew) Then
                'DoInsert(item, stopProccessingChildren)
            Else
                'DoUpdate(item, stopProccessingChildren)
            End If
    
            Return item
        End Function
    
#End Region
    
#Region "Delete"
    
        <Transactional(TransactionalTypes.TransactionScope)> _
        Public Sub Delete(ByVal criteria As <%= Entity.Name %>Criteria)
            ' Delete data here.
        End Sub
    
#End Region
    <% End If %>
    End Class
End Namespace