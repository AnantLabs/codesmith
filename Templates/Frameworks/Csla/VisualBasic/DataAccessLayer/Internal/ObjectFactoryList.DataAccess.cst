<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

<% RegisterReferences() %>
#Region "Imports declarations"

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Server

Imports <%= BusinessProjectName %>

#End Region

Namespace <%= DataProjectName %>
    Public Function Partial class <%= Entity.ClassName %>ListFactory
        Inherits ObjectFactory
    <% If Not(IsReadOnlyBusinessObject) Then %>
        #Region "Create"
    
        ''' <summary>
        ''' Creates new <%= Entity.ClassName %>List with default values.
        ''' </summary>
        ''' <Returns>new <%= Entity.ClassName %>List.</Returns>
        <RunLocal()> _
        Public Function Create() As <%= Entity.ClassName %>List
            Dim item As <%= Entity.ClassName %>List = <%= Entity.ClassName %>List.NewList()
    
            Dim cancel As Boolean = False
            OnCreating(cancel)
            If (cancel) Then
                Return
            End If
    
            Using BypassPropertyChecks(item)
                ' Default values.
    
                CheckRules(item)
                MarkNew(item)
    <% If(IsChildBusinessObject) Then %>
                MarkAsChild(item)
    <% End If %>
            End Using
    
            OnCreated()
    
            Return item
        End Function
    
        #End Region
    
    <% End If %>
        #Region "Fetch"
    
        ''' <summary>
        ''' Fetch <%= Entity.ClassName %>List.
        ''' </summary>
        ''' <param name="criteria">The criteria.</param>
        ''' <Returns></Returns>
        Public Function Fetch(ByVal criteria As <%= Entity.ClassName %>Criteria) As <%= Entity.ClassName %>List
            Dim cancel As Boolean = False
            OnFetching(criteria, cancel)
            If (cancel) Then
                Return
            End If
    
            Dim item As <%= Entity.ClassName %>List
    
            MarkOld(item)
    <% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
    <% End If %>
    
            OnFetched()
    
            Return item
        End Function
    
        #End Region
    End Class
End Namespace