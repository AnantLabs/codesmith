<%--------------------------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Modified By: Blake Niemyjski
* Description: This template will generate standard CRUD stored procedures for a given database table.
--------------------------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Debug="True" Language="VB"  TargetLanguage="T-SQL"  Inherits="QuickStart.DataCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="Generates standard CRUD procedures based on a database table schema." %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>

<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%
' this template requires a primary key on the source table
If Not SourceTable.HasPrimaryKey Then
    Throw New ApplicationException("SourceTable does not contain a primary key.")
End If

' generate drop statements
Response.WriteLine("--region Drop Existing Procedures")
Response.WriteLine("")

GenerateDropStatement(GetInsertStoredProcedureShortName())
GenerateDropStatement(GetUpdateStoredProcedureShortName())
GenerateDropStatement(GetDeleteStoredProcedureShortName())
GenerateDropStatement(GetSelectStoredProcedureShortName())

Response.WriteLine("--endregion")
Response.WriteLine("")
Response.WriteLine("GO")
Response.WriteLine("")
%>
<%------------------------------------------------------------------------------------------
*
* Insert Procedure
*
------------------------------------------------------------------------------------------%>
<% GenerateProcedureHeader(GetInsertStoredProcedureName()) %>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetInsertStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetInsertStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetInsertStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customised. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

<%   ' Check to see If the primary key is a single column primary key and also If it's either an
     ' identity column or a GUID.  If so, we will not include the primary key column in the
     ' list of input parameters.

    If (SourceTable.PrimaryKey.MemberColumns.Count = 1 And (SourceTable.PrimaryKey.MemberColumns(0).DataType = DbType.Guid Or ((SourceTable.PrimaryKey.MemberColumns(0).DataType = DbType.Int16 Or SourceTable.PrimaryKey.MemberColumns(0).DataType = DbType.Int32 Or SourceTable.PrimaryKey.MemberColumns(0).DataType = DbType.Int64) And CType(SourceTable.PrimaryKey.MemberColumns(0).ExtendedProperties("CS_IsIdentity").Value, Boolean) = true))) Then
        Dim primaryKeyColumn As ColumnSchema = SourceTable.PrimaryKey.MemberColumns(0)
%>

CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% If(Entity.HasRowVersionMember) Then %>
<% GenerateParameter(SourceTable.Columns(Entity.RowVersionMember.ColumnName), 1, true, false, true, true) %>,
<% End If %>
<% GenerateParameters(SourceTable.NonPrimaryKeyColumns, 1, true, false) %>
<% GenerateParameter(primaryKeyColumn, 1, false, true, true, false) %>

AS

<%-- If the primary key is a GUID, then assign a New GUID using NEWID(). --%>
<% If (primaryKeyColumn.DataType = DbType.Guid) Then %>
SET @<%= primaryKeyColumn.Name %> = NEWID()

<% End If %>
INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] (
    <% If (primaryKeyColumn.DataType = DbType.Guid) Then %>
    [<%= primaryKeyColumn.Name %>],
    <% End If %>
    <% GenerateColumns(SourceTable.NonPrimaryKeyColumns, 1, false) %>

) VALUES (
    <% If (primaryKeyColumn.DataType = DbType.Guid) Then %>
    @<%= primaryKeyColumn.Name %>,
    <% End If %>
    <% GenerateVariables(SourceTable.NonPrimaryKeyColumns, 1, false) %>
)

<%-- If the primary key is an identity column, then capture the newly assigned identity using SCOPE_IDENTITY(). --%>
<% If (primaryKeyColumn.DataType = DbType.Int16 Or primaryKeyColumn.DataType = DbType.Int32 Or primaryKeyColumn.DataType = DbType.Int64) Then %>

SET <%= ParameterPrefix %><%= primaryKeyColumn.Name %> = SCOPE_IDENTITY()
<% End If %>

<% If(Entity.HasRowVersionMember) Then %>
SET <%= ParameterPrefix %><%= Entity.RowVersionMember.ColumnName %> = (SELECT [<%= Entity.RowVersionMember.ColumnName %>] FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, false) %>)
<% End If %>

<%-- Primary key is not a identity column or a GUID, so include all columns as input parameters. --%>
<% Else %>

CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% If(Entity.HasRowVersionMember) Then %>
<% GenerateParameter(SourceTable.Columns(Entity.RowVersionMember.ColumnName), 1, true, false, true, true) %>,
<% End If %>
<% GenerateParameters(SourceTable.Columns, 1, false) %>

AS

INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] (
    <% GenerateColumns(SourceTable.Columns, 1, false) %>
) VALUES (
    <% GenerateVariables(SourceTable.Columns, 1, false) %>
)

<% If(Entity.HasRowVersionMember) Then %>
SET <%= ParameterPrefix %><%= Entity.RowVersionMember.ColumnName %> = (SELECT [<%= Entity.RowVersionMember.ColumnName %>] FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, false) %>)
<% End If %>

<% End If %>

IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succedded was succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetInsertStoredProcedureName()) %>
<%------------------------------------------------------------------------------------------
*
* Update Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetUpdateStoredProcedureName())
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetUpdateStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetUpdateStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetUpdateStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customised. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetUpdateStoredProcedureName() %>
<% If(Entity.HasRowVersionMember) Then %>
<% GenerateParameter(SourceTable.Columns(Entity.RowVersionMember.ColumnName), 1, true, false, true, true) %>,
<% End If %>
<% GenerateParameters(SourceTable.Columns, 1, false, false, false, true) %>

AS

UPDATE <%= GetTableOwner() %>[<%= SourceTable.Name %>] SET
    <% GenerateUpdates(SourceTable.Columns, 1, false) %>

WHERE
    <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, true) %>
<% If(Entity.HasRowVersionMember) Then %>
    <% GenerateCondition(SourceTable.Columns(Entity.RowVersionMember.ColumnName), 1, false, true, false) %>
<% End If %>

<% If(Entity.HasRowVersionMember) Then %>
SET <%= ParameterPrefix %><%= Entity.RowVersionMember.ColumnName %> = (SELECT [<%= Entity.RowVersionMember.ColumnName %>] FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, false) %>)
<% End If %>

IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succedded was succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO


<%
    GenerateProcedureFooter(GetUpdateStoredProcedureName())
%>
<%------------------------------------------------------------------------------------------
*
* Delete Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetDeleteStoredProcedureName())
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetDeleteStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetDeleteStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetDeleteStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customised. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetDeleteStoredProcedureName() %>
<% GenerateParameters(SourceTable.PrimaryKey.MemberColumns, 1, false) %>

AS

DELETE FROM
    <%= GetTableOwner() %>[<%= SourceTable.Name %>]
WHERE
    <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 1, false) %>

IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succedded was succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO


<%
    GenerateProcedureFooter(GetDeleteStoredProcedureName())
%>
<%------------------------------------------------------------------------------------------
*
* Select Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetSelectStoredProcedureName())
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetSelectStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetSelectStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetSelectStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customised. Please review and remove the property if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetSelectStoredProcedureName() %>
<% GenerateParameters(SourceTable.Columns, 1, false, false, true) %>

AS

<% GenerateSetTransactionIsolationLevelStatement(IsolationLevel) %>

SELECT
    <% GenerateColumns(SourceTable.Columns, 1, true) %>

FROM
    <%= GetTableOwner() %>[<%= SourceTable.Name %>]
WHERE
    <% GenerateFindConditions(SourceTable.Columns, 1) %>

IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succedded was succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO


<%
    GenerateProcedureFooter(GetSelectStoredProcedureName())
%>
<script runat="template">
#Region "Member Variables"
Private _droppedProcedureNames As New StringCollection()
Private _generatedProcedureNames As New StringCollection()
#End Region

#Region "Isolation Level"

Public Sub GenerateSetTransactionIsolationLevelStatement(ByVal isolationLevel As TransactionIsolationLevelEnum)
    Response.Write("SET TRANSACTION ISOLATION LEVEL ")

    Select Case isolationLevel
        Case TransactionIsolationLevelEnum.ReadUncommitted
            If True Then
                Response.WriteLine("READ UNCOMMITTED")
                Exit Select
            End If
        Case TransactionIsolationLevelEnum.RepeatableRead
            If True Then
                Response.WriteLine("REPEATABLE READ")
                Exit Select
            End If
        Case TransactionIsolationLevelEnum.Serializable
            If True Then
                Response.WriteLine("SERIALIZABLE")
                Exit Select
            End If
        Case Else
            If True Then
                Response.WriteLine("READ COMMITTED")
                Exit Select
        End If
    End Select
End Sub
#End Region

#Region "Code Generation Helpers"

Private Function ConvertMemberColumnSchemaToColumnSchema(ByVal memberColumns As IList(Of MemberColumnSchema)) As IList(Of ColumnSchema)
    Dim columns As List(Of ColumnSchema) = New List(Of ColumnSchema)()
    columns.AddRange(memberColumns.Cast(Of ColumnSchema)())
    Return columns
End Function

Public Sub GenerateDropStatement(ByVal procedureName As String)
    ' check to see if this procedure has already been dropped.
    If Not _droppedProcedureNames.Contains(procedureName) Then
        Response.WriteLine("SET NUMERIC_ROUNDABORT OFF")
        Response.WriteLine("GO")
        Response.WriteLine("SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON")
        Response.WriteLine("GO")
        Response.WriteLine("IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors")
        Response.WriteLine("GO")
        Response.WriteLine("CREATE TABLE #tmpErrors (Error int)")
        Response.WriteLine("GO")
        Response.WriteLine("SET XACT_ABORT ON")
        Response.WriteLine("GO")
        Response.WriteLine("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE")
        Response.WriteLine("GO")
        Response.WriteLine("BEGIN TRANSACTION")
        Response.WriteLine("GO")
        
        Response.WriteLine("PRINT N'Dropping {0}'", procedureName)
        Response.WriteLine("GO")
        
        Response.WriteLine("IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '{0}', default, default) WHERE name = 'CustomProcedure' and value = '1')", procedureName)
        Response.WriteLine("BEGIN")
        Response.WriteLine("    RAISERROR ('The procedure {0} has an Extended Property ""CustomProcedure"" which means is has been customised. Please review and remove the property if you wish to drop the procedure.',16,1)", procedureName)
        Response.WriteLine("    INSERT INTO #tmpErrors (Error) SELECT 1")
        Response.WriteLine("END")
        Response.WriteLine("GO")
        Response.WriteLine("")
        
        Response.WriteLine("IF OBJECT_ID(N'{0}') IS NOT NULL", procedureName)
        GenerateIndent(1)
        Response.WriteLine("DROP PROCEDURE {0}", procedureName)
        Response.WriteLine("")
        
        Response.WriteLine("IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION")
        Response.WriteLine("GO")
        Response.WriteLine("")
        Response.WriteLine("IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END")
        Response.WriteLine("GO")
        Response.WriteLine("")
        Response.WriteLine("IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION")
        Response.WriteLine("GO")
        Response.WriteLine("")
        Response.WriteLine("IF @@TRANCOUNT>0 BEGIN")
        Response.WriteLine("PRINT 'The stored procedure drop has succeeded'")
        Response.WriteLine("COMMIT TRANSACTION")
        Response.WriteLine("END")
        Response.WriteLine("ELSE PRINT 'The stored procedure drop has failed'")
        Response.WriteLine("GO")
        Response.WriteLine("")
        Response.WriteLine("DROP TABLE #tmpErrors")
        Response.WriteLine("GO")
        ' add this procedure to the list of dropped procedures
        _droppedProcedureNames.Add(procedureName)
    End If
End Sub

Public Sub GenerateProcedureHeader(ByVal procedureName As String)
    Response.WriteLine("--region {0}", procedureName)
    Response.WriteLine("")
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------")
    Response.WriteLine("-- Generated By:   {0} using {1}", System.Environment.UserName, VersionInfo)
    Response.WriteLine("-- Procedure Name: {0}", procedureName)
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------")
End Sub

Public Sub GenerateProcedureFooter(ByVal procedureName As String)
    Response.WriteLine("--endregion")
    Response.WriteLine("")
    Response.WriteLine("GO")
    Response.WriteLine("")
End Sub

Public Sub GenerateIndent(ByVal indentLevel As Integer)
    For i As Integer = 0 To indentLevel - 1
        Response.Write(ControlChars.Tab)
    Next
End Sub

Public Sub GenerateParameter(ByVal column As ColumnSchema, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeTimeStamp As Boolean)
    GenerateParameter(column, indentLevel, isFirst, isLast, False, includeTimeStamp)
End Sub

Public Sub GenerateParameter(column As ColumnSchema, indentLevel As Integer, isFirst As Boolean, isLast As Boolean, isOutput As Boolean, includeTimeStamp As Boolean)
    GenerateParameter(column, indentLevel, isFirst, isLast, isOutput, includeTimeStamp, False)
End Sub

Public Sub GenerateParameter(ByVal column As ColumnSchema, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal isOutput As Boolean, ByVal includeTimeStamp As Boolean, ByVal makeParametersNullable As Boolean)
    GenerateParameter(column, indentLevel, isFirst, isLast, isOutput, includeTimeStamp, makeParametersNullable, False)
End Sub

Public Sub GenerateParameter(ByVal column As ColumnSchema, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal isOutput As Boolean, ByVal includeTimeStamp As Boolean, ByVal makeParametersNullable As Boolean, ByVal includeOriginalParam As Boolean)
    If Not includeTimeStamp AndAlso ColumnIsTimestamp(column) Then
        Exit Sub
    End If
    
    If Not isFirst Then
        Response.Write(",")
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    End If
    
    GenerateIndent(indentLevel)
    Response.Write(GetSqlParameterStatement(column, isOutput))
    If makeParametersNullable Then
        Response.Write(" = NULL")
    End If

    If makeParametersNullable AndAlso column.AllowDBNull Then
        Response.Write(String.Format("," & vbCr & vbLf & vbTab & "{0}{1}HasValue BIT = 0", ParameterPrefix, column.Name))
    End If

    If includeOriginalParam AndAlso column.IsPrimaryKeyMember AndAlso column.ExtendedProperties.Contains("CS_IsIdentity") AndAlso Not (DirectCast(column.ExtendedProperties("CS_IsIdentity").Value, Boolean)) Then
        Response.Write(",")
    
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    
        GenerateIndent(indentLevel)
        Response.Write(GetSqlParameterStatement(column, isOutput, includeOriginalParam))
    End If
End Sub

Public Function GetSqlParameterStatement(ByVal column As DataObjectBase, ByVal isOutput As Boolean) As String
    Return GetSqlParameterStatement(column, isOutput, False)
End Function

Public Function GetSqlParameterStatement(ByVal column As DataObjectBase, ByVal isOutput As Boolean, ByVal includeOriginalParam As Boolean) As String
    Dim param As String = String.Format("{0}{1}{2} {3}", ParameterPrefix, If(includeOriginalParam, "Original", ""), column.Name, column.NativeType)
    
    If Not IsUserDefinedType(column) And Not ColumnIsTimestamp(column) Then
        Select Case column.DataType
            Case DbType.[Decimal]
                If True Then
                    param += String.Format("({0}, {1})", column.Precision, column.Scale)
                    Exit Select
                End If
            Case DbType.Binary, DbType.AnsiString, DbType.AnsiStringFixedLength, DbType.[String], DbType.StringFixedLength
                If True Then
                    If column.NativeType <> "text" AndAlso column.NativeType <> "ntext" Then
                        If column.Size > 0 Then
                            param += String.Format("({0})", column.Size)
                        ElseIf column.Size = -1 Then
                            param += "(max)"
                        End If
                    End If
                    Exit Select
                End If
        End Select
    End If
    
    If isOutput Then
        param += " OUTPUT"
    End If
    
    Return param
End Function

''' <summary>
''' Determine if the given column is using a UDT.
''' </summary>
''' <param name="column"></param>
''' <returns></returns>
Public Function IsUserDefinedType(ByVal column As DataObjectBase) As Boolean
    Select Case column.NativeType.Trim().ToLower()
        Case "bigint", "binary", "bit", "char", "date", "datetime", _
            "datetime2", "time", "decimal", "float", "image", "int", _
            "money", "nchar", "ntext", "numeric", "nvarchar", "real", _
            "smalldatetime", "smallint", "smallmoney", "sql_variant", "sysname", "text", _
            "timestamp", "tinyint", "uniqueidentifier", "varbinary", "xml", "varchar"
            Return False
        Case Else
            Return True
    End Select
End Function

Public Sub GenerateParameters(ByVal columns As IList(Of MemberColumnSchema), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    GenerateParameters(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel, False, includeTimeStamp)
End Sub

Public Sub GenerateParameters(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    GenerateParameters(columns, indentLevel, False, includeTimeStamp)
End Sub

Public Sub GenerateParameters(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeTrailingComma As Boolean, ByVal includeTimeStamp As Boolean)
    GenerateParameters(columns, indentLevel, includeTrailingComma, includeTimeStamp, False)
End Sub

Public Sub GenerateParameters(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeTrailingComma As Boolean, ByVal includeTimeStamp As Boolean, ByVal makeParametersNullable As Boolean)
    GenerateParameters(columns, indentLevel, includeTrailingComma, includeTimeStamp, makeParametersNullable, False)
End Sub

Public Sub GenerateParameters(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeTrailingComma As Boolean, ByVal includeTimeStamp As Boolean, ByVal makeParametersNullable As Boolean, ByVal includeOriginalParam As Boolean)
    For Each column As Object In columns.AsIndexedEnumerable()
        GenerateParameter(column.Value, indentLevel, column.IsFirst, column.IsLast AndAlso Not includeTrailingComma, False, includeTimeStamp, makeParametersNullable, includeOriginalParam)
    Next
End Sub

Public Sub GenerateColumn(ByVal column As ColumnSchema, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeTimeStamp As Boolean)
    If Not includeTimeStamp AndAlso ColumnIsTimestamp(column) Then
        Exit Sub
    End If
    
    If Not isFirst Then
        Response.Write(",")
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    End If
    GenerateIndent(indentLevel)
    Response.Write("[")
    Response.Write(column.Name)
    Response.Write("]")
End Sub

Public Sub GenerateColumns(ByVal columns As IList(Of MemberColumnSchema), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    GenerateColumns(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel, includeTimeStamp)
End Sub

Public Sub GenerateColumns(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    For Each column As Object In columns.AsIndexedEnumerable()
        GenerateColumn(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp)
    Next
End Sub

Public Sub GenerateUpdate(ByVal column As ColumnSchema, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeTimeStamp As Boolean)
    If Not includeTimeStamp AndAlso ColumnIsTimestamp(column) Then
        Exit Sub
    End If
    
    If Not isFirst Then
        Response.Write(",")
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    End If
    
    GenerateIndent(indentLevel)
    Response.Write("[")
    Response.Write(column.Name)
    Response.Write("] = ")
    Response.Write(ParameterPrefix)
    Response.Write(column.Name)
End Sub

Public Sub GenerateUpdates(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    Dim isFirst As Boolean = True
    For Each column As Object In columns.AsIndexedEnumerable()
        If column.Value.IsPrimaryKeyMember AndAlso (column.Value.ExtendedProperties.Contains("CS_IsIdentity") AndAlso DirectCast(column.Value.ExtendedProperties("CS_IsIdentity").Value, Boolean)) Then
            Continue For
        End If

        GenerateUpdate(column.Value, indentLevel, isFirst, column.IsLast, includeTimeStamp)
        isFirst = False
    Next
End Sub

Public Sub GenerateCondition(ByVal column As ColumnSchema, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeOriginal As Boolean)
    GenerateIndent(indentLevel)
    If Not isFirst Then
        Response.Write("AND ")
    End If
    Response.Write("[")
    Response.Write(column.Name)
    Response.Write("] = ")
    Response.Write(ParameterPrefix)

If includeOriginal AndAlso column.IsPrimaryKeyMember AndAlso column.ExtendedProperties.Contains("CS_IsIdentity") AndAlso Not (DirectCast(column.ExtendedProperties("CS_IsIdentity").Value, Boolean)) Then
    Response.Write("Original")
End If

    Response.Write(column.Name)
    If indentLevel >= 0 Then
        Response.WriteLine("")
    ElseIf Not isLast Then
        Response.Write(" ")
    End If
End Sub

Public Sub GenerateConditions(ByVal columns As IList(Of MemberColumnSchema), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    GenerateConditions(ConvertMemberColumnSchemaToColumnSchema(columns), indentLevel, includeTimeStamp)
End Sub

Public Sub GenerateConditions(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer)
    GenerateConditions(columns, indentLevel, false)
End Sub
Public Sub GenerateConditions(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeOriginal As Boolean)
    For Each column As Object In columns.AsIndexedEnumerable()
        GenerateCondition(column.Value, indentLevel, column.IsFirst, column.IsLast, includeOriginal)
    Next
End Sub

Public Sub GenerateFindConditions(columns As IList(Of ColumnSchema), indentLevel As Integer)
    For Each column As Object In columns.AsIndexedEnumerable()
        GenerateFindCondition(column.Value, indentLevel, column.IsFirst, column.IsLast)
    Next
End Sub

Public Sub GenerateFindCondition(column As ColumnSchema, indentLevel As Integer, isFirst As Boolean, isLast As Boolean)
    If Not IsColumnFindable(column) Then
        Return
    End If

    GenerateIndent(indentLevel)
    If Not isFirst Then
        Response.Write("AND ")
    End If
    Response.Write("([")
    Response.Write(column.Name)
    Response.Write("] = ")
    Response.Write(ParameterPrefix)
    Response.Write(column.Name)
If column.AllowDBNull Then
    Response.Write(" OR (")
    Response.Write(ParameterPrefix)
    Response.Write(column.Name)
    Response.Write(" IS NULL AND ")
    Response.Write(ParameterPrefix)
    Response.Write(column.Name)
    Response.Write("HasValue = 0))")
Else
    Response.Write(" OR ")
    Response.Write(ParameterPrefix)
    Response.Write(column.Name)
    Response.Write(" IS NULL)")
End If

    If indentLevel >= 0 Then
        Response.WriteLine("")
    ElseIf Not isLast Then
        Response.Write(" ")
    End If
End Sub

Public Function IsColumnFindable(column As ColumnSchema) As Boolean
    If column.DataType = DbType.Binary OrElse column.NativeType = "text" OrElse column.NativeType = "ntext" OrElse column.NativeType = "timestamp" OrElse column.NativeType = "image" OrElse column.NativeType = "xml" Then
        Return False
    End If

    Return True
End Function

Public Sub GenerateVariable(ByVal column As ColumnSchema, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeTimeStamp As Boolean)
    If Not includeTimeStamp AndAlso ColumnIsTimestamp(column) Then
        Exit Sub
    End If
    
    If Not isFirst Then
        Response.Write(",")
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    End If
    GenerateIndent(indentLevel)
    Response.Write(ParameterPrefix)
    Response.Write(column.Name)
End Sub

Public Sub GenerateVariables(ByVal columns As List(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    For Each column As Object In columns.AsIndexedEnumerable()
        GenerateVariable(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp)
    Next
End Sub

Public Sub GenerateVariables(ByVal columns As IList(Of ColumnSchema), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    For Each column As Object In columns.AsIndexedEnumerable()
        GenerateVariable(column.Value, indentLevel, column.IsFirst, column.IsLast, includeTimeStamp)
    Next
End Sub

Public Function ColumnIsTimestamp(ByVal column As DataObjectBase) As Boolean
    If column.NativeType.ToLower() = "timestamp" OrElse column.NativeType.ToLower() = "rowversion" Then
        Return True
    End If
    
    Return False
End Function

#End Region

#Region "Events"

Protected Overloads Overrides Sub OnPostRender(ByVal result As String)
    If AutoExecuteStoredProcedures Then
        ' execute the output on the same database as the source table.
        Dim scriptResult As CodeSmith.BaseTemplates.ScriptResult = CodeSmith.BaseTemplates.ScriptUtility.ExecuteScript(Me.SourceTable.Database.ConnectionString, result, AddressOf Me.cn_InfoMessage)
        Trace.WriteLine(scriptResult.ToString())
    End If
    
    MyBase.OnPostRender(result)
End Sub

Private Sub cn_InfoMessage(ByVal sender As Object, ByVal ex As System.Data.SqlClient.SqlInfoMessageEventArgs)
    Trace.WriteLine(ex.Message)
End Sub

#End Region
</script>