<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a single entity business class." Debug="True" %>
<%@ Property Name="Namespace" Type="String" Default="Domain" Optional="False" Category="Context" Description="The namespace for the utility class" %>
<%@ Property Name="DomainNamespace" Type="String" Default="Business" Optional="False" Category="1. Setup" Description="The namespace to be added to the root namespace for the business objects" %>
<script runat="template"><!--#include file="..\..\Global.cs"--></script><%= GetDefaultCommentHeader() %>
using System;

namespace <%= Namespace %>.<%= DomainNamespace %>.Framework
{
	/// <summary>
	/// A custom CancelEntityEventArgs class that has a reference to the Entity firing the event. 
	/// This EventArgs class allows for the event to be canceled.
	/// </summary>
    public class EntityCancelEventArgs : System.ComponentModel.CancelEventArgs
    {
        private EntityBaseReadOnly _entity;
		/// <summary>
		/// The entity firing the event
		/// </summary>
        public EntityBaseReadOnly Entity
        {
            get { return _entity; }
            set { _entity = value; }
        }
		
		private IDataHelper _helper;
		/// <summary>
		///	The current Sql helper. This allows data access in an event to participate 
		/// in the same transaction as the object firing the event.
		/// </summary>
		public IDataHelper Helper
		{
			get { return _helper; }
			set { _helper = value; }
		}

		/// <summary>
		/// Public constructor taking the entity and a helper
		/// </summary>
        public EntityCancelEventArgs(EntityBaseReadOnly entity, IDataHelper helper)
        {
            this._entity = entity;
			this._helper = helper;
        }
		
		/// <summary>
		/// Public constructor taking the entity
		/// </summary>
		public EntityCancelEventArgs(EntityBaseReadOnly entity)
		{
			this._entity = entity;
		}
    }
}
