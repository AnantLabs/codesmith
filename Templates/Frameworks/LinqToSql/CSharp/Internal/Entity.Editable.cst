<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" 
    Description="Linq to Sql Entity Class." %>

<%@ Assembly Name="ICSharpCode.NRefactory" Path="..\..\Common" %>
<%@ Assembly Name="InsertClassMerge" Path="..\..\Common" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="InsertClassMerge" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type" 
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False" 
    Description="The Type instance for this entity. Must be set by parent template" %>
	
<%@ Property Category="1.Mapping" Name="DynamicData" 
    Type="System.Boolean" Default="true" Optional="False" 
    Description="Generate Metadata information for each Entity, Defined by parent template" 
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Name="ExistingFile" Type="CodeSmithParser" Optional="True" Category="x" %>

using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
<%if(DynamicData){%>using System.ComponentModel.DataAnnotations;<%}%>

namespace <%= Database.EntityNamespace %>
{
	<%if(DynamicData && Type.GetType().ToString() != "Function"){%> [MetadataType(typeof(<%= Type.Name %>MetaData))]<%}%>
    <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> partial class <%= Type.Name %>
    {
        #region Extensibility Method Definitions
        //partial void OnLoaded()
        //{
        //    
        //}
        
        //partial void OnValidate()
        //{
        //    
        //}
        
        //partial void OnCreated()
        //{
        //    
        //}
        #endregion
    }
	
	<%if(DynamicData){%>
	<%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> class <%= Type.Name %>MetaData
	{
<%		AttributeSectionVisitor sourceAttributes = new AttributeSectionVisitor();
		if(ExistingFile!=null)
		{
			ExistingFile.CompilationUnit.AcceptVisitor(sourceAttributes, String.Concat(Type.Name, "MetaData"));
		} 
		foreach(Column column in Type.Columns)
		{
			if(sourceAttributes.PropertyMap.ContainsKey(column.Name))
			{
				foreach (ICSharpCode.NRefactory.Ast.AttributeSection attributeSection in sourceAttributes.PropertyMap[column.Name].Attributes)
				{ %>
		<%= ExistingFile.GetSection(attributeSection.StartLocation, attributeSection.EndLocation) %>
<%   			}
			} %>
		public object <%=column.Name%> { get; set; }
		
<% 		} %>
	}
	<% } %>
}
