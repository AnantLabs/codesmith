<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" 
    Description="Linq to Sql Entity Class." %>

<%@ Assembly Name="ICSharpCode.NRefactory" Path="..\..\Common" %>
<%@ Assembly Name="InsertClassMergeStrategy" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type" 
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False" 
    Description="The Type instance for this entity. Must be set by parent template" %>

<%@ Property Category="2.Class" Name="Framework"
    Type="LinqToSqlShared.Generator.FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Which version of the .Net Framework is being generated for." %>

<%@ Property Category="2.Class" Name="ExistingFile"
    Type="CodeFileParser" Optional="True" %>

<%@ Map Name="CSharpAlias" 
    Src="System-CSharpAlias.csmap" Reverse="False" 
    Description="Convert system data types to c# alias" %>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
<%if(Framework == FrameworkEnum.v35_SP1){%>
using System.ComponentModel.DataAnnotations;
using CodeSmith.Data.Attributes;
using CodeSmith.Data.Rules;
<%}%>

namespace <%= Database.EntityNamespace %>
{
    <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> partial class <%= Type.Name %>
    {
        // For more information about the features contained in this class, please visit our GoogleCode Wiki at...
        // http://code.google.com/p/codesmith/wiki/PLINQO
        // Also, you can watch our Video Tutorials at...
        // http://community.codesmithtools.com/
        
<%      if(Framework == FrameworkEnum.v35_SP1) { %>
        #region Metadata
        
        private class Metadata
        {
            // Only Attributes in the class will be preserved.
            
<%          AttributeSectionVisitor sourceAttributes = new AttributeSectionVisitor();
            if(ExistingFile!=null)
            {
                ExistingFile.CompilationUnit.AcceptVisitor(sourceAttributes, "Metadata");
            } 
            foreach(Column column in Type.Columns)
            {
                if(sourceAttributes.PropertyMap.ContainsKey(column.Member))
                {
                    foreach (ICSharpCode.NRefactory.Ast.AttributeSection attributeSection in sourceAttributes.PropertyMap[column.Member].Attributes)
                    {
%>
            <%= ExistingFile.GetSection(attributeSection.StartLocation, attributeSection.EndLocation) %>
<%                  } // for each attribute
                } // if property
                else 
                {
                    if (!column.CanBeNull == true && column.IsDbGenerated == false)
                    {
                        if (column.Type.Contains("String"))
                        {
                            Response.WriteLine("            [Required]");
                        }
                        else if (column.Type.Contains("DateTime"))
                        {
                            if (column.Member.Contains("Create"))
                                Response.WriteLine("            [Now(EntityState.New)]");
                            else if (column.Member.Contains("Modify") || column.Member.Contains("Modified"))
                                Response.WriteLine("            [Now(EntityState.Dirty)]");
                        }
                    }
                    
                    if (column.Type.Contains("String"))
                    {
                        int size = GetSize(column.DbType);
                        if (0 < size && size < 8000)
                            Response.WriteLine(string.Format("            [StringLength({0})]", size));
                        
                        if (size > 1000 || size == -1)
                            Response.WriteLine("            [DataType(DataType.MultilineText)]");
                        else if (column.Member.Contains("Email"))
                            Response.WriteLine("            [DataType(DataType.EmailAddress)]");
                        else if (column.Member.Contains("Url") || column.Member.Contains("Uri"))
                            Response.WriteLine("            [DataType(DataType.Url)]");
                        else if (column.Member.Contains("Phone"))
                            Response.WriteLine("            [DataType(DataType.PhoneNumber)]");
                        else if (column.Member.Contains("Password"))
                            Response.WriteLine("            [DataType(DataType.Password)]");
                        else if (column.Member.Contains("Html"))
                            Response.WriteLine("            [DataType(DataType.Html)]");
                    }
                }
%>
            public <%= CSharpAlias[column.Type] %> <%=column.Member%> { get; set; }
            
<%          } // for each column %>
        }
        
        #endregion
<%      } %>
    }
}

<script runat="template">
    private static readonly Regex _sizeRegex = new Regex(@"(?<Size>\d+)", RegexOptions.Compiled);
    
    public int GetSize(string s)
    {
        int size = 0;
        
        Match m = _sizeRegex.Match(s);
        if (!m.Success)
            return size;
        
        string temp = m.Groups["Size"].Value;
        int.TryParse(temp, out size);
        return size;            
    }
</script>
