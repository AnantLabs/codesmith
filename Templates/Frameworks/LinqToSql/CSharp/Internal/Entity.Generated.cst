<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" 
    Description="Linq to Sql Entity Class." %>

<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type" 
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False" 
    Description="The Type instance for this entity. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="TableName" 
    Type="System.String" Default="" Optional="True" 
    Description="The name of the table this class is mapped to." %>
    
<%@ Property Category="2.Class" Name="EntityBase" 
    Type="System.String" Default="LinqEntityBase" Optional="True" 
    Description="The base class for the entity." %>

<%@ Property Category="2.Class" Name="Framework"
    Type="LinqToSqlShared.Generator.FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Which version of the .Net Framework is being generated for." %>
    
<%@ Property Category="2.Class" Name="IncludeDataContract"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include WCF DataContract attributes." %>

<%@ Property Category="2.Class" Name="IncludeDataServices"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include ADO.Net DataServices attributes." %>

<%@ Property Category="2.Class" Name="IncludeDataRules"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include CodeSmith.Data rules." %>

<%@ Map Name="CSharpKeyWordEscape" 
    Src="CSharpKeyWordEscape.csmap" Reverse="False" 
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="CSharpAlias" 
    Src="System-CSharpAlias.csmap" Reverse="False" 
    Description="Convert system data types to c# alias" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Linq;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
<% if (IncludeDataContract) { %>
using System.Runtime.Serialization;
<% } %>
<% if (this.Framework == FrameworkEnum.v35_SP1) { %>
using System.ComponentModel.DataAnnotations;
<% if (IncludeDataServices) { %>
using System.Data.Services.Common;
<% } %>
<% } %>
<% if (IncludeDataRules) { %>
using CodeSmith.Data.Rules;
using CodeSmith.Data.Rules.Assign;
using CodeSmith.Data.Rules.Validation;
<% } %>

namespace <%= Database.EntityNamespace %>
{
    /// <summary>
<% if (!string.IsNullOrEmpty(TableName)) { %>
    /// The class representing the <%= TableName %> table.
<% } else { %>
    /// Class representing data for the <%= Database.Name %> database.
<% } %>
    /// </summary>
    [Serializable]
    <%= GetClassAttributes() %>
<% if (IncludeDataContract) { %>
    [DataContract(<% if (Framework == FrameworkEnum.v35_SP1) { %>IsReference=true<% } %>)]
<% } %>
<% if (this.Framework == FrameworkEnum.v35_SP1) { %>
    [ScaffoldTable(true)]
    [MetadataType(typeof(Metadata))]
    <% if(IncludeDataServices) { %>
    <%
    StringBuilder dataServiceKey = new StringBuilder();
    foreach(Column column in Type.PrimaryKeyColumns)
    {
        if(dataServiceKey.Length > 0)
            dataServiceKey.Append(", ");
        dataServiceKey.AppendFormat("\"{0}\"", column.Member);
    } 
    %>
<% if (dataServiceKey.Length > 0) { %>
    [DataServiceKey(<%= dataServiceKey.ToString() %>)]
<% } %>
    <% } %>
<%}%>
<% 
    StringBuilder sb = new StringBuilder();
    foreach(Column column in Type.PrimaryKeyColumns)
    {
        if(sb.Length > 0)
            sb.Append(", ");
        
        sb.Append(column.Member);
        sb.Append(": {");
        sb.Append(column.Member);
        sb.Append("}");
    }
%>
<% if (sb.Length > 0) { %>
    [DebuggerDisplay("<%= sb.ToString() %>")]
<% } %>
    <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> partial class <%= Type.Name %>
<% if (!string.IsNullOrEmpty(EntityBase)) { %>
        : <%= EntityBase %>
<% } %>
    {
<% if (IncludeDataRules) { %>
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="<%= Type.Name %>"/> class.
        /// </summary>
        static <%= Type.Name %>()
        {
            <%if(Framework == FrameworkEnum.v35_SP1) { %>
            RuleManager.AddShared<<%= Type.Name %>>();
            <% } else {
                const string lengthFormat = "RuleManager.AddShared<{0}>(new LengthRule(\"{1}\", {2}));";
                const string requiredFormat = "RuleManager.AddShared<{0}>(new RequiredRule(\"{1}\"));";
                const string sqlDateFormat = "RuleManager.AddShared<{0}>(new RangeRule<DateTime>(\"{1}\", SqlDateTime.MinValue.Value, SqlDateTime.MaxValue.Value));";
                const string createDateFormat = "RuleManager.AddShared<{0}>(new NowRule(\"{1}\", EntityState.New));";
                const string modifyDateFormat = "RuleManager.AddShared<{0}>(new NowRule(\"{1}\", EntityState.Dirty));";
                
                int indent = Response.IndentLevel;
                Response.IndentLevel = 3;
                foreach(Column c in Type.Columns) { 
                    
                    if (!c.CanBeNull == true && c.IsDbGenerated == false)
                    {
                        if (c.Type.Contains("String"))
                        {
                            Response.WriteLine(string.Format(requiredFormat, Type.Name, c.Member));
                        }
                        else if (c.Type.Contains("DateTime"))
                        {
                            if (c.Member.Contains("Create"))
                                Response.WriteLine(string.Format(createDateFormat, Type.Name, c.Member));
                            else if (c.Member.Contains("Modify") || c.Member.Contains("Modified"))
                                Response.WriteLine(string.Format(modifyDateFormat, Type.Name, c.Member));
                            else
                                Response.WriteLine(string.Format(sqlDateFormat, Type.Name, c.Member));
                        }
                    }
                    
                    if (c.Type.Contains("String"))
                    {
                        int size = GetSize(c.DbType);
                        if (0 < size && size < 8000)
                            Response.WriteLine(string.Format(lengthFormat, Type.Name, c.Member, size));
                    }
                } 
                Response.IndentLevel = indent;
                }%>
            AddSharedRules();
        }
        #endregion
<% } // IncludeDataRules %>

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Type.Name %>"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        <%= Naming.GetModifier(Type.AccessModifier) %> <%= Type.Name %>()
        {
            OnCreated();
<% if (IncludeDataContract) { %>
            Initialize();
        }
        
        private void Initialize()
        {
<% } %>
<% foreach(Association a in Type.EntityRefAssociations) { %>
            <%= a.Storage %> = default(EntityRef<<%= a.Type %>>);
<% } // foreach Association%>
<% foreach(Association a in Type.EntitySetAssociations) { %>
            <%= a.Storage %> = new EntitySet<<%= a.Type %>>(Attach_<%= a.Member %>, Detach_<%= a.Member %>);
<% } // foreach Association%>
        }
        #endregion
        
        #region Column Mapped Properties
<% int DataMemberOrderId = 0;
    foreach(Column column in Type.Columns) { 
    string dataType = column.Type;
    string fieldType = column.Type;
    string storageAssign = column.Storage;
    
    if (column.IsDelayLoaded == true && column.IsPrimaryKey == false)
    {
        dataType = CSharpAlias[dataType];
        fieldType = string.Format("Link<{0}>", dataType);
        storageAssign = storageAssign + ".Value";
    }
    else if (column.CanBeNull == true && CommonUtility.IsNullableType(dataType))
    {
        dataType = string.Format("Nullable<{0}>", CSharpAlias[dataType]);
        fieldType = dataType;
    }    
    else
    {
        dataType = CSharpAlias[dataType];
        fieldType = dataType;
    }
    
    Association a = Type.GetForeignKeyAssociation(column);
%>
        
<% if (column.IsDbGenerated == true) { %>
        private <%= fieldType %> <%= column.Storage %> = default(<%= fieldType %>);
<% } else { %>
        private <%= fieldType %> <%= column.Storage %>;
<% } %>

        /// <summary>
<% if (!column.IsDbGenerated == true && column.IsReadOnly == false) { %>
        /// Gets or sets the <%= column.Name %> column value.
<% } else { %>
        /// Gets the <%= column.Name %> column value.
<% } %>
        /// </summary>
        <%= CreateAttributes(column, ref DataMemberOrderId) %>
        <%= Naming.GetModifier(column.AccessModifier, column.Modifier) %> <%= dataType %> <%= column.Member %>
        {
            get { return <%= storageAssign %>; }
<% if (!column.IsReadOnly == true) { %>
            set
            {
                if (<%= storageAssign %> != value)
                {
<% if (a != null) { %>
                    if (<%= a.Storage %>.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
<% } %>
                    On<%= column.Member %>Changing(value);
<% if (!string.IsNullOrEmpty(EntityBase)) { %>
                    SendPropertyChanging("<%= column.Member %>");
<% } %>
                    <%= storageAssign %> = value;
<% if (!string.IsNullOrEmpty(EntityBase)) { %>
                    SendPropertyChanged("<%= column.Member %>");
<% } %>
                    On<%= column.Member %>Changed();
                }
            }
<% } // if IsReadOnly %>
        }
<% } // foreach column%>
        #endregion
        
        #region Association Mapped Properties
<%  foreach(Association a in Type.EntityRefAssociations) {
        AssociationInfo info = GetAssociationInfo(a);
%>
        [NonSerialized]
        private EntityRef<<%= a.Type %>> <%= a.Storage %>;

        /// <summary>
        /// Gets or sets the <%= a.Type %> association.
        /// </summary>
        <%= CreateAttribute(a) %>
<% if (IncludeDataContract) { %>
        [DataMember(Order=<%= ++DataMemberOrderId %>, EmitDefaultValue=false)]
<% } %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> <%= a.Type %> <%= a.Member %>
        {
<% if (IncludeDataContract) { %>
            get { return (serializing && !<%= a.Storage %>.HasLoadedOrAssignedValue) ? null : <%= a.Storage %>.Entity; }
<% } else { %>
            get { return <%= a.Storage %>.Entity; }
<% } %>
            set
            {
<% if (info.HasOtherAssociation) { %>
                <%= a.Type %> previousValue = <%= a.Storage %>.Entity;
                if (previousValue != value || <%= a.Storage %>.HasLoadedOrAssignedValue == false)
                {
                    SendPropertyChanging("<%= a.Member %>");
                    if (previousValue != null)
                    {
                        <%= a.Storage %>.Entity = null;
                        previousValue.<%= info.OtherAssociation.Member %><%= info.RemoveSyntax %>;
                    }
                    <%= a.Storage %>.Entity = value;
                    if (value != null)
                    {
                        value.<%= info.OtherAssociation.Member %><%= info.AddSyntax %>;
<% for(int i = 0; i < info.AssignColumns.Count; i++) { %>
                        <%= info.AssignColumns[i].Storage %> = value.<%= info.OtherColumns[i].Member %>;
<% } %>
                    }
                    else
                    {
<% for(int i = 0; i < info.AssignColumns.Count; i++) { %>
                        <%= info.AssignColumns[i].Storage %> = default(<%= GetColumnType(info.OtherColumns[i]) %>);
<% } %>
                    }
                    SendPropertyChanged("<%= a.Member %>");
                }
<% } else { %>
                if (<%= a.Storage %>.Entity != value)
                {
                    SendPropertyChanging("<%= a.Member %>");
                    <%= a.Storage %>.Entity = value;
                    SendPropertyChanged("<%= a.Member %>");
                }
<% } // HasOtherAssociation %>
            }
        }
<% } %>
<% foreach(Association a in Type.EntitySetAssociations) {
        AssociationInfo info = GetAssociationInfo(a);
%>
        
        [NonSerialized]
        private EntitySet<<%= a.Type %>> <%= a.Storage %>;
        
        /// <summary>
        /// Gets or sets the <%= a.Type %> association.
        /// </summary>
        <%= CreateAttribute(a) %>
<% if (IncludeDataContract) { %>
        [DataMember(Order=<%= ++DataMemberOrderId %>, EmitDefaultValue=false)]
<% } %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> EntitySet<<%= a.Type %>> <%= a.Member %>
        {
<% if (IncludeDataContract) { %>
            get { return (serializing && !<%= a.Storage %>.HasLoadedOrAssignedValues) ? null : <%= a.Storage %>; }
<% } else { %>
            get { return <%= a.Storage %>; }
<% } %>
            set { <%= a.Storage %>.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute]
        private void Attach_<%= a.Member %>(<%= a.Type %> entity)
        {
            SendPropertyChanging(null);
            entity.<%= info.OtherAssociation.Member %> = this;
            SendPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute]
        private void Detach_<%= a.Member %>(<%= a.Type %> entity)
        {
            SendPropertyChanging(null);
            entity.<%= info.OtherAssociation.Member %> = null;
            SendPropertyChanged(null);
        }
<% if(IsManyToMany(info.OtherType))
    {
        ManyToManyInfo manyMany = GetManyToManyInfo(info.OtherType);
%>

        [NonSerialized]
        private EntitySet<<%=manyMany.RightType.Name%>> _<%=StringUtil.ToCamelCase(manyMany.RightType.Name)%>List;

        /// <summary>
        /// Gets or sets the Many To Many <%=manyMany.RightType.Name%> list.
        /// </summary>
        /// <value>The <%=manyMany.RightType.Name%> list.</value>
        public EntitySet<<%=manyMany.RightType.Name%>> <%=manyMany.RightType.Name%>List
        {
            get
            {
                if (serializing)
                    return null;

                if (_<%=StringUtil.ToCamelCase(manyMany.RightType.Name)%>List == null)
                {
                    _<%=StringUtil.ToCamelCase(manyMany.RightType.Name)%>List = new EntitySet<<%=manyMany.RightType.Name%>>(Attach_<%=manyMany.RightType.Name%>List, Detach_<%=manyMany.RightType.Name%>List);
                    _<%=StringUtil.ToCamelCase(manyMany.RightType.Name)%>List.SetSource(<%=manyMany.JoinType.Name%>List.Select(c => c.<%=manyMany.RightType.Name%>));
                }
                return _<%=StringUtil.ToCamelCase(manyMany.RightType.Name)%>List;
            }
            set
            {
                _<%=StringUtil.ToCamelCase(manyMany.RightType.Name)%>List.Assign(value);
            }
        }
        
        [DebuggerNonUserCode]
        private void Attach_<%=manyMany.RightType.Name%>List(<%=manyMany.RightType.Name%> entity)
        {
            SendPropertyChanging(null);
            <%=manyMany.JoinType.Name%>List.Add(new <%=manyMany.JoinType.Name%> { <%=manyMany.LeftType.Name%> = this, <%=manyMany.RightType.Name%> = entity });
            SendPropertyChanged(null);
        }
        
        [DebuggerNonUserCode]
        private void Detach_<%=manyMany.RightType.Name%>List(<%=manyMany.RightType.Name%> entity)
        {
            SendPropertyChanging(null);
            var <%=StringUtil.ToCamelCase(manyMany.JoinType.Name)%> = <%=manyMany.JoinType.Name%>List.FirstOrDefault(c => c.<%=manyMany.GetLeftKey()%> == <%=manyMany.GetLeftKey()%> && c.<%=manyMany.GetRightKey()%> == entity.<%=manyMany.GetRightKey()%>);
            <%=manyMany.JoinType.Name%>List.Remove( <%=StringUtil.ToCamelCase(manyMany.JoinType.Name)%>);
            SendPropertyChanged(null);
        }
    
<%} // many to many%>
<% } // foreach Association%>
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
<% foreach(Column column in Type.Columns) { 
    string dataType = CSharpAlias[column.Type];
    
    if (column.CanBeNull == true && CommonUtility.IsNullableType(column.Type))
        dataType = string.Format("Nullable<{0}>", dataType);
%>
        /// <summary>Called when <see cref="<%= column.Member %>"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void On<%= column.Member %>Changing(<%= dataType %> value);
        /// <summary>Called after <see cref="<%= column.Member %>"/> has Changed.</summary>
        partial void On<%= column.Member %>Changed();
<% } // foreach %>
        #endregion
        
<% if (IncludeDataContract) { %>
        #region Serialization
        private bool serializing;
        
        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="StreamingContext"/> for the serialization.</param>
        [OnSerializing]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context) {
            serializing = true;
        }
        
        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="StreamingContext"/> for the serialization.</param>
        [OnSerialized]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context) {
            serializing = false;
        }
        
        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="StreamingContext"/> for the serialization.</param>
        [OnDeserializing]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context) {
            Initialize();
        }
        
        #endregion
<% } %>

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// This method is equivalent to a Detach from the current <see cref="DataContext"/>.
        /// Only loaded EntityRef and EntitySet child accessions will be cloned.
        /// </remarks>
        public <%= Type.Name %> Clone()
        {
            return (<%= Type.Name %>)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will allow it to be attached to another <see cref="DataContext"/>.
        /// </remarks>
        public override void Detach()
        {
            if (!IsAttached())
                return;
            
            base.Detach();
<%  foreach(Association a in Type.EntityRefAssociations) {
        AssociationInfo info = GetAssociationInfo(a);
%>
            <%=a.Storage%> = Detach(<%=a.Storage%>);
<%  }
    foreach(Association a in Type.EntitySetAssociations) {
        AssociationInfo info = GetAssociationInfo(a);
%>
            <%=a.Storage%> = Detach(<%=a.Storage%>, Attach_<%=a.Member%>, Detach_<%=a.Member%>);
<% } %>
        }
        #endregion
    }
}

<script runat="template">
    public bool IsManyToMany(LinqToSqlShared.DbmlObjectModel.Type type)
    {
        
        if (type.Columns.Count < 2)
            return false;
        
        List<Column> pk = new List<Column>(type.PrimaryKeyColumns);
        if (pk.Count != 2)
            return false;
        
        List<Association> fk = new List<Association>();
        foreach(Column c in pk)
        {
            Association a = type.GetForeignKeyAssociation(c);
            if (a != null)
                fk.Add(a);
        }
        if (fk.Count != 2)
            return false;
        
        return true;
    }
    
    private static readonly Regex _sizeRegex = new Regex(@"(?<Size>\d+)", RegexOptions.Compiled);
    
    public int GetSize(string s)
    {
        int size = 0;
        
        Match m = _sizeRegex.Match(s);
        if (!m.Success)
            return size;
        
        string temp = m.Groups["Size"].Value;
        int.TryParse(temp, out size);
        return size;            
    }
    
    public string GetColumnType(Column column)
    {
        string dataType = column.Type;
        
        if (column.CanBeNull == true && CommonUtility.IsNullableType(dataType))
            dataType = string.Format("Nullable<{0}>", CSharpAlias[dataType]);
        else
            dataType = CSharpAlias[dataType];
        
        return dataType;
    }
    
    public string GetClassAttributes()
    {
        StringBuilder s = new StringBuilder();
        if (!string.IsNullOrEmpty(TableName))
        {
            s.AppendFormat("[Table(Name=\"{0}\")]", TableName);
            AppendInheritanceAttribute(this.Type, s);
        }
        
        return s.ToString();
    }
    
    private void AppendInheritanceAttribute(LinqToSqlShared.DbmlObjectModel.Type t, StringBuilder s)
    {
        if (!string.IsNullOrEmpty(t.InheritanceCode))
        {
            s.AppendLine();
            if (t.IsInheritanceDefault == true)
                s.AppendFormat(
                    "    [InheritanceMapping(Code=\"{0}\", Type=typeof({1}), IsDefault=true)]",
                    t.InheritanceCode, t.Name);
            else
                s.AppendFormat(
                    "    [InheritanceMapping(Code=\"{0}\", Type=typeof({1}))]",
                    t.InheritanceCode, t.Name);
        }
        
        foreach(LinqToSqlShared.DbmlObjectModel.Type d in t.SubTypes)
            AppendInheritanceAttribute(d, s);
    }
    
    public AssociationInfo GetAssociationInfo(Association a)
    {
        AssociationInfo info = new AssociationInfo();
        info.OtherType = Database.GetTypeByName(a.Type);
        if (info.OtherType == null)
            throw new Exception("Invaild Type for Association: " + a.Name);
            
        info.HasOtherAssociation = info.OtherType.Associations.Contains(a.ToOtherKey());
        if (info.HasOtherAssociation)
            info.OtherAssociation = info.OtherType.Associations[a.ToOtherKey()];
        else
            return info; // no more work needed
        
        if (string.IsNullOrEmpty(a.OtherKey))
        {
            info.OtherColumns = new List<Column>(info.OtherType.PrimaryKeyColumns);
        }
        else
        {
            string[] members = a.OtherKey.Split(new char[] { ',' });
            info.OtherColumns = info.OtherType.GetColumnsByMembers(members);
        }
            
        if (info.OtherColumns == null || info.OtherColumns.Count == 0)
            throw new Exception("Invaild OtherKey for Association: " + a.Name);
        
        if (string.IsNullOrEmpty(a.ThisKey))
        {
            info.AssignColumns = new List<Column>(Type.PrimaryKeyColumns);
        }
        else
        {
            string[] members = a.ThisKey.Split(new char[] { ',' });
            info.AssignColumns = Type.GetColumnsByMembers(members);
        }
        
        if (info.AssignColumns == null || info.AssignColumns.Count == 0)
            throw new Exception("Invaild ThisKey for Association: " + a.Name);

        info.IsOneToOne = (a.IsForeignKey == true 
            && a.Cardinality == Cardinality.One 
            && info.OtherAssociation.IsForeignKey == false
            && info.OtherAssociation.Cardinality == Cardinality.One) 
            || (a.IsForeignKey == false 
            && a.Cardinality == Cardinality.One 
            && info.OtherAssociation.IsForeignKey == true
            && info.OtherAssociation.Cardinality == Cardinality.One);
        
        if (info.IsOneToOne)
        {
            info.AddSyntax = " = this";
            info.RemoveSyntax = " = null";
        }
        else
        {
            info.AddSyntax = ".Add(this)";
            info.RemoveSyntax = ".Remove(this)";
        }
        
        return info;
    }
    
    public string CreateAttributes(Column c, ref int dataMemberOrderId)
    {
        StringBuilder s = new StringBuilder();
        s.Append("[Column(");
        s.AppendFormat("Name=\"{0}\"", c.Name);
        s.AppendFormat(", Storage=\"{0}\"", c.Storage);
        s.AppendFormat(", DbType=\"{0}\"", c.DbType);
        if (c.IsPrimaryKey == true)
            s.Append(", IsPrimaryKey=true");
        if (c.IsDbGenerated == true)
            s.Append(", IsDbGenerated=true");
        if (c.IsVersion == true)
            s.Append(", IsVersion=true");
        if (c.IsDiscriminator == true)
            s.Append(", IsDiscriminator=true");
        if (c.CanBeNull == false)
            s.Append(", CanBeNull=false");
        if (c.UpdateCheck != UpdateCheck.Always)
            s.AppendFormat(", UpdateCheck=UpdateCheck.{0}", c.UpdateCheck.ToString());
        if (!string.IsNullOrEmpty(c.Expression))
            s.AppendFormat(", Expression=\"{0}\"", c.Expression);
        s.Append(")]");
        
        string prefix = String.Concat(Environment.NewLine, "        ");
        
        if (c.IsVersion.HasValue && c.IsVersion.Value)
            s.AppendFormat("{0}[EditorBrowsable(EditorBrowsableState.Never)]", prefix);

        if (this.IncludeDataContract)
            s.AppendFormat("{0}[DataMember(Order={1})]", prefix, ++dataMemberOrderId);
            
        if (this.Framework == FrameworkEnum.v35_SP1 && c.Type.Contains("String"))
        {
            int size = LinqToSqlShared.Generator.CommonUtility.GetColumnSize(c.DbType);
            if (0 < size && size < 8000)
                s.AppendFormat("{0}[StringLength({1})]", prefix, size);
        }
        
        return s.ToString();
    }
    
    public string CreateAttribute(Association a)
    {
        StringBuilder s = new StringBuilder();
        s.Append("[Association(");
        s.AppendFormat("Name=\"{0}\"", a.Name);
        s.AppendFormat(", Storage=\"{0}\"", a.Storage);
        if (!string.IsNullOrEmpty(a.ThisKey))
            s.AppendFormat(", ThisKey=\"{0}\"", a.ThisKey);
        if (!string.IsNullOrEmpty(a.OtherKey))
            s.AppendFormat(", OtherKey=\"{0}\"", a.OtherKey);
        if (a.Cardinality == Cardinality.One)
            s.Append(", IsUnique=true");
        if (a.IsForeignKey == true)
            s.Append(", IsForeignKey=true");
        if (a.DeleteOnNull == true)
            s.Append(", DeleteOnNull=true");
        if (!string.IsNullOrEmpty(a.DeleteRule))
            s.AppendFormat(", DeleteRule=\"{0}\"", a.DeleteRule);
        
        s.Append(")]");
        
        return s.ToString();
    }
    
    public struct AssociationInfo
    {
        public bool HasOtherAssociation;
        public Association OtherAssociation;
        
        public LinqToSqlShared.DbmlObjectModel.Type OtherType;
        
        public List<Column> OtherColumns;
        public List<Column> AssignColumns;
          
        public bool IsManyToMany;
        public bool IsOneToOne;
        public string AddSyntax;
        public string RemoveSyntax;
    }
    
    public ManyToManyInfo GetManyToManyInfo(LinqToSqlShared.DbmlObjectModel.Type type)
    {
        ManyToManyInfo manyMany = new ManyToManyInfo();
        manyMany.LeftType = Type;
        manyMany.JoinType = type;
        
        foreach(Association association in type.EntityRefAssociations)
        {
            if(association.Type != Type.Name)
            {
                manyMany.RightType = Database.GetTypeByName(association.Type);
            }
        }
        return manyMany;
    }
    
    public struct ManyToManyInfo
    {
        public LinqToSqlShared.DbmlObjectModel.Type LeftType;
        public LinqToSqlShared.DbmlObjectModel.Type RightType;
        public LinqToSqlShared.DbmlObjectModel.Type JoinType;
        
        
        //string.Concat would not work below.
        public string GetRightKey()
        {
            
            string rightKey = string.Empty;
            foreach(Column pk in RightType.PrimaryKeyColumns)
                rightKey = rightKey + pk.Name;
                
            return rightKey;
        }
        
        public string GetLeftKey()
        {
            
            string leftKey = string.Empty;
            foreach(Column pk in LeftType.PrimaryKeyColumns)
                leftKey = leftKey + pk.Name;
                
            return leftKey;
        }
        
    }
</script>