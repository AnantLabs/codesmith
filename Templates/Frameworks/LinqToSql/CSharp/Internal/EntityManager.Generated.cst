<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" 
    Description="Linq to Sql Entity Manager Class." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.cs" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="2.Class" Name="Framework"
    Type="FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Include Serialization attributes and what kind." %>
    
<%@ Property Category="3.Manager" Name="ManagerNamespace" 
    Type="System.String" Default="" Optional="True" 
    Description="The namespace to use for the generated manager class files."%>

<%@ Property Category="3.Manager" Name="DataManager" 
    Type="Manager.DataManager" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Property Category="3.Manager" Name="MethodPrefix" 
    Type="System.String" Default="GetBy" Optional="True" 
    Description="The prefix of query method names." %>

<%@ Property Category="3.Manager" Name="MethodKeySuffix" 
    Type="System.String" Default="Key" Optional="False" 
    Description="The suffix of the primary key query method names." %>

<%@ Property Category="3.Manager" Name="EntityManager" 
    Type="Manager.EntityManager" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Property Category="4.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="4.Mapping" Name="Table" 
    Type="LinqToSqlShared.DbmlObjectModel.Table" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Map Name="CSharpKeyWordEscape" 
    Src="CSharpKeyWordEscape.csmap" Reverse="False" 
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="CSharpAlias" 
    Src="System-CSharpAlias.csmap" Reverse="False" 
    Description="Convert system data types to c# alias" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
<% 
string safeName = EntityManager.EntityName;
if (safeName == "Query") { 
    safeName = Database.EntityNamespace + "." + EntityManager.EntityName;
}
%>

using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using CodeSmith.Data;
using CodeSmith.Data.Rules;
using CodeSmith.Data.Rules.Assign;
using CodeSmith.Data.Rules.Validation;
<% if (Database.ContextNamespace != ManagerNamespace) { %>
using <%= Database.ContextNamespace %>;
<% } %>
<% if (Database.ContextNamespace != Database.EntityNamespace) { %>
using <%= Database.EntityNamespace %>;
<% } %>

namespace <%= ManagerNamespace %>
{
    /// <summary>
    /// The manager class for <%= EntityManager.EntityName %>.
    /// </summary>
    public partial class <%= EntityManager.ManagerName %> : EntityManagerBase<<%= DataManager.DataManagerName %>, <%= safeName %>>
    {
        /// <summary>
        /// Initializes the <see cref="<%= EntityManager.ManagerName %>"/> class.
        /// </summary>
        static <%= EntityManager.ManagerName %>()
        {
            AddRules();
        }

        /// <summary>
        /// Initializes the <see cref="<%= EntityManager.ManagerName %>"/> class.
        /// </summary>
        /// <param name="manager">The current manager.</param>
        public <%= EntityManager.ManagerName %>(<%= DataManager.DataManagerName %> manager) : base(manager)
        {
            OnCreated();
        }

        /// <summary>
        /// Gets the current context.
        /// </summary>
        protected <%= DataManager.DataContextName %> Context
        {
            get { return Manager.Context; }
        }
        
        /// <summary>
        /// Gets the entity for this manager.
        /// </summary>
        protected Table<<%= safeName %>> Entity
        {
            get { return Manager.Context.<%= EntityManager.PropertyName %>; }
        }
        
<% foreach(ManagerMethod method in EntityManager.Methods) { 
    string parameters = GetParameters(method); 
    string paramNames = GetParametersNames(method);
    string paramTypes = GetParametersTypes(method);
%>
<% if (method.IsKey) { %>
<% if (method.Columns.Count < 5) { %>
        
        /// <summary>
        /// Creates the key for this entity.
        /// </summary>
        public static IEntityKey<<%= paramTypes %>> CreateKey(<%= parameters %>)
        {
            return new EntityKey<<%= paramTypes %>>(<%= paramNames %>);
        }
        
        /// <summary>
        /// Gets an entity by the primary key.
        /// </summary>
        /// <param name="key">The key for the entity.</param>
        /// <returns>
        /// An instance of the entity or null if not found.
        /// </returns>
        /// <remarks>
        /// This method is expecting key to be of type IEntityKey&lt;<%= paramTypes %>&gt;.
        /// </remarks>
        /// <exception cref="ArgumentException">Thrown when key is not of type IEntityKey&lt;<%= paramTypes %>&gt;.</exception>
        public override <%= safeName %> GetByKey(IEntityKey key)
        {
            if (key is IEntityKey<<%= paramTypes %>>)
            {
                IEntityKey<<%= paramTypes %>> entityKey = (IEntityKey<<%= paramTypes %>>)key;
<% if (method.Columns.Count == 1) { %>
                return <%= MethodPrefix %><%= MethodKeySuffix %>(entityKey.Key);
<% } else if (method.Columns.Count == 2) { %>
                return <%= MethodPrefix %><%= MethodKeySuffix %>(entityKey.Key, entityKey.Key1);
<% } else if (method.Columns.Count == 3) { %>
                return <%= MethodPrefix %><%= MethodKeySuffix %>(entityKey.Key, entityKey.Key1, entityKey.Key2);
<% } else if (method.Columns.Count == 4) { %>
                return <%= MethodPrefix %><%= MethodKeySuffix %>(entityKey.Key, entityKey.Key1, entityKey.Key2, entityKey.Key3);
<% } %>
            }
            else
            {
                throw new ArgumentException("Invalid key, expected key to be of type IEntityKey<<%= paramTypes %>>");
            }
        }
        
<% } // columns less then 5 %>
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public <%= safeName %> <%= MethodPrefix %><%= MethodKeySuffix %>(<%= parameters %>)
        {
<% if (method.Columns.Count < 4) { %>
            if (Context.LoadOptions == null) 
                return Query.<%= MethodPrefix %><%= MethodKeySuffix %>.Invoke(Context, <%= paramNames %>);
            else
<% } // column count%>
                return Entity.FirstOrDefault(<%= GetLamba(method, 5) %>);
        }
<% } else if (method.IsUnique) { %>
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public <%= safeName %> <%= MethodPrefix %><%= method.NameSuffix %>(<%= parameters %>)
        {
<% if (method.Columns.Count < 4) { %>
            if (Context.LoadOptions == null) 
                return Query.<%= MethodPrefix %><%= method.NameSuffix %>.Invoke(Context, <%= paramNames %>);
            else
<% } // column count%>
                return Entity.FirstOrDefault(<%= GetLamba(method, 5) %>);
        }
<% } else { %>
        /// <summary>
        /// Gets a query by an index.
        /// </summary>
        public IQueryable<<%= safeName %>> <%= MethodPrefix %><%= method.NameSuffix %>(<%= parameters %>)
        {
<% if (method.Columns.Count < 4) { %>
            if (Context.LoadOptions == null) 
                return Query.<%= MethodPrefix %><%= method.NameSuffix %>.Invoke(Context, <%= paramNames %>);
            else
<% } // column count%>
                return Entity.Where(<%= GetLamba(method, 5) %>);
        }
<% } // if is key%>
<% } // foreach method%>

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddRules();
        /// <summary>Called when the class is created.</summary>
        partial void OnCreated();
        #endregion
        
        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
<% foreach(ManagerMethod method in EntityManager.Methods) { 
    string parameters = GetParameters(method); 
    string paramNames = GetParametersNames(method);
    string paramTypes = GetParametersTypes(method);
%>
<% if (method.Columns.Count < 4) { %>
<% if (method.IsKey) { %>

            internal static readonly Func<<%= DataManager.DataContextName %>, <%= paramTypes %>, <%= safeName %>> <%= MethodPrefix %><%= MethodKeySuffix %> = 
                CompiledQuery.Compile(
                    (<%= DataManager.DataContextName %> db, <%= parameters %>) => 
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>));
<% } else if (method.IsUnique) { %>

            internal static readonly Func<<%= DataManager.DataContextName %>, <%= paramTypes %>, <%= safeName %>> <%= MethodPrefix %><%= method.NameSuffix %> = 
                CompiledQuery.Compile(
                    (<%= DataManager.DataContextName %> db, <%= parameters %>) => 
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>));
<% } else { %>

            internal static readonly Func<<%= DataManager.DataContextName %>, <%= paramTypes %>, IQueryable<<%= safeName %>>> <%= MethodPrefix %><%= method.NameSuffix %> = 
                CompiledQuery.Compile(
                    (<%= DataManager.DataContextName %> db, <%= parameters %>) => 
                        db.<%= EntityManager.PropertyName %>.Where(<%= GetLamba(method, 7) %>));
<% } // if is key%>
<% } // column count%>
<% } // foreach method%>

        }
        #endregion
    }
}

<script runat="template">
    public string GetParameters(ManagerMethod method)
    {
        StringBuilder args = new StringBuilder();
        foreach(Column column in method.Columns)
        {
            if (args.Length > 0)
                args.Append(", ");
            
            string paramName = CommonUtility.GetParameterName(column.Member);
            
            string typeName = CSharpAlias[column.Type];
            if (column.CanBeNull == true && CommonUtility.IsNullableType(column.Type))
                typeName += "?";
                
            args.AppendFormat("{0} {1}",
                typeName,
                CSharpKeyWordEscape[paramName]);
        }
        
        return args.ToString();
    }
    
    public string GetParametersNames(ManagerMethod method)
    {
        StringBuilder args = new StringBuilder();
        foreach(Column column in method.Columns)
        {
            if (args.Length > 0)
                args.Append(", ");
            
            string paramName = CommonUtility.GetParameterName(column.Member);
            args.Append(CSharpKeyWordEscape[paramName]);
        }
        
        return args.ToString();
    }
    
    public string GetParametersTypes(ManagerMethod method)
    {
        StringBuilder args = new StringBuilder();
        foreach(Column column in method.Columns)
        {
            if (args.Length > 0)
                args.Append(", ");
            
            string typeName = CSharpAlias[column.Type];
            if (column.CanBeNull == true && CommonUtility.IsNullableType(column.Type))
                typeName += "?";
            
            args.Append(typeName);
        }
        
        return args.ToString();
    }
    
    public string GetLamba(ManagerMethod method, int tabCount)
    {
        StringBuilder lamba = new StringBuilder();
        string alias = method.EntityName.Substring(0, 1).ToLowerInvariant();
        
        foreach(Column column in method.Columns)
        {
            string paramName = CommonUtility.GetParameterName(column.Member);
            paramName = CSharpKeyWordEscape[paramName];
            
            if (lamba.Length == 0)
            {
                lamba.AppendFormat("{0} => ", alias);
            }
            else
            {
                lamba.Append(" \r\n");
                lamba.Append('\t', tabCount);
                lamba.Append("&& ");
            }
                
            lamba.AppendFormat("{0}.{1} == {2}",
                alias,
                column.Member,
                paramName);;
        }
        
        return lamba.ToString();
    }
    
    private static readonly Regex _sizeRegex = new Regex(@"(?<Size>\d+)", RegexOptions.Compiled);
    
    public int GetSize(string s)
    {
        int size = 0;
        
        Match m = _sizeRegex.Match(s);
        if (!m.Success)
            return size;
        
        string temp = m.Groups["Size"].Value;
        int.TryParse(temp, out size);
        return size;            
    }
</script>