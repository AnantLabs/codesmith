<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" 
    Description="Linq to Sql Entity Manager Class." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.cs" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>


<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database schema instance. Must be set by parent template" %>
    
<%@ Property Category="1.Mapping" Name="Type" 
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False" 
    Description="The Type instance for this entity. Must be set by parent template" %>
    
<%@ Property Category="2.Query" Name="MethodPrefix" 
    Type="System.String" Default="GetBy" Optional="True" 
    Description="The prefix of query method names." %>

<%@ Property Category="2.Query" Name="MethodKeySuffix" 
    Type="System.String" Default="Key" Optional="False" 
    Description="The suffix of the primary key query method names." %>

<%@ Map Name="CSharpKeyWordEscape" 
    Src="CSharpKeyWordEscape.csmap" Reverse="False" 
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="CSharpAlias" 
    Src="System-CSharpAlias.csmap" Reverse="False" 
    Description="Convert system data types to c# alias" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Linq;
<% if (Database.ContextNamespace != Database.EntityNamespace) { %>
using <%= Database.EntityNamespace %>;
<% } %>
 
namespace <%= Database.ContextNamespace %>
{
    /// <summary>
    /// The query extension class for <%= Type.Name %>.
    /// </summary>
    public static partial class <%= Type.Name %>Extensions
    {

<% foreach(Column column in Type.Columns) { %>
        /// <summary>
        /// Gets a query by an index.
        /// </summary>
<%if(column.IsPrimaryKey.Value) {%>
		public static <%=Type.Name%> <%= MethodPrefix %><%= column.Member %>(this IQueryable<<%= Type.Name%>> entity,  <%= CSharpAlias[column.Type] %> <%=StringUtil.ToCamelCase(column.Member) %>)
        {
            return entity.FirstOrDefault(c => c.<%=column.Member%> == <%=StringUtil.ToCamelCase(column.Member) %>);
        }
		
<% } else if(!column.IsVersion.Value){ %>
        public static IQueryable<<%= Type.Name %>> <%= MethodPrefix %><%= column.Member %>(this IQueryable<<%= Type.Name %>> queryable, <%= CSharpAlias[column.Type] %> <%=StringUtil.ToCamelCase(column.Member) %>)
        {
            return queryable.Where(c => c.<%=column.Member%> == <%=StringUtil.ToCamelCase(column.Member)%>);
        }
        
<% }
}%>
        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
<% foreach(Column column in Type.Columns) { %>
<%if(column.IsPrimaryKey.Value) {%>

            internal static readonly Func<<%= Database.Class %>, <%= CSharpAlias[column.Type] %>, <%= Type.Name %>> <%= MethodPrefix %><%= column.Name %><%= MethodKeySuffix %> = 
                CompiledQuery.Compile(
                    (<%= Database.Class %> db,<%= CSharpAlias[column.Type] %> <%=StringUtil.ToCamelCase(column.Member) %>) => 
                        db.<%= Type.Name %>.FirstOrDefault(c => c.<%=column.Member%> == <%=StringUtil.ToCamelCase(column.Member) %>));
<% } // if is key%>
<% } // foreach method%>

        }
        #endregion
    }
}