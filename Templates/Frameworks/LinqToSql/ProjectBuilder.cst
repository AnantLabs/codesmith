<%-- 
Name: Quick Start
Author: Reggie Bradshaw
Description: Used to Quick Start Visual Studio Projects
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." CompilerVersion="v3.5" %>
<%@ Assembly Name="System" %>
<%@ Assembly Name="ICSharpCode.SharpZipLib" Path="Common" %>
<%@ Assembly Name="QuickStartUtils" Path="Common"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="ICSharpCode.SharpZipLib.Zip" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="QuickStartUtils" %>
<%@ Register Name="QuickStartSolution" Template="QuickStartSolution.cst" %>
<%@ Property Name="VisualStudioVersion" Type="QuickStartSolution.VisualStudioVersionEnum" Optional="False" Category="1.Project" Description="Version of Visual Studio to Generate for." %>
<%@ Property Name="Location" Type="System.String" Default="" Optional="False" Category="1.Project" Description="This is the path to the project location." %>
<%@ Property Name="CodeSmithSamplesLocation" Type="System.String" Default="" Optional="True" Category="" Description="" %>
<%@ Property Name="ProjectName" Type="System.String" Default="" Optional="False" Category="1.Project" Description="Name of the project to be generated." %>
<%@ Property Name="Language" Type="QuickStartUtils.LanguageEnum" Default="CSharp" Optional="False" Category="1.Project" Description="Language the project will be in" %>
<%@ Property Name="ProjectType" Type="QuickStartUtils.ProjectTypeEnum" Default="DynamicData" Optional="False" Category="" Description="Type of Project to be created" %>
<%@ Property Name="DataContext" Type="System.String" Default="" Optional="False" Category="2.Data" Description="Name Space for the Data Project." %>
<%@ Property Name="IncludePlinqoFiles" Type="System.Boolean" Default="False" Optional="False" Category="2.Data" Description="Include a copy of the LinqToSql Templates in the project directory" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Default="" Optional="False" Category="3.Database" Description="Source Database" %>

<% CreateDirectoryStructure(); %>
<script runat="template">

	public void CreateDirectoryStructure()
    {   
		// Prep Directories
		if(!Directory.Exists(Location))
			Directory.CreateDirectory(Location);
				
		// Create SolutionItems
		List<QuickStartSolution.SolutionItem> solutionItems = new List<QuickStartSolution.SolutionItem>();
		
		// Create Website Project
		WebsiteProjectCreator websiteProjectCreator = new WebsiteProjectCreator(this);
		solutionItems.Add(websiteProjectCreator.CreateProject(String.Concat(this.ProjectName, ".Website")));
		
		// Create Data Project
		DataProjectCreator dataProjectCreator = new DataProjectCreator(this);
		solutionItems.Add(dataProjectCreator.CreateProject(String.Concat(this.ProjectName, ".Data")));
		
		// Create UnitTests Project
		UnitTestProjectCreator unitTestProjectCreator = new UnitTestProjectCreator(this);
		solutionItems.Add(unitTestProjectCreator.CreateProject(String.Concat(this.ProjectName, ".UnitTests")));
		
		// Copy Plinqo Templates
		if(IncludePlinqoFiles)
            QuickStartUtils.CopyDirectory(@"..\LinqToSql",Location + @"\LinqToSql",0);
		
		// Create Solution
		CreateSolution(solutionItems);
    }
	
	private void CreateSolution(List<QuickStartSolution.SolutionItem> solutionItems)
	{
		QuickStartSolution quickStartSolution = this.Create<QuickStartSolution>();
		quickStartSolution.VisualStudioVersion = VisualStudioVersion;
		quickStartSolution.SolutionItems = solutionItems;
		
		string filePathAboslute = Path.Combine(Location, String.Concat(ProjectName, ".sln"));
		quickStartSolution.RenderToFile(filePathAboslute, true);
	}
	
	#region Properties
	
	//Folder in vs web projects where the correct zip file is located
	protected string LanguageFolder
	{
		get { return (this.Language == QuickStartUtils.LanguageEnum.CSharp)	? "CSharp" : "VisualBasic"; }
	}
	//Some file names in the VS zip files hava an appendage that should be removed
	protected string LanguageAppendage 
	{
		get { return (this.Language == QuickStartUtils.LanguageEnum.CSharp) ? "cs" : "vb"; }
	}
	//A different zip file exists for each project type
	protected string FileName
	{
		get
		{
			string projectTypeFileName;
			switch (ProjectType)
			{
				default:
				case QuickStartUtils.ProjectTypeEnum.DynamicData:
					projectTypeFileName = "DynamicDataLinqToSqlWebApplication";
					break;
				case QuickStartUtils.ProjectTypeEnum.MVC:
					projectTypeFileName = "MvcWebApplicationProjectTemplateP5";
					break;
			}
			return projectTypeFileName;
		}
	}
	protected string ZipFileFolder
	{
		get { return Path.Combine("Common", LanguageFolder); }
	}
	
	#endregion
	
	#region WebsiteProjectCreator
	
	class WebsiteProjectCreator : VsProjectCreator
	{
		public WebsiteProjectCreator(ProjectBuilder_cst projectBuilder)
			: base(projectBuilder) { }
		
		protected override void GetFiles(PathHelper projectPath)
		{
			GetVsProject(projectPath.DirectoryPath, projectPath.FileName, ProjectBuilder.FileName);
		}
		protected override void ReplaceVariables(PathHelper projectPath, string projectGuid, string projectName)
		{
			VariableUpdateDirectory(projectPath, projectGuid, projectName, this.ProjectBuilder.LanguageAppendage);
			UpdateWebConfig(projectPath.DirectoryPath);
		}
	}
	
	#endregion
	
	#region DataProjectCreator
	
	class DataProjectCreator : VsProjectCreator
	{
		public DataProjectCreator(ProjectBuilder_cst projectBuilder)
			: base(projectBuilder) { }
		
		protected override void GetFiles(PathHelper projectPath)
		{
			GetVsProject(projectPath.DirectoryPath, projectPath.FileName, "ClassLibrary");
			File.Copy(@".\Common\QuickStart.csp", Path.Combine(projectPath.DirectoryPath, "QuickStart.csp"));
		}
		protected override void ReplaceVariables(PathHelper projectPath, string projectGuid, string projectName)
		{
			VariableUpdateDirectory(projectPath, projectGuid, projectName,this.ProjectBuilder.LanguageAppendage);
			VariableUpdateQuickStartCsp(projectPath, projectName);
		}
		
		private void VariableUpdateQuickStartCsp(PathHelper projectPath, string projectName)
		{
			string linqToSqlPath = (ProjectBuilder.IncludePlinqoFiles) ? @"..\LinqToSql" : String.Empty; // Needs Normal Path here
			string quickStartPath = Path.Combine(projectPath.DirectoryPath, "QuickStart.csp");
	
			QuickStartUtils.FindAndReplace(quickStartPath, @"\$connectionString\$", ProjectBuilder.SourceDatabase.ConnectionString);
			QuickStartUtils.FindAndReplace(quickStartPath, @"\$myDatabase\$", ProjectBuilder.SourceDatabase.Database.Name);
			QuickStartUtils.FindAndReplace(quickStartPath, @"\$myContextNamespace\$", ProjectBuilder.DataContext);
			QuickStartUtils.FindAndReplace(quickStartPath, @"\$language\$", ProjectBuilder.LanguageFolder);
			QuickStartUtils.FindAndReplace(quickStartPath, @"\$linqToSql\$", linqToSqlPath);
			
			//The location in the csproj file directly below where we want to insert the csp include
			string projectInsertLocation = "<Import Project";
			QuickStartUtils.FindAndReplace(projectPath.FilePath, projectInsertLocation,
				String.Format("<ItemGroup>{0}\t\t<Generate Include=\"QuickStart.csp\" />{0}\t</ItemGroup>{0}\t{1}", Environment.NewLine, projectInsertLocation));
			QuickStartUtils.FindAndReplace(projectPath.FilePath, "</Project>",
				String.Format("\t<Import Project=\"$(MSBuildExtensionsPath)\\CodeSmith\\CodeSmith.targets\" />{0}</Project>", Environment.NewLine));
		}
	}
	
	#endregion
	
	#region UnitTestProjectCreator
	
	class UnitTestProjectCreator : VsProjectCreator
	{
		public UnitTestProjectCreator(ProjectBuilder_cst projectBuilder)
			: base(projectBuilder) { }
		
		protected override void GetFiles(PathHelper projectPath)
		{
			GetVsProject(projectPath.DirectoryPath, projectPath.FileName, "TestProject");
		}
		protected override void ReplaceVariables(PathHelper projectPath, string projectGuid, string projectName)
		{
			VariableUpdateDirectory(projectPath, projectGuid, projectName, this.ProjectBuilder.LanguageAppendage);
		}
	}
	
	#endregion
	
	#region VsProjectCreator
	
	abstract class VsProjectCreator
	{
		#region PathHelper Class
	
		public class PathHelper
		{
			public PathHelper(string fileName, string directoryName, string parentPath)
			{
				FileName = fileName;
				DirectoryName = directoryName;
				
				DirectoryFile = Path.Combine(DirectoryName, FileName);
				
				DirectoryPath = Path.Combine(parentPath, DirectoryName);
				FilePath = Path.Combine(DirectoryPath, FileName);
			}
			
			public string FileName { get; private set; }
			public string DirectoryName { get; private set; }
			
			public string DirectoryFile { get; private set; }
			
			public string DirectoryPath { get; private set; }
			public string FilePath { get; private set; }
		}
		
		#endregion
		
		protected ProjectBuilder_cst ProjectBuilder;
		
		public VsProjectCreator(ProjectBuilder_cst projectBuilder)
		{
			this.ProjectBuilder = projectBuilder;
		}
		
		public virtual QuickStartSolution.SolutionItem CreateProject(string projectName)
		{
			// Create Path Helper
			PathHelper projectPath = new PathHelper(String.Format("{0}.{1}proj", projectName, ProjectBuilder.LanguageAppendage), projectName, ProjectBuilder.Location);
		
			// Create TargetDirectory
			if(!Directory.Exists(projectPath.DirectoryPath))
				Directory.CreateDirectory(projectPath.DirectoryPath);
				
			// Create SolutionItem
			QuickStartSolution.SolutionItem solutionItem = new QuickStartSolution.SolutionItem(projectName, projectPath.DirectoryFile, ProjectBuilder.Language);
			
			// Get Files
			GetFiles(projectPath);
			
			// Replace Variables In Files
			ReplaceVariables(projectPath, solutionItem.GuidString, projectName);
			
			// Return Solution Item
			return solutionItem;
		}
		
		protected abstract void GetFiles(PathHelper projectPath);
		protected abstract void ReplaceVariables(PathHelper projectPath, string projectGuid, string projectName);
		
		protected void GetVsProject(string directoryPath, string projectFileName, string fileName)
		{
			// Unzip Folder
			string zipFilePath = String.Format("{0}.zip", fileName);
			string zipProjFileName = String.Format("{0}.{1}proj", fileName, ProjectBuilder.LanguageAppendage);
			UnzipFileAndRename(zipFilePath, directoryPath, zipProjFileName, projectFileName);
			
			// Delete the vstemplate
			string vstemplate = QuickStartUtils.FindFileInDirectory(".vstemplate", directoryPath);
			if(!String.IsNullOrEmpty(vstemplate)&& File.Exists(vstemplate))
				File.Delete(vstemplate);
			
			// Delete Class1.cs
			string class1 = QuickStartUtils.FindFileInDirectory("class1.cs", directoryPath);
			if(!String.IsNullOrEmpty(class1)&& File.Exists(class1))
				File.Delete(class1);
			
			// Move AssemplyInfo to Properties Folder
			string assemblyInfo = QuickStartUtils.FindFileInDirectory("assemblyinfo.cs", directoryPath);
			if(!String.IsNullOrEmpty(assemblyInfo) && File.Exists(assemblyInfo))
			{
				string propertiesDirectory = Path.Combine(directoryPath, "Properties");
				if(!Directory.Exists(propertiesDirectory))
					Directory.CreateDirectory(propertiesDirectory);
				File.Move(assemblyInfo, Path.Combine(propertiesDirectory, Path.GetFileName(assemblyInfo)));
			}
		}
		protected void UnzipFileAndRename(string zipFileName, string targetDirectory, params string[] renameFiles)
		{
			// Unzip Files
			FastZip fz = new FastZip();
			string zipFilePath = Path.Combine(ProjectBuilder.ZipFileFolder, zipFileName);
			fz.ExtractZip(zipFilePath, targetDirectory, "");
			
			// Rename Files
			if(renameFiles.Length % 2 != 0)
				throw new Exception("UnzipFile() needs an even number of params: SourceFile, DestinationFile");
			for(int x=0; x<renameFiles.Length; x+=2)
			{
				string sourFile = Path.Combine(targetDirectory, renameFiles[x]);
				string destFile = Path.Combine(targetDirectory, renameFiles[x+1]);
				File.Move(sourFile, destFile);
			}
		}
		
		protected void VariableUpdateDirectory(PathHelper helper, string projectGuid, string projectName, string language)
		{
			QuickStartUtils.ReplaceAllInDirectory(helper.DirectoryPath, @"\$projectname\$", projectName);
			QuickStartUtils.ReplaceAllInDirectory(helper.DirectoryPath, @"\$safeprojectname\$", projectName);
			QuickStartUtils.FindAndReplace(helper.FilePath, @"\$guid1\$", @"{" + projectGuid + @"}");
			QuickStartUtils.FindAndReplace(Path.Combine(helper.DirectoryPath,@"Properties\AssemblyInfo." + language), @"\$guid1\$", Guid.NewGuid().ToString());
			QuickStartUtils.ReplaceAllInDirectory(helper.DirectoryPath, @"\$if\$ \(\$targetframeworkversion\$ == 3.5\)", " ");
			QuickStartUtils.ReplaceAllInDirectory(helper.DirectoryPath, @"\$endif\$", " ");
			QuickStartUtils.ReplaceAllInDirectory(helper.DirectoryPath, @"\$registeredorganization\$", "CodeSmith Tools, LLC");
			QuickStartUtils.ReplaceAllInDirectory(helper.DirectoryPath, @"\$year\$", DateTime.Now.Year.ToString());
		}
		protected void UpdateWebConfig(string directoryPath)
		{
			QuickStartUtils.FindAndReplace(Path.Combine(directoryPath, "web.config"), @"<connectionStrings/>",
				@"<connectionStrings>
					<add name=""" + ProjectBuilder.SourceDatabase.Name + @"ConnectionString"" connectionString=""" + ProjectBuilder.SourceDatabase.ConnectionString + @""" providerName=""System.Data.SqlClient""/>
				</connectionStrings>");
		}
	}
	
	#endregion
	
</script>
