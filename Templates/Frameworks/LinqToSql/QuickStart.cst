<%-- 
Name: Quick Start
Author: Reggie Bradshaw
Description: Used to Quick Start Visual Studio Projects
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="True" Description="Template description here." CompilerVersion="v3.5" %>
<%@ Assembly Name="System" %>
<%@ Assembly Name="ICSharpCode.SharpZipLib" Path="Common" %>
<%@ Assembly Name="QuickStartUtils" Path="Common"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="ICSharpCode.SharpZipLib.Zip" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="QuickStartUtils" %>
<%@ Register Name="QuickStartSolution" Template="Common\QuickStartSolution.cst" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Default="" Optional="False" Category="1.Database" Description="Source Database" OnChanged="OnSourceDatabaseChanged" %>
<%@ Property Name="VisualStudioVersion" Type="VisualStudioVersionEnum" Optional="False" Category="2.Solution" Description="Version of Visual Studio to Generate for." %>
<%@ Property Name="Location" Type="System.String" Default="" Optional="False" Category="2.Solution" Description="This is the path to the Solution location." %>
<%@ Property Name="SolutionName" Type="System.String" Default="" Optional="False" Category="2.Solution" Description="Name of the project to be generated." %>
<%@ Property Name="Language" Type="LanguageEnum" Default="CSharp" Optional="False" Category="2.Solution" Description="Language the project will be in" %>
<%@ Property Name="ProjectType" Type="ProjectTypeEnum" Default="DynamicDataWebApp" Optional="False" Category="4.Interface Project" Description="Type of Project to be created" %>
<%@ Property Name="IncludeDataServices" Type="System.Boolean" Default="True" Optional="False" Category="4.Interface Project" Description="Include DataServices in Interface Project" %>
<%@ Property Name="DataProjectName" Type="System.String" Default="" Optional="False" Category="3.Data Project" Description="Name Space for the Data Project." %>
<%@ Property Name="CopyTemplatesToFolder" Type="System.Boolean" Default="False" Optional="False" Category="3.Data Project" Description="Include a copy of the LinqToSql Templates in the project directory" %>
<%@ Property Name="InterfaceProjectName" Type="System.String" Default="" Optional="False" Category="4.Interface Project" Description="Name Space for the Interface Project." %>
<%@ Property Name="TestProjectName" Type="System.String" Default="" Optional="False" Category="5.Test Project" Description="Name Space for the Test Project." %>
<%@ Property Name="IncludeTestProject" Type="System.Boolean" Default="True" Optional="False" Category="5.Test Project" Description="Name Space for the Test Project." %>

<% CreateDirectoryStructure(); %>
	The <%= SolutionName %> Solution has been created at <%=Location %>.

<script runat="template">

	public void CreateDirectoryStructure()
    {
		if(CheckExistingDirectories())
			return;
		
		// Prep Directories
		if(!Directory.Exists(Location))
			Directory.CreateDirectory(Location);
				
		// Copy Plinqo Templates
		if(CopyTemplatesToFolder)
            QuickStartUtils.CopyDirectory(CodeTemplateInfo.DirectoryName, Path.Combine(Location,@"LinqToSql"));
				
		List<SolutionItem> solutionItems = new List<SolutionItem>();
		ProjectBuilderSettings pbs = CreateProjectBuilderSettings();
		
		// Create Data Project
		DataProjectCreator dataProjectCreator = new DataProjectCreator(pbs);
		SolutionItem dataProject = dataProjectCreator.CreateProject(this.DataProjectName);
		solutionItems.Add(dataProject);
		
		// Create DynamicData Web Application Project
		if(ProjectType == ProjectTypeEnum.DynamicDataWebApp)
		{
			WebAppProjectCreator webAppCreator = new WebAppProjectCreator(pbs);
			SolutionItem webAppProject = webAppCreator.CreateProject(this.InterfaceProjectName, dataProject);
			solutionItems.Add(webAppProject);
		}
		
		if(ProjectType == ProjectTypeEnum.DynamicDataWebSite)
		{
			WebsiteProjectCreator websiteCreator = new WebsiteProjectCreator(pbs);
			SolutionItem websiteProject = websiteCreator.CreateProject(this.InterfaceProjectName, dataProject);
			solutionItems.Add(websiteProject);
		}
		
		// Create UnitTests Project
		if(IncludeTestProject)
		{
			UnitTestProjectCreator unitTestProjectCreator = new UnitTestProjectCreator(pbs);
			SolutionItem unitTestsProject = unitTestProjectCreator.CreateProject(this.TestProjectName, dataProject);
			solutionItems.Add(unitTestsProject);
		}
		
		// Create Solution
		CreateSolution(solutionItems);
		
    }
	
	private bool CheckExistingDirectories()
	{
		if (Directory.Exists(Path.Combine(Location, this.DataProjectName))
		 || Directory.Exists(Path.Combine(Location, this.InterfaceProjectName))
		 || Directory.Exists(Path.Combine(Location, this.TestProjectName))
		 || File.Exists(Path.Combine(Location, String.Concat(this.SolutionName, ".sln"))))
		{
			System.Text.StringBuilder sb = new System.Text.StringBuilder();
			sb.AppendLine("It seems that a quick start already exists in specified directory:");
			sb.AppendLine(Location);
			sb.AppendLine("Please delete existing data or selected a different directory.");
			
			System.Windows.Forms.MessageBox.Show(sb.ToString(), "QuickStart Already Exists!",
				System.Windows.Forms.MessageBoxButtons.OK,
				System.Windows.Forms.MessageBoxIcon.Exclamation);
			
			return true;
		}
		else
			return false;
	}
	private ProjectBuilderSettings CreateProjectBuilderSettings()
	{
		return new ProjectBuilderSettings()
		{
			SourceDatabase = this.SourceDatabase,
			VisualStudioVersion = this.VisualStudioVersion,
			Location = this.Location,
			SolutionName = this.SolutionName,
			Language = this.Language,
			ProjectType = this.ProjectType,
			IncludeDataServices = this.IncludeDataServices,
			DataProjectName = this.DataProjectName,
			CopyTemplatesToFolder = this.CopyTemplatesToFolder,
			InterfaceProjectName = this.InterfaceProjectName,
			TestProjectName = this.TestProjectName,
			IncludeTestProject = this.IncludeTestProject,
			CodeTemplate = this
		};
	}
	private void CreateSolution(List<SolutionItem> solutionItems)
	{
		QuickStartSolution quickStartSolution = this.Create<QuickStartSolution>();
		quickStartSolution.VisualStudioVersion = VisualStudioVersion;
		quickStartSolution.SolutionItems = solutionItems;
		
		string filePathAboslute = Path.Combine(Location, String.Concat(SolutionName, ".sln"));
		quickStartSolution.RenderToFile(filePathAboslute, true);
	}
	
	private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
        if (SourceDatabase == null)
            return;
            
        if(string.IsNullOrEmpty(SolutionName))
            SolutionName = SourceDatabase.Name;

        if (string.IsNullOrEmpty(DataProjectName))
            DataProjectName = SourceDatabase.Database.Name + ".Data";
			
		if (string.IsNullOrEmpty(InterfaceProjectName))
            InterfaceProjectName = SourceDatabase.Database.Name + ".UI";
			
		if (string.IsNullOrEmpty(TestProjectName))
            TestProjectName = SourceDatabase.Database.Name + ".Test";
			
		if (string.IsNullOrEmpty(Location))
            Location = @"C:\CodeSmithProjects\" + SourceDatabase.Database.Name;

    }
</script>
