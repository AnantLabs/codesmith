<%-- 
Name: Quick Start
Author: Reggie Bradshaw & Tom DuPont
Description: Used to Quick Start Visual Studio Projects
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="True" Description="Template description here." CompilerVersion="v3.5" %>
<%@ Assembly Name="System" %>
<%@ Assembly Name="ICSharpCode.SharpZipLib" Path="Common" %>
<%@ Assembly Name="QuickStartUtils" Path="Common"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.Engine" %>
<%@ Import Namespace="ICSharpCode.SharpZipLib.Zip" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="QuickStartUtils" %>
<%@ Register Name="QuickStartSolution" Template="Common\QuickStartSolution.cst" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Default="" Optional="False" Category="1.Database" Description="Source Database" OnChanged="OnSourceDatabaseChanged" %>
<%@ Property Name="Location" Type="System.String" Default="" Optional="False" Category="2.Solution" Description="This is the path to the Solution location." 
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="SolutionName" Type="System.String" Default="" Optional="False" Category="2.Solution" Description="Name of the project to be generated." %>
<%@ Property Name="Language" Type="LanguageEnum" Default="CSharp" Optional="False" Category="2.Solution" Description="Language the project will be in" %>
<%@ Property Name="LaunchVisualStudio" Type="System.Boolean" Default="True" Optional="False" Category="2.Solution" Description="Launch Visual Studio after generation." %>
<%@ Property Name="DataProjectName" Type="System.String" Default="" Optional="False" Category="3.Data Project" Description="Name Space for the Data Project." %>
<%@ Property Name="CopyTemplatesToFolder" Type="System.Boolean" Default="False" Optional="False" Category="3.Data Project" Description="Include a copy of the LinqToSql Templates in the project directory" %>
<%@ Property Name="ProjectType" Type="ProjectTypeEnum" Default="DynamicDataWebApp" Optional="False" Category="4.Interface Project" Description="Type of Project to be created" %>
<%@ Property Name="IncludeDataServices" Type="System.Boolean" Default="True" Optional="False" Category="4.Interface Project" Description="Include DataServices in Interface Project" %>
<%@ Property Name="InterfaceProjectName" Type="System.String" Default="" Optional="False" Category="4.Interface Project" Description="Name Space for the Interface Project." %>
<%@ Property Name="TestProjectName" Type="System.String" Default="" Optional="False" Category="5.Test Project" Description="Name Space for the Test Project." %>
<%@ Property Name="IncludeTestProject" Type="System.Boolean" Default="True" Optional="False" Category="5.Test Project" Description="Name Space for the Test Project." %>

<% CreateQuickStart(); %>
The <%= SolutionName %> Solution has been created at <%= Location %>.

<script runat="template">

	public void CreateQuickStart()
    {
		// Make sure Location is FullPath
		Location = Path.GetFullPath(Location);
		
		// Check For Existing Project
		if(DirectoriesAlreadyExists)
			throw new System.ApplicationException(AlreadyExistsMessage);
		
		// Prep Directories
		if(!Directory.Exists(Location))
			Directory.CreateDirectory(Location);
				
		// Copy Plinqo Templates
		if(CopyTemplatesToFolder)
            QuickStartUtils.CopyDirectory(CodeTemplateInfo.DirectoryName, Path.Combine(Location,@"Templates\LinqToSql"));
				
		List<SolutionItem> solutionItems = new List<SolutionItem>();
		ProjectBuilderSettings pbs = CreateProjectBuilderSettings();
		
		// Create Data Project
		DataProjectCreator dataProjectCreator = new DataProjectCreator(pbs);
		SolutionItem dataProject = dataProjectCreator.CreateProject(this.DataProjectName);
		solutionItems.Add(dataProject);
		
		// Create UI Project
		if(ProjectType == ProjectTypeEnum.DynamicDataWebApp)
		{
			WebAppProjectCreator webAppCreator = new WebAppProjectCreator(pbs);
			SolutionItem webAppProject = webAppCreator.CreateProject(this.InterfaceProjectName, dataProject);
			solutionItems.Add(webAppProject);
		}
		else if(ProjectType == ProjectTypeEnum.DynamicDataWebSite)
		{
			WebsiteProjectCreator websiteCreator = new WebsiteProjectCreator(pbs);
			SolutionItem websiteProject = websiteCreator.CreateProject(this.InterfaceProjectName, dataProject);
			solutionItems.Add(websiteProject);
		}
		
		// Create UnitTests Project
		if(IncludeTestProject)
		{
			UnitTestProjectCreator unitTestProjectCreator = new UnitTestProjectCreator(pbs);
			SolutionItem unitTestsProject = unitTestProjectCreator.CreateProject(this.TestProjectName, dataProject);
			solutionItems.Add(unitTestsProject);
		}
		
		// Create Solution
		string solutionPath = CreateSolution(solutionItems);
		
		// Launch Visual Studio
		if(LaunchVisualStudio)
			LaunchVisualStudioWithSolution(solutionPath);
    }
	
	private bool DirectoriesAlreadyExists
	{
		get
		{
			return (Directory.Exists(Path.Combine(Location, this.DataProjectName))
			|| Directory.Exists(Path.Combine(Location, this.InterfaceProjectName))
			|| Directory.Exists(Path.Combine(Location, this.TestProjectName))
			|| File.Exists(Path.Combine(Location, String.Concat(this.SolutionName, ".sln"))));
		}
	}
	private string AlreadyExistsMessage
	{
		get
		{
			System.Text.StringBuilder sb = new System.Text.StringBuilder();
			sb.AppendLine("It seems that a quick start already exists in specified directory:");
			sb.AppendLine(Location);
			sb.AppendLine("Please delete existing data or selected a different directory.");
			return sb.ToString();
		}
	}
	
	private ProjectBuilderSettings CreateProjectBuilderSettings()
	{
		return new ProjectBuilderSettings()
		{
			SourceDatabase = this.SourceDatabase,
			Location = this.Location,
			SolutionName = this.SolutionName,
			Language = this.Language,
			ProjectType = this.ProjectType,
			IncludeDataServices = this.IncludeDataServices,
			DataProjectName = this.DataProjectName,
			CopyTemplatesToFolder = this.CopyTemplatesToFolder,
			InterfaceProjectName = this.InterfaceProjectName,
			TestProjectName = this.TestProjectName,
			IncludeTestProject = this.IncludeTestProject,
			CodeTemplate = this
		};
	}
	private string CreateSolution(List<SolutionItem> solutionItems)
	{
		QuickStartSolution quickStartSolution = this.Create<QuickStartSolution>();
		quickStartSolution.SolutionItems = solutionItems;
		
		string filePathAboslute = Path.Combine(Location, String.Concat(SolutionName, ".sln"));
		quickStartSolution.RenderToFile(filePathAboslute, true);
		
		return filePathAboslute;
	}
	private void LaunchVisualStudioWithSolution(string solutionLink)
	{
		string args = "/build debug";
		using (Process p = Process.Start(solutionLink, args)) { }
	}
	
	private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
        if (SourceDatabase == null)
            return;
            
        if(string.IsNullOrEmpty(SolutionName))
            SolutionName = SourceDatabase.Name;

        if (string.IsNullOrEmpty(DataProjectName))
            DataProjectName = SourceDatabase.Database.Name + ".Data";
			
		if (string.IsNullOrEmpty(InterfaceProjectName))
            InterfaceProjectName = SourceDatabase.Database.Name + ".UI";
			
		if (string.IsNullOrEmpty(TestProjectName))
            TestProjectName = SourceDatabase.Database.Name + ".Test";
			
		if (string.IsNullOrEmpty(Location))
            Location = Path.Combine(
                CodeSmith.Engine.Configuration.Instance.CodeSmithTemplatesDirectory, 
                SourceDatabase.Database.Name);
    }
</script>