
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace Sample.Data
{
    /// <summary>
    /// The class representing the dbo.Status table.
    /// </summary>
    [Table(Name="dbo.Status")]
    [DataContract]
    public partial class Status
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Status"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Status()
        {
            OnCreated();
            _taskList = new EntitySet<Task>(
                new System.Action<Task>(this.Attach_TaskList),
                new System.Action<Task>(this.Detach_TaskList));
        }
        #endregion
        
        #region Column Mapped Properties
        
        private int _statusID = default(int);

        /// <summary>
        /// Gets the StatusID column value.
        /// </summary>
        [Column(Name="StatusID", Storage="_statusID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        [DataMember]
        public int StatusID
        {
            get { return _statusID; }
            set
            {
                if (_statusID != value)
                {
                    OnStatusIDChanging(value);
                    OnPropertyChanging("StatusID");
                    _statusID = value;
                    OnPropertyChanged("StatusID");
                    OnStatusIDChanged();
                }
            }
        }
        
        private string _statusName;

        /// <summary>
        /// Gets or sets the StatusName column value.
        /// </summary>
        [Column(Name="StatusName", Storage="_statusName", DbType="varchar(50) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string StatusName
        {
            get { return _statusName; }
            set
            {
                if (_statusName != value)
                {
                    OnStatusNameChanging(value);
                    OnPropertyChanging("StatusName");
                    _statusName = value;
                    OnPropertyChanged("StatusName");
                    OnStatusNameChanged();
                }
            }
        }
        
        private int _displayOrder;

        /// <summary>
        /// Gets or sets the DisplayOrder column value.
        /// </summary>
        [Column(Name="DisplayOrder", Storage="_displayOrder", DbType="int NOT NULL", CanBeNull=false)]
        [DataMember]
        public int DisplayOrder
        {
            get { return _displayOrder; }
            set
            {
                if (_displayOrder != value)
                {
                    OnDisplayOrderChanging(value);
                    OnPropertyChanging("DisplayOrder");
                    _displayOrder = value;
                    OnPropertyChanged("DisplayOrder");
                    OnDisplayOrderChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntitySet<Task> _taskList;
        
        /// <summary>
        /// Gets or sets the Task association.
        /// </summary>
        [Association(Name="Status_Task", Storage="_taskList", ThisKey="StatusID", OtherKey="StatusID")]
        [DataMember]
        public EntitySet<Task> TaskList
        {
            get { return _taskList; }
            set { _taskList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_TaskList(Task entity)
        {
            OnPropertyChanging(null);
            entity.Status = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_TaskList(Task entity)
        {
            OnPropertyChanging(null);
            entity.Status = null;
            OnPropertyChanged(null);
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when StatusID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStatusIDChanging(int value);
        /// <summary>Called after StatusID has Changed.</summary>
        partial void OnStatusIDChanged();
        /// <summary>Called when StatusName is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStatusNameChanging(string value);
        /// <summary>Called after StatusName has Changed.</summary>
        partial void OnStatusNameChanged();
        /// <summary>Called when DisplayOrder is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnDisplayOrderChanging(int value);
        /// <summary>Called after DisplayOrder has Changed.</summary>
        partial void OnDisplayOrderChanged();
        #endregion
        
    }
}

