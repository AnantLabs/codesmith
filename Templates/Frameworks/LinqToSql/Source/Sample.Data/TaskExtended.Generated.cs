
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace Sample.Data
{
    /// <summary>
    /// The class representing the dbo.TaskExtended table.
    /// </summary>
    [Table(Name="dbo.TaskExtended")]
    [DataContract]
    public partial class TaskExtended
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExtended"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public TaskExtended()
        {
            OnCreated();
            _task = default(EntityRef<Task>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private int _taskID;

        /// <summary>
        /// Gets or sets the TaskID column value.
        /// </summary>
        [Column(Name="TaskID", Storage="_taskID", DbType="int NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        [DataMember]
        public int TaskID
        {
            get { return _taskID; }
            set
            {
                if (_taskID != value)
                {
                    if (_task.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnTaskIDChanging(value);
                    OnPropertyChanging("TaskID");
                    _taskID = value;
                    OnPropertyChanged("TaskID");
                    OnTaskIDChanged();
                }
            }
        }
        
        private string _browser;

        /// <summary>
        /// Gets or sets the Browser column value.
        /// </summary>
        [Column(Name="Browser", Storage="_browser", DbType="nvarchar(200)")]
        [DataMember]
        public string Browser
        {
            get { return _browser; }
            set
            {
                if (_browser != value)
                {
                    OnBrowserChanging(value);
                    OnPropertyChanging("Browser");
                    _browser = value;
                    OnPropertyChanged("Browser");
                    OnBrowserChanged();
                }
            }
        }
        
        private string _oS;

        /// <summary>
        /// Gets or sets the OS column value.
        /// </summary>
        [Column(Name="OS", Storage="_oS", DbType="nvarchar(150)")]
        [DataMember]
        public string OS
        {
            get { return _oS; }
            set
            {
                if (_oS != value)
                {
                    OnOSChanging(value);
                    OnPropertyChanging("OS");
                    _oS = value;
                    OnPropertyChanged("OS");
                    OnOSChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Task> _task;

        /// <summary>
        /// Gets or sets the Task association.
        /// </summary>
        [Association(Name="Task_TaskExtended", Storage="_task", ThisKey="TaskID", OtherKey="TaskID", IsUnique=true, IsForeignKey=true)]
        [DataMember]
        public Task Task
        {
            get { return _task.Entity; }
            set
            {
                Task previousValue = _task.Entity;
                if (previousValue != value || _task.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Task");
                    if (previousValue != null)
                    {
                        _task.Entity = null;
                        previousValue.TaskExtended = null;
                    }
                    _task.Entity = value;
                    if (value != null)
                    {
                        value.TaskExtended = this;
                        _taskID = value.TaskID;
                    }
                    else
                    {
                        _taskID = default(int);
                    }
                    OnPropertyChanged("Task");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when TaskID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTaskIDChanging(int value);
        /// <summary>Called after TaskID has Changed.</summary>
        partial void OnTaskIDChanged();
        /// <summary>Called when Browser is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnBrowserChanging(string value);
        /// <summary>Called after Browser has Changed.</summary>
        partial void OnBrowserChanged();
        /// <summary>Called when OS is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnOSChanging(string value);
        /// <summary>Called after OS has Changed.</summary>
        partial void OnOSChanged();
        #endregion
        
    }
}

