
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace Sample.Data
{
    /// <summary>
    /// The class representing the dbo.UserRole table.
    /// </summary>
    [Table(Name="dbo.UserRole")]
    [DataContract]
    public partial class UserRole
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRole"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public UserRole()
        {
            OnCreated();
            _role = default(EntityRef<Role>);
            _user = default(EntityRef<User>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private int _userID;

        /// <summary>
        /// Gets or sets the UserID column value.
        /// </summary>
        [Column(Name="UserID", Storage="_userID", DbType="int NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (_user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIDChanging(value);
                    OnPropertyChanging("UserID");
                    _userID = value;
                    OnPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        
        private int _roleID;

        /// <summary>
        /// Gets or sets the RoleID column value.
        /// </summary>
        [Column(Name="RoleID", Storage="_roleID", DbType="int NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        [DataMember]
        public int RoleID
        {
            get { return _roleID; }
            set
            {
                if (_roleID != value)
                {
                    if (_role.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIDChanging(value);
                    OnPropertyChanging("RoleID");
                    _roleID = value;
                    OnPropertyChanged("RoleID");
                    OnRoleIDChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Role> _role;

        /// <summary>
        /// Gets or sets the Role association.
        /// </summary>
        [Association(Name="Role_UserRole", Storage="_role", ThisKey="RoleID", OtherKey="RoleID", IsUnique=true, IsForeignKey=true)]
        [DataMember]
        public Role Role
        {
            get { return _role.Entity; }
            set
            {
                Role previousValue = _role.Entity;
                if (previousValue != value || _role.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        _role.Entity = null;
                        previousValue.UserRoleList.Remove(this);
                    }
                    _role.Entity = value;
                    if (value != null)
                    {
                        value.UserRoleList.Add(this);
                        _roleID = value.RoleID;
                    }
                    else
                    {
                        _roleID = default(int);
                    }
                    OnPropertyChanged("Role");
                }
            }
        }
        
        private EntityRef<User> _user;

        /// <summary>
        /// Gets or sets the User association.
        /// </summary>
        [Association(Name="User_UserRole", Storage="_user", ThisKey="UserID", OtherKey="UserID", IsUnique=true, IsForeignKey=true)]
        [DataMember]
        public User User
        {
            get { return _user.Entity; }
            set
            {
                User previousValue = _user.Entity;
                if (previousValue != value || _user.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("User");
                    if (previousValue != null)
                    {
                        _user.Entity = null;
                        previousValue.UserRoleList.Remove(this);
                    }
                    _user.Entity = value;
                    if (value != null)
                    {
                        value.UserRoleList.Add(this);
                        _userID = value.UserID;
                    }
                    else
                    {
                        _userID = default(int);
                    }
                    OnPropertyChanged("User");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when UserID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserIDChanging(int value);
        /// <summary>Called after UserID has Changed.</summary>
        partial void OnUserIDChanged();
        /// <summary>Called when RoleID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnRoleIDChanging(int value);
        /// <summary>Called after RoleID has Changed.</summary>
        partial void OnRoleIDChanged();
        #endregion
        
    }
}

