<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="False" 
    Description="Linq to Sql DataContext Class." %>

<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database schema instance. Must be set by parent template" %>

<%@ Map Name="VBKeywordEscape" 
    Src="VBKeywordEscape.csmap" Reverse="False" 
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="VBAlias" 
    Src="System-VBAlias.csmap" Reverse="False" 
    Description="Convert system data types to c# alias" %>

'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO Not MODIfY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------


Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Configuration
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Diagnostics
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
<% If Not Database.ContextNamespace = Database.EntityNamespace Then %>
Imports <%= Database.EntityNamespace %>
<% End If %>


Namespace <%= Database.ContextNamespace %>
    ''' <summary>
    ''' The DataContext class for the <%= Database.Name %> database.
    ''' </summary>
    Partial <%= Naming.GetModifier(Database.AccessModifier) %> Class <%= Database.Class %> 
	Inherits DataContext
        Private Shared mappingCache As MappingSource = New AttributeMappingSource()

		#Region "ConnectionString"
		Private Const CONNECTION_NAME As String = "<%= Database.Connection.SettingsPropertyName %>"
		Private Shared _connectionString As String
		Private Shared _connectionLock As New Object()
		
		''' <summary>The application connection string read from web.config or app.config</summary>
		''' <example>
		''' Add the following key to the "connectionStrings" section of your config:
		''' <code><![CDATA[
		''' <configuration>
		'''     <connectionStrings>
		'''         <add name="<%= Database.Connection.SettingsPropertyName %>" 
		'''             connectionString="Data Source=(local);Initial Catalog=DATABASE;Integrated Security=True"
		'''             providerName="System.Data.SqlClient" />
		'''     </connectionStrings>
		''' </configuration>
		''' ]]></code>
		''' </example>
		Public Shared ReadOnly Property ConnectionString() As String
		
			Get
				If _connectionString Is Nothing Then
					SyncLock _connectionLock
					If _connectionString Is Nothing Then
						_connectionString = GetDefaultConnectionString()
					End If
					End SyncLock
				End If
				Return _connectionString
			End Get
		End Property
		Private Shared Function GetDefaultConnectionString() As String
			Dim settings As ConnectionStringSettings = ConfigurationManager.ConnectionStrings(CONNECTION_NAME)
			If settings Is Nothing Then
				Dim message As String = String.Format("Could not find the connection string '{0}' in the configuration file.  " + "Please add an entry to connectionStrings section named '{0}'.", CONNECTION_NAME)
				Throw New ConfigurationErrorsException(message)
			End If
			Return settings.ConnectionString
		End Function
		#End Region

		#Region "Model"
        Private Shared _model As Web.DynamicData.MetaModel = Nothing
        Public Shared ReadOnly Property Model() As Web.DynamicData.MetaModel
            Get
                If (_model Is Nothing) Then
                    _model = New Web.DynamicData.MetaModel()
                    _model.RegisterContext(GetType(<%= Database.Class %>))
                End If
                Return _model
            End Get
        End Property
		#End Region

        #Region "Constructors"
        ''' <summary>
        ''' Initializes the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        <DebuggerNonUserCodeAttribute> _
        Shared Sub New()
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        <DebuggerNonUserCodeAttribute> _
        <%= Naming.GetModifier(Database.AccessModifier) %> Sub New()
            MyBase.New(ConnectionString, mappingCache)
            OnCreated()
        End Sub

        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        ''' <param name="connection">The connection string.</param>
        <DebuggerNonUserCodeAttribute> _
        <%= Naming.GetModifier(Database.AccessModifier) %> Sub New(ByVal connection As String)
            MyBase.New(connection, mappingCache)
            OnCreated()
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        ''' <param name="connection">The database connection.</param>
        <DebuggerNonUserCodeAttribute> _
        <%= Naming.GetModifier(Database.AccessModifier) %> Sub New(ByVal connection As IDbConnection)
            MyBase.New(connection, mappingCache)
            OnCreated()
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        ''' <param name="connection">The connection string.</param>
        ''' <param name="mappingSource">The mapping source.</param>
        <DebuggerNonUserCodeAttribute> _
        <%= Naming.GetModifier(Database.AccessModifier) %> Sub New(ByVal connection As String, ByVal mappingSource As MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        ''' </summary>
        ''' <param name="connection">The database connection.</param>
        ''' <param name="mappingSource">The mapping source.</param>
        <DebuggerNonUserCodeAttribute> _
        <%= Naming.GetModifier(Database.AccessModifier) %> Sub New(ByVal connection As IDbConnection, ByVal mappingSource As MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub
        #End Region
        
        #Region "Tables"
<% For Each table As Table In Database.Tables  %>
        ''' <summary>Represents the <%= table.Name %> table in the underlying database.</summary>
        <%= Naming.GetModifier(table.AccessModifier, table.Modifier) %> ReadOnly Property <%= GetName(table) %> As Table(Of <%= table.Type.Name %>)
            Get
				Return GetTable(Of <%= table.Type.Name %>)()
			End Get
        End Property
        
<% Next %>
        #End Region

        #region "Functions"
<% For Each f As [Function] in Database.Functions %>
        ''' <summary>Method that is mapped to the <%= f.Name %> database procedure.</summary>
        ''' <returns></returns>
        <%= CreateAttribute(f) %>
        <%= Naming.GetModifier(f.AccessModifier, f.Modifier) %>  Function <%= f.Method %>(<%= GetArguments(f) %>) As <%= GetReturnType(f) %>

            Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, _
                (DirectCast(MethodInfo.GetCurrentMethod(),MethodInfo))<%= GetArgumentNames(f) %>)
            
<% 
Dim x As Integer
For x = 0 TO f.Parameters.Count - 1
    Dim p As Parameter = f.Parameters(x)


    If (p.Direction.Value = LinqToSqlShared.DbmlObjectModel.ParameterDirection.In) Then
        Continue For
	End If

    'set out params
    Response.WriteLine("            {0} = (DirectCast(result.GetParameterValue({2}),{1}))",p.ParameterName, GetParameterType(p), x)
Next
%>
            
            Return (DirectCast((result.ReturnValue),<%= GetReturnType(f) %>))
        End Function

<% Next %>
        #End Region

        #Region "Extensibility Method Definitions"
        ''' <summary>Called after this instance is created.</summary>
        Partial Private Sub OnCreated()
		End Sub
<% For Each [table] As [Table] in Database.Tables %>
		''' <summary>Called before a <%= [table].Type.Name %> is inserted.</summary>
        ''' <param name="instance">The instance.</param>
        Partial Private Sub Insert<%= [table].Type.Name %>(ByVal instance As <%= [table].Type.Name %>)
		End Sub
        ''' <summary>Called before a <%= [table].Type.Name %> is updated.</summary>
        ''' <param name="instance">The instance.</param>
        Partial Private Sub Update<%= [table].Type.Name %>(ByVal instance As <%= [table].Type.Name %>)
		End Sub
        ''' <summary>Called before a <%= [table].Type.Name %> is deleted.</summary>
        ''' <param name="instance">The instance.</param>
        Partial Private Sub Delete<%= [table].Type.Name %>(ByVal instance As <%= [table].Type.Name %>)
		End Sub
<% Next %>
        #End Region
    End Class
End Namespace

<script runat="template">
	Public Function CreateAttribute(ByVal f As [Function]) As String
    Dim s As New StringBuilder()
    s.Append("<[Function](")
    s.AppendFormat("Name:=""{0}""", f.Name)
    If f.IsComposable.Value = True Then
        s.Append(", IsComposable:=true")
    End If
    s.Append(")> _")
    
    Return s.ToString()
End Function
Public Function GetName(ByVal table As Table) As String
    Dim name As String = IIf(String.IsNullOrEmpty(table.Member),table.Type.Name,table.Member)
    Return name
End Function


Public Function GetReturnType(ByVal [function] As [Function]) As String
    Dim s As New StringBuilder()

    If [function].Types.Count = 0 Then
        s.Append(VBAlias([function].[Return].Type))
ElseIf [function].HasMultipleResults.Value = True Then
        s.Append("IMultipleResults")
    Else
        s.AppendFormat("ISingleResult(Of {0})", GetResultName([function]))
    End If
    
    Return s.ToString()
End Function

Public Function GetResultName(ByVal [function] As [Function]) As String
    If [function].Types.Count = 0 Then
        Return String.Empty
    End If
    
    Dim resultType As LinqToSqlShared.DbmlObjectModel.Type = [function].Types(0)
    Return [function].Types(0).Name
End Function

Public Function GetArguments(ByVal [function] As [Function]) As String
    Dim s As New StringBuilder()
    For x As Integer = 0 To [function].Parameters.Count - 1
        

        Dim p As Parameter = [function].Parameters(x)
        s.AppendLine(" _")
        s.AppendFormat("            <Parameter(DbType:=""{0}"")> ", p.DbType)
        

        s.AppendFormat("ByVal {1} As {0}", GetParameterType(p), p.ParameterName)
        
        If x < [function].Parameters.Count - 1 Then
            s.Append(", ")
        End If
    Next

    Return s.ToString()
End Function


Public Function GetParameterType(ByVal p As Parameter) As String
    If CommonUtility.IsNullableType(p.Type) Then
        Return VBAlias(p.Type) + "?"
    Else
        Return VBAlias(p.Type)
    End If
End Function

Public Function GetArgumentNames(ByVal [function] As [Function]) As String
    Dim s As New StringBuilder()
    For x As Integer = 0 To [function].Parameters.Count - 1
     
        If x < [function].Parameters.Count Then
            s.Append(", ")
        End If
        
        Dim p As Parameter = [function].Parameters(x)
        s.Append(p.ParameterName)
    Next
    
    Return s.ToString()
End Function

  
</script>
