<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql Entity Class." %>

<%@ Assembly Name="Generator" Path="..\..\Common"%>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="2.Class" Name="ClassNamespace"
    Type="System.String" Default="Project.Core.Data" Optional="False"
    Description="The namespace to use for the generated class files."%>

<%@ Property Category="2.Class" Name="ClassName"
    Type="System.String" Default="LinqEntityBase" Optional="False"
    Description="The names of the class."%>

<%@ Property Category="2.Class" Name="IncludeDataContract"
     Type="System.Boolean" Default="True" Optional="False"
     Description="Include WCF DataContract attributes." %>

<%@ Property Category="2.Class" Name="Framework"
    Type="FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Include Serialization attributes and what kind." %>
''------------------------------------------------------------------------------
'' <autogenerated>
''     This code was generated by a CodeSmith Template.
''
''     DO NOT MODIFY contents of this file. Changes to this
''     file will be lost if the code is regenerated.
'' </autogenerated>
''------------------------------------------------------------------------------

Imports System
Imports System.Linq

Namespace <%= ClassNamespace %>

    ''' <summary>
    ''' A base class for Linq entities that implements notification events.
    ''' </summary>
    <%If IncludeDataContract Then %>
    <System.Runtime.Serialization.DataContract(<%If Framework = FrameworkEnum.v35_SP1 Then %> IsReference:=True <%End If%>)> _
    <%End If%>
    Public Partial MustInherit Class <%= ClassName %>
       Implements System.ComponentModel.INotifyPropertyChanging
       Implements System.ComponentModel.INotifyPropertyChanged

        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= ClassName %>"/> class.
        ''' </summary>
        Protected Sub New()
        End Sub

        #Region "Notification Events"

        ''' <summary>
        ''' Implements a PropertyChanged event.
        ''' </summary>
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        ''' <summary>
        ''' Raise the PropertyChanged event for a specific property.
        ''' </summary>
        ''' <param name="propertyName">Name of the property that has changed.</param>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)> _
        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If PropertyChangedEvent IsNot Nothing Then
                RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub


        ''' <summary>
        ''' Implements a PropertyChanging event.
        ''' </summary>
        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        ''' <summary>
        ''' Raise the PropertyChanging event for a specific property.
        ''' </summary>
        ''' <param name="propertyName">Name of the property that is changing.</param>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)> _
        Protected Overridable Sub SendPropertyChanging(ByVal propertyName As String)
            If PropertyChangingEvent IsNot Nothing Then
                RaiseEvent PropertyChanging(Me, New System.ComponentModel.PropertyChangingEventArgs(propertyName))
            End If
        End Sub
        #End Region

        #Region "Detach Methods"
        ''' <summary>
        ''' Gets a value indicating whether this instance is Added to the change tracking of <see cref="DataContext"/>.
        ''' </summary>
        ''' <returns>
        ''' <c>true</c> if this instance is Added; otherwise, <c>false</c>.
        ''' </returns>
        Public Function IsAttached() As Boolean
            Return PropertyChangingEvent IsNot Nothing
        End Function

        ''' <summary>
        ''' Remove this instance from the <see cref="DataContext"/>.
        ''' </summary>
        ''' <remarks>
        ''' Removeing the entity will allow it to be Added to another <see cref="DataContext"/>.
        ''' </remarks>
        Public Overridable Sub Detach()
            PropertyChangingEvent = Nothing
            PropertyChangedEvent = Nothing
        End Sub

        ''' <summary>
        ''' Remove the specified <see cref="T:System.Data.Linq.EntitySet`1" />.
        ''' </summary>
        ''' <typeparam name="TEntity">The type of the entity.</typeparam>
        ''' <param name="entitySet">The <see cref="T:System.Data.Linq.EntitySet`1" /> to Remove.</param>
        ''' <param name="onAdd">Delegate for <see cref="M:System.Data.Linq.EntitySet`1.Add(`0)" />.</param>
        ''' <param name="onRemove">Delegate for <see cref="M:System.Data.Linq.EntitySet`1.Remove(`0)" />.</param>
        ''' <returns>A new <see cref="T:System.Data.Linq.EntitySet`1" /> with the list copied if it was loaded.</returns>
        Protected Shared Function Detach(Of TEntity As <%= ClassName %>)(ByVal entitySet As System.Data.Linq.EntitySet(Of TEntity), ByVal onAdd As Action(Of TEntity), ByVal onRemove As Action(Of TEntity)) As System.Data.Linq.EntitySet(Of TEntity)
            If entitySet Is Nothing OrElse Not entitySet.HasLoadedOrAssignedValues Then
                Return New System.Data.Linq.EntitySet(Of TEntity)(onAdd, onRemove)
            End If

            ' copy list and Remove all entities
            Dim list = entitySet.ToList()
            For Each t As TEntity In list
                t.Detach()
            Next

            Dim newSet = New System.Data.Linq.EntitySet(Of TEntity)(onAdd, onRemove)
            newSet.Assign(list)
            Return newSet
        End Function

        ''' <summary>
        ''' Remove the specified <see cref="T:System.Data.Linq.EntityRef`1"/>.
        ''' </summary>
        ''' <typeparam name="TEntity">The type of the entity.</typeparam>
        ''' <param name="entity">The <see cref="T:System.Data.Linq.EntityRef`1"/> to Remove.</param>
        ''' <returns>A new <see cref="T:System.Data.Linq.EntityRef`1"/> with the entity Removeed.</returns>
        Protected Shared Function Detach(Of TEntity As <%= ClassName %>)(ByVal entity As System.Data.Linq.EntityRef(Of TEntity)) As System.Data.Linq.EntityRef(Of TEntity)
            If Not entity.HasLoadedOrAssignedValue OrElse entity.Entity Is Nothing Then
                Return New System.Data.Linq.EntityRef(Of TEntity)()
            End If

            entity.Entity.Detach()
            Return New System.Data.Linq.EntityRef(Of TEntity)(entity.Entity)
        End Function

        ''' <summary>
        ''' Remove the specified lazy loaded value.
        ''' </summary>
        ''' <typeparam name="T">The type of the value.</typeparam>
        ''' <param name="value">The lazy loaded value.</param>
        ''' <returns>A new <see cref="T:System.Data.Linq.Link`1"/> that is Removeed.</returns>
        Protected Shared Function Detach(Of T)(ByVal value As System.Data.Linq.Link(Of T)) As System.Data.Linq.Link(Of T)
            If Not value.HasLoadedOrAssignedValue Then
                Return Nothing
            End If

            Return New System.Data.Linq.Link(Of T)(value.Value)
        End Function

        #End Region

    End Class
End Namespace