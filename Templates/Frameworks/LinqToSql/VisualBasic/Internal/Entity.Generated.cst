<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" 
    Description="Linq to Sql Entity Class." %>

<%@ Assembly Name="Dbml" Path="..\..\Common"%>
<%@ Assembly Name="Generator" Path="..\..\Common"%>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type" 
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False" 
    Description="The Type instance for this entity. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="TableName" 
    Type="System.String" Default="" Optional="True" 
    Description="The name of the table this class is mapped to." %>
    
<%@ Property Category="2.Class" Name="EntityBase" 
    Type="System.String" Default="LinqEntityBase" Optional="True" 
    Description="The base class for the entity." %>

<%@ Property Category="2.Class" Name="Framework"
    Type="FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Include Serialization attributes and what kind." %>

<%@ Property Category="2.Class" Name="IncludeDataContract"
     Type="System.Boolean" Default="True" Optional="False"
     Description="Include WCF DataContract attributes." %>
	
<%@ Property Category="2.Class" Name="IncludeDataServices"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include ADO.Net DataServices attributes." %>

<%@ Property Category="2.Class" Name="IncludeDataRules"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include CodeSmith.Data rules." %>
    
<%@ Property Name="AssociationNamingSuffix"
    Type="AssociationNamingEnum" Default="ListSuffix" Optional="False"
    Description="Suffix for Many To Many Associations" %>

<%@ Map Name="VBKeywordEscape" 
    Src="VBKeywordEscape.csmap" Reverse="False" 
    Description="Mapping to escape vb keywords" %>

<%@ Map Name="VBAlias" 
    Src="System-VBAlias.csmap" Reverse="False" 
    Description="Convert system data types to vb alias" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO Not MODIfY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.ComponentModel
Imports System.Linq
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Diagnostics
<% If (IncludeDataContract) Then %>
Imports System.IO
Imports System.Runtime.Serialization
<% End If %>
<% If (Me.Framework = FrameworkEnum.v35_SP1) Then %>
Imports System.ComponentModel.DataAnnotations
<% If (IncludeDataServices) Then %>
Imports System.Data.Services.Common
<% End If %>
<% End If %>
<% If IncludeDataRules Then %>
Imports CodeSmith.Data.Rules
Imports CodeSmith.Data.Rules.Assign
Imports CodeSmith.Data.Rules.Validation
<% End If %>

Namespace <%= Database.EntityNamespace %>
    ''' <summary>
<% If Not String.IsNullOrEmpty(TableName) Then %>
    ''' The class representing the <%= TableName %> table.
<%  Else  %>
    ''' Class representing data for the <%= Database.Name %> database.
<% End If %>
    ''' </summary>
    <%= GetClassAttributes() %>
<% If (IncludeDataContract ANDALSO Framework = FrameworkEnum.v35) Then %>
    <System.Runtime.Serialization.DataContractAttribute()> _
<% Else If (IncludeDataContract ANDALSO Framework = FrameworkEnum.v35_SP1) Then%>
    <DataContract(IsReference:=True)> _
<% End If %>
<% If (Me.Framework = FrameworkEnum.v35_SP1) Then %>
    <ScaffoldTable(True)> _
    <MetadataType(GetType(<%= Type.Name %>.Metadata))> _
	<% If (IncludeDataServices) Then %>
	<% Dim dataServiceKey As New System.Text.StringBuilder()
	Dim isFirstDataServiceKey As Boolean = True
	For Each column as Column in Type.PrimaryKeyColumns
		If (isFirstDataServiceKey) Then
			isFirstDataServiceKey = false
		Else
			dataServiceKey.Append(", ")
		End If
		dataServiceKey.AppendFormat("""{0}""", column.Name)
	Next %>    
<%If dataServiceKey.Length > 0 Then  %>
	<DataServiceKey(<%= dataServiceKey.ToString() %>)> _
<% End If %>
	<% End If %>
<% End If %>
<% 
    Dim sb As StringBuilder = new StringBuilder()
    For Each [column] As Column In Type.PrimaryKeyColumns
    
        If(sb.Length > 0) Then
            sb.Append(", ")
        End If
        
        sb.Append([column].Member)
        sb.Append(": {")
        sb.Append([column].Member)
        sb.Append("}")
    Next
%>
<% If (sb.Length > 0) Then %>
    <DebuggerDisplay("<%= sb.ToString() %>")> _
<% End If %>
    <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> Partial Class <%= VBKeywordEscape(Type.Name) %>
<% If Not (String.IsNullOrEmpty(EntityBase)) Then %>
        Inherits <%= EntityBase %>
    <% If IncludeDataContract Then %>
        Implements ICloneable
    <% End If %>
<% End If %>

<% If (IncludeDataRules) Then %>
        #Region "Static Constructor"
        ''' <summary>
        ''' Initializes the <see cref="<%= Type.Name %>"/> class.
        ''' </summary>
        Shared Sub New()
        
            <%If(Framework = FrameworkEnum.v35_SP1) Then %>
            RuleManager.AddShared(Of <%= Type.Name %>)()
            <% Else
                Const lengthFormat As String = "RuleManager.AddShared(Of {0})(new LengthRule(""{1}"", {2}))"
                Const  requiredFormat As String = "RuleManager.AddShared(Of {0})(new RequiredRule(""{1}""))"
                Const sqlDateFormat As String = "RuleManager.AddShared(Of {0})(new RangeRule<DateTime>(""{1}"", SqlDateTime.MinValue.Value, SqlDateTime.MaxValue.Value))"
                Const createDateFormat As String = "RuleManager.AddShared(Of {0})(new NowRule(""{1}"", EntityState.New))"
                Const modifyDateFormat As String = "RuleManager.AddShared(Of {0})(new NowRule(""{1}"", EntityState.Dirty))"
                
                Dim indent As Integer = Response.IndentLevel
                Response.IndentLevel = 3
                For Each c As Column In Type.Columns
                    
                    If Not c.CanBeNull.Value AndAlso Not c.IsDbGenerated.Value Then
                    
                        If (c.Type.Contains("String")) Then
                        
                            Response.WriteLine(String.Format(requiredFormat, Type.Name, c.Member))
                        
                        Else If (c.Type.Contains("DateTime")) Then
                        
                            If (c.Member.Contains("Create")) Then
                                Response.WriteLine(String.Format(createDateFormat, Type.Name, c.Member))
                            Else If (c.Member.Contains("Modify") OrElse c.Member.Contains("Modified")) Then
                                Response.WriteLine(String.Format(modifyDateFormat, Type.Name, c.Member))
                            Else
                                Response.WriteLine(String.Format(sqlDateFormat, Type.Name, c.Member))
                            End If
                        End If
                    End If
                    
                    If (c.Type.Contains("String")) Then
                    
                        Dim size As Integer = (c.DbType).Length
                        If (0 < size AndAlso size < 8000) Then
                            Response.WriteLine(String.Format(lengthFormat, Type.Name, c.Member, size))
                        End If
                    End If
                    
                Next 
                Response.IndentLevel = indent
                End If%>
            AddSharedRules()
        End Sub
        #End Region
<% End If ' IncludeDataRules %>
        
        #Region "Default Constructor"
        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Type.Name %>"/> class.
        ''' </summary>
        <DebuggerNonUserCodeAttribute()> _
        <%= Naming.GetModifier(Type.AccessModifier) %>  Sub New()
              OnCreated()
    <% If (IncludeDataContract) Then%>    
            Initialize()
        End Sub
        
        Private Sub Initialize()
    <%  End If
    For Each a As Association in Type.EntityRefAssociations %>
            <%= a.Storage %> = Nothing
<% Next ' foreach Association%>
<% For Each a As Association In Type.EntitySetAssociations %>
            <%= a.Storage %> = New EntitySet(Of <%= a.Type %>)( _
                New System.Action(Of <%= a.Type %>)(AddressOf Me.On<%= a.Member %>Add), _
                New System.Action(Of <%= a.Type %>)(AddressOf Me.On<%= a.Member %>Remove))
<% Next ' foreach Association%>
<% For Each c As Column In Type.Columns %>
<% If c.IsDelayLoaded.Value Then %>
            <%= c.Storage %> = Nothing
<% End If ' IsDelayLoaded%>
<% Next ' foreach Column%>
        End Sub
        #End Region

        #Region "Column Mapped Properties"
<% DataMemberCount  = 0
For Each c As Column in Type.Columns 
Dim dataType As String = c.Type
Dim fieldType As String = c.Type
Dim storageGet As String = c.Storage
Dim storageSet As String = c.Storage
Dim valueConvert As String = "value"
Dim isVersion As Boolean = c.IsVersion.Value = True AndAlso dataType.Equals("System.Data.Linq.Binary")

If c.IsDelayLoaded.Value = True AndAlso c.IsPrimaryKey.Value = False Then
    dataType = VBAlias(dataType)
    fieldType = String.Format("Link(Of {0})", dataType)
    storageGet = storageGet + ".Value"
    storageSet = storageGet
    
Else If c.CanBeNull.Value = True AndAlso CommonUtility.IsNullableType(dataType) Then
    dataType = String.Format("Nullable(Of {0})", VBAlias(dataType))
    fieldType = dataType
    
Else If isVersion Then
    
        dataType = "long"
        storageGet = "BitConverter.ToInt64(" + c.Storage + ".ToArray(), 0)"
        valueConvert = "BitConverter.GetBytes(value)"
    
Else
    dataType = VBAlias(dataType)
    fieldType = dataType
End If

Dim a As Association = Type.GetForeignKeyAssociation(c)

%>
<% If isVersion Then %>
        <%= CreateAttributes(c) %>
<% End If %>        
<% If (c.IsDbGenerated.Value = True) Then %>
        Private <%= c.Storage %> As <%= fieldType %> = Nothing
<% Else %>
        Private <%= c.Storage %> As <%= fieldType %>
<% End If %>

        ''' <summary>
<% If Not c.IsDbGenerated.value = True And c.IsReadOnly.value = False Then %>
        ''' Gets or sets the <%= c.Name %> column value.
<% Else %>
        ''' Gets the <%= c.Name %> column value.
<% End If %>
        ''' </summary>
<% If isVersion Then %>
        <EditorBrowsable(EditorBrowsableState.Never)> _
<% Else %>
        <%= CreateAttributes(c) %>
<% End If %>
<% If IncludeDataContract Then 
    DataMemberCount += 1%>
        <DataMember(Order:=<%= DataMemberCount %>)> _
<% End If %>
        <%= Naming.GetModifier(c.AccessModifier, c.Modifier) %> Property <%=VBKeywordEscape(c.Member) %> As <%= dataType %>
            Get 
                return <%= storageGet %> 
            End Get
<% If Not c.IsReadOnly.Value = True Then %>
            Set
                If <%If dataType = "String" Then%>String.IsNullOrEmpty(<%= c.Storage %>) OrElse <%Else If dataType.Contains("()")%><%= storageSet %> Is Nothing OrElse <%End If%> Not <%= storageSet %>.Equals(<%= valueConvert %>) Then
<% If a IsNot Nothing Then %>
                    If (<%= a.Storage %>.HasLoadedOrAssignedValue) Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
<% End If %>
                    On<%= c.Member %>Changing(<%= valueConvert %>)
<% If Not String.IsNullOrEmpty(EntityBase) Then %>
                    SendPropertyChanging("<%= c.Member %>")
<% End If %>
                    <%= storageSet %> = <%= valueConvert %>
<% If Not String.IsNullOrEmpty(EntityBase) Then %>
                    SendPropertyChanged("<%= c.Member %>")
<% End If %>
                    On<%= c.Member %>Changed()
                End If
            End Set
<% End If ' if IsReadOnly %>
        End Property
<% Next ' foreach column%>
        #End Region
        
        #Region "Association Mapped Properties"
        
<% For Each a As Association In Type.EntityRefAssociations
    Dim info As AssociationInfo = GetAssociationInfo(a)
%>
        Private  <%= a.Storage %> As EntityRef(Of <%= a.Type %>)

        ''' <summary>
        ''' Gets or sets the <%= a.Type %> association.
        ''' </summary>
        <%= CreateAttribute(a) %>
<% If (IncludeDataContract) Then 
    DataMemberCount += 1 %>
        <DataMember(Order:=<%=DataMemberCount%>, EmitDefaultValue:=False)> _
<% End If %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> Property <%= VBKeywordEscape(a.Member) %> As <%= a.Type %>
            Get
<% If (IncludeDataContract) Then %>
                If (serializing AndAlso Not <%=a.Storage%>.HasLoadedOrAssignedValue) Then
                    Return Nothing
                Else
                    Return <%= a.Storage %>.Entity 
                End If
<%Else%>       
                Return <%= a.Storage %>.Entity 
<%End If %>
            End Get
            Set
<% If info.HasOtherAssociation Then %>
                Dim previousValue As <%= a.Type %> = <%= a.Storage %>.Entity
                If Not previousValue Is value Or <%= a.Storage %>.HasLoadedOrAssignedValue = False Then
                    SendPropertyChanging("<%= a.Member %>")
                    If previousValue IsNot Nothing Then
                        <%= a.Storage %>.Entity = Nothing
                        previousValue.<%= info.OtherAssociation.Member %><%= info.RemoveSyntax %>
                    End If
                    <%= a.Storage %>.Entity = value
                    If value IsNot Nothing Then
                        value.<%= info.OtherAssociation.Member %><%= info.AddSyntax %>
<% Dim i As Integer %>
<% For  i = 0 To info.AssignColumns.Count - 1 %>
                        <%= info.AssignColumns(i).Storage %> = value.<%= info.OtherColumns(i).Member %>
<% Next %>
                    Else
<% For i = 0 To info.AssignColumns.Count - 1%>
                        <%= info.AssignColumns(i).Storage %> = Nothing
<% Next %>
                    End If
                    SendPropertyChanged("<%= a.Member %>")
                End If
<% Else %>
                If Not <%= a.Storage %>.Entity = value Then
                    SendPropertyChanging("<%= a.Member %>")
                    <%= a.Storage %>.Entity = value
                    SendPropertyChanged("<%= a.Member %>")
                End If
<% End If ' HasOtherAssociation %>
            End Set
        End Property
<% Next %>
<% For Each a As Association in Type.EntitySetAssociations
        Dim info As AssociationInfo = GetAssociationInfo(a)
%>
        
        Private <%= a.Storage %> As EntitySet(Of <%= a.Type %>)
        
        ''' <summary>
        ''' Gets or sets the <%= a.Type %> association.
        ''' </summary>
        <%= CreateAttribute(a) %>
<% If (IncludeDataContract) Then 
    DataMemberCount += 1%>
        <DataMember(Order:=<%= DataMemberCount %>, EmitDefaultValue:=False)> _
<% End If %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> Property <%= VBKeywordEscape(a.Member) %> As EntitySet(Of <%= a.Type %>)
            Get
<%If IncludeDataContract Then%>
                If (serializing AndAlso Not <%=a.Storage%>.HasLoadedOrAssignedValues) Then
                    Return Nothing
                Else
                    Return <%= a.Storage %>
                End If
<%Else%>    
                Return <%= a.Storage %>
<%End If%>
            End Get
            Set
                <%= a.Storage %>.Assign(value)
            End Set
        End Property
        
        <DebuggerNonUserCodeAttribute()> _
        Private Sub On<%= a.Member %>Add(ByVal entity As <%= a.Type %>)
            SendPropertyChanging(Nothing)
            entity.<%= info.OtherAssociation.Member %> = Me
            SendPropertyChanged(Nothing)
        End Sub
        
        <DebuggerNonUserCodeAttribute()> _
        Private Sub On<%= a.Member %>Remove(ByVal entity As <%= a.Type %>)
            SendPropertyChanging(Nothing)
            entity.<%= info.OtherAssociation.Member %> = Nothing
            SendPropertyChanged(Nothing)
        End Sub
        
<% If IsManyToMany(info.OtherType) Then

        Dim manyMany As ManyToManyInfo = GetManyToManyInfo(info.OtherType)
        If manyMany.RightType IsNot Nothing AndAlso manyMany.LeftType IsNot Nothing Then
        
%>

        Private _<%=StringUtil.ToCamelCase(manyMany.PropertyName)%><%=AssociationSuffix%> As EntitySet(Of <%=manyMany.RightType.Name%>)

        ''' <summary>
        ''' Gets or sets the Many To Many <%=manyMany.PropertyName%> list.
        ''' </summary>
        ''' <value>The <%=manyMany.PropertyName%> list.</value>
        Public Property <%=manyMany.PropertyName%><%=AssociationSuffix%> As EntitySet(Of <%=manyMany.RightType.Name%>)
        
            Get
<% If IncludeDataContract Then %>            
                If (serializing)
                    Return Nothing
                End If
<% End If %>

                If (_<%=StringUtil.ToCamelCase(manyMany.PropertyName)%><%=AssociationSuffix%> Is Nothing)
                
                    _<%=StringUtil.ToCamelCase(manyMany.PropertyName)%><%=AssociationSuffix%> = New EntitySet(Of <%=manyMany.RightType.Name%>)(AddressOf On<%=manyMany.PropertyName%><%=AssociationSuffix%>Add,AddressOf On<%=manyMany.PropertyName%><%=AssociationSuffix%>Remove)
                    _<%=StringUtil.ToCamelCase(manyMany.PropertyName)%><%=AssociationSuffix%>.SetSource(<%=a.Member %>.Select(Function(c)c.<%=manyMany.JoinRightAssociation.Member%>))
                End If
                return _<%=StringUtil.ToCamelCase(manyMany.PropertyName)%><%=AssociationSuffix%>
            End Get
            Set
            
                _<%=StringUtil.ToCamelCase(manyMany.PropertyName)%><%=AssociationSuffix%>.Assign(value)
            End Set
        End Property
        
        <DebuggerNonUserCode> _
        Private Sub On<%=manyMany.PropertyName%><%=AssociationSuffix%>Add(entity As <%=manyMany.RightType.Name%>)
        
            SendPropertyChanging(Nothing)
            <%= a.Member %>.Add( New <%=manyMany.JoinType.Name%> With {.<%=manyMany.JoinLeftAssociation.Member%> = Me ,.<%=manyMany.JoinRightAssociation.Member%> = entity })
            SendPropertyChanged(Nothing)
        End Sub
        
        <DebuggerNonUserCode> _
        Private Sub On<%=manyMany.PropertyName%><%=AssociationSuffix%>Remove(entity As <%=manyMany.RightType.Name%> )
        
            SendPropertyChanging(Nothing)
            Dim <%=StringUtil.ToCamelCase(manyMany.JoinType.Name)%> = <%= a.Member %>.FirstOrDefault(Function(c)c.<%=manyMany.JoinLeftAssociation.ThisKey%> = <%=manyMany.LeftKey%> AndAlso c.<%=manyMany.JoinRightAssociation.ThisKey%> = entity.<%=manyMany.RightKey%>)
            <%= a.Member %>.Remove( <%=StringUtil.ToCamelCase(manyMany.JoinType.Name)%>)
            SendPropertyChanged(Nothing)
        End Sub
    
<%      End If 
End If ' many to many%>
<% Next ' foreach Association%>
           #End Region
        
        #Region "Extensibility Method Definitions"
        
        ''' <summary>Called by the Shared constructor to add shared rules.</summary>
        Partial Private Shared Sub AddSharedRules()     
        End Sub
        ''' <summary>Called when this instance is loaded.</summary>
        Private Partial Sub OnLoaded()
        End Sub
        ''' <summary>Called when this instance is being saved.</summary>
        Private Partial Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        ''' <summary>Called when this instance is created.</summary>
        Private Partial Sub OnCreated()
        End Sub
<% For Each c As Column in Type.Columns
    Dim dataType As String = VBAlias(c.Type)
    
    If (c.CanBeNull.value = True AND CommonUtility.IsNullableType(c.Type)) Then
        dataType = String.Format("Nullable(Of {0})", dataType)
    End If
%>
        ''' <summary>Called when <%= c.Member %> is changing.</summary>
        ''' <param name="value">The new value.</param>
        Private Partial Sub On<%= c.Member %>Changing(ByVal value As <%= dataType %>)
        End Sub
        ''' <summary>Called after <%= c.Member %> has Changed.</summary>
        Private Partial Sub On<%= c.Member %>Changed()
        End Sub
<% Next ' foreach %>
        #End Region
        
        
    <%If IncludeDataContract Then%>
        #Region "Serialization"
        
<%If IncludeDataContract Then%>
        Private Serializing As Boolean
        
        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="StreamingContext"/> for the serialization.</param>
        <OnSerializing(), _
         EditorBrowsableAttribute(EditorBrowsableState.Never)> _
        Public Sub OnSerializing(ByVal context As StreamingContext)
            serializing = True
        End Sub
        
        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="StreamingContext"/> for the serialization.</param>
        <OnSerialized(), _
         EditorBrowsableAttribute(EditorBrowsableState.Never)> _
        Public Sub OnSerialized(ByVal context As StreamingContext)
            serializing = False
        End Sub
<%End If%>
        
        ''' <summary>
        ''' Called when deserializing.
        ''' </summary>
        ''' <param name="context">The <see cref="StreamingContext"/> for the serialization.</param>
        <OnDeserializing(), _
         EditorBrowsableAttribute(EditorBrowsableState.Never)> _
        Public Sub OnDeserializing(ByVal context As StreamingContext)
            Initialize
        End Sub
        
        #End Region
 <% If Not (String.IsNullOrEmpty(EntityBase)) Then %>   
        #Region "Clone"
        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        Private Function ICloneable_Clone() As Object Implements ICloneable.Clone
            Dim serializer As New DataContractSerializer([GetType]())
            Using ms As New MemoryStream()
                serializer.WriteObject(ms, Me)
                ms.Position = 0
                Return serializer.ReadObject(ms)
            End Using
        End Function

        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        ''' <remarks>
        ''' This method is equivalent to a Detach from the current <see cref="DataContext"/>.
        ''' Only loaded EntityRef and EntitySet child accessions will be cloned.
        ''' </remarks>
        Public Function Clone() As <%= Type.Name %>
            Return DirectCast(DirectCast(Me,ICloneable),<%= Type.Name %>).Clone()
        End Function
        #End Region
 <% End If %>
<% End If %>

<% If Not (String.IsNullOrEmpty(EntityBase)) Then %>
        #Region "Remove Methods"
        ''' <summary>
        ''' Detach this instance from the <see cref="DataContext"/>.
        ''' </summary>
        ''' <remarks>
        ''' Detaching the entity will allow it to be attached to another <see cref="DataContext"/>.
        ''' </remarks>
        Public Overrides Sub Remove()
        
            If (Not IsAdded()) Then
                return
            End If
            
            MyBase.Remove()
<%  For Each a As Association In Type.EntityRefAssociations
        Dim info As AssociationInfo = GetAssociationInfo(a)
%>
            <%=a.Storage%> = Remove(<%=a.Storage%>)
<%  Next
    For Each a As Association In Type.EntitySetAssociations
        Dim info As AssociationInfo = GetAssociationInfo(a)
%>
            <%=a.Storage%> = Remove(<%=a.Storage%>,AddressOf On<%=a.Member%>Add,AddressOf On<%=a.Member%>Remove)
<%  Next %>
<% For Each c As Column In Type.Columns %>
<% If c.IsDelayLoaded.Value = true Then %>
            <%= c.Storage %> = Remove(<%=c.Storage%>)
<% End If ' IsDelayLoaded%>
<% Next ' For Each Column%>
        End Sub
        #End Region
  <% End If %>  
    End Class
End Namespace

<script runat="template">
    
    Private selfAssociated As Boolean = False
    Private DataMemberCount As Integer = 0
    
    Public ReadOnly Property AssociationSuffix As String
       Get
            If AssociationNamingSuffix = AssociationNamingEnum.ListSuffix Then
                Return "List"
            Else
                Return "s"
            End If
        End Get
    End Property
    
   Public Function GetColumnType(ByVal column As Column) As String
    Dim dataType As String = column.Type
    
    If column.CanBeNull.value = True AndAlso CommonUtility.IsNullableType(dataType) Then
        dataType = String.Format("Nullable(Of {0})", VBAlias(dataType))
    Else
        dataType = VBAlias(dataType)
    End If
    
    Return dataType
End Function

Public Function IsManyToMany(ByVal type As LinqToSqlShared.DbmlObjectModel.Type) As Boolean
    
    If type.Columns.Count < 2 Then
        Return False
    End If
    
    Dim pk As New List(Of Column)(type.PrimaryKeyColumns)
    If pk.Count <> 2 Then
        Return False
    End If
    
    Dim fk As New List(Of Association)()
    For Each c As Column In pk
        Dim a As Association = type.GetForeignKeyAssociation(c)
        If a IsNot Nothing Then
            fk.Add(a)
        End If
    Next
    If fk.Count <> 2 Then
        Return False
    End If
    
    Return True
End Function

Public Function GetClassAttributes() As String

    Dim s As New StringBuilder()
    If Not String.IsNullOrEmpty(TableName) Then
        s.AppendFormat("<Table(Name:=""{0}"")> _", TableName)
        AppendInheritanceAttribute(Me.Type, s)
    End If
    
    Return s.ToString()
End Function

Private Sub AppendInheritanceAttribute(ByVal t As LinqToSqlShared.DbmlObjectModel.Type, ByVal s As StringBuilder)
    If Not String.IsNullOrEmpty(t.InheritanceCode) Then
        s.AppendLine()
        If t.IsInheritanceDefault Then
            s.AppendFormat("    <InheritanceMapping(Code:=""{0}"", Type:=typeof({1}), IsDefault:=true)> _", t.InheritanceCode, t.Name)
        Else
            s.AppendFormat("    <InheritanceMapping(Code:=""{0}"", Type:=typeof({1}))> _", t.InheritanceCode, t.Name)
        End If
    End If
    
    For Each d As LinqToSqlShared.DbmlObjectModel.Type In t.SubTypes
        AppendInheritanceAttribute(d, s)
    Next
End Sub

Public Function GetAssociationInfo(ByVal a As Association) As AssociationInfo
    Dim info As New AssociationInfo()
    info.OtherType = Database.GetTypeByName(a.Type)
    If info.OtherType Is Nothing Then
        Throw New Exception("Invaild Type for Association: " + a.Name)
    End If
    
    info.HasOtherAssociation = info.OtherType.Associations.Contains(a.ToOtherKey())
    If info.HasOtherAssociation Then
        info.OtherAssociation = info.OtherType.Associations(a.ToOtherKey())
    Else
        Return info
    End If
    ' no more work needed
    If String.IsNullOrEmpty(a.OtherKey) Then
        info.OtherColumns = New List(Of Column)(info.OtherType.PrimaryKeyColumns)
    Else
        Dim members As String() = a.OtherKey.Split(New Char() {","C})
        info.OtherColumns = info.OtherType.GetColumnsByMembers(members)
    End If
    
    If info.OtherColumns Is Nothing OrElse info.OtherColumns.Count = 0 Then
        Throw New Exception("Invaild OtherKey for Association: " + a.Name)
    End If
    
    If String.IsNullOrEmpty(a.ThisKey) Then
        info.AssignColumns = New List(Of Column)(Type.PrimaryKeyColumns)
    Else
        Dim members As String() = a.ThisKey.Split(New Char() {","C})
        info.AssignColumns = Type.GetColumnsByMembers(members)
    End If
    
    If info.AssignColumns Is Nothing OrElse info.AssignColumns.Count = 0 Then
        Throw New Exception("Invaild ThisKey for Association: " + a.Name)
    End If
    
    info.IsOneToOne = (a.IsForeignKey.value = True AndAlso a.Cardinality.value = Cardinality.One AndAlso info.OtherAssociation.IsForeignKey.value = False AndAlso info.OtherAssociation.Cardinality.value = Cardinality.One) OrElse (a.IsForeignKey.Value = False AndAlso a.Cardinality.value = Cardinality.One AndAlso info.OtherAssociation.IsForeignKey.value = True AndAlso info.OtherAssociation.Cardinality.value = Cardinality.One)
    
    If info.IsOneToOne Then
        info.AddSyntax = " = Me"
        info.RemoveSyntax = " = Nothing"
    Else
        info.AddSyntax = ".Add(Me)"
        info.RemoveSyntax = ".Remove(Me)"
    End If
    
    Return info
End Function

Public Function CreateAttributes(ByVal c As Column) As String
    Dim s As New StringBuilder()
    s.Append("<Column(")
    s.AppendFormat("Name:=""{0}""", c.Name)
    s.AppendFormat(", Storage:=""{0}""", c.Storage)
    s.AppendFormat(", DbType:=""{0}""", c.DbType)
    If c.IsPrimaryKey Then
        s.Append(", IsPrimaryKey:=true")
    End If
    If c.IsDbGenerated Then
        s.Append(", IsDbGenerated:=true")
    End If
    If c.IsVersion Then
        s.Append(", IsVersion:=true")
    End If
    If c.IsDiscriminator Then
        s.Append(", IsDiscriminator:=true")
    End If
    If c.CanBeNull.Value = False Then
        s.Append(", CanBeNull:=false")
    End If
    If c.UpdateCheck.Value <> UpdateCheck.Always Then
        s.AppendFormat(", UpdateCheck:=UpdateCheck.{0}", c.UpdateCheck.ToString())
    End If
    If Not String.IsNullOrEmpty(c.Expression) Then
        s.AppendFormat(", Expression:=""{0}""", c.Expression)
    End If
    s.Append(")> _")
    
	Dim prefix As String = [String].Concat(Environment.NewLine, "        ")

	If Me.Framework = FrameworkEnum.v35_SP1 AndAlso c.Type.Contains("String") Then
		Dim size As Integer = LinqToSqlShared.Generator.CommonUtility.GetColumnSize(c.DbType)
		If 0 < size AndAlso size < 8000 Then
			s.AppendFormat("{0}<StringLength({1})> _", prefix, size)
		End If
	End If
	
    Return s.ToString()
End Function

Public Function CreateAttribute(ByVal a As Association) As String
    Dim s As New StringBuilder()
    s.Append("<Association(")
    s.AppendFormat("Name:=""{0}""", a.Name)
    s.AppendFormat(", Storage:=""{0}""", a.Storage)
    If Not String.IsNullOrEmpty(a.ThisKey) Then
        s.AppendFormat(", ThisKey:=""{0}""", a.ThisKey)
    End If
    If Not String.IsNullOrEmpty(a.OtherKey) Then
        s.AppendFormat(", OtherKey:=""{0}""", a.OtherKey)
    End If
    If a.Cardinality.Value = Cardinality.One Then
        s.Append(", IsUnique:=true")
    End If
    If a.IsForeignKey Then
        s.Append(", IsForeignKey:=true")
    End If
    If a.DeleteOnNull Then
        s.Append(", DeleteOnNull:=true")
    End If
    If Not String.IsNullOrEmpty(a.DeleteRule) Then
        s.AppendFormat(", DeleteRule:=""{0}""", a.DeleteRule)
    End If
    
    s.Append(")> _")
    
    Return s.ToString()
End Function

Public Structure AssociationInfo
    
    Public HasOtherAssociation As Boolean
    Public OtherAssociation As Association
    
    Public OtherType As LinqToSqlShared.DbmlObjectModel.Type
    
    Public OtherColumns As List(Of Column)
    Public AssignColumns As List(Of Column)
    
    Public IsOneToOne As Boolean
    Public AddSyntax As String
    Public RemoveSyntax As String
End Structure

Public Function GetManyToManyInfo(ByVal type__1 As LinqToSqlShared.DbmlObjectModel.Type) As ManyToManyInfo
    
    Dim leftKeyPicked As Boolean = False
    
    Dim manyMany As New ManyToManyInfo()
    manyMany.LeftType = Type
    manyMany.JoinType = type__1
    
    For Each pk As Column In manyMany.LeftType.PrimaryKeyColumns
        manyMany.LeftKey = manyMany.LeftKey + pk.Member
    Next
    
    If Not selfAssociated
    
        For Each association As Association In type__1.EntityRefAssociations
            
            If association.Type <> Type.Name OrElse leftKeyPicked Then
            
                manyMany.RightType = Database.GetTypeByName(association.Type)
                manyMany.JoinRightAssociation = association
                
                For Each pk As Column In manyMany.RightType.PrimaryKeyColumns
                    manyMany.RightKey = manyMany.RightKey + pk.Member
                Next
            Else
                manyMany.JoinLeftAssociation = association
                leftKeyPicked = True
            End If
        Next
    Else
    
        For Each association As Association In type__1.EntityRefAssociations
            
            If association.Type <> Type.Name OrElse leftKeyPicked Then
            
                manyMany.RightType = Database.GetTypeByName(association.Type)
                manyMany.JoinLeftAssociation = association
                
                For Each pk As Column In manyMany.RightType.PrimaryKeyColumns
                    manyMany.RightKey = manyMany.RightKey + pk.Member
                Next
            Else
                manyMany.JoinRightAssociation = association
                leftKeyPicked = True
            End If
        Next
    End If
    
    'For those who think a Self-Associating Many To Many Table is a good idea
    If manyMany.LeftType Is manyMany.RightType Then
    
        manyMany.PropertyName = manyMany.RightType.Name + "By" + manyMany.JoinRightAssociation.ThisKey
        selfAssociated = True
    
    Else
        manyMany.PropertyName = manyMany.RightType.Name
        
    End If
    
    Return manyMany
End Function

Public Structure ManyToManyInfo
    Public LeftType As LinqToSqlShared.DbmlObjectModel.Type
    Public RightType As LinqToSqlShared.DbmlObjectModel.Type
    Public JoinType As LinqToSqlShared.DbmlObjectModel.Type
    Public RightKey As String
    Public LeftKey As String
    Public JoinRightAssociation As Association
    Public JoinLeftAssociation As Association
    Public PropertyName As String
End Structure



</script>