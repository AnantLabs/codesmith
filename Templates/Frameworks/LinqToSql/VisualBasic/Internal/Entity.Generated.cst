<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" 
    Description="Linq to Sql Entity Class." %>

<%@ Assembly Name="Dbml" Path="..\..\Common"%>
<%@ Assembly Name="Generator" Path="..\..\Common"%>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type" 
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False" 
    Description="The Type instance for this entity. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="TableName" 
    Type="System.String" Default="" Optional="True" 
    Description="The name of the table this class is mapped to." %>
    
<%@ Property Category="2.Class" Name="EntityBase" 
    Type="System.String" Default="LinqEntityBase" Optional="True" 
    Description="The base class for the entity." %>

<%@ Property Category="2.Class" Name="Framework"
    Type="FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Include Serialization attributes and what kind." %>

<%@ Property Category="2.Class" Name="IncludeDataContract"
     Type="System.Boolean" Default="True" Optional="False"
     Description="Include WCF DataContract attributes." %>
	
<%@ Property Category="2.Class" Name="IncludeDataServices"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include ADO.Net DataServices attributes." %>

<%@ Map Name="VBKeywordEscape" 
    Src="VBKeywordEscape.csmap" Reverse="False" 
    Description="Mapping to escape vb keywords" %>

<%@ Map Name="VBAlias" 
    Src="System-VBAlias.csmap" Reverse="False" 
    Description="Convert system data types to vb alias" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO Not MODIfY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.ComponentModel
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Diagnostics
<% If (IncludeDataContract) Then %>
Imports System.Runtime.Serialization
<% End If %>
<% If (Me.Framework = FrameworkEnum.v35_SP1) Then %>
Imports System.ComponentModel.DataAnnotations
<% If (IncludeDataServices) Then %>
Imports System.Data.Services.Common
<% End If %>
<% End If %>

Namespace <%= Database.EntityNamespace %>
    ''' <summary>
<% If Not String.IsNullOrEmpty(TableName) Then %>
    ''' The class representing the <%= TableName %> table.
<%  Else  %>
    ''' Class representing data for the <%= Database.Name %> database.
<% End If %>
    ''' </summary>
    <%= GetClassAttributes() %>
<% If (IncludeDataContract ANDALSO Framework = FrameworkEnum.v35) Then %>
    <System.Runtime.Serialization.DataContractAttribute()> _
<% Else If (IncludeDataContract ANDALSO Framework = FrameworkEnum.v35_SP1) Then%>
    <DataContract(IsReference:=True)> _
<% End If %>
<% If (Me.Framework = FrameworkEnum.v35_SP1) Then %>
    <ScaffoldTable(True)> _
    <MetadataType(GetType(<%= Type.Name %>.Metadata))> _
	<% If (IncludeDataServices) Then %>
	<% Dim dataServiceKey As New System.Text.StringBuilder()
	Dim isFirstDataServiceKey As Boolean = True
	For Each column as Column in Type.PrimaryKeyColumns
		If (isFirstDataServiceKey) Then
			isFirstDataServiceKey = false
		Else
			dataServiceKey.Append(", ")
		End If
		dataServiceKey.AppendFormat("""{0}""", column.Name)
	Next %>
	<DataServiceKey(<%= dataServiceKey.ToString() %>)> _
	<% End If %>
<% End If %>
    <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> Partial Class <%= Type.Name %>
<% If Not (String.IsNullOrEmpty(EntityBase)) Then %>
        Inherits <%= EntityBase %>
<% End If %>
        
        #Region "Default Constructor"
        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= Type.Name %>"/> class.
        ''' </summary>
        <DebuggerNonUserCodeAttribute()> _
        <%= Naming.GetModifier(Type.AccessModifier) %>  Sub New()
              OnCreated()
    <% If (IncludeDataContract) Then%>    
            Initialize()
        End Sub
        
        Private Sub Initialize()
    <%  End If
    For Each a As Association in Type.EntityRefAssociations %>
            <%= a.Storage %> = Nothing
<% Next ' foreach Association%>
<% For Each a As Association In Type.EntitySetAssociations %>
            <%= a.Storage %> = New EntitySet(Of <%= a.Type %>)( _
                New System.Action(Of <%= a.Type %>)(AddressOf Me.Attach_<%= a.Member %>), _
                New System.Action(Of <%= a.Type %>)(AddressOf Me.Detach_<%= a.Member %>))
<% Next ' foreach Association%>
        End Sub
        #End Region

        #Region "Column Mapped Properties"
<% Dim dataMemberIndex As Integer = 0
For Each c As Column in Type.Columns 
Dim dataType As String = c.Type
Dim fieldType As String = c.Type
Dim storageAssign As String = c.Storage

If c.IsDelayLoaded.Value = True AndAlso c.IsPrimaryKey.Value = False Then
    dataType = VBAlias(dataType)
    fieldType = String.Format("Link(Of {0})", dataType)
    storageAssign = storageAssign + ".Value"
ElseIf c.CanBeNull.Value = True AndAlso CommonUtility.IsNullableType(dataType) Then
    dataType = String.Format("Nullable(Of {0})", VBAlias(dataType))
    fieldType = dataType
Else
    dataType = VBAlias(dataType)
    fieldType = dataType
End If

Dim a As Association = Type.GetForeignKeyAssociation(c)

%>
        
<% If (c.IsDbGenerated.Value = True) Then %>
        Private <%= c.Storage %> As <%= fieldType %> = Nothing
<% Else %>
        Private <%= c.Storage %> As <%= fieldType %>
<% End If %>

        ''' <summary>
<% If Not c.IsDbGenerated.value = True And c.IsReadOnly.value = False Then %>
        ''' Gets or sets the <%= c.Name %> column value.
<% Else %>
        ''' Gets the <%= c.Name %> column value.
<% End If %>
        ''' </summary>
        <%= CreateAttributes(c, dataMemberIndex) %>
        <%= Naming.GetModifier(c.AccessModifier, c.Modifier) %> Property <%= c.Member %> As <%= dataType %>
            Get 
                return <%= storageAssign %> 
            End Get
<% If Not c.IsReadOnly.Value = True Then %>
            Set
                If <%If dataType = "String"%>String.IsNullOrEmpty(<%= c.Storage %>) OrElse <%End If%> Not <%= storageAssign %>.Equals(value) Then
<% If a IsNot Nothing Then %>
                    If (<%= a.Storage %>.HasLoadedOrAssignedValue) Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
<% End If %>
                    On<%= c.Member %>Changing(value)
<% If Not String.IsNullOrEmpty(EntityBase) Then %>
                    OnPropertyChanging("<%= c.Member %>")
<% End If %>
                    <%= storageAssign %> = value
<% If Not String.IsNullOrEmpty(EntityBase) Then %>
                    OnPropertyChanged("<%= c.Member %>")
<% End If %>
                    On<%= c.Member %>Changed()
                End If
            End Set
<% End If ' if IsReadOnly %>
        End Property
<% Next ' foreach column%>
        #End Region
        
        #Region "Association Mapped Properties"
        
<%         Dim needsOnSerialize As Boolean = False
        If IncludeDataContract Then
            For Each a As Association in Type.Associations
                If Not a.IsForeignKey.Value Then
                    needsOnSerialize = true
                    Exit For
                End If
            Next
        End If

        For Each a As Association In Type.EntityRefAssociations
        Dim info As AssociationInfo = GetAssociationInfo(a)
%>
        Private  <%= a.Storage %> As EntityRef(Of <%= a.Type %>)

        ''' <summary>
        ''' Gets or sets the <%= a.Type %> association.
        ''' </summary>
        <%= CreateAttribute(a) %>
<% If (IncludeDataContract) Then %>
        <DataMember(Order:=<%=dataMemberIndex%>, EmitDefaultValue:=False)> _
<%dataMemberIndex += 1 
    End If %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> Property <%= a.Member %> As <%= a.Type %>
            Get
            <%    If (needsOnSerialize) Then %>
                If (serializing AndAlso Not <%=a.Storage%>.HasLoadedOrAssignedValue) Then
                    Return Nothing
                End If
            <% End If %>
                Return <%= a.Storage %>.Entity 
            End Get
            Set
<% If info.HasOtherAssociation Then %>
                Dim previousValue As <%= a.Type %> = <%= a.Storage %>.Entity
                If Not previousValue Is value Or <%= a.Storage %>.HasLoadedOrAssignedValue = False Then
                    OnPropertyChanging("<%= a.Member %>")
                    If previousValue IsNot Nothing Then
                        <%= a.Storage %>.Entity = Nothing
                        previousValue.<%= info.OtherAssociation.Member %><%= info.RemoveSyntax %>
                    End If
                    <%= a.Storage %>.Entity = value
                    If value IsNot Nothing Then
                        value.<%= info.OtherAssociation.Member %><%= info.AddSyntax %>
<% Dim i As Integer %>
<% For  i = 0 To info.AssignColumns.Count - 1 %>
                        <%= info.AssignColumns(i).Storage %> = value.<%= info.OtherColumns(i).Member %>
<% Next %>
                    Else
<% For i = 0 To info.AssignColumns.Count - 1%>
                        <%= info.AssignColumns(i).Storage %> = Nothing
<% Next %>
                    End If
                    OnPropertyChanged("<%= a.Member %>")
                End If
<% Else %>
                If Not <%= a.Storage %>.Entity = value Then
                    OnPropertyChanging("<%= a.Member %>")
                    <%= a.Storage %>.Entity = value
                    OnPropertyChanged("<%= a.Member %>")
                End If
<% End If ' HasOtherAssociation %>
            End Set
        End Property
<% Next %>
<% For Each a As Association in Type.EntitySetAssociations
        Dim info As AssociationInfo = GetAssociationInfo(a)
%>
        
        Private <%= a.Storage %> As EntitySet(Of <%= a.Type %>)
        
        ''' <summary>
        ''' Gets or sets the <%= a.Type %> association.
        ''' </summary>
        <%= CreateAttribute(a) %>
<% If (IncludeDataContract) Then %>
        <DataMember()> _
<% End If %>
        <%= Naming.GetModifier(a.AccessModifier, a.Modifier) %> Property <%= a.Member %> As EntitySet(Of <%= a.Type %>)
            Get
            <%If (needsOnSerialize) Then%>
                If (serializing AndAlso Not <%=a.Storage%>.HasLoadedOrAssignedValues) Then
                    Return Nothing
                End If
            <%End If%>    
                return <%= a.Storage %>
            End Get
            Set
                <%= a.Storage %>.Assign(value)
            End Set
        End Property
        
        <DebuggerNonUserCodeAttribute()> _
        Private Sub Attach_<%= a.Member %>(ByVal entity As <%= a.Type %>)
            OnPropertyChanging(Nothing)
            entity.<%= info.OtherAssociation.Member %> = Me
            OnPropertyChanged(Nothing)
        End Sub
        
        <DebuggerNonUserCodeAttribute()> _
        Private Sub Detach_<%= a.Member %>(ByVal entity As <%= a.Type %>)
            OnPropertyChanging(Nothing)
            entity.<%= info.OtherAssociation.Member %> = Nothing
            OnPropertyChanged(Nothing)
        End Sub
<% Next ' foreach Association%>
           #End Region
        
        #Region "Extensibility Method Definitions"
        ''' <summary>Called when this instance is loaded.</summary>
        Private Partial Sub OnLoaded()
        End Sub
        ''' <summary>Called when this instance is being saved.</summary>
        Private Partial Sub OnValidate(ByVal action As ChangeAction)
        End Sub
        ''' <summary>Called when this instance is created.</summary>
        Private Partial Sub OnCreated()
        End Sub
<% For Each c As Column in Type.Columns
    Dim dataType As String = VBAlias(c.Type)
    
    If (c.CanBeNull.value = True AND CommonUtility.IsNullableType(c.Type)) Then
        dataType = String.Format("Nullable(Of {0})", dataType)
    End If
%>
        ''' <summary>Called when <%= c.Member %> is changing.</summary>
        ''' <param name="value">The new value.</param>
        Private Partial Sub On<%= c.Member %>Changing(ByVal value As <%= dataType %>)
        End Sub
        ''' <summary>Called after <%= c.Member %> has Changed.</summary>
        Private Partial Sub On<%= c.Member %>Changed()
        End Sub
<% Next ' foreach %>
        #End Region
        
        
    <%If IncludeDataContract Then%>
        #Region "Serialization"
        
        <%If (needsOnSerialize) Then%>
        Private Serializing As Boolean
        
        <OnSerializing(), _
         EditorBrowsableAttribute(EditorBrowsableState.Never)> _
        Public Sub OnSerializing(ByVal context As StreamingContext)
            serializing = True
        End Sub
        
        <OnSerialized(), _
         EditorBrowsableAttribute(EditorBrowsableState.Never)> _
        Public Sub OnSerialized(ByVal context As StreamingContext)
            serializing = False
        End Sub
        <%End If%>
        
        <OnDeserializing(), _
         EditorBrowsableAttribute(EditorBrowsableState.Never)> _
        Public Sub OnDeserializing(ByVal context As StreamingContext)
            Initialize
        End Sub
        
        #End Region
    <%End If%>
    
    End Class
End Namespace

<script runat="template">
   Public Function GetColumnType(ByVal column As Column) As String
    Dim dataType As String = column.Type
    
    If column.CanBeNull.value = True AndAlso CommonUtility.IsNullableType(dataType) Then
        dataType = String.Format("Nullable(Of {0})", VBAlias(dataType))
    Else
        dataType = VBAlias(dataType)
    End If
    
    Return dataType
End Function
Public Function GetClassAttributes() As String

    Dim s As New StringBuilder()
    If Not String.IsNullOrEmpty(TableName) Then
        s.AppendFormat("<Table(Name:=""{0}"")> _", TableName)
        AppendInheritanceAttribute(Me.Type, s)
    End If
    
    Return s.ToString()
End Function

Private Sub AppendInheritanceAttribute(ByVal t As LinqToSqlShared.DbmlObjectModel.Type, ByVal s As StringBuilder)
    If Not String.IsNullOrEmpty(t.InheritanceCode) Then
        s.AppendLine()
        If t.IsInheritanceDefault Then
            s.AppendFormat("    <InheritanceMapping(Code:=""{0}"", Type:=typeof({1}), IsDefault:=true)> _", t.InheritanceCode, t.Name)
        Else
            s.AppendFormat("    <InheritanceMapping(Code:=""{0}"", Type:=typeof({1}))> _", t.InheritanceCode, t.Name)
        End If
    End If
    
    For Each d As LinqToSqlShared.DbmlObjectModel.Type In t.SubTypes
        AppendInheritanceAttribute(d, s)
    Next
End Sub

Public Function GetAssociationInfo(ByVal a As Association) As AssociationInfo
    Dim info As New AssociationInfo()
    info.OtherType = Database.GetTypeByName(a.Type)
    If info.OtherType Is Nothing Then
        Throw New Exception("Invaild Type for Association: " + a.Name)
    End If
    
    info.HasOtherAssociation = info.OtherType.Associations.Contains(a.ToOtherKey())
    If info.HasOtherAssociation Then
        info.OtherAssociation = info.OtherType.Associations(a.ToOtherKey())
    Else
        Return info
    End If
    ' no more work needed
    If String.IsNullOrEmpty(a.OtherKey) Then
        info.OtherColumns = New List(Of Column)(info.OtherType.PrimaryKeyColumns)
    Else
        Dim members As String() = a.OtherKey.Split(New Char() {","C})
        info.OtherColumns = info.OtherType.GetColumnsByMembers(members)
    End If
    
    If info.OtherColumns Is Nothing OrElse info.OtherColumns.Count = 0 Then
        Throw New Exception("Invaild OtherKey for Association: " + a.Name)
    End If
    
    If String.IsNullOrEmpty(a.ThisKey) Then
        info.AssignColumns = New List(Of Column)(Type.PrimaryKeyColumns)
    Else
        Dim members As String() = a.ThisKey.Split(New Char() {","C})
        info.AssignColumns = Type.GetColumnsByMembers(members)
    End If
    
    If info.AssignColumns Is Nothing OrElse info.AssignColumns.Count = 0 Then
        Throw New Exception("Invaild ThisKey for Association: " + a.Name)
    End If
    
    info.IsOneToOne = (a.IsForeignKey.value = True AndAlso a.Cardinality.value = Cardinality.One AndAlso info.OtherAssociation.IsForeignKey.value = False AndAlso info.OtherAssociation.Cardinality.value = Cardinality.One) OrElse (a.IsForeignKey.Value = False AndAlso a.Cardinality.value = Cardinality.One AndAlso info.OtherAssociation.IsForeignKey.value = True AndAlso info.OtherAssociation.Cardinality.value = Cardinality.One)
    
    If info.IsOneToOne Then
        info.AddSyntax = " = Me"
        info.RemoveSyntax = " = Nothing"
    Else
        info.AddSyntax = ".Add(Me)"
        info.RemoveSyntax = ".Remove(Me)"
    End If
    
    Return info
End Function

Public Function CreateAttributes(ByVal c As Column, ByRef dataMemberOrderId As Integer) As String
    Dim s As New StringBuilder()
    s.Append("<Column(")
    s.AppendFormat("Name:=""{0}""", c.Name)
    s.AppendFormat(", Storage:=""{0}""", c.Storage)
    s.AppendFormat(", DbType:=""{0}""", c.DbType)
    If c.IsPrimaryKey Then
        s.Append(", IsPrimaryKey:=true")
    End If
    If c.IsDbGenerated Then
        s.Append(", IsDbGenerated:=true")
    End If
    If c.IsVersion Then
        s.Append(", IsVersion:=true")
    End If
    If c.IsDiscriminator Then
        s.Append(", IsDiscriminator:=true")
    End If
    If c.CanBeNull.Value = False Then
        s.Append(", CanBeNull:=false")
    End If
    If c.UpdateCheck.Value <> UpdateCheck.Always Then
        s.AppendFormat(", UpdateCheck:=UpdateCheck.{0}", c.UpdateCheck.ToString())
    End If
    If Not String.IsNullOrEmpty(c.Expression) Then
        s.AppendFormat(", Expression:=""{0}""", c.Expression)
    End If
    s.Append(")> _")
    
	Dim prefix As String = [String].Concat(Environment.NewLine, "        ")

	If c.IsVersion.HasValue AndAlso c.IsVersion.Value Then
		s.AppendFormat("{0}<EditorBrowsable(EditorBrowsableState.Never)> _", prefix)
	End If

	If Me.IncludeDataContract Then
		dataMemberOrderId += 1
		s.AppendFormat("{0}<DataMember(Order:={1})> _", prefix, dataMemberOrderId)
	End If

	If c.Type.Contains("String") Then
		Dim size As Integer = LinqToSqlShared.Generator.CommonUtility.GetColumnSize(c.DbType)
		If 0 < size AndAlso size < 8000 Then
			s.AppendFormat("{0}<StringLength({1})> _", prefix, size)
		End If
	End If
	
    Return s.ToString()
End Function

Public Function CreateAttribute(ByVal a As Association) As String
    Dim s As New StringBuilder()
    s.Append("<Association(")
    s.AppendFormat("Name:=""{0}""", a.Name)
    s.AppendFormat(", Storage:=""{0}""", a.Storage)
    If Not String.IsNullOrEmpty(a.ThisKey) Then
        s.AppendFormat(", ThisKey:=""{0}""", a.ThisKey)
    End If
    If Not String.IsNullOrEmpty(a.OtherKey) Then
        s.AppendFormat(", OtherKey:=""{0}""", a.OtherKey)
    End If
    If a.Cardinality.Value = Cardinality.One Then
        s.Append(", IsUnique:=true")
    End If
    If a.IsForeignKey Then
        s.Append(", IsForeignKey:=true")
    End If
    If a.DeleteOnNull Then
        s.Append(", DeleteOnNull:=true")
    End If
    If Not String.IsNullOrEmpty(a.DeleteRule) Then
        s.AppendFormat(", DeleteRule:=""{0}""", a.DeleteRule)
    End If
    
    s.Append(")> _")
    
    Return s.ToString()
End Function
Public Structure AssociationInfo
    
    Public HasOtherAssociation As Boolean
    Public OtherAssociation As Association
    
    Public OtherType As LinqToSqlShared.DbmlObjectModel.Type
    
    Public OtherColumns As List(Of Column)
    Public AssignColumns As List(Of Column)
    
    Public IsOneToOne As Boolean
    Public AddSyntax As String
    Public RemoveSyntax As String
End Structure

</script>