<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" 
    Description="Linq to Sql Entity Manager Class." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common"%>
<%@ Assembly Name="Generator" Path="..\..\Common"%>
<%@ Assembly Src="Manager.vb" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>


<%@ Property Category="2.Class" Name="Framework"
    Type="FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Include Serialization attributes and what kind." %>
    
<%@ Property Category="4.Manager" Name="ManagerNamespace" 
    Type="System.String" Default="" Optional="True" 
    Description="The namespace to use for the generated manager class files."%>

<%@ Property Category="4.Manager" Name="DataManager" 
    Type="Manager.DataManager" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Property Category="4.Manager" Name="EntityManager" 
    Type="Manager.EntityManager" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Property Category="3.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="3.Mapping" Name="Table" 
    Type="LinqToSqlShared.DbmlObjectModel.Table" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Map Name="VBKeywordEscape" 
    Src="VBKeywordEscape.csmap" Reverse="False" 
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="VBAlias" 
    Src="System-VBAlias.csmap" Reverse="False" 
    Description="Convert system data types to c# alias" %>

'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Data.Linq
Imports System.Data.SqlTypes
Imports System.Linq
Imports System.Text
Imports CodeSmith.Data
Imports CodeSmith.Data.Rules
Imports CodeSmith.Data.Rules.Assign
Imports CodeSmith.Data.Rules.Validation
<% If Not Database.ContextNamespace = ManagerNamespace Then %>
Imports <%= Database.ContextNamespace %>
<% End If %>
<% If Not Database.ContextNamespace = Database.EntityNamespace Then %>
Imports <%= Database.EntityNamespace %>
<% End If %>

Namespace <%= ManagerNamespace %>
    ''' <summary>
    ''' The manager class for <%= EntityManager.EntityName %>.
    ''' </summary>
    Partial Public Class <%= EntityManager.ManagerName %> 
    Inherits EntityManagerBase(Of <%= DataManager.DataManagerName %>,<%= EntityManager.EntityName %>)
        ''' <summary>
        ''' Initializes the <see cref="<%= EntityManager.ManagerName %>"/> class.
        ''' </summary>
        Shared Sub New()
           
            AddRules()
            
        End Sub

        ''' <summary>
        ''' Initializes the <see cref="<%= EntityManager.ManagerName %>"/> class.
        ''' </summary>
        ''' <param name="manager">The current manager.</param>
        Public Sub New(ByVal manager As <%= DataManager.DataManagerName %>) 
            MyBase.New(manager)
            OnCreated()
        End Sub

        ''' <summary>
        ''' Gets the current context.
        ''' </summary>
        Protected ReadOnly Property Context As <%= DataManager.DataContextName %>
            Get
                return Manager.Context
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the entity for this manager.
        ''' </summary>
        Protected ReadOnly Property Entity As Table(Of <%= EntityManager.EntityName %>)
            Get 
                return Manager.Context.<%= EntityManager.PropertyName %>
            End Get
        End Property
        
<% For Each method As ManagerMethod In EntityManager.Methods 
         Dim parameters As String = GetParameters(method)
         Dim paramNames As String = GetParametersNames(method)
         Dim paramTypes As String = GetParametersTypes(method)
%>
<% If method.IsKey Then %>
<% If method.Columns.Count < 5 Then %>
        
        ''' <summary>
        ''' Creates the key for this entity.
        ''' </summary>
        Public Shared Function CreateKey(<%= parameters %>) As IEntityKey(Of <%= paramTypes %>)
            Return New EntityKey(Of <%= paramTypes %>)(<%= paramNames %>)
        End Function
        
        ''' <summary>
        ''' Gets an entity by the primary key.
        ''' </summary>
        ''' <param name="key">The key for the entity.</param>
        ''' <returns>
        ''' An instance of the entity or null if not found.
        ''' </returns>
        ''' <remarks>
        ''' This method is expecting key to be of type IEntityKey(Of <%= paramTypes %>).
        ''' </remarks>
        ''' <exception cref="ArgumentException">Thrown when key is not of type IEntityKey(Of <%= paramTypes %>).</exception>
        Public Overrides Function GetByKey(ByVal key As IEntityKey) As <%= EntityManager.EntityName %>
            If (key Is GetType(IEntityKey(Of <%= paramTypes %>))) Then
                Dim entityKey As IEntityKey(Of <%= paramTypes %>) = DirectCast(key,IEntityKey(Of <%= paramTypes %>))
<% If (method.Columns.Count = 1) Then %>
                return GetByKey(entityKey.Key)
<% Else If (method.Columns.Count = 2) Then %>
                return GetByKey(entityKey.Key, entityKey.Key1)
<% Else If (method.Columns.Count = 3) Then %>
                return GetByKey(entityKey.Key, entityKey.Key1, entityKey.Key2);
<% Else If (method.Columns.Count = 4) Then %>
                return GetByKey(entityKey.Key, entityKey.Key1, entityKey.Key2, entityKey.Key3)
<% End If %>
            Else
                Throw New ArgumentException("Invalid key, expected key to be of type IEntityKey(Of <%= paramTypes %>)")
            End If
        End Function
        
<% End If ' columns less then 5 %>
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        Public Overloads Function GetByKey(<%= parameters %>) As <%= EntityManager.EntityName %>
<% If (method.Columns.Count < 4) Then %>
            If (Context.LoadOptions Is Nothing) Then 
                return Query.GetByKey.Invoke(Context, <%= paramNames %>)
            Else
<% End If ' column count%>
                return Entity.FirstOrDefault(<%= GetLamba(method, 5) %>)
            End If
        End Function
<%  Else If (method.IsUnique) Then %>
        ''' <summary>
        ''' Gets an instance by using a unique index.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        Public Overloads Function GetBy<%= method.NameSuffix %>(<%= parameters %>) As <%= EntityManager.EntityName %>
<% If (method.Columns.Count < 4) Then %>
            If (Context.LoadOptions Is Nothing) Then 
                return Query.GetBy<%= method.NameSuffix %>.Invoke(Context, <%= paramNames %>)
            Else
<% End If ' column count%>
                Return Entity.FirstOrDefault(<%= GetLamba(method, 5) %>)
<% If (method.Columns.Count < 4) Then %>
            End If
<% End If %>
        END Function
<% Else  %>
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        Public Overloads Function GetBy<%= method.NameSuffix %>(<%= parameters %>) As IQueryable(Of <%= EntityManager.EntityName %>)
<% If (method.Columns.Count < 4) Then %>
            If Context.LoadOptions Is Nothing Then 
                return Query.GetBy<%= method.NameSuffix %>.Invoke(Context, <%= paramNames %>)
            Else
<% End If ' column count%>
                return Entity.Where(<%= GetLamba(method, 5) %>)
<% If (method.Columns.Count < 4) Then %>
            End If
<% End If%>
        End Function
<% End If ' if is key%>
<% Next ' foreach method%>

        #Region "Extensibility Method Definitions"
        ''' <summary>Called by the static constructor to add shared rules.</summary>
        Shared Partial Private Sub AddRules()
        End Sub
        ''' <summary>Called when the class is created.</summary>
        Partial Private Sub OnCreated()
        End Sub
        #End Region
        
        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query
<% For Each method As ManagerMethod in EntityManager.Methods
    Dim parameters As String = GetParameters(method)
    Dim paramNames As String = GetParametersNames(method)
    Dim paramTypes As String = GetParametersTypes(method)

%>
<% If method.Columns.Count < 4 Then %>
<% If method.IsKey Then %>

            Friend Shared Readonly GetByKey As Func(Of <%= DataManager.DataContextName %>, <%= paramTypes %>, <%= EntityManager.PropertyName %>) = _
                CompiledQuery.Compile( _
                     Function(db As <%= DataManager.DataContextName %>, <%= parameters %>) _
                        db.<%= EntityManager.EntityName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% Else If method.IsUnique Then %>

            Friend Shared Readonly GetBy<%= method.NameSuffix %> As Func(Of <%= DataManager.DataContextName %>, <%= paramTypes %>, <%= EntityManager.EntityName %>) = _
                CompiledQuery.Compile( _
                     Function(db As <%= DataManager.DataContextName %>, <%= parameters %>) _
                        db.<%= EntityManager.EntityName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% Else %>

            Friend Shared Readonly  GetBy<%= method.NameSuffix %> As Func(Of <%= DataManager.DataContextName %>, <%= paramTypes %>, IQueryable(Of <%= EntityManager.EntityName %>)) = _
                CompiledQuery.Compile( _
                    Function( db As <%= DataManager.DataContextName %> , <%= parameters %>) _
                        db.<%= EntityManager.EntityName %>.Where(<%= GetLamba(method, 7) %>))
<% End If ' if is key%>
<% End If ' column count%>
<% Next ' foreach method%>

        End Class
        #End Region
    End Class
End Namespace

<script runat="template">
   Public Function GetParameters(ByVal method As ManagerMethod) As String
    Dim args As New StringBuilder()
    For Each column As Column In method.Columns
        If args.Length > 0 Then
            args.Append(", ")
        End If
        
        Dim paramName As String = CommonUtility.GetParameterName(column.Member)
        
        Dim typeName As String = VBAlias(column.Type)
        If column.CanBeNull.Value = True AndAlso CommonUtility.IsNullableType(column.Type) Then
            typeName += "?"
        End If
        
        args.AppendFormat("{1} As {0}", typeName, VBKeywordEscape(paramName))
    Next
    
    Return args.ToString()
End Function

Public Function GetParametersNames(ByVal method As ManagerMethod) As String
    Dim args As New StringBuilder()
    For Each column As Column In method.Columns
        If args.Length > 0 Then
            args.Append(", ")
        End If
        
        Dim paramName As String = CommonUtility.GetParameterName(column.Member)
        args.Append(VBKeywordEscape(paramName))
    Next
    
    Return args.ToString()
End Function

Public Function GetParametersTypes(ByVal method As ManagerMethod) As String
    Dim args As New StringBuilder()
    For Each column As Column In method.Columns
        If args.Length > 0 Then
            args.Append(", ")
        End If
        
        Dim typeName As String = VBAlias(column.Type)
        If column.CanBeNull.Value = True AndAlso CommonUtility.IsNullableType(column.Type) Then
            typeName += "?"
        End If
        
        args.Append(typeName)
    Next
    
    Return args.ToString()
End Function

Public Function GetLamba(ByVal method As ManagerMethod, ByVal tabCount As Integer) As String
    Dim lamba As New StringBuilder()
    Dim [alias] As String = method.EntityName.Substring(0, 1).ToLowerInvariant()
    
    For Each column As Column In method.Columns
        Dim paramName As String = CommonUtility.GetParameterName(column.Member)
        paramName = VBKeywordEscape(paramName)
        
        If lamba.Length = 0 Then
            lamba.AppendFormat("Function({0})", [alias])
        Else
            lamba.Append(" _" & Chr(13)  & "" & Chr(10) & "")
            lamba.Append(Chr(9), tabCount)
            lamba.Append("AndAlso ")
        End If
        
        lamba.AppendFormat("{0}.{1} = {2}", [alias], column.Member, paramName)
        

    Next
    
    Return lamba.ToString()
End Function
Private Shared ReadOnly _sizeRegex As New Regex("(?<Size>\d+)", RegexOptions.Compiled)


Public Function GetSize(ByVal s As String) As Integer
    Dim size As Integer = 0
    
    Dim m As Match = _sizeRegex.Match(s)
    If Not m.Success Then
        Return size
    End If
    
    Dim temp As String = m.Groups("Size").Value
    Integer.TryParse(temp, size)
    Return size
End Function

</script>
