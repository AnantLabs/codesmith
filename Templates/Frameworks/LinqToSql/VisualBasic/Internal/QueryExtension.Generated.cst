<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" 
    Description="Linq to Sql Entity Manager Class." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.vb" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database schema instance. Must be set by parent template" %>
    
<%@ Property Category="1.Mapping" Name="Type" 
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False" 
    Description="The Type instance for this entity. Must be set by parent template" %>
    
<%@ Property Category="2.Query" Name="MethodPrefix" 
    Type="System.String" Default="GetBy" Optional="True" 
    Description="The prefix of query method names." %>

<%@ Property Category="2.Query" Name="MethodKeySuffix" 
    Type="System.String" Default="Key" Optional="False" 
    Description="The suffix of the primary key query method names." %>
    
<%@ Map Name="VBKeywordEscape" 
    Src="VBKeywordEscape.csmap" Reverse="False" 
    Description="Mapping to escape VB keywords" %>

<%@ Map Name="VBAlias" 
    Src="System-VBAlias.csmap" Reverse="False" 
    Description="Convert system data types to VB alias" %>

'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices

<% If Not (Database.ContextNamespace = Database.EntityNamespace) Then %>
Imports <%= Database.EntityNamespace %>;
<% End If %>

Namespace <%= Database.ContextNamespace %>
    ''' <summary>
    ''' The query extension class for <%= Type.Name%>.
    ''' </summary>
    Public Module <%= Type.Name%>Extensions
<% For Each c As Column In Type.Columns %>
        
<%If c.IsPrimaryKey.Value Then%>
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        <Extension> _
		Public Function <%= MethodPrefix %><%= c.Member %>( entity As IQueryable(Of <%= Type.Name%>), <%=VBKeywordEscape[StringUtil.ToCamelCase(c.Member)] %> As <%= VBAlias(c.Type) %>) As <%=Type.Name%>

            Return entity.FirstOrDefault(Function(c)c.<%=c.Member%> = <%=VBKeywordEscape[StringUtil.ToCamelCase(c.Member)] %>)
        
        End Function
		
<% Else If Not c.IsVersion.Value Then %>
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        <Extension> _
        Public Function <%= MethodPrefix %><%= c.Member %>(queryable As IQueryable(Of <%= Type.Name %>) , <%=VBKeywordEscape[StringUtil.ToCamelCase(c.Member)] %> As <%= VBAlias(c.Type) %> ) As IQueryable(Of <%= Type.Name %>)
        
            Return queryable.Where(Function(c)c.<%=c.Member%> = <%=VBKeywordEscape[StringUtil.ToCamelCase(c.Member)]%>)
        
        End Function
        
<% End If
Next%>

		'Insert User Defined Extensions here.
		'Anything outside of this Region will be lost at regeneration
		#Region "User Extensions"
		
		
		#End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query
        
<% For Each c As Column in Type.Columns  %>
<% If c.IsPrimaryKey.Value Then%>

            Friend Readonly <%= MethodPrefix %><%= c.Name %><%= MethodKeySuffix %> As Func(Of <%= Database.Class %>, <%= VBAlias(c.Type) %>, <%= Type.Name %>) = _ 
                CompiledQuery.Compile( _
                    (Function(db As <%= Database.Class %> ,<%=VBKeywordEscape[StringUtil.ToCamelCase(c.Member)] %> As <%= VBAlias(c.Type) %> ) _ 
                        db.<%= Type.Name %>.FirstOrDefault(Function(c)c.<%=c.Member%> = <%=VBKeywordEscape[StringUtil.ToCamelCase(c.Member)] %>)))
<% End If ' if is key%>
<% Next ' foreach method%>
		
            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
			#Region "User Queries"
			
			#End Region
			
        End Class
        #End Region
    End Module
End Namespace