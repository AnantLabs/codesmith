<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" 
    Description="Linq to Sql Entity Manager Class." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.vb" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="3.Query" Name="DataManager" 
    Type="Manager.DataManager" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Property Category="3.Query" Name="EntityManager" 
    Type="Manager.EntityManager" Optional="False" 
    Description="Must be set by parent template" %>

<%@ Property Category="2.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database schema instance. Must be set by parent template" %>

<%@ Map Name="VBKeywordEscape" 
    Src="VBKeywordEscape.csmap" Reverse="False" 
    Description="Mapping to escape VB keywords" %>

<%@ Map Name="VBAlias" 
    Src="System-VBAlias.csmap" Reverse="False" 
    Description="Convert system data types to VB alias" %>

'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices

<% If Not (Database.ContextNamespace = Database.EntityNamespace) Then %>
Imports <%= Database.EntityNamespace %>;
<% End If %>

Namespace <%= Database.ContextNamespace %>
    ''' <summary>
    ''' The query extension class for <%= EntityManager.EntityName %>.
    ''' </summary>
    Public Module <%= EntityManager.EntityName %>QueryExtension
<% For Each method As ManagerMethod in EntityManager.Methods %>

<% If method.IsKey Then %>
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
		<Extension()> _
        Public Function GetByKey(entity As Table(Of <%= EntityManager.EntityName %>), <%= GetParameters(method) %>) As <%= EntityManager.EntityName %>
<% If (method.Columns.Count < 4) Then %>
            If entity.Context.LoadOptions Is Nothing Then 
                Return Query.GetByKey.Invoke(DirectCast(entity.Context,<%= DataManager.DataContextName %>), <%= GetParametersNames(method) %>)
            Else
<% End If ' column count%>
                Return entity.FirstOrDefault(<%= GetLamba(method, 5) %>)
<% If (method.Columns.Count < 4) Then %>
			End If
<% End If %> 
        End Function
<% Else  %>
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
		<Extension()> _
        Public Function GetBy<%= method.NameSuffix %>(entity As Table(Of <%= EntityManager.EntityName %>), <%= GetParameters(method) %>) As IQueryable(Of <%= EntityManager.EntityName %>)
<% If (method.Columns.Count < 4) Then %>
            If entity.Context.LoadOptions Is Nothing Then 
                Return Query.GetBy<%= method.NameSuffix %>.Invoke(DirectCast(entity.Context,<%= DataManager.DataContextName %>), <%= GetParametersNames(method) %>)
            Else
<% End If ' column count%>
                Return entity.Where(<%= GetLamba(method, 5) %>)
<% If (method.Columns.Count < 4) Then %>
			End If
<% End If %> 
        End Function
<% End If ' if is key%>
<% Next ' foreach method%>

		'Insert User Defined Extensions here.
		'Anything outside of this Region will be lost at regeneration
		#Region "User Extensions"
		
		
		#End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query
        
<% For Each method As ManagerMethod In EntityManager.Methods %>
<% If method.Columns.Count < 4 Then %>
<% If (method.IsKey) Then %>

            Friend Shared ReadOnly GetByKey As Func(Of <%= DataManager.DataContextName %>, <%= GetParametersTypes(method) %>, <%= EntityManager.EntityName %>) = _
                CompiledQuery.Compile( _
                    Function(db As <%= DataManager.DataContextName %> , <%= GetParameters(method) %>) _ 
                        db.<%= EntityManager.EntityName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% Else %>

            Friend Shared ReadOnly GetBy<%= method.NameSuffix %> As Func(Of <%= DataManager.DataContextName %>, <%= GetParametersTypes(method) %>, IQueryable(Of <%= EntityManager.EntityName %>)) = _
                CompiledQuery.Compile( _
                    Function(db As <%= DataManager.DataContextName %> , <%= GetParameters(method) %>) _ 
                        db.<%= EntityManager.EntityName %>.Where(<%= GetLamba(method, 7) %>))
<% End If ' if is key%>
<% End If ' column count%>
<% Next ' foreach method%>
		
            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
			#Region "User Queries"
			
			#End Region
			
        End Class
        #End Region
    End Module
End Namespace

<script runat="template">
   Public Function GetParameters(ByVal method As ManagerMethod) As String
	Dim args As New StringBuilder()
  	For Each column As Column In method.Columns
   	 	If args.Length > 0 Then
     	 args.Append(", ")
    	End If
    
    Dim paramName As String = CommonUtility.GetParameterName(column.Member)
    
    args.AppendFormat("{1} As {0}", VBAlias(column.Type), VBKeywordEscape(paramName))
  Next
  
  Return args.ToString()
End Function

Public Function GetParametersNames(ByVal method As ManagerMethod) As String
  Dim args As New StringBuilder()
  For Each column As Column In method.Columns
    If args.Length > 0 Then
      args.Append(", ")
    End If
    
    Dim paramName As String = CommonUtility.GetParameterName(column.Member)
    args.Append(VBKeywordEscape(paramName))
  Next
  
  Return args.ToString()
End Function

Public Function GetParametersTypes(ByVal method As ManagerMethod) As String
  Dim args As New StringBuilder()
  For Each column As Column In method.Columns
    If args.Length > 0 Then
      args.Append(", ")
    End If
    
    args.Append(VBAlias(column.Type))
  Next
  
  Return args.ToString()
End Function

Public Function GetLamba(ByVal method As ManagerMethod, ByVal tabCount As Integer) As String
  Dim lamba As New StringBuilder()
  Dim [alias] As String = method.EntityName.Substring(0, 1).ToLowerInvariant()
  
  For Each column As Column In method.Columns
    Dim paramName As String = StringUtil.ToCamelCase(column.Member)
    paramName = VBKeywordEscape(paramName)
    
    If lamba.Length = 0 Then
      lamba.AppendFormat("Function({0})", [alias])
    Else
      lamba.Append(" _" & Chr(13) & "" & Chr(10) & "")
      lamba.Append(Chr(9), tabCount)
      lamba.Append("AndAlso ")
    End If
    
    lamba.AppendFormat("{0}.{1} = {2}", [alias], column.Member, paramName)
    

  Next
  
  Return lamba.ToString()
End Function
Private Shared ReadOnly _sizeRegex As New Regex("(<Size>\d+)", RegexOptions.Compiled)


Public Function GetSize(ByVal s As String) As Integer
  Dim size As Integer = 0
  
  Dim m As Match = _sizeRegex.Match(s)
  If Not m.Success Then
    Return size
  End If
  
  Dim temp As String = m.Groups("Size").Value
  Integer.TryParse(temp, size)
  Return size
End Function

</script>