<%-- 
Name: BusinessObject.cst
Author: Tom DuPont
Description: Generates a Business Object for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Inherits="CsNHibernateHelper" Src="../Helpers/CsNHibernateHelper.cs" TargetLanguage="C#" Debug="False" Description="Generates a Business Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="VsVersion" Type="VisualStudioVersion" Default="VS_2008" Optional="False" Category="2. Versions" Description="The version of Visual Studio to generate for." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\Common\NHibernateHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="NHibernateHelper" %>
<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<% EntityManager entityManager = new EntityManager(SourceTable, ExcludedTables); %>
using System;
using System.Collections;
using System.Collections.Generic;

using <%= BaseNamespace %>;

namespace <%= BusinessNamespace %>
{
    public partial class <%= GetClassName(SourceTable) %> : BusinessBase<<%= SystemCSharp[GetBusinessBaseIdType(SourceTable).ToString()] %>>
    {
        #region Declarations

		<% // Primary Keys %>
		<% if(entityManager.PrimaryKey.IsCompositeKey) { %>
		<% foreach(EntityMember em in entityManager.PrimaryKey.KeyColumns) { %>
		private <%= SystemCSharp[em.SystemType.ToString()] %> <%= em.PrivateVariableName %> = <%= GetInitialization(em.SystemType) %>;
		<% } %>
		<% } %>
		
		<% // Primitives %>
		<% foreach(EntityMember em in entityManager.Members) { %>
		private <%= SystemCSharp[em.SystemType.ToString()] %> <%= em.PrivateVariableName %> = <%= GetInitialization(em.SystemType) %>;
		<% } %>
		
		<% // Many-To-One %>
		<% foreach(EntityAssociation association in entityManager.ManyToOne) { %>
		private <%= association.ClassName %> <%= association.PrivateVariableName %> = null;
		<% } %>
		
		<% // One-To-Many & Many-To-Many %>
		<% foreach(EntityAssociation association in entityManager.ToManyUnion) { %>
		private IList<<%= association.ClassName %>> <%= association.PrivateVariableName %> = new List<<%= association.ClassName %>>();
		<% } %>
		
		#endregion

        #region Constructors

        public <%= GetClassName(SourceTable) %>() { }

        #endregion

        #region Methods

        public override int GetHashCode()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            
            sb.Append(this.GetType().FullName);
            <% foreach(ColumnSchema column in SourceTable.NonKeyColumns) { %>
			sb.Append(<%= GetPrivateVariableName(column) %>);
			<% } %>

            return sb.ToString().GetHashCode();
        }

        #endregion

        #region Properties

		<% // Primary Keys %>
		<% if(IsMutliColumnPrimaryKey(SourceTable.PrimaryKey)) { %>
		public override string Id
		{
			get
			{
				System.Text.StringBuilder uniqueId = new System.Text.StringBuilder();
				<% for(int x=0; x<SourceTable.PrimaryKey.MemberColumns.Count; x++) { %>
				<% if(x>0) { %>
				uniqueId.Append("^");
				<% } %>
				uniqueId.Append(<%= GetPrivateVariableName(SourceTable.PrimaryKey.MemberColumns[x]) %>.ToString());
				<% } %>
				return uniqueId.ToString();
			}
		}
		
		<% } %>
		<% // Primitives %>
		<% foreach(EntityMember em in entityManager.MembersPrimaryKeyUnion) { %>
		public virtual <%= SystemCSharp[em.SystemType.ToString()] %> <%= em.PropertyName %>
        {
            get { return <%= em.PrivateVariableName %>; }
			set
			{
				<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= em.PropertyName %>Changing();<% } %>
				<%= em.PrivateVariableName %> = value;
				<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= em.PropertyName %>Changed();<% } %>
			}
        }
		<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>
		partial void On<%= em.PropertyName %>Changing();
		partial void On<%= em.PropertyName %>Changed();
		<% } %>
		
		<% } %>
		<% // Many-To-One %>
		<% foreach(EntityAssociation association in entityManager.ManyToOne) { %>
		public virtual <%= association.ClassName %> <%= association.PropertyName %>
        {
            get { return <%= association.PrivateVariableName %>; }
			set
			{
				<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= association.PropertyName %>Changing();<% } %>
				<%= association.PrivateVariableName %> = value;
				<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= association.PropertyName %>Changed();<% } %>
			}
        }
		<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>
		partial void On<%= association.PropertyName %>Changing();
		partial void On<%= association.PropertyName %>Changed();
		<% } %>
		
		<% } %>
		<% // One-To-Many & Many-To-Many %>
		<% foreach(EntityAssociation association in entityManager.ToManyUnion) { %>
		public virtual IList<<%= association.ClassName %>> <%= association.PropertyName %>
        {
            get { return <%= association.PrivateVariableName %>; }
            set
			{
				<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= association.PropertyName %>Changing();<% } %>
				<%= association.PrivateVariableName %> = value;
				<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= association.PropertyName %>Changed();<% } %>
			}
        }
		<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>
		partial void On<%= association.PropertyName %>Changing();
		partial void On<%= association.PropertyName %>Changed();
		<% } %>
		
		<% } %>
        #endregion
    }
}
