<%-- 
Name: ManagerObject.cst
Author: Tom DuPont
Description: Generates a Manager Object for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Src="NHibernateHelper.cs" Inherits="NHibernateHelper" TargetLanguage="C#" Debug="False" Description="Generates a Manager Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1. Source Database" Description="The source table to generate from." %>
<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="2. Assemblies and Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="2. Assemblies and Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Base" Optional="False" Category="2. Assemblies and Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<% List<SearchCriteria> scList = SearchCriteria.GetAllSearchCriteria(SourceTable); %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using NHibernate;
using <%= BusinessNamespace %>;
using <%= BaseNamespace %>;

namespace <%= ManagerNamespace %>
{
    public partial interface I<%= GetClassName(SourceTable.Name) %>Manager : IManagerBase<<%= GetClassName(SourceTable.Name) %>, <%= SystemCSharp[GetBusinessBaseIdType(SourceTable)] %>>
    {
		// Get Methods
		<% foreach(SearchCriteria sc in scList) { // foreach(MemberColumnSchema mcs in sc.Items) { %>
		<% if(sc.IsAllPrimaryKeys) { %>
		<% if(sc.Items.Count > 1) { // Override GetById%>
		<%= GetClassName(SourceTable.Name) %> GetById(<%= GetMethodParameters(sc.Items, true) %>);
		<% } %>
		<% } else { %>
		IList<<%= GetClassName(SourceTable.Name) %>> <%= GetMethodDeclaration(sc) %>;
		<% } } %>
    }

    partial class <%= GetClassName(SourceTable.Name) %>Manager : ManagerBase<<%= GetClassName(SourceTable.Name) %>, <%= SystemCSharp[GetBusinessBaseIdType(SourceTable)] %>>, I<%= GetClassName(SourceTable.Name) %>Manager
    {
        #region Get Methods

		<% foreach(SearchCriteria sc in scList) { %>
		<% if(sc.IsAllPrimaryKeys) { %>
		<% if(sc.Items.Count > 1) { // Override GetById%>
		<%= GetClassName(SourceTable.Name) %> GetById(<%= GetMethodParameters(sc.Items, true) %>);
		public override <%= GetClassName(SourceTable.Name) %> GetById(string id)
		{
			string[] keys = id.Split('^');
			
			if(keys.Length != <%= sc.Items.Count %>)
				throw new Exception("Invalid Id for <%= GetClassName(SourceTable.Name) %>Manager.GetById");
			
			return GetById(<%= GetMethodParameters(sc.Items, false) %>);
		}
		public <%= GetClassName(SourceTable.Name) %> GetById(<%= GetMethodParameters(sc.Items, true) %>)
		{
			ICriteria criteria = Session.CreateCriteria(typeof(<%= GetClassName(SourceTable.Name) %>));
			
			<% foreach(MemberColumnSchema mcs in sc.Items) { %>
			criteria.Add(NHibernate.Criterion.Expression.Eq("<%= mcs.Name %>", <%= GetVariableName(mcs.Name) %>));
			<% } %>
			
            return (<%= GetClassName(SourceTable.Name) %>)criteria.UniqueResult();
		}
		
		<% } %>
		<% } else { %>
		public IList<<%= GetClassName(SourceTable.Name) %>> <%= GetMethodDeclaration(sc) %>
        {
            ICriteria <%= GetVariableName(SourceTable.Name) %>Criteria = Session.CreateCriteria(typeof(<%= GetClassName(SourceTable.Name) %>));
			
			<% foreach(MemberColumnSchema mcs in sc.Items) { %>
			<% if(mcs.IsForeignKeyMember) { %>
			ICriteria <%= GetVariableName(GetForeignTableName(mcs, SourceTable)) %>Criteria = <%= GetVariableName(SourceTable.Name) %>Criteria.CreateCriteria("<%= GetPropertyName(GetForeignTableName(mcs, SourceTable)) %>");
            <%= GetVariableName(GetForeignTableName(mcs, SourceTable)) %>Criteria.Add(NHibernate.Criterion.Expression.Eq("Id", <%= GetVariableName(mcs.Name) %>));
			<% } else { %>
			criteria.Add(NHibernate.Criterion.Expression.Eq("<%= GetPropertyName(mcs.Name) %>", <%= GetVariableName(mcs.Name) %>));
			<% } %>
			<% } %>
			
            return <%= GetVariableName(SourceTable.Name) %>Criteria.List<<%= GetClassName(SourceTable.Name) %>>();
        }
		<% } } %>
		
		#endregion
    }
}