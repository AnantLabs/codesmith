<%-- 
Name: BusinessBase.cst
Author: Tom DuPont
Description: Generates the NHibernateSession class for NHibernate.
--%>
<%@ CodeTemplate Language="VB" Src="..\NHibernateHelper.vb" Inherits="NHibernateHelper" TargetLanguage="VB" Debug="False" Description="Generates the NHibernateSession class for NHibernate." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
Imports System
Imports System.Collections.Generic
Imports System.Text

Imports NHibernate

Namespace <%= BaseNamespace %>
	Public Interface INHibernateSession
		Inherits IDisposable
		' Methods
		Sub CommitChanges()
		Sub Close()
		Function BeginTransaction() As Boolean
		Function CommitTransaction() As Boolean
		Function RollbackTransaction() As Boolean
		Function GetISession() As ISession

		' Properties
		ReadOnly Property HasOpenTransaction() As Boolean
		ReadOnly Property IsOpen() As Boolean
	End Interface

	Public Class NHibernateSession
		Implements INHibernateSession
#region "Declarations"

		Protected transaction As ITransaction = Nothing
		Protected iSession As ISession
#End Region

#region "Constructor & Destructor"

		Public Sub New(ByVal session As ISession)
			Me.iSession = session
		End Sub
		Protected Overrides Sub Finalize()
			Try
				Dispose(True)
			Finally
				MyBase.Finalize()
			End Try
		End Sub
#End Region

#region "IDisposable"

		Private _isDisposed As Boolean = False
		Public Sub Dispose() Implements IDisposable.Dispose
			Dispose(False)
		End Sub
		Private Sub Dispose(ByVal finalizing As Boolean)
			If Not _isDisposed Then
				' Close Session
				Close()

				' Flag as disposed.
				_isDisposed = True
				If Not finalizing Then
					GC.SuppressFinalize(Me)
				End If
			End If
		End Sub
#End Region

#region "Methods"

		Public Sub CommitChanges() Implements INHibernateSession.CommitChanges
			If HasOpenTransaction Then
				CommitTransaction()
			Else
				iSession.Flush()
			End If
		End Sub
		Public Sub Close() Implements INHibernateSession.Close
			If iSession.IsOpen Then
				iSession.Flush()
				iSession.Close()
			End If
		End Sub

		Public Function BeginTransaction() As Boolean Implements INHibernateSession.BeginTransaction
			Dim result As Boolean = Not HasOpenTransaction
			If result Then
				transaction = iSession.BeginTransaction()
			End If
			Return result
		End Function
		Public Function CommitTransaction() As Boolean Implements INHibernateSession.CommitTransaction
			Dim result As Boolean = HasOpenTransaction
			If result Then
				Try
					transaction.Commit()
					transaction = Nothing
				Catch generatedExceptionName As HibernateException
					transaction.Rollback()
					transaction = Nothing
					Throw
				End Try
			End If
			Return result
		End Function
		Public Function RollbackTransaction() As Boolean Implements INHibernateSession.RollbackTransaction
			Dim result As Boolean = HasOpenTransaction
			If result Then
				transaction.Rollback()
				transaction.Dispose()
				transaction = Nothing

				' I dont know why, but it seems that after you rollback a transaction you need to reset the session.
				' Personally, I dislike this; I find it inefficent, and it means that I have to expose a method to
				' get an ISession from the NHibernateSessionManager...does anyone know how to get around this problem?
				iSession.Close()
				iSession.Dispose()
				iSession = NHibernateSessionManager.Instance.CreateISession()
			End If
			Return result
		End Function

		Public Function GetISession() As ISession Implements INHibernateSession.GetISession
			Return iSession
		End Function
#End Region

#region "Properties"

		Public ReadOnly Property HasOpenTransaction() As Boolean Implements INHibernateSession.HasOpenTransaction
			Get
				Return (transaction IsNot Nothing AndAlso Not transaction.WasCommitted AndAlso Not transaction.WasRolledBack)
			End Get
		End Property
		Public ReadOnly Property IsOpen() As Boolean Implements INHibernateSession.IsOpen
			Get
				Return iSession.IsOpen
			End Get
		End Property
#End Region
	End Class
End Namespace
