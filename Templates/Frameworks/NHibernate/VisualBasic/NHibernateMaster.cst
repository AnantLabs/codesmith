<%-- 
Name: NHibernateMaster.cst
Author: Tom DuPont
Description: Generates a complete set of Maps, Business Objects, Manager Objects, and a ManagerFactory for NHibernate, the adds them to the specified .csproj file.
--%>
<%@ CodeTemplate Language="VB" Src="Helpers\VbNHibernateHelper.vb" Inherits="VbNHibernateHelper" TargetLanguage="VB" OutputType="None" Debug="False" Description="Generates a complete set of Maps, Business Objects, Manager Objects, and a ManagerFactory for NHibernate, the adds them to the specified .csproj file." %>

<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="1a. Source Database" Description="The source database to generate from." %>

<%@ Property Name="ExcludedColumns" Type="CodeSmith.CustomProperties.StringCollection" Default="" Optional="True" Category="1b. Database Options" Description="A collection of regular expressions; a match will excluded a column." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." Filter="SourceTable" %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>

<%@ Property Name="NHibernateVersion" Type="NHibernateVersion" Default="v2_0" Optional="False" Category="2. Versions" Description="The version of NHibernate to generate for." %>
<%@ Property Name="VsVersion" Type="VisualStudioVersion" Default="VS_2008" Optional="False" Category="2. Versions" Description="The version of Visual Studio to generate for." %>

<%@ Property Name="AssemblyName" Type="System.String" Default="NHibernate.Generated" Optional="False" Category="3a. Assembly" Description="The name of the Assembly that will contain the business objects." %>

<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="3b. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="3b. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="3b. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Property Name="UnitTestNamespace" Type="System.String" Default="NHibernate.Generated.UnitTests" Optional="False" Category="3b. Namespaces" Description="The desired Namespace for the UnitTests." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="Microsoft.Build.Utilities" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="NHibernateHelper" Path="..\Common\NHibernateHelper" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>

<%@ Map Name="SystemVB" Src="System-VBAlias" %>

<%@ Register Name="BusinessBaseTemplate" Template="BaseClasses\BusinessBase.cst" %>
<%@ Register Name="ManagerBaseTemplate" Template="BaseClasses\ManagerBase.cst" %>
<%@ Register Name="SessionTemplate" Template="BaseClasses\Session.cst" %>
<%@ Register Name="SessionManagerTemplate" Template="BaseClasses\SessionManager.cst" %>
<%@ Register Name="UnitTestsBaseTemplate" Template="BaseClasses\UnitTestsBase.cst" %>
<%@ Register Name="BusinessObjectTemplate" Template="BusinessObjects\BusinessObject.cst" %>
<%@ Register Name="EditableBusinessObjectTemplate" Template="BusinessObjects\EditableBusinessObject.cst" %>
<%@ Register Name="HbmMapTemplate" Template="HbmMaps\Hbm.cst" %>
<%@ Register Name="EditableManagerObjectTemplate" Template="ManagerObjects\EditableManagerObject.cst" %>
<%@ Register Name="ManagerFactoryTemplate" Template="ManagerObjects\ManagerFactory.cst" %>
<%@ Register Name="ManagerObjectTemplate" Template="ManagerObjects\ManagerObject.cst" %>
<%@ Register Name="UnitTestsTemplate" Template="UnitTests\UnitTests.cst" %>
<%@ Register Name="EditableUnitTestsTemplate" Template="UnitTests\EditableUnitTests.cst" %>

<script runat="template">
Public Overloads Overrides Sub Render(ByVal writer As TextWriter)

    Dim ec As String()
    If ExcludedColumns IsNot Nothing Then
        ec = ExcludedColumns.ToArray()
    Else
        ec = New String(0) {}
    End If
    HelperInit(Me.TablePrefix, Me.SystemVB, Me.KeyWords, ec)
	
	Me.tablePrefix = Me.TablePrefix
	If ExcludedTables Is Nothing Then
		ExcludedTables = New TableSchemaCollection()
	End If

	For Each table As TableSchema In SourceDatabase.Tables
		If Not ExcludedTables.Contains(table) AndAlso Not IsManyToMany(table) Then
			RenderHbmMaps(table)
			RenderBusinessObjects(table)
			RenderManagerObjects(table)
			RenderUnitTests(table)
		End If
	Next
	RenderBaseClasses()
	RenderManagerFactory()

	RegisterReferences()
End Sub

Private Sub RenderBaseClasses()
	Dim fileName As String
	Dim folderName As String = GetFolder(BaseNamespace)

	fileName = [String].Format("{0}{1}.vb", folderName, "BusinessBase")
	Dim businessBase As BusinessBaseTemplate = Me.Create(Of BusinessBaseTemplate)()
	businessBase.BaseNamespace = Me.BaseNamespace
	businessBase.RenderToFile(GetOutputFile(fileName, Nothing), True)

	fileName = [String].Format("{0}{1}.vb", folderName, "ManagerBase")
	Dim managerBase As ManagerBaseTemplate = Me.Create(Of ManagerBaseTemplate)()
	managerBase.BaseNamespace = Me.BaseNamespace
	managerBase.NHibVersion = Me.NHibernateVersion
	managerBase.RenderToFile(GetOutputFile(fileName, Nothing), True)

	fileName = [String].Format("{0}{1}.vb", folderName, "NHibernateSession")
	Dim session As SessionTemplate = Me.Create(Of SessionTemplate)()
	session.BaseNamespace = Me.BaseNamespace
	session.RenderToFile(GetOutputFile(fileName, Nothing), True)

	fileName = [String].Format("{0}{1}.vb", folderName, "NHibernateSessionManager")
	Dim sessionManager As SessionManagerTemplate = Me.Create(Of SessionManagerTemplate)()
	sessionManager.BaseNamespace = Me.BaseNamespace
	sessionManager.RenderToFile(GetOutputFile(fileName, Nothing), True)

	fileName = [String].Format("{0}{1}.vb", folderName, "UnitTestsBase")
	Dim unitTestsBase As UnitTestsBaseTemplate = Me.Create(Of UnitTestsBaseTemplate)()
	unitTestsBase.BaseNamespace = Me.BaseNamespace
	unitTestsBase.ManagerNamespace = Me.ManagerNamespace
	unitTestsBase.BusinessNamespace = Me.BusinessNamespace
	unitTestsBase.RenderToFile(GetOutputFile(fileName, Nothing), True)
End Sub
Private Sub RenderHbmMaps(ByVal table As TableSchema)
	Dim fileName As String = [String].Format("{0}{1}.hbm.xml", GetFolder("HbmMaps"), GetClassName(table))

	Dim hbmMap As HbmMapTemplate = Me.Create(Of HbmMapTemplate)()
	hbmMap.AssemblyName = Me.AssemblyName
	hbmMap.BusinessNamespace = Me.BusinessNamespace
	hbmMap.SourceTable = table
	hbmMap.TablePrefix = Me.TablePrefix
	hbmMap.ExcludedTables = Me.ExcludedTables

	hbmMap.RenderToFile(GetOutputFile(fileName, Nothing, "BuildAction", 3), True)
End Sub
Private Sub RenderBusinessObjects(ByVal table As TableSchema)
	Dim fileName As String = [String].Format("{0}{1}.generated.vb", GetFolder(BusinessNamespace), GetClassName(table))
	Dim editableFileName As String = [String].Format("{0}{1}.vb", GetFolder(BusinessNamespace), GetClassName(table))

	If Not File.Exists(editableFileName) Then
		Dim editableBusinessObject As EditableBusinessObjectTemplate = Me.Create(Of EditableBusinessObjectTemplate)()
		editableBusinessObject.BusinessNamespace = Me.BusinessNamespace
		editableBusinessObject.BaseNamespace = Me.BaseNamespace
		editableBusinessObject.SourceTable = table
		editableBusinessObject.TablePrefix = Me.TablePrefix

		editableBusinessObject.RenderToFile(GetOutputFile(editableFileName, Nothing), True)
	End If

	Dim businessObject As BusinessObjectTemplate = Me.Create(Of BusinessObjectTemplate)()
	businessObject.BusinessNamespace = Me.BusinessNamespace
	businessObject.BaseNamespace = Me.BaseNamespace
	businessObject.VsVersion = Me.VsVersion
	businessObject.SourceTable = table
	businessObject.TablePrefix = Me.TablePrefix
	businessObject.ExcludedTables = Me.ExcludedTables

	businessObject.RenderToFile(GetOutputFile(fileName, editableFileName), True)
End Sub
Private Sub RenderManagerObjects(ByVal table As TableSchema)
	Dim fileName As String = [String].Format("{0}{1}Manager.Generated.vb", GetFolder(ManagerNamespace), GetClassName(table))
	Dim editableFileName As String = [String].Format("{0}{1}Manager.vb", GetFolder(ManagerNamespace), GetClassName(table))

	If Not File.Exists(editableFileName) Then
		Dim editableManagerObject As EditableManagerObjectTemplate = Me.Create(Of EditableManagerObjectTemplate)()
		editableManagerObject.ManagerNamespace = Me.ManagerNamespace
		editableManagerObject.BusinessNamespace = Me.BusinessNamespace
		editableManagerObject.BaseNamespace = Me.BaseNamespace
		editableManagerObject.SourceTable = table
		editableManagerObject.TablePrefix = Me.TablePrefix

		editableManagerObject.RenderToFile(GetOutputFile(editableFileName, Nothing), True)
	End If

	Dim managerObject As ManagerObjectTemplate = Me.Create(Of ManagerObjectTemplate)()
	managerObject.ManagerNamespace = Me.ManagerNamespace
	managerObject.BusinessNamespace = Me.BusinessNamespace
	managerObject.BaseNamespace = Me.BaseNamespace
	managerObject.SourceTable = table
	managerObject.NHibernateVersion = Me.NHibernateVersion
	managerObject.TablePrefix = Me.TablePrefix
	managerObject.ExcludedTables = Me.ExcludedTables

	managerObject.RenderToFile(GetOutputFile(fileName, editableFileName), True)
End Sub
Private Sub RenderManagerFactory()
	Dim fileName As String = [String].Format("{0}ManagerFactory.vb", GetFolder(ManagerNamespace))

	Dim managerFactory As ManagerFactoryTemplate = Me.Create(Of ManagerFactoryTemplate)()
	managerFactory.SourceDatabase = Me.SourceDatabase
	managerFactory.ManagerNamespace = Me.ManagerNamespace
	managerFactory.BaseNamespace = Me.BaseNamespace
	managerFactory.ExcludedTables = Me.ExcludedTables
	managerFactory.TablePrefix = Me.TablePrefix

	managerFactory.RenderToFile(GetOutputFile(fileName, Nothing), True)
End Sub
Private Sub RenderUnitTests(ByVal table As TableSchema)
	Dim fileName As String = [String].Format("{0}{1}Tests.generated.vb", GetFolder(UnitTestNamespace), GetClassName(table))
	Dim editableFileName As String = [String].Format("{0}{1}Tests.vb", GetFolder(UnitTestNamespace), GetClassName(table))

	If Not File.Exists(editableFileName) Then
		Dim editableUnitTests As EditableUnitTestsTemplate = Me.Create(Of EditableUnitTestsTemplate)()
		editableUnitTests.SourceTable = table
		editableUnitTests.ExcludedTables = Me.ExcludedTables
		editableUnitTests.TablePrefix = Me.TablePrefix
		editableUnitTests.ManagerNamespace = Me.ManagerNamespace
		editableUnitTests.BaseNamespace = Me.BaseNamespace
		editableUnitTests.BusinessNamespace = Me.BusinessNamespace
		editableUnitTests.UnitTestNamespace = Me.UnitTestNamespace

		editableUnitTests.RenderToFile(GetOutputFile(editableFileName, Nothing), True)
	End If

	Dim unitTests As UnitTestsTemplate = Me.Create(Of UnitTestsTemplate)()
	unitTests.SourceTable = table
	unitTests.ExcludedTables = Me.ExcludedTables
	unitTests.TablePrefix = Me.TablePrefix
	unitTests.NHibVersion = Me.NHibernateVersion
	unitTests.ManagerNamespace = Me.ManagerNamespace
	unitTests.BaseNamespace = Me.BaseNamespace
	unitTests.BusinessNamespace = Me.BusinessNamespace
	unitTests.UnitTestNamespace = Me.UnitTestNamespace

	unitTests.RenderToFile(GetOutputFile(fileName, editableFileName), True)
End Sub
Private Sub RegisterReferences()
    Select Case Me.NHibernateVersion
        Case NHibernateVersion.v1_2
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\1.2.1.GA\NHibernate.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\1.2.1.GA\Iesi.Collections.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\1.2.1.GA\log4net.dll"))
            Exit Select
    
        Case NHibernateVersion.v2_0
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.0.1.GA\NHibernate.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.0.1.GA\Castle.Core.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.0.1.GA\Castle.DynamicProxy2.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.0.1.GA\Iesi.Collections.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.0.1.GA\log4net.dll"))
            Exit Select
    
        Case NHibernateVersion.v2_1
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.1.0.GA\NHibernate.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.1.0.GA\NHibernate.ByteCode.Castle.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.1.0.GA\Iesi.Collections.dll"))
            Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NHibernate\2.1.0.GA\log4net.dll"))
            Exit Select
    End Select
    Me.RegisterReference(Path.Combine(Me.CodeTemplateInfo.DirectoryName, "..\Common\NUnit\NUnit.Framework.dll"))
    Me.RegisterReference("System.Web")
    
End Sub

Private Function GetOutputFile(ByVal fileName As String, ByVal dependentUpon As String, ParamArray metaData As Object()) As OutputFile
	Dim outputFile As New OutputFile(fileName)

	' Comment out this If block to unhide generated files in Visual Studio projects.
	If Not [String].IsNullOrEmpty(dependentUpon) Then
		outputFile.DependentUpon = Path.GetFullPath(dependentUpon)
	End If

	If metaData.Length Mod 2 <> 0 Then
		Throw New Exception("Invalid Metadata: Provide 2 objects per entry, a String (key) followed by an Object.")
	End If
	Dim x As Integer = 0
	While x < metaData.Length
		outputFile.Metadata.Add(metaData(x).ToString(), metaData(x + 1))
		x += 2
	End While

	Return outputFile
End Function
Private Function GetFolder(ByVal folder As String) As String
	If folder.Contains(".") AndAlso Not folder.EndsWith(".") Then
		folder = folder.Substring(folder.LastIndexOf("."C) + 1)
	End If

	If [String].IsNullOrEmpty(folder) Then
		folder = [String].Empty
	Else
		If Not Directory.Exists(folder) Then
			Directory.CreateDirectory(folder)
		End If

		If Not folder.EndsWith("\") Then
			folder = [String].Format("{0}\", folder)
		End If
	End If
	Return folder
End Function
</script>