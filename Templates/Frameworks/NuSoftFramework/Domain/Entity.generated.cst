<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Description="Generates a single entity business class." Debug="True" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Database table that this entity should be based on." %>
<%@ Property Name="TablePrefixes" Type="String" Default="" Optional="True" Category="Context" Description="The table prefix to be cut from the class name" %>
<%@ Property Name="Namespace" Type="String" Default="Domain" Optional="False" Category="Context" Description="The namespace for the business objects" %>
<%@ Property Name="DomainNamespace" Type="String" Default="Business" Optional="False" Category="1. Setup" Description="The namespace to be added to the root namespace for the business objects" %>
<%@ Property Name="SQLType" Type="SqlType" Default="StoredProcedures" Optional="False" Category="Context" Description="Use stored procedures or generated SQL" %>
<%@ Property Name="IsolationLevel" Type="TransactionIsolationLevelEnum" Default="ReadCommitted" Category="Options" Description="Isolation level to use in generated procedures." %>
<%@ Property Name="ExcludedTables" Type="TableSchemaCollection" Default="" Optional="True" Category="1. Setup" Description="Tables to exclude" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<script runat="template"><!--#include file="..\Global.cs"--></script><%= GetDefaultCommentHeader() %>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

<% bool isFirstTimeInLoop = false; %>
<% _isReadOnly = IsReadOnlyEntity(SourceTable); %>
using <%= Namespace %>.<%= DomainNamespace %>.Framework;


namespace <%= Namespace %>.<%= DomainNamespace %>
{
	/// <summary>
	/// This object represents the properties and methods of a <%= GetClassName(SourceTable) %>.
	/// </summary>
	[Serializable()]
	<% if(SourceTable.HasPrimaryKey) { 
		isFirstTimeInLoop = true; %>
	[DebuggerDisplay("<% foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) {
		if(!isFirstTimeInLoop) 
		{
			Response.Write(", ");	
		}
		isFirstTimeInLoop = false;
		Response.Write(GetPropertyName(column) + ": {" + GetPropertyName(column) + "}");
	} %>")]
	<% } %>
	public partial class <%= GetClassName(SourceTable) %>
	{
		#region Public Properties
		<% foreach(ColumnSchema column in GetValidColumns(SourceTable)) { 
			bool isPrimaryKey = column.IsPrimaryKeyMember;
			bool isIdentity = (bool)column.ExtendedProperties["CS_IsIdentity"].Value;
			bool isNullable = column.AllowDBNull;
			%>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		<%= GetMemberVariableDeclarationStatement(column) %>
		/// <summary>
		/// <%= GetPropertyName(column) %>
		/// </summary>
		[DatabaseColumn(<% if( column.Name != GetPropertyName(column)) { Response.Write("\"" + column.Name + "\""); } %>)]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(<%= isPrimaryKey.ToString().ToLower() %>, <%= isIdentity.ToString().ToLower() %>, <%= isNullable.ToString().ToLower() %>)]
		public <%= GetCSharpVariableType(column) %> <%= GetPropertyName(column) %>
		{
			[DebuggerStepThrough()]
			get { return this.<%= GetMemberVariableName(column) %>; }
			<% if(!_isReadOnly) { %>
			<% if(isIdentity) { %>protected <% } %>set 
			{
				if (this.<%= GetMemberVariableName(column) %> != value) 
				{
					this.<%= GetMemberVariableName(column) %> = value;
					this.IsDirty = true;	
					OnPropertyChanged("<%= GetPropertyName(column) %>");
					<% if(column.IsForeignKeyMember) {
						foreach(SchemaExplorer.TableKeySchema foreignKey in SourceTable.ForeignKeys) {
							if(foreignKey.ForeignKeyMemberColumns[column.Name] != null && ShouldUseTable(foreignKey.PrimaryKeyTable, ExcludedTables)) { %>
					this._<%= GetCamelCaseName(GetClassNameFromForeignKey(foreignKey)) %> = null;
							<% }
						}
					} %>
				}
			}<% } %>
		}
		
		<% } %>
		
		<% foreach(SchemaExplorer.TableKeySchema foriegnKey in SourceTable.ForeignKeys) { 
			if(ShouldUseTable(foriegnKey.PrimaryKeyTable, ExcludedTables)) { %>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private <%= GetClassName(foriegnKey.PrimaryKeyTable) %> _<%= GetCamelCaseName(GetClassNameFromForeignKey(foriegnKey)) %> = null;
		/// <summary>
		/// The parent <%= GetClassName(foriegnKey.PrimaryKeyTable) %> object
		/// </summary>
		public <%= GetClassName(foriegnKey.PrimaryKeyTable) %> <%= GetClassNameFromForeignKey(foriegnKey) %>
		{
			get 
			{
				if (_<%= GetCamelCaseName(GetClassNameFromForeignKey(foriegnKey)) %> == null) 
				{
					_<%= GetCamelCaseName(GetClassNameFromForeignKey(foriegnKey)) %> = GetParentEntity(<%= GetClassName(foriegnKey.PrimaryKeyTable) %>.Get<%= GetClassName(foriegnKey.PrimaryKeyTable) %>(<%
					isFirstTimeInLoop = true;
					foreach (ColumnSchema column in GetValidColumns(foriegnKey.ForeignKeyMemberColumns)) {  
						if(!isFirstTimeInLoop) { 
							%>, <%
						}
						isFirstTimeInLoop = false;
						%>this.<%= GetPropertyName(column) %><%
					}
					%>)) as <%= GetClassName(foriegnKey.PrimaryKeyTable) %>;
				}
				return _<%= GetCamelCaseName(GetClassNameFromForeignKey(foriegnKey)) %>;
			}
			<% if(!_isReadOnly) { %>
			set
			{
				if(_<%= GetCamelCaseName(GetClassNameFromForeignKey(foriegnKey)) %> != value) 
				{
					_<%= GetCamelCaseName(GetClassNameFromForeignKey(foriegnKey)) %> = value;
					
					if (value != null) 
					{
						<% for (int j = 0; j < foriegnKey.ForeignKeyMemberColumns.Count; j++) { %>
						this.<%= GetPropertyName(foriegnKey.ForeignKeyMemberColumns[j]) %> = value.<%= GetPropertyName(foriegnKey.PrimaryKeyMemberColumns[j]) %>;
					<% } %>
					}
					else 
					{
						<% for (int j = 0; j < foriegnKey.ForeignKeyMemberColumns.Count; j++) { %>
						this.<%= GetPropertyName(foriegnKey.ForeignKeyMemberColumns[j]) %> = <%= GetMemberVariableDefaultValue(foriegnKey.PrimaryKeyMemberColumns[j]) %>;
					<% } %>
					}
				}
			}
			<% } %>
		}
		
			<%
			}
		}
		%>
		
		<%
		// for each key that is pointing to this table as as a foreign key from another table
		if(SourceTable.HasPrimaryKey) 
		{
			foreach (TableKeySchema key in SourceTable.PrimaryKeys)
			{ 
				if(ShouldUseTable(key.ForeignKeyTable, ExcludedTables)) { 
					SchemaExplorer.TableSchema table = key.ForeignKeyTable;
					bool isOneToOne = IsOneToOneRelation(key);
					if(isOneToOne) { %>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private <%= GetClassName(table) %> _<%= GetCamelCaseName(GetClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key))) %> = null;
		/// <summary>
		/// A <%= GetClassName(table) %> related object
		/// </summary>
		public <%= GetClassName(table) %> <%= GetClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key)) %>
		{
			get 
			{
				if (_<%= GetCamelCaseName(GetClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key))) %> == null) {
					_<%= GetCamelCaseName(GetClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key))) %> = <%= Namespace %>.<%= DomainNamespace %>.<%= GetClassName(table) %>.Get<%= GetClassName(table) %>By<%= GetClassNameFromForeignKey(key) %>(this);
				}
				return _<%= GetCamelCaseName(GetClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key))) %>;
			}
		}
					<% } else { %>		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<<%= GetClassName(table) %>> _<%= GetCamelCaseName(GetPluralClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key))) %> = null;
		/// <summary>
		/// A collection of <%= GetClassName(table) %> children objects
		/// </summary>
		public EntityList<<%= GetClassName(table) %>> <%= GetPluralClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key)) %>
		{
			get 
			{
				if (_<%= GetCamelCaseName(GetPluralClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key))) %> == null) {
					_<%= GetCamelCaseName(GetPluralClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key))) %> = <%= Namespace %>.<%= DomainNamespace %>.<%= GetClassName(table) %>.Get<%= GetPluralClassName(table) %>By<%= GetClassNameFromForeignKey(key) %>(this);
				}
				return _<%= GetCamelCaseName(GetPluralClassName(table) + (GetClassNameFromForeignKey(key) == GetClassName(SourceTable) ? "" : "By" + GetClassNameFromForeignKey(key))) %>;
			}
		}	
					<% } 
				}
			}
		} %>
		#endregion
		
		#region Non-Public Properties
		<% if(SourceTable.HasPrimaryKey) {
			if(SQLType == SqlType.Dynamic) { %>
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSqlStatement
		{
			[DebuggerStepThrough()]
			get 
			{
				return @"<%= "\r\n" %><%= GetInsertSql(SourceTable) %>";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSqlStatement
		{
			[DebuggerStepThrough()]
			get
			{
				return @"<%= "\r\n" %><%= GetUpdateSql(SourceTable) %>";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSqlStatement
		{
			[DebuggerStepThrough()]
			get
			{
				return @"<%= "\r\n" %><%= GetDeleteSql(SourceTable) %>";	
			}
		}
			<% } else { %>
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(<%= GetClassName(SourceTable) %>).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(<%= GetClassName(SourceTable) %>).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(<%= GetClassName(SourceTable) %>).Name + "Delete";
			}
		}
		<% } 
		}%>
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected <%= GetClassName(SourceTable) %>() { }
		#endregion
		
		#region Public Methods
		<% foreach(SchemaExplorer.TableKeySchema key in SourceTable.Keys)
		{
			if(ShouldUseTable(key.ForeignKeyTable, ExcludedTables)) { 
				if(key.PrimaryKeyTable.Name == SourceTable.Name) 
				{ 
				
					if(!IsOneToOneRelation(key)) { 
						bool hasMultipleRelationsToSameTable = false;
						foreach(SchemaExplorer.TableKeySchema checkKey in SourceTable.Keys) { 
							if(checkKey != key) {
								if(key.ForeignKeyTable == checkKey.ForeignKeyTable) {
									hasMultipleRelationsToSameTable = true;
									break;
								}
							}
						}
						
						if(key.PrimaryKeyTable == key.ForeignKeyTable)
						{
							hasMultipleRelationsToSameTable = true;	
						}
						if(!IsReadOnlyEntity(key.ForeignKeyTable)) {%>
		/// <summary>
		/// Creates a <%= GetClassName(key.ForeignKeyTable) %> for this <%= GetClassName(SourceTable) %> object
		/// </summary>
			<% if(!hasMultipleRelationsToSameTable) { %>
		public <%= GetClassName(key.ForeignKeyTable) %> Create<%= GetClassName(key.ForeignKeyTable) %>()
			<% } else { %>
		public <%= GetClassName(key.ForeignKeyTable) %> Create<%= GetClassName(key.ForeignKeyTable) %>By<%= GetClassNameFromForeignKey(key) %>()
			<% } %>
		{
			return <%= Namespace %>.<%= DomainNamespace %>.<%= GetClassName(key.ForeignKeyTable) %>.Create<%= GetClassName(key.ForeignKeyTable) %>By<%= GetClassNameFromForeignKey(key) %>(this);
		}
					<% }
					}
				}
			}
		} %>
		
			<% if(SourceTable.HasPrimaryKey) { %>

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(Get<%= GetClassName(SourceTable) %>(<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {
		if(i != 0) 
		{
			Response.Write(", ");	
		}
		Response.Write("this." + GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]));
	} %>));
		}

		<% } %>
		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			<% if(!_isReadOnly) { %>
				<% foreach(SchemaExplorer.TableKeySchema foriegnKey in SourceTable.ForeignKeys) { 
						if(ShouldUseTable(foriegnKey.PrimaryKeyTable, ExcludedTables)) { %>
			if (_<%= GetCamelCaseName(GetClassNameFromForeignKey(foriegnKey)) %> != null)
			{	
				<% for (int j = 0; j < foriegnKey.ForeignKeyMemberColumns.Count; j++) { %>
				this.<%= GetPropertyName(foriegnKey.ForeignKeyMemberColumns[j]) %> = this.<%= GetClassNameFromForeignKey(foriegnKey) %>.<%= GetPropertyName(foriegnKey.PrimaryKeyMemberColumns[j]) %>;
				<% } %>
			}
			
			<% 		} 
				}
			} %>
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
<%= GetTableColumnList(GetValidColumns(SourceTable)) %>
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "<%= SourceTable.Name %>";
            }
        }

		#endregion
		
		#region Static Methods
		<% if(!_isReadOnly) { %>
		/// <summary>
		/// Insert a <%= GetClassName(SourceTable) %> into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		<%
		if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value == false) {
			foreach(ColumnSchema column in GetValidColumns(SourceTable)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<%
			}
		} else {
			foreach(ColumnSchema column in GetValidColumns(SourceTable.NonPrimaryKeyColumns)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<%
			}
		}%>
		public static void Insert<%= GetClassName(SourceTable) %>(<%
		if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value == false) {
			isFirstTimeInLoop = true; 
			foreach(ColumnSchema column in GetValidColumns(SourceTable)) {  
				if(!isFirstTimeInLoop) { 
					%>, <%
				}
				isFirstTimeInLoop = false;
				%><%= GetCSharpVariableType(column) %> @<%= GetCamelCaseName(GetPropertyName(column)) %><%
			}
		} else {
			isFirstTimeInLoop = true;
			foreach(ColumnSchema column in GetValidColumns(SourceTable.NonPrimaryKeyColumns)) {  
				if(!isFirstTimeInLoop) { 
					%>, <%
				}
				isFirstTimeInLoop = false;
				%><%= GetCSharpVariableType(column) %> @<%= GetCamelCaseName(GetPropertyName(column)) %><%
			}
		}%>)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		Insert<%= GetClassName(SourceTable) %>(<%
		if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value == false) {
			isFirstTimeInLoop = true;
			foreach(ColumnSchema column in GetValidColumns(SourceTable)) {  
				if(!isFirstTimeInLoop) { 
					%>, <%
				}
				isFirstTimeInLoop = false;
				%>@<%= GetCamelCaseName(GetPropertyName(column)) %><%
			}
			if (GetValidColumns(SourceTable).Count > 0) 
			{
				%>, <%
			}
			%>helper);<%
		} else {
			isFirstTimeInLoop = true;
			foreach(ColumnSchema column in GetValidColumns(SourceTable.NonPrimaryKeyColumns)) {  
				if(!isFirstTimeInLoop) { 
					%>, <%
				}
				isFirstTimeInLoop = false;
				%>@<%= GetCamelCaseName(GetPropertyName(column)) %><%
			}
			if (GetValidColumns(SourceTable.NonPrimaryKeyColumns).Count > 0) 
			{
				%>, <%
			}
			%>helper);<%
		}%>
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a <%= GetClassName(SourceTable) %> into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		<%
		if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value == false) {
			foreach (ColumnSchema column in GetValidColumns(SourceTable)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<%
		/// <param name="helper">helper</param>
			}
		} else {
			foreach (ColumnSchema column in GetValidColumns(SourceTable.NonPrimaryKeyColumns)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<%
			}
		}%>
		/// <param name="helper">helper</param>
		internal static void Insert<%= GetClassName(SourceTable) %>(<%
		if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value == false) {
			isFirstTimeInLoop = true;
			foreach (ColumnSchema column in GetValidColumns(SourceTable.Columns)) {  
				if(!isFirstTimeInLoop) { 
					%>, <%
				}
				isFirstTimeInLoop = false;
				%><%= GetCSharpVariableType(column) %> @<%= GetCamelCaseName(GetPropertyName(column)) %><%
			}
			if (GetValidColumns(SourceTable).Count > 0) 
			{
				%>, <%
			}
			%>SqlHelper @helper)<%
		} else {
			isFirstTimeInLoop = true;
			foreach (ColumnSchema column in GetValidColumns(SourceTable.NonPrimaryKeyColumns)) {  
				if(!isFirstTimeInLoop) { 
					%>, <%
				}
				isFirstTimeInLoop = false;
				%><%= GetCSharpVariableType(column) %> @<%= GetCamelCaseName(GetPropertyName(column)) %><%
			}
			if (GetValidColumns(SourceTable.NonPrimaryKeyColumns).Count > 0) 
			{
				%>, <%
			}
			%>SqlHelper @helper)<%
		}%>
		{
			<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>Insert";
			<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetInsertSql(SourceTable) %>";
			<% } %>
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
            <%
			if((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value == false) {
				foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) { %>
			parameters.Add(new SqlParameter("@<%= column.Name %>", <%= GetParameterValue(GetCamelCaseName(GetPropertyName(column)), column) %>));
			<% } 
			}
			foreach (ColumnSchema column in GetValidColumns(SourceTable.NonPrimaryKeyColumns)) { %>
			parameters.Add(new SqlParameter("@<%= column.Name %>", <%= GetParameterValue(GetCamelCaseName(GetPropertyName(column)), column) %>));
			<% } %>
			
			@helper.Execute(commandText, <%= GetCommandType() %>, parameters);
		}
		
		/// <summary>
		/// Updates a <%= GetClassName(SourceTable) %> into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		<%
		foreach(ColumnSchema column in GetValidColumns(SourceTable.Columns)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<% } %>
		public static void Update<%= GetClassName(SourceTable) %>(<%
		isFirstTimeInLoop = true;
		foreach (ColumnSchema column in GetValidColumns(SourceTable)) {  
			if(!isFirstTimeInLoop) { 
				%>, <%
			}
			isFirstTimeInLoop = false;
			%><%= GetCSharpVariableType(column) %> @<%= GetCamelCaseName(GetPropertyName(column)) %><%
		} %>)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					Update<%= GetClassName(SourceTable) %>(<%
		isFirstTimeInLoop = true;
		foreach (ColumnSchema column in GetValidColumns(SourceTable)) {  
			if(!isFirstTimeInLoop) { 
				%>, <%
			}
			isFirstTimeInLoop = false;
			%>@<%= GetCamelCaseName(GetPropertyName(column)) %><%
		}
		if (GetValidColumns(SourceTable).Count > 0) 
		{
			%>, <%
		}
		%>helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a <%= GetClassName(SourceTable) %> into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		<%
		foreach (ColumnSchema column in GetValidColumns(SourceTable)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<% } 
		%>
		/// <param name="helper">helper</param>
		internal static void Update<%= GetClassName(SourceTable) %>(<%
		isFirstTimeInLoop = true;
		foreach (ColumnSchema column in GetValidColumns(SourceTable)) {  
			if(!isFirstTimeInLoop) { 
				%>, <%
			}
			isFirstTimeInLoop = false;
			%><%= GetCSharpVariableType(column) %> @<%= GetCamelCaseName(GetPropertyName(column)) %><%
		}
		if (GetValidColumns(SourceTable).Count > 0) 
		{
			%>, <%
		}
		%>SqlHelper @helper)
		{
			<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>Update";
			<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetUpdateSql(SourceTable) %>";
			<% } %>
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
            <%
			foreach (ColumnSchema column in GetValidColumns(SourceTable)) { %>
			parameters.Add(new SqlParameter("@<%= column.Name %>", <%= GetParameterValue(GetCamelCaseName(GetPropertyName(column)), column) %>));
			<% } %>
			
			@helper.Execute(commandText, <%= GetCommandType() %>, parameters);
		}
		
		/// <summary>
		/// Deletes a <%= GetClassName(SourceTable) %> from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		<%
		foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<% } %>
		public static void Delete<%= GetClassName(SourceTable) %>(<%
		isFirstTimeInLoop = true;
		foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) {  
			if(!isFirstTimeInLoop) { 
				%>, <%
			}
			isFirstTimeInLoop = false;
			%><%= GetCSharpVariableType(column) %> @<%= GetCamelCaseName(GetPropertyName(column)) %><%
		} %>)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					Delete<%= GetClassName(SourceTable) %>(<%
		isFirstTimeInLoop = true;
		foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) {  
			if(!isFirstTimeInLoop) { 
				%>, <%
			}
			isFirstTimeInLoop = false;
			%>@<%= GetCamelCaseName(GetPropertyName(column)) %><%
		}
		if (GetValidColumns(SourceTable).Count > 0) 
		{
			%>, <%
		}
		%>helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a <%= GetClassName(SourceTable) %> from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		<%
		foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<% } %>
		/// <param name="helper">helper</param>
		internal static void Delete<%= GetClassName(SourceTable) %>(<%
		isFirstTimeInLoop = true;
		foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) {  
			if(!isFirstTimeInLoop) { 
				%>, <%
			}
			isFirstTimeInLoop = false;
			%><%= GetCSharpVariableType(column) %> @<%= GetCamelCaseName(GetPropertyName(column)) %><%
		}
		if (GetValidColumns(SourceTable).Count > 0) 
		{
			%>, <%
		}
		%>SqlHelper @helper)
		{
			<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>Delete";
			<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetDeleteSql(SourceTable) %>";
			<% } %>
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
            <%
			foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) { %>
			parameters.Add(new SqlParameter("@<%= column.Name %>", @<%= GetCamelCaseName(GetPropertyName(column)) %>));
			<% } %>
		
			@helper.Execute(commandText, <%= GetCommandType() %>, parameters);
		}
		
		/// <summary>
		/// Creates a new <%= GetClassName(SourceTable) %> object.
		/// </summary>
		/// <returns>The newly created <%= GetClassName(SourceTable) %> object.</returns>
		public static <%= GetClassName(SourceTable) %> Create<%= GetClassName(SourceTable) %>()
		{
			return InitializeNew<<%= GetClassName(SourceTable) %>>();
		}
		
		/// <summary>
		/// Retrieve information for a <%= GetClassName(SourceTable) %> by a <%= GetClassName(SourceTable) %>'s unique identifier.
		/// </summary>
		<% foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(column)) %>"><%= GetCamelCaseName(GetPropertyName(column)) %></param>
		<% } %>
		/// <returns><%= GetClassName(SourceTable) %></returns>
		public static <%= GetClassName(SourceTable) %> Get<%= GetClassName(SourceTable) %>(<%
		isFirstTimeInLoop = true;
		foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) {  
			if(!isFirstTimeInLoop) { 
				%>, <%
			}
			isFirstTimeInLoop = false;
			%><%= GetCSharpVariableType(column) %> <%= GetCamelCaseName(GetPropertyName(column)) %><%
		} %>)
		{
			<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>Get";
			<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetGetSql(SourceTable, SQLType) %> " + <%= GetClassName(SourceTable) %>.DefaultSortOrder;
			<% } %>
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
            <%
			foreach (ColumnSchema column in GetValidColumns(SourceTable.PrimaryKey.MemberColumns)) { %>
			parameters.Add(new SqlParameter("@<%= column.Name %>", <%= GetCamelCaseName(GetPropertyName(column)) %>));
			<% } %>
			
			return GetOne<<%= GetClassName(SourceTable) %>>(commandText, parameters);
		}
		<% } %>
		
		/// <summary>
		/// Gets a collection <%= GetClassName(SourceTable) %> objects.
		/// </summary>
		/// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
		public static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>()
		{
			<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>GetAll";
			<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetGetAllSql(SourceTable, SQLType) %> " + <%= GetClassName(SourceTable) %>.DefaultSortOrder;
			<% } %>
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<<%= GetClassName(SourceTable) %>>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection <%= GetClassName(SourceTable) %> objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
        protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<<%= GetClassName(SourceTable) %>>(SelectFieldList, "FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection <%= GetClassName(SourceTable) %> objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
        public static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<<%= GetClassName(SourceTable) %>>(SelectFieldList, "FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection <%= GetClassName(SourceTable) %> objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
		protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return Get<%= GetPluralClassName(SourceTable) %>(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection <%= GetClassName(SourceTable) %> objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
		protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return Get<%= GetPluralClassName(SourceTable) %>(string.Empty, where, parameters, <%= GetClassName(SourceTable) %>.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection <%= GetClassName(SourceTable) %> objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
		protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return Get<%= GetPluralClassName(SourceTable) %>(prefix, where, parameters, <%= GetClassName(SourceTable) %>.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection <%= GetClassName(SourceTable) %> objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
		protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return Get<%= GetPluralClassName(SourceTable) %>(string.Empty, where, parameters, <%= GetClassName(SourceTable) %>.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection <%= GetClassName(SourceTable) %> objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
		protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return Get<%= GetPluralClassName(SourceTable) %>(prefix, where, parameters, <%= GetClassName(SourceTable) %>.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection <%= GetClassName(SourceTable) %> objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of <%= GetClassName(SourceTable) %> objects.</returns>
		protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "<%= GetGetAllSql(SourceTable, false, SqlType.Dynamic) %> " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<<%= GetClassName(SourceTable) %>>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<<%= GetClassName(SourceTable) %>>(SelectFieldList, "FROM [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		<%
		for(int i = 0; i < SourceTable.ForeignKeys.Count; i++) {
			if(ShouldUseTable(SourceTable.ForeignKeys[i].PrimaryKeyTable, ExcludedTables)) { 
				bool isOneToOne = IsOneToOneRelation(SourceTable.ForeignKeys[i]);
				if(isOneToOne) { %>	
		/// <summary>
		/// Gets a <%= GetClassName(SourceTable) %> object by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> object.
		/// </summary>
		/// <param name="<%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %>"><%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %></param>
		/// <returns>A <%= GetClassName(SourceTable) %> object.</returns>
		public static <%= GetClassName(SourceTable) %> Get<%= GetClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>)
				<% } else { %>
		/// <summary>
		/// Gets a collection of <%= GetClassName(SourceTable) %> objects by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> object.
		/// </summary>
		/// <param name="<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>"><%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %></param>
		/// <returns>A collection <%= GetClassName(SourceTable) %> objects.</returns>
		public static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>) 
				<% } %>
		{
				<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>GetBy<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %>";
				<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetGetByFKSql(SourceTable, SourceTable.ForeignKeys[i], SQLType) %> " + <%= GetClassName(SourceTable) %>.DefaultSortOrder;
				<% } %>
			
			List<SqlParameter> parameters = new List<SqlParameter>();
	            <% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
			parameters.Add(new SqlParameter("@<%= SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j].Name %>", @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>.<%= GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j]) %>));
				<% } %>
			
				<% if(isOneToOne) { %>
			return GetOne<<%= GetClassName(SourceTable) %>>(commandText, parameters);
				<% } else { %>
			return GetList<<%= GetClassName(SourceTable) %>>(@<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>, commandText, parameters);
				<% } %>
		}
  
		<% if(!isOneToOne) { %>

		/// <summary>
		/// Gets a collection of <%= GetClassName(SourceTable) %> objects by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> object.
		/// </summary>
		/// <param name="<%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %>"><%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %></param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection <%= GetClassName(SourceTable) %> objects.</returns>
		protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"<%= "\r\n" %><%= GetGetByFKSql(SourceTable, SourceTable.ForeignKeys[i], SqlType.Dynamic, false) %> ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
	            <% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
				
			parameters.Add(new SqlParameter("@<%= SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j].Name %>", @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>.<%= GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j]) %>));
				<% } %>
			
			return GetList<<%= GetClassName(SourceTable) %>>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of <%= GetClassName(SourceTable) %> objects by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> object.
		/// </summary>
		<% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
		/// <param name="<%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %>"><%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %></param>
		<% } %>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection <%= GetClassName(SourceTable) %> objects.</returns>
		protected static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%
			for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) {  
				if(j != 0) { 
					%>, <%
				}
				%><%= GetCSharpVariableType(SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j]) %> @<%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %><%
			} %>, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"<%= "\r\n" %><%= GetGetByFKSql(SourceTable, SourceTable.ForeignKeys[i], SqlType.Dynamic, false) %> ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
	            <% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
			parameters.Add(new SqlParameter("@<%= SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j].Name %>", @<%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %>));
				<% } %>
			
			return GetList<<%= GetClassName(SourceTable) %>>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of <%= GetClassName(SourceTable) %> objects by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> object.
		/// </summary>
		/// <param name="<%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %>"><%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection <%= GetClassName(SourceTable) %> objects.</returns>
		public static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"<%= "\r\n" %><%= GetGetByFKSql(SourceTable, SourceTable.ForeignKeys[i], SqlType.Dynamic, false) %> ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
	            <% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
				
			parameters.Add(new SqlParameter("@<%= SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j].Name %>", @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>.<%= GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j]) %>));
				<% } %>
			
			return GetList<<%= GetClassName(SourceTable) %>>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of <%= GetClassName(SourceTable) %> objects by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> object.
		/// </summary>
		<% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
		/// <param name="<%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %>"><%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %></param>
		<% } %>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection <%= GetClassName(SourceTable) %> objects.</returns>
		public static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%
			for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) {  
				if(j != 0) { 
					%>, <%
				}
				%><%= GetCSharpVariableType(SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j]) %> @<%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %><%
			} %>, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"<%= "\r\n" %><%= GetGetByFKSql(SourceTable, SourceTable.ForeignKeys[i], SqlType.Dynamic, false) %> ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
	            <% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
			parameters.Add(new SqlParameter("@<%= SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j].Name %>", @<%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %>));
				<% } %>
			
			return GetList<<%= GetClassName(SourceTable) %>>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
		<% } %>  
	
		<% if(isOneToOne) { %>	
		/// <summary>
		/// Gets a <%= GetClassName(SourceTable) %> object by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %>'s unique identifier.
		/// </summary>
					<% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
		/// <param name="<%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %>"><%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %></param>
					<% } %>
		/// <returns>A <%= GetClassName(SourceTable) %> object.</returns>
		public static <%= GetClassName(SourceTable) %> Get<%= GetClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%
			for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) {  
				if(j != 0) { 
					%>, <%
				}
				%><%= GetCSharpVariableType(SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j]) %> <%= GetCamelCaseName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j].Name) %><%
			} %>)
				<% } else { %>
		/// <summary>
		/// Gets a collection of <%= GetClassName(SourceTable) %> objects by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> unique identifier.
		/// </summary>
					<% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %>"><%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %></param>
					<% } %>
		/// <returns>A collection <%= GetClassName(SourceTable) %> objects.</returns>
		public static EntityList<<%= GetClassName(SourceTable) %>> Get<%= GetPluralClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%
			for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) {  
				if(j != 0) { 
					%>, <%
				}
				%><%= GetCSharpVariableType(SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j]) %> @<%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %><%
			} %>) 
				<% } %>
		{
				<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>GetBy<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %>";
				<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetGetByFKSql(SourceTable, SourceTable.ForeignKeys[i], SQLType) %> " + <%= GetClassName(SourceTable) %>.DefaultSortOrder;
				<% } %>
			
			List<SqlParameter> parameters = new List<SqlParameter>();
	            <% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
			parameters.Add(new SqlParameter("@<%= SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j].Name %>", @<%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %>));
				<% } %>
			
				<% if(isOneToOne) { %>
			return GetOne<<%= GetClassName(SourceTable) %>>(commandText, parameters);
				<% } else { %>
			return GetList<<%= GetClassName(SourceTable) %>>(commandText, parameters);
				<% } %>
		}

			<% if (!_isReadOnly) { %>
				<% if (!isOneToOne || isOneToOne) { %>
		/// <summary>
		/// Create a new <%= GetClassName(SourceTable) %> object from a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> object.
		/// </summary>
		/// <param name="<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>"><%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %></param>
		/// <returns>The newly created <%= GetClassName(SourceTable) %> object.</returns>
		public static <%= GetClassName(SourceTable) %> Create<%= GetClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>)
		{
			<%= GetClassName(SourceTable) %> <%= GetCamelCaseName(GetClassName(SourceTable)) %> = InitializeNew<<%= GetClassName(SourceTable) %>>();
			
				<% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
			<%= GetCamelCaseName(GetClassName(SourceTable)) %>.<%= GetPropertyName(SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j]) %> = @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>.<%= GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j]) %>;
				<% } %>
			
			<%= GetCamelCaseName(GetClassName(SourceTable)) %>.<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %> = @<%= GetCamelCaseName(GetClassNameFromForeignKey(SourceTable.ForeignKeys[i])) %>;
			
			return <%= GetCamelCaseName(GetClassName(SourceTable)) %>;
		}
		
		/// <summary>
		/// Deletes <%= GetClassName(SourceTable) %> objects by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> object.
		/// </summary>
		/// <param name="<%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %>"><%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %></param>
		public static void Delete<%= GetPluralClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> <%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %>) 
		{
				<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>DeleteBy<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %>";
				<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetDeleteByFKSql(SourceTable, SourceTable.ForeignKeys[i]) %>";
				<% } %>
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
    	        <% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
			parameters.Add(new SqlParameter("@<%= SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j].Name %>", <%= GetCamelCaseName(GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable)) %>.<%= GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j]) %>));
				<% } %>
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, <%= GetCommandType() %>, parameters);
			}
		}
		
		/// <summary>
		/// Deletes <%= GetClassName(SourceTable) %> objects by a <%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %> unique identifier.
		/// </summary>
			<% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
		/// <param name="<%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %>"><%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %></param>
			<% } %>
		public static void Delete<%= GetPluralClassName(SourceTable) %>By<%= GetClassNameFromForeignKey(SourceTable.ForeignKeys[i]) %>(<%
			for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) {  
				if(j != 0) { 
					%>, <%
				}
				%><%= GetCSharpVariableType(SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j]) %> <%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %><%
			} %>) 
		{
				<% if(SQLType == SqlType.StoredProcedures) { %>
			string commandText = "<%= GetClassName(SourceTable) %>DeleteBy<%= GetClassName(SourceTable.ForeignKeys[i].PrimaryKeyTable) %>";
				<% } else { %>
			string commandText = @"<%= "\r\n" %><%= GetDeleteByFKSql(SourceTable, SourceTable.ForeignKeys[i]) %>";
				<% } %>
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
            	<% for (int j = 0; j < SourceTable.ForeignKeys[i].ForeignKeyMemberColumns.Count; j++) { %>
			parameters.Add(new SqlParameter("@<%= SourceTable.ForeignKeys[i].ForeignKeyMemberColumns[j].Name %>", <%= GetCamelCaseName(GetPropertyName(SourceTable.ForeignKeys[i].PrimaryKeyMemberColumns[j])) %>));
				<% } %>
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, <%= GetCommandType() %>, parameters);
			}
		}
			<% 		}	
				} 
			}
		} %>
		#endregion
		
		#region Subclasses
		public static partial class <%= GetClassName(SourceTable) %>Properties
		{
			<% foreach(ColumnSchema column in GetValidColumns(SourceTable)) { %>
			public const string <%= GetPropertyName(column) %> = "<%= GetPropertyName(column) %>";
			<% } %>
		}
		#endregion
	}
}
<script runat="template">
<!-- #include file="..\Utilities.cs" -->
<!-- #include file="..\Database\DbUtilities.cs" -->

private bool _isReadOnly = false;

public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);
	
	string defaultValue = GetMemberVariableDefaultValue(column);
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}

public string GetPascalCaseName(string value)
{
	return value.Substring(0, 1).ToUpper() + value.Substring(1);
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);

	return memberVariableName;
}

public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Boolean:
		{
			return "false";	
		}
		case DbType.Byte:
		case DbType.Int16:
		case DbType.Int32:
		case DbType.Int64:
		case DbType.Currency:
		case DbType.Decimal:
		case DbType.DateTime:
		case DbType.Date:
		case DbType.Single:
		{
			return GetCSharpVariableType(column) + ".MinValue";
		}
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		case DbType.Xml:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public string GetCSharpVariableType(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		case DbType.Xml: return "string";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetParameterValue(string parameterValue, ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Byte:
		case DbType.Int16:
		case DbType.Int32:
		case DbType.Int64:
		case DbType.Currency:
		case DbType.Decimal:
		case DbType.DateTime:
		case DbType.Date:
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		case DbType.Guid:
		{
			return "EntityBase.GetDatabaseValue(@" + parameterValue + ")";
		}
		default:
		{
			return "@" + parameterValue;
		}
	}
}

public string GetColumnNameWithoutIdSuffix(ColumnSchema column)
{
	string name = "";
	string columnName = GetPropertyName(column);
	
	if(columnName.EndsWith("id", System.StringComparison.CurrentCultureIgnoreCase))
	{
		name = columnName.Substring(0, columnName.Length - 2);
	}
	else
	{
		name = GetPascalCaseName(columnName);
	}
	return name;
}
	
public string GetClassNameFromForeignKey(TableKeySchema foreignKey)
{
	string className = "";
	
	if ((IsOneToOneRelation(foreignKey)))
	{
		className = GetClassName(foreignKey.PrimaryKeyTable);
	}
	else if(foreignKey.ForeignKeyMemberColumns.Count == 1)
	{
		className = GetColumnNameWithoutIdSuffix(foreignKey.ForeignKeyMemberColumns[0]);
	} 
	else 
	{
		foreach(ColumnSchema column in foreignKey.ForeignKeyMemberColumns)
		{
			className += GetColumnNameWithoutIdSuffix(column);
		}
	}
	
	return className;
}

public string GetClassNameFromIndex(IndexSchema index)
{
	string className = "";
	
	if(index.MemberColumns.Count == 1) 
	{
		className = GetColumnNameWithoutIdSuffix(index.MemberColumns[0].Column);
	} 
	else 
	{
		className = GetClassName(index.Table);
	}
	
	return className;
}

public string GetCommandType()
{
	if(SQLType == SqlType.StoredProcedures)
	{
		return "CommandType.StoredProcedure";	
	}
	else 
	{
		return "CommandType.Text";
	}
}

public bool IsOneToOneRelation(TableKeySchema tableKeySchema)
{
	// get the table that contains the foreign key
	//SchemaExplorer.TableSchema table = key.ForeignKeyTable;
	bool isOneToOne = false;
	
	// if the table we are currently looking at (sourceTable) has a foreign key from itself (ie. Employee.ManagerId, 
	// whereby ManagerId is a foreign key to the Employee table), then it cannot be a one to one relationship.
	if(tableKeySchema.ForeignKeyTable != tableKeySchema.PrimaryKeyTable)
	{
		isOneToOne = true;
		foreach(SchemaExplorer.ColumnSchema fkColumn in tableKeySchema.ForeignKeyMemberColumns) 
		{
			bool foundColumn = false;
			if(tableKeySchema.ForeignKeyTable.HasPrimaryKey) 
			{
				foreach(SchemaExplorer.ColumnSchema pkColumn in tableKeySchema.ForeignKeyTable.PrimaryKey.MemberColumns) {
					// if the current table's foreign key columns are the same as the current table's primary key columns...
					if(pkColumn.Name == fkColumn.Name) {
						foundColumn = true;
						break;
					}
				}
			}
			
			if(!foundColumn) {
				isOneToOne = false;
				break;
			}
		}
		
		if (isOneToOne)
		{
			if(tableKeySchema.ForeignKeyTable.HasPrimaryKey) 
			{
				foreach(SchemaExplorer.ColumnSchema pkColumn in tableKeySchema.ForeignKeyTable.PrimaryKey.MemberColumns) 
				{
					bool foundColumn = false;
					foreach(SchemaExplorer.ColumnSchema fkColumn in tableKeySchema.ForeignKeyMemberColumns) {
						if(pkColumn.Name == fkColumn.Name) {
							foundColumn = true;
							break;
						}
					}
					
					if(!foundColumn) {
						isOneToOne = false;
						break;
					}
				}
			}
		}
		
	} 
	return isOneToOne;
}
</script>
