<%@ CodeTemplate Language="C#" TargetLanguage="JavaScript" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\..\Common" %>
<%@ Register Name="DataSource" Template="DataSource.cst" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Property Name="IncludeCreate" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludePaging" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeFiltering" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeSorting" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeNavigation" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeTitle" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeToolbar" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeDetails" Type="System.Boolean" Default="True" %>
<%@ Property Name="IsDetailedGrid" Type="System.Boolean" Default="False" %>
<%@ Property Name="Association" Type="IAssociation" Optional="True" %>
<% if(!IsDetailedGrid) { %>var grid = $("#grid").kendoGrid({<% } else { %>$("<div/>").appendTo(e.detailCell).kendoGrid({<% } %>
    dataSource: <% if(!IsDetailedGrid || Association == null) { %><%= Entity.VariableName %>DataSource<% } else { %><%= RenderDataSource() %><% } %><% if(IncludeDetails) { %>,
    detailInit: <%= Entity.VariableName %>Details<% } if(IncludePaging) { %>,
    pageable: true<% } if(IncludeFiltering) { %>,
    filterable: true<% } if(IncludeSorting) { %>,
    sortable: true<% } if(IncludeNavigation) { %>,
    navigatable: true<% } if(Entity.Properties.Count(p => !IsIgnoreType(p)) > 0 || IncludeUpdate || IncludeDelete) { %>,
    columns: [
<% foreach(var property in Entity.Properties.Where(p => !IsIgnoreType(p)).AsIndexedEnumerable()) { %>
        {
            field: "<%= property.Value.Name %>"<% if(IncludeTitle) { %>,
            <% if(IsDetailedGrid && property.Value.IsType(PropertyType.Key)) { %>template: "<a href='/api/<%= Entity.VariableName %>/${ <%= property.Value.Name %> }'>${ <%= property.Value.Name %> }</a>"<% } else { %>title: "<%= property.Value.FriendlyName() %>"<% } %><% } if (IncludeFiltering && property.Value.IsType(PropertyType.Key)) { %>,
            filterable: false<% } %><%if (HasDropDown(property.Value) && (IncludeCreate || IncludeUpdate)) { %>,
            editor: <%= GetDropDownName(property.Value) %>DropDownEditor<% } %>
        }<% if(!property.IsLast || IncludeUpdate || IncludeDelete) { %>,<% } %>
<% } if(IncludeUpdate || IncludeDelete) { %>
        {
            command: [<% if(IncludeUpdate) { %>"edit", <% } if(IncludeDelete) {%>"destroy"<% } %>]
        }<% } %>]<% } if(IncludeToolbar) { %>,
    toolbar: kendo.template($("#template").html())<% } %><% if(IncludeUpdate) { %>,
    editable: "inline"<% } %>
});
<script runat="template">

    public string RenderDataSource(){
        var template = this.Create<DataSource>();
        this.CopyPropertiesTo(template);
        template.Entity = Entity;
        template.IncludeCreate = false;
        template.IncludeUpdate = true;
        template.IncludeDelete = true;
        template.IncludePaging = true;
        template.IncludeFiltering = true;
        template.IncludeSorting = true;
        template.IncludeParameterMap = true;
        template.IncludeModel = true;
        template.IncludeValidation = true;
        template.IsEmbeddedDataSource = true;
        template.Filter = BuildFilter();
        template.Response.IndentLevel = 3;

        return template.RenderToString();
    }

    public string BuildFilter()
    {
        if(Association == null)
            return null;

        return String.Format("field: \"{0}\", operator: \"eq\", value: e.data.{1}", Association.Properties[0].ForeignProperty.Name, Association.Properties[0].Property.Name);
    }

    public bool IsIgnoreType(IProperty property)
    {
        if (property.SystemType.Contains("XmlType"))
            return true;

        if (property.SystemType.Contains("Byte[]"))
            return true;

        if ((property.PropertyType & PropertyType.Concurrency) == PropertyType.Concurrency || property.BaseSystemType == "System.Byte[]")
            return true;

        return false;
    }

    public bool HasDropDown(IProperty property)
    {
        var entity = Association != null ? Association.Entity : Entity;
        foreach(var a in entity.Associations.Where(a => a.ForeignEntity.Properties.Count >= 2)) {
            foreach(var p in a.Properties){
        if(p.Property == property)
        return true;
        
            }
        }
        
        return false;
    }

    public string GetDropDownName(IProperty property)
    {
        var entity = Association != null ? Association.Entity : Entity;
        foreach(var a in entity.Associations){
            foreach(var p in a.Properties){
        if(p.Property == property || p.ForeignProperty == property)
        return a.ForeignEntity.VariableName;
            }
        }

        return null;
    }

</script>