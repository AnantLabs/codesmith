<%-- Author: Tom DuPont --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" CompilerVersion="v3.5"
    Src="NHibernateHelper.cs" Inherits="NHibernateHelper"
    Description="Generates a Business Entity for PLINQO for NHibernate." %>

<%@ Property Category="1. Source" Name="SourceEntity" Type="CodeSmith.SchemaHelper.IEntity"
    Optional="False"
    Description="The source entity to generate from." %>
<%@ Property Category="2. Namespaces" Name="BaseNamespace" Type="System.String"
    Optional="False"
    Description="Namespace of all generated base files." %>
<%@ Property Category="3. Entities" Name="EntityBaseClass" Type="System.String" 
    Optional="False" Default="Entity" 
    Description="The base class for PLINQO entities." %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="../../Common/SchemaHelper" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.NHibernate" Path="../../Common/SchemaHelper" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.SchemaHelper.NHibernate" %>
<% int serializationOrder = 1; %>
#pragma warning disable 1591
#pragma warning disable 0414        
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using <%= BaseNamespace %>;

namespace <%= SourceEntity.Namespace %>
{
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.Diagnostics.DebuggerDisplay("<%= DebuggerDisplay() %>")]
    public partial class <%= SourceEntity.Name %> : <%= EntityBaseClass %>
    {
        #region Static Constructor
        
        /// <summary>
        /// Initializes the <see cref="Account"/> class.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        static <%= SourceEntity.Name %>()
        {
            AddSharedRules();
        }
        
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Account"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        <%= GeneratedCodeAttribute %>
        public <%= SourceEntity.Name %>()
        {
            Initialize();
        }

        <%= GeneratedCodeAttribute %>
        protected override void Initialize()
        {
            OnCreated();
        }
        
        #endregion
        
        #region Column Mapped Properties
        
        <% IEnumerable<IProperty> allProperties = IsComposite(true)
            ? SourceEntity.Properties
            : SourceEntity.Key.Properties.Concat(SourceEntity.Properties); %>
        <% foreach(IProperty property in allProperties) { %>
        <%= GeneratedCodeAttribute %>
        private <%= property.SystemType %> <%= property.PrivateMemberVariableName %>;
        
        [System.Runtime.Serialization.DataMember(Order = <%= serializationOrder++ %>)]
        <%= GeneratedCodeAttribute %>
        public virtual <%= property.SystemType %> <%= property.Name %>
        {
            get { return <%= property.PrivateMemberVariableName %>; }
            set
            {
                On<%= property.Name %>Changing(value, <%= property.PrivateMemberVariableName %>);
                SendPropertyChanging("<%= property.Name %>");
                <%= property.PrivateMemberVariableName %> = value;
                SendPropertyChanged("<%= property.Name %>");
                On<%= property.Name %>Changed(value);
            }
        }
        
        <% } %>
        #endregion
        
        #region Associations Mappings
        
        <% foreach(Association association in SourceEntity.Associations) { %>
        <%= GeneratedCodeAttribute %>
        private <%= GetAssociationSystemType(association) %> <%= association.PrivateMemberVariableName %>;
        
        [System.Runtime.Serialization.DataMember(Order = <%= serializationOrder++ %>, EmitDefaultValue = false)]
        <%= GeneratedCodeAttribute %>
        public virtual <%= GetAssociationSystemType(association) %> <%= association.Name %>
        {
            get { return <%= association.PrivateMemberVariableName %>; }
            set
            {
                On<%= association.Name %>Changing(value, <%= association.PrivateMemberVariableName %>);
                SendPropertyChanging("<%= association.Name %>");
                <%= association.PrivateMemberVariableName %> = value;
                SendPropertyChanged("<%= association.Name %>");
                On<%= association.Name %>Changed(value);
            }
        }
        
        <% } %>
        #endregion
        <% if (IsComposite(false)) { %>
        
        #region Composite Key Overrides
        
        <%= GeneratedCodeAttribute %>
        public override bool Equals(object obj)
        {
            var entity = obj as <%= SourceEntity.Name %>;
            if (entity == null)
                return false;

            return 
            <% for(int i=0; i<SourceEntity.Key.Properties.Count; i++) { %>
                <% IProperty property = SourceEntity.Key.Properties[i]; %>
                <% if(i>0) { %>&& <% } %><%= property.Name %> == entity.<%= property.Name %><% if(i==SourceEntity.Key.Properties.Count - 1) { %>;<% } %>
            <% } %>
        }

        <%= GeneratedCodeAttribute %>
        public override int GetHashCode()
        {
            return (
            <% for(int i=0; i<SourceEntity.Key.Properties.Count; i++) { %>
                <% IProperty property = SourceEntity.Key.Properties[i]; %>
                <% if(i>0) { %>+ "|" + <% } %><%= property.Name %>
            <% } %>
                ).GetHashCode();
        }
        
        #endregion
        <% } %>
        
        #region Extensibility Method
        
        static partial void AddSharedRules();
        
        partial void OnCreated();
        
        <% foreach(IProperty property in allProperties) { %>
        partial void On<%= property.Name %>Changing(<%= property.SystemType %> newValue, <%= property.SystemType %> oldValue);
        
        partial void On<%= property.Name %>Changed(<%= property.SystemType %> value);
        
        <% } %>
        
        <% foreach(Association association in SourceEntity.Associations) { %>
        partial void On<%= association.Name %>Changing(<%= GetAssociationSystemType(association) %> newValue, <%= GetAssociationSystemType(association) %> oldValue);
        
        partial void On<%= association.Name %>Changed(<%= GetAssociationSystemType(association) %> value);
        
        <% } %>
        #endregion
        
        #region Clone
        
        <%= GeneratedCodeAttribute %>
        public virtual <%= SourceEntity.Name %> Clone()
        {
            return (<%= SourceEntity.Name %>)((ICloneable)this).Clone();
        }
        
        #endregion
        
        #region Serialization
        
        /// <summary>
        /// Deserializes an instance of <see cref="Account"/> from XML.
        /// </summary>
        /// <param name="xml">The XML string representing a <see cref="Account"/> instance.</param>
        /// <returns>An instance of <see cref="Account"/> that is deserialized from the XML string.</returns>
        <%= GeneratedCodeAttribute %>
        public static <%= SourceEntity.Name %> FromXml(string xml)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(<%= SourceEntity.Name %>));

            using (var sr = new System.IO.StringReader(xml))
            using (var reader = System.Xml.XmlReader.Create(sr))
            {
                return deserializer.ReadObject(reader) as <%= SourceEntity.Name %>;
            }
        }

        /// <summary>
        /// Deserializes an instance of <see cref="Account"/> from a byte array.
        /// </summary>
        /// <param name="buffer">The byte array representing a <see cref="Account"/> instance.</param>
        /// <returns>An instance of <see cref="Account"/> that is deserialized from the byte array.</returns>
        <%= GeneratedCodeAttribute %>
        public static <%= SourceEntity.Name %> FromBinary(byte[] buffer)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(<%= SourceEntity.Name %>));

            using (var ms = new System.IO.MemoryStream(buffer))
            using (var reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max))
            {
                return deserializer.ReadObject(reader) as <%= SourceEntity.Name %>;
            }
        }
        
        #endregion
    }
}

#pragma warning restore 1591
#pragma warning restore 0414

<script runat="template">
    public bool IsComposite(bool allowView)
    {
        return SourceEntity.Key.IsComposite && ((NHibernateEntity)SourceEntity).IsView == allowView;
    }
    public string GetAssociationSystemType(Association association)
    {
        return association.AssociationType == AssociationType.ManyToOne || association.AssociationType == AssociationType.ManyToZeroOrOne
            ? association.ForeignEntity.Name
            : String.Format("IList<{0}>", association.ForeignEntity.Name);
    }
    public string DebuggerDisplay()
    {
        string result = String.Empty;
        bool first = true;
        foreach(IProperty property in  SourceEntity.Key.Properties)
        {
            if (first)
                first = false;
            else
                result += ", ";
            result += String.Format("{0}: {{{0}}}", property.Name);
        }   
        return result;
    }
</script>