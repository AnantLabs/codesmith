<%-- Author: Blake Niemyjski & Tom DuPont --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" CompilerVersion="v3.5" Encoding="UTF-8"
    Src="NHibernateHelper.cs" Inherits="NHibernateHelper"
    Description="EF Query Extension Class." %>

<%@ Property Category="1. Source" Name="Entity" Type="CodeSmith.SchemaHelper.IEntity"
    Optional="False"
    Description="The source database to generate from." %>
<%@ Property Category="2. Class" Name="DataContextName" Type="System.String"
    Optional="True" Default=""
    Description="The class name of the Data Context." %>
<%@ Property Category="2. Class" Name="BaseNamespace" Type="System.String"
    Optional="True" Default="" 
    Description="The namespace of all generated base files." %>
<%@ Property Category="3. Query" Name="MethodPrefix" Type="System.String" 
    Optional="True" Default="By" 
    Description="The prefix of query method names." %>
<%@ Property Category="3. Query" Name="UniqueMethodPrefix" Type="System.String" 
    Optional="True" Default="GetBy" 
    Description="The prefix of query method names." %>
<%@ Property Category="3. Query" Name="MethodKeySuffix" Type="System.String" 
    Optional="False" Default="Key" 
    Description="The property.Name of the primary key query method names." %>
<%@ Property Category="3. Query" Name="QueryNamespace" Type="System.String"
    Optional="True" Default="" 
    Description="The namespace for the interfaces.  Leave blank to not generate them." %>
    
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="../../Common/SchemaHelper" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.NHibernate" Path="../../Common/SchemaHelper" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.SchemaHelper.NHibernate" %>
#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Plinqo.NHibernate;

namespace <%= String.IsNullOrEmpty(QueryNamespace)? BaseNamespace : QueryNamespace %>
{
    /// <summary>
    /// The query extension class for <%= Entity.Name %>.
    /// </summary>
    public static partial class <%= Entity.Name %>Extensions
    {
    <% if (Entity.HasKey) { %>
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        <%= GeneratedCodeAttribute %>
        public static <%= Entity.Namespace %>.<%= Entity.Name %> <%= UniqueMethodPrefix %><%= MethodKeySuffix %>(this IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> queryable, <%= GetParameters(Entity.Key.Properties) %>)
        {
            return queryable.FirstOrDefault(<%= GetLamba(Entity.Key.Properties, 5) %>);
        }
    <% } %>
    <% var properties = Entity.Properties.Concat(Entity.Key.Properties).ToList(); %>
    <% foreach(IProperty property in properties) { %>
        <% if ((property.PropertyType & PropertyType.Index) != PropertyType.Index) { continue; } %>
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        <%= GeneratedCodeAttribute %>
        public static <%= Entity.Namespace %>.<%= Entity.Name %> <%= UniqueMethodPrefix %><%= property.Name %>(this IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> queryable, <%= GetParameters(new List<IProperty>() { property }) %>)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<<%= Entity.Namespace %>.<%= Entity.Name %>>;
            if (entity != null && && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.<%= UniqueMethodPrefix %><%= property.Name %>.Invoke((<%= BaseNamespace %>.<%= DataContextName %>)entity.Context, <%= GetParametersNames(new List<IProperty>() { property }) %>);

            return queryable.FirstOrDefault(<%= GetLamba(new List<IProperty>() { property }, 5) %>);
        }
    <% } %>
    <% foreach(IProperty property in Entity.Properties) { %>
        <% if (IsIgnoreType(property)) { continue; } %>
        <% string alias = GetAlias(); 
           var paramName = CleanParamName(property.VariableName);
        %>

        /// <summary>
        /// Gets a query for <see cref="<%= Entity.Namespace %>.<%= Entity.Name %>.<%= property.Name %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="<%= property.VariableName %>"><%= property.Name %> to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> <%= MethodPrefix %><%= property.Name %>(this IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> queryable, <%= property.SystemType %> <%= paramName %>)
        {
        <% if (property.IsNullable == true) { %>
            // support nulls
            return <%= property.VariableName %> == null 
                ? queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == null) 
                : queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == <%= paramName %>);
        <% } else { %>
            return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == <%= paramName %>);
        <% } %>
        }
        <% if (IsContainmentOperator(property)) { %>

        /// <summary>
        /// Gets a query for <see cref="<%= Entity.Namespace %>.<%= Entity.Name %>.<%= property.Name %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="<%= property.VariableName %>"><%= property.Name %> to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> <%= MethodPrefix %><%= property.Name %>(this IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> queryable, ContainmentOperator containmentOperator, <%= property.SystemType %> <%= paramName %>)
        {
            if (<%= property.VariableName %> == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("<%= property.VariableName %>", "Parameter '<%= property.VariableName %>' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %>.Contains(<%= paramName %>));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %>.StartsWith(<%= paramName %>));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %>.EndsWith(<%= paramName %>));
                case ContainmentOperator.NotContains:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %>.Contains(<%= paramName %>) == false);
            <% if (property.IsNullable == true) { %>
                case ContainmentOperator.NotEquals:
                    return <%= property.VariableName %> == null 
                        ? queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> != null) 
                        : queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> != <%= paramName %>);
                default:
                    return <%= property.VariableName %> == null 
                        ? queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == null) 
                        : queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == <%= paramName %>);
            <% } else { %>
                case ContainmentOperator.NotEquals:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> != <%= paramName %>);
                default:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == <%= paramName %>);
            <% } %>
            }
        }
        <% } else { %>

        /// <summary>
        /// Gets a query for <see cref="<%= Entity.Namespace %>.<%= Entity.Name %>.<%= property.Name %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="<%= property.VariableName %>"><%= property.Name %> to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> <%= MethodPrefix %><%= property.Name %>(this IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> queryable, ComparisonOperator comparisonOperator, <%= property.SystemType %> <%= paramName %>)
        {
            <% if (property.IsNullable == true) { %>
            if (<%= paramName %> == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("<%= paramName %>", "Parameter '<%= paramName %>' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            <% } %>
            switch (comparisonOperator)
            {
            <% if (property.BaseSystemType == "System.Object" || property.BaseSystemType == "System.Guid" || property.BaseSystemType == "System.Boolean" || property.BaseSystemType == "System.Xml.Linq.XElement" ) { %>
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support <%= property.SystemType %> type.", "comparisonOperator");
            <% } else { %>
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> > <%= paramName %>);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> >= <%= paramName %>);
                case ComparisonOperator.LessThan:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> < <%= paramName %>);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> <= <%= paramName %>);
            <% } %>
            <% if (property.IsNullable == true) { %>
                case ComparisonOperator.NotEquals:
                    return <%= property.VariableName %> == null 
                        ? queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> != null) 
                        : queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> != <%= paramName %>);
                default:
                    return <%= property.VariableName %> == null 
                        ? queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == null) 
                        : queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == <%= paramName %>);
            <% } else { %>
                case ComparisonOperator.NotEquals:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> != <%= paramName %>);
                default:
                    return queryable.Where(<%= alias %> => <%= alias %>.<%= property.Name %> == <%= paramName %>);
            <% } %>
            }
        }
        <% } %>

        /// <summary>
        /// Gets a query for <see cref="<%= Entity.Namespace %>.<%= Entity.Name %>.<%= property.Name %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="<%= property.VariableName %>"><%= property.Name %> to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> <%= MethodPrefix %><%= property.Name %>(this IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> queryable, <%= property.SystemType %> <%= paramName %>, params <%= property.SystemType %>[] additionalValues)
        {
            var <%= property.VariableName %>List = new List<<%= property.SystemType %>> { <%= paramName %> };

            if (additionalValues != null)
                <%= property.VariableName %>List.AddRange(additionalValues);
        <% if (property.IsNullable == true) { %>
            else
                <%= property.VariableName %>List.Add(null);
        <% } %>

            if (<%= property.VariableName %>List.Count == 1)
                return queryable.<%= MethodPrefix %><%= property.Name %>(<%= property.VariableName %>List[0]);

            return queryable.<%= MethodPrefix %><%= property.Name %>(<%= property.VariableName %>List);
        }

        /// <summary>
        /// Gets a query for <see cref="<%= Entity.Namespace %>.<%= Entity.Name %>.<%= property.Name %>"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        <%= GeneratedCodeAttribute %>
        public static IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> <%= MethodPrefix %><%= property.Name %>(this IQueryable<<%= Entity.Namespace %>.<%= Entity.Name %>> queryable, IEnumerable<<%= property.SystemType %>> values)
        {
        <% if (property.IsNullable == true) { %>
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<<%= Entity.Namespace %>.<%= Entity.Name %>, bool>("<%= property.Name %>", values);
            return queryable.Where(expression);
        <% } else { %>
            return queryable.Where(<%= alias %> => values.Contains(<%= alias %>.<%= property.Name %>));
        <% } %>
        }
    <% } %>
    }
}
#pragma warning restore 1591

<script runat="template">
    List<string> uniqueMethods = new List<string>();

    public bool IsIgnoreType(IProperty property)
    {
        if (property.SystemType.Contains("XmlType"))
            return true;
            
        if (property.SystemType.Contains("Byte[]"))
            return true;
        
        //if ((property.PropertyType & PropertyType.Concurrency) != PropertyType.Concurrency && property.BaseSystemType != "System.Byte[]")
            //return true;
        
        return false;
    }
    
    public bool IsContainmentOperator(IProperty property)
    {
        if (property.BaseSystemType.EndsWith("String"))
            return true;
            
        if (property.SystemType.EndsWith("String"))
            return true;
        
        return false;
    }

    public string GetAlias()
    {
        return Entity.Name.Length == 1
            ? "_" + Entity.Name.ToLowerInvariant()
            : Entity.Name.Substring(0, 1).ToLowerInvariant();
    }

    public string CleanParamName(string name)
    {
        if (name != GetAlias())
            return name;

        return "my" + StringUtil.ToPascalCase(name);
    }

    public string GetParameters(List<IProperty> properties)
    {
        StringBuilder args = new StringBuilder();
        foreach(IProperty property in properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            args.AppendFormat("{0} {1}", property.SystemType, CleanParamName(property.VariableName));
        }

        return args.ToString();
    }

    public string GetParametersNames(List<IProperty> properties)
    {
        StringBuilder args = new StringBuilder();
        foreach(IProperty property in properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            args.Append(CleanParamName(property.VariableName));
        }

        return args.ToString();
    }

    public string GetParametersTypes(List<IProperty> properties)
    {
        StringBuilder args = new StringBuilder();
        foreach(IProperty property in properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            args.Append(property.SystemType);
        }

        return args.ToString();
    }

    public string GetLamba(List<IProperty> properties, int tabCount)
    {
        StringBuilder lamba = new StringBuilder();
        string alias = GetAlias();

        foreach(IProperty property in properties)
        {
            if (lamba.Length == 0)
            {
                lamba.AppendFormat("{0} => ", alias);
            }
            else
            {
                lamba.Append(" \r\n");
                lamba.Append('\t', tabCount);
                lamba.Append("&& ");
            }

            if (property.IsNullable == true)
                lamba.AppendFormat("object.Equals({0}.{1}, {2})", alias, property.Name, CleanParamName(property.VariableName));
            else
                lamba.AppendFormat("{0}.{1} == {2}", alias, property.Name, CleanParamName(property.VariableName));
        }

        return lamba.ToString();
    }
</script>