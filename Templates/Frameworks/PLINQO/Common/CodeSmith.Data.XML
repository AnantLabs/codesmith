<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeSmith.Data</name>
    </assembly>
    <members>
        <member name="T:CodeSmith.Data.Attributes.IpAddressAttribute">
            <summary>
            Assigns the current user's IP address to the property for the specified entity states.
            </summary>
            <example>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [IpAddress(EntityState.Dirty)]
                public string IpAddress { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:CodeSmith.Data.Rules.Assign.IpAddressRule"/>
        </member>
        <member name="T:CodeSmith.Data.Attributes.RuleAttributeBase">
            <summary>
            A base class for rule attributes.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Attributes.RuleAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.RuleAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Attributes.RuleAttributeBase.CreateRule(System.String)">
            <summary>
            Creates the rule.
            </summary>
            <param name="property">The property name this rule applies to.</param>
            <returns>A new instance of the rule.</returns>
        </member>
        <member name="P:CodeSmith.Data.Attributes.RuleAttributeBase.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state of the object that the rule can run on.</value>
        </member>
        <member name="M:CodeSmith.Data.Attributes.IpAddressAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.IpAddressAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Attributes.IpAddressAttribute.#ctor(CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.IpAddressAttribute"/> class.
            </summary>
            <param name="state">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Attributes.IpAddressAttribute.CreateRule(System.String)">
            <summary>
            Creates the rule.
            </summary>
            <param name="property">The property name this rule applies to.</param>
            <returns>A new instance of the rule.</returns>
        </member>
        <member name="M:CodeSmith.Data.Attributes.IpAddressAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the specified validation object on which the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> is declared.</param>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:CodeSmith.Data.Attributes.UserNameAttribute">
            <summary>
            Assigns the current users name to the property for the specified entity states.
            </summary>
            <example>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [UserName(EntityState.New)]
                public string CreatedBy { get; set; }
            
                [UserName(EntityState.Dirty)]
                public string ModifiedBy { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:CodeSmith.Data.Rules.Assign.UserNameRule"/>
        </member>
        <member name="M:CodeSmith.Data.Attributes.UserNameAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.UserNameAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Attributes.UserNameAttribute.#ctor(CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.UserNameAttribute"/> class.
            </summary>
            <param name="state">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Attributes.UserNameAttribute.CreateRule(System.String)">
            <summary>
            Creates the rule.
            </summary>
            <param name="property">The property name this rule applies to.</param>
            <returns>A new instance of the rule.</returns>
        </member>
        <member name="M:CodeSmith.Data.Attributes.UserNameAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the specified validation object on which the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> is declared.</param>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:CodeSmith.Data.Attributes.GuidAttribute">
            <summary>
            Assigns a new GUID to the property for the specified entity states.
            </summary>
            <example>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [Guid(EntityState.New)]
                public Guid UserId { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:CodeSmith.Data.Rules.Assign.GuidRule"/>
        </member>
        <member name="M:CodeSmith.Data.Attributes.GuidAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.GuidAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Attributes.GuidAttribute.#ctor(CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.GuidAttribute"/> class.
            </summary>
            <param name="state">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Attributes.GuidAttribute.CreateRule(System.String)">
            <summary>
            Creates the rule.
            </summary>
            <param name="property">The property name this rule applies to.</param>
            <returns>A new instance of the rule.</returns>
        </member>
        <member name="M:CodeSmith.Data.Attributes.GuidAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the specified validation object on which the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> is declared.</param>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:CodeSmith.Data.Attributes.NowAttribute">
            <summary>
            Assigns the current date / time to the property for the specified entity states.
            </summary>
            <example>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [Now(EntityState.New)]
                public DateTime CreatedDate { get; set; }
            
                [Now(EntityState.Dirty)]
                public DateTime ModifiedDate { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:CodeSmith.Data.Rules.Assign.NowRule"/>
        </member>
        <member name="M:CodeSmith.Data.Attributes.NowAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.NowAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Attributes.NowAttribute.#ctor(CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Attributes.NowAttribute"/> class.
            </summary>
            <param name="state">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Attributes.NowAttribute.CreateRule(System.String)">
            <summary>
            Creates the rule.
            </summary>
            <param name="property">The property name this rule applies to.</param>
            <returns>A new instance of the rule.</returns>
        </member>
        <member name="M:CodeSmith.Data.Attributes.NowAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the specified validation object on which the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> is declared.</param>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:CodeSmith.Data.Audit.AlwaysAuditAttribute">
            <summary>
            Indicates that a field in an audited class should always be included in the audit data even if it hasn't been changed.
            </summary>
            <seealso cref="T:CodeSmith.Data.Audit.AuditAttribute"/>
            <seealso cref="T:CodeSmith.Data.Audit.NotAuditedAttribute"/>
            <seealso cref="T:CodeSmith.Data.Audit.AuditManager"/>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditAction">
            <summary>
            A list of entity actions for the audit log.
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Audit.AuditAction.Insert">
            <summary>
            The entity was inserted.
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Audit.AuditAction.Update">
            <summary>
            The entity was updated.
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Audit.AuditAction.Delete">
            <summary>
            The entity was deleted.
            </summary>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditAttribute">
            <summary>
            Indicates that a class can be audited.
            </summary>
            <remarks>
            Use the <see cref="T:CodeSmith.Data.Audit.NotAuditedAttribute"/> attribute to prevent a field from being included in the audit
            </remarks>
            <seealso cref="T:CodeSmith.Data.Audit.AuditManager"/>
            <seealso cref="T:CodeSmith.Data.Audit.NotAuditedAttribute"/>
            <seealso cref="T:CodeSmith.Data.Audit.AlwaysAuditAttribute"/>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditEntity">
            <summary>
            A class for logging the changes to an entity.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditEntity.Equals(CodeSmith.Data.Audit.AuditEntity)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditEntity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditEntity.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditEntity.Action">
            <summary>
            Gets or sets the action that was taken on the entity.
            </summary>
            <value>The action that was taken on the entity.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditEntity.Type">
            <summary>
            Gets or sets the data type of the entity.
            </summary>
            <value>The data type of the entity.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditEntity.Keys">
            <summary>
            Gets the list of properties that are the key for the entity.
            </summary>
            <value>The list of properties that are the key for the entity.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditEntity.Properties">
            <summary>
            Gets the list of properties that action was taken on.
            </summary>
            <value>The list of properties that action was taken on.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditKey.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditKey.Type">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditKey.Value">
            <summary>
            Gets or sets the current/changed value of the property.
            </summary>
            <value>The current value of the property.</value>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditKeyCollection">
            <summary>
            A keyed collection of <see cref="T:CodeSmith.Data.Audit.AuditKey"/>
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditKeyCollection.GetKeyForItem(CodeSmith.Data.Audit.AuditKey)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditManager">
            <summary>
            A class to create an <see cref="T:CodeSmith.Data.Audit.AuditLog"/> from the changes in a <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditManager.CreateAuditLog(System.Data.Linq.DataContext)">
            <summary>
            Creates the <see cref="T:CodeSmith.Data.Audit.AuditLog"/> of changes form the specified <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <param name="dataContext">The <see cref="T:System.Data.Linq.DataContext"/> to get the changes from.</param>
            <returns>An instance of <see cref="T:CodeSmith.Data.Audit.AuditLog"/> that is an audit log of the changes to <see cref="T:System.Data.Linq.DataContext"/>.</returns>
            <remarks>
            An entity has to be marked with the <see cref="T:CodeSmith.Data.Audit.AuditAttribute"/> for audit data to be collected for that entity.
            </remarks>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditManager.MergeAuditLogs(CodeSmith.Data.Audit.AuditLog[])">
            <summary>
            Merges the audit logs together.
            </summary>
            <param name="logs">The list logs to merge together.</param>
            <returns>An instance of <see cref="T:CodeSmith.Data.Audit.AuditLog"/> with all other logs merged in.</returns>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditManager.ReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the read lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditManager.WriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the write lock.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditProperty">
            <summary>
            A class for logging the changes to a property on an entity.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditProperty.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditProperty.Type">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditProperty.IsForeignKey">
            <summary>
            Gets or sets a value indicating whether this property is a foreign key.
            </summary>
            <value>
            	<c>true</c> if this property is a foreign key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditProperty.IsAssociation">
            <summary>
            Gets or sets a value indicating whether this property is an association.
            </summary>
            <value>
            	<c>true</c> if this property is an association; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditProperty.ForeignKey">
            <summary>
            Gets or sets the property names that this association maps to.
            </summary>
            <value>The property names that this association maps to..</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditProperty.Current">
            <summary>
            Gets or sets the current/changed value of the property.
            </summary>
            <value>The current value of the property.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditProperty.Original">
            <summary>
            Gets or sets the original value of the property.
            </summary>
            <value>The original value of the property.</value>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditLog">
            <summary>
            A class representing a log of the changes to a <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Audit.AuditLog.AuditNamespace">
            <summary>
            The schema namespace for the audit log.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditLog.ToXml">
            <summary>
            Returns an xml string of the <see cref="T:CodeSmith.Data.Audit.AuditLog"/>.
            </summary>
            <returns>An xml string of the <see cref="T:CodeSmith.Data.Audit.AuditLog"/>.</returns>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditLog.Username">
            <summary>
            Gets or sets the user name that made the changes.
            </summary>
            <value>The user name that made the changes.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditLog.Date">
            <summary>
            Gets or sets the date when the changes were made.
            </summary>
            <value>The date when the changes were made.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditLog.Entities">
            <summary>
            Gets the list entities that have changes in the <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <value>The list entities that have changes.</value>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditPropertyCollection">
            <summary>
            A keyed collection of <see cref="T:CodeSmith.Data.Audit.AuditProperty"/>
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditPropertyCollection.GetKeyForItem(CodeSmith.Data.Audit.AuditProperty)">
            <summary>
            Extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:CodeSmith.Data.Audit.AuditPropertyFormatAttribute">
            <summary>
            An attribute to control the output format of the <see cref="T:CodeSmith.Data.Audit.AuditProperty"/> values.
            </summary>
            <example>The following example is used to mask out the password for use in the audit log.
            <code><![CDATA[
            [Audit]
            public partial class User
            {
                [AuditPropertyFormat(typeof(CustomFormat), "FormatPassword")]
                public string Password { get; set; }
            }
            
            public class CustomFormat
            {
                // signature can be either static object MethodName(MemberInfo memberInfo, object value) or static object MethodName(object value).
                public static object FormatPassword(MemberInfo memberInfo, object value)
                {
                    string v = value as string;
                    if (string.IsNullOrEmpty(v))
                        return value;
            
                    return v.Substring(0, 1) + "*****";
                }
            }
            ]]>
            </code>
            </example>
            <remarks>
            The method signature can be either <c>static object MethodName(MemberInfo memberInfo, object value)</c>
             or <c>static object MethodName(object value)</c>.
            </remarks>
        </member>
        <member name="M:CodeSmith.Data.Audit.AuditPropertyFormatAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Audit.AuditPropertyFormatAttribute"/> class.
            </summary>
            <param name="formatType">The <see cref="T:System.Type"/> that contains format method.</param>
            <param name="methodName">
            The name of the method to call to format the value.  Method signature can be either 
            <c>static object MethodName(MemberInfo memberInfo, object value)</c> or <c>static object MethodName(object value)</c>.
            </param>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditPropertyFormatAttribute.FormatType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that contains format method.
            </summary>
            <value>The <see cref="T:System.Type"/> that contains format method.</value>
        </member>
        <member name="P:CodeSmith.Data.Audit.AuditPropertyFormatAttribute.MethodName">
            <summary>
            Gets or sets the name of the method to call to format the value. Must be a static method.
            </summary>
            <value>The name of the method to call to format the value.</value>
            <remarks>
            The method signature can be either <c>static object MethodName(MemberInfo memberInfo, object value)</c>
             or <c>static object MethodName(object value)</c>.
            </remarks>
        </member>
        <member name="T:CodeSmith.Data.Audit.NotAuditedAttribute">
            <summary>
            Indicates that a field in an audited class should not be included in the audit log.
            </summary>
            <remarks>
            Use the NotAuditedAttribute attribute to prevent a field from being included in the audit.
            </remarks>
            <seealso cref="T:CodeSmith.Data.Audit.AuditAttribute"/>
            <seealso cref="T:CodeSmith.Data.Audit.AlwaysAuditAttribute"/>
            <seealso cref="T:CodeSmith.Data.Audit.AuditManager"/>
        </member>
        <member name="T:CodeSmith.Data.IEntityKey">
            <summary>Interface for an entity key.</summary>
        </member>
        <member name="T:CodeSmith.Data.IEntityKey`1">
            <summary>Interface for an entity key.</summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:CodeSmith.Data.IEntityKey`1.Key">
            <summary>Gets the entity key.</summary>
        </member>
        <member name="T:CodeSmith.Data.IEntityKey`2">
            <summary>Interface for a two part entity key.</summary>
            <typeparam name="TKey0">The type of the first key.</typeparam>
            <typeparam name="TKey1">The type of the second key.</typeparam>
        </member>
        <member name="P:CodeSmith.Data.IEntityKey`2.Key1">
            <summary>Gets the second key.</summary>
        </member>
        <member name="T:CodeSmith.Data.IEntityKey`3">
            <summary>Interface for a three part entity key.</summary>
            <typeparam name="TKey0">The type of the first key.</typeparam>
            <typeparam name="TKey1">The type of the second key.</typeparam>
            <typeparam name="TKey2">The type of the key2.</typeparam>
        </member>
        <member name="P:CodeSmith.Data.IEntityKey`3.Key2">
            <summary>Gets the third key.</summary>
        </member>
        <member name="T:CodeSmith.Data.IEntityKey`4">
            <summary>Interface for a four part entity key.</summary>
            <typeparam name="TKey0">The type of the first key.</typeparam>
            <typeparam name="TKey1">The type of the second key.</typeparam>
            <typeparam name="TKey2">The type of the third key.</typeparam>
            <typeparam name="TKey3">The type of the fourth key.</typeparam>
        </member>
        <member name="P:CodeSmith.Data.IEntityKey`4.Key3">
            <summary>Gets the fourth key.</summary>
        </member>
        <member name="T:CodeSmith.Data.EntityKey`1">
            <summary>Class representing an entity key.</summary>
            <typeparam name="TKey">The type of the entity key.</typeparam>
        </member>
        <member name="M:CodeSmith.Data.EntityKey`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.EntityKey`1"/> class.
            </summary>
            <param name="key">The entity key.</param>
        </member>
        <member name="P:CodeSmith.Data.EntityKey`1.Key">
            <summary>Gets the entity key.</summary>
        </member>
        <member name="T:CodeSmith.Data.EntityKey`2">
            <summary>Class representing a two part entity key.</summary>
            <typeparam name="TKey0">The type of the first key.</typeparam>
            <typeparam name="TKey1">The type of the second key.</typeparam>
        </member>
        <member name="M:CodeSmith.Data.EntityKey`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.EntityKey`2"/> class.
            </summary>
            <param name="key0">The first key value.</param>
            <param name="key1">The second key value.</param>
        </member>
        <member name="P:CodeSmith.Data.EntityKey`2.Key1">
            <summary>Gets the second key.</summary>
        </member>
        <member name="T:CodeSmith.Data.EntityKey`3">
            <summary>Class representing a three part entity key.</summary>
            <typeparam name="TKey0">The type of the first key.</typeparam>
            <typeparam name="TKey1">The type of the second key.</typeparam>
            <typeparam name="TKey2">The type of the third key.</typeparam>
        </member>
        <member name="M:CodeSmith.Data.EntityKey`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.EntityKey`3"/> class.
            </summary>
            <param name="key0">The first key value.</param>
            <param name="key1">The second key value.</param>
            <param name="key2">The third key value.</param>
        </member>
        <member name="P:CodeSmith.Data.EntityKey`3.Key2">
            <summary>Gets the third key.</summary>
        </member>
        <member name="T:CodeSmith.Data.EntityKey`4">
            <summary>Class representing a four part entity key.</summary>
            <typeparam name="TKey0">The type of the first key.</typeparam>
            <typeparam name="TKey1">The type of the second key.</typeparam>
            <typeparam name="TKey2">The type of the third key.</typeparam>
            <typeparam name="TKey3">The type of the fourth key.</typeparam>
        </member>
        <member name="M:CodeSmith.Data.EntityKey`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.EntityKey`4"/> class.
            </summary>
            <param name="key0">The first key value.</param>
            <param name="key1">The second key value.</param>
            <param name="key2">The third key value.</param>
            <param name="key3">The fourth key value.</param>
        </member>
        <member name="P:CodeSmith.Data.EntityKey`4.Key3">
            <summary>Gets the fourth key.</summary>
        </member>
        <member name="T:CodeSmith.Data.DataManagerBase`1">
            <summary>
            The base class for the data manager.
            </summary>
            <typeparam name="TContext">The type of <see cref="T:System.Data.Linq.DataContext"/>.</typeparam>
        </member>
        <member name="T:CodeSmith.Data.IDataManager`1">
            <summary>
            An interface defining a data manager.
            </summary>
            <typeparam name="TContext">The type of the <see cref="T:System.Data.Linq.DataContext"/>.</typeparam>
        </member>
        <member name="T:CodeSmith.Data.IDataManager">
            <summary>
            An interface defining a data manager.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.IDataManager`1.Context">
            <summary>
            Gets the <see cref="T:System.Data.Linq.DataContext"/> for this manager.
            </summary>
            <value>The <see cref="T:System.Data.Linq.DataContext"/>.</value>
        </member>
        <member name="M:CodeSmith.Data.DataManagerBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.DataManagerBase`1"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:CodeSmith.Data.DataManagerBase`1.Context">
            <summary>
            Gets the managers <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <value>The current <see cref="T:System.Data.Linq.DataContext"/>.</value>
        </member>
        <member name="P:CodeSmith.Data.DataManagerBase`1.Rules">
            <summary>
            Gets the current rules for the entities.
            </summary>
            <value>The entity rules.</value>
        </member>
        <member name="T:CodeSmith.Data.EntityManagerBase`2">
            <summary>
            A base class for entity managers.
            </summary>
            <typeparam name="TManager">The type of the manager.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="T:CodeSmith.Data.IEntityManager`2">
            <summary>
            The entity manager interface.
            </summary>
            <typeparam name="TManager">The type of the manager.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <seealso cref="T:CodeSmith.Data.IDataManager"/>
            <seealso cref="T:CodeSmith.Data.IEntityKey"/>
        </member>
        <member name="M:CodeSmith.Data.IEntityManager`2.GetByKey(CodeSmith.Data.IEntityKey)">
            <summary>
            Gets an entity by the primary key.
            </summary>
            <param name="key">The key for the entity.</param>
            <returns>
            An instance of the entity or null if not found.
            </returns>
        </member>
        <member name="P:CodeSmith.Data.IEntityManager`2.Manager">
            <summary>
            Gets the manager.
            </summary>
            <value>The manager.</value>
        </member>
        <member name="M:CodeSmith.Data.EntityManagerBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.EntityManagerBase`2"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:CodeSmith.Data.EntityManagerBase`2.GetByKey(CodeSmith.Data.IEntityKey)">
            <summary>
            Gets an entity by the primary key.
            </summary>
            <param name="key">The key for the entity.</param>
            <returns>
            An instance of the entity or null if not found.
            </returns>
            <remarks>
            This method provides a common retrieval of an entity.
            </remarks>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CodeSmith.Data.EntityManagerBase`2.AddValidationRules">
            <summary>
            Add validation rules.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.EntityManagerBase`2.Manager">
            <summary>
            Gets the manager.
            </summary>
            <value>The manager.</value>
        </member>
        <member name="T:CodeSmith.Data.Linq.CacheSettings">
            <summary>
            Settings Object for QueryResultCache.FromCache Methods
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Linq.CacheSettings.#ctor">
            <summary>
            Creates a CacheSettings object with default/empty values.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Linq.CacheSettings.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Creates a CacheSettings object with default values for Sliding Expiration.
            </summary>
            <param name="slidingExpiration">Sets Sliding Expiration</param>
            <param name="cacheEmptyResult">Sets Cache Empty Result</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.CacheSettings.#ctor(System.TimeSpan,System.Web.Caching.CacheItemPriority)">
            <summary>
            Creates a CacheSettings object with default values for Sliding Expiration.
            </summary>
            <param name="slidingExpiration">Sets Sliding Expiration</param>
            <param name="priority">Sets Priority</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.CacheSettings.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Creates a CacheSettings object with default values for Absolute Expiration.
            </summary>
            <param name="absoluteExpiration">Sets Absolute Expiration</param>
            <param name="cacheEmptyResult">Sets Cache Empty Result</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.CacheSettings.#ctor(System.DateTime,System.Web.Caching.CacheItemPriority)">
            <summary>
            Creates a CacheSettings object with default values for Absolute Expiration.
            </summary>
            <param name="absoluteExpiration">Sets Absolute Expiration</param>
            <param name="priority">Sets Priority</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.CacheSettings.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a CacheSettings object with default values for Duration.
            </summary>
            <param name="duration">Sets Duration</param>
            <param name="cacheEmptyResult">Sets Cache Empty Result</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.CacheSettings.#ctor(System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            Creates a CacheSettings object with default values for Duration.
            </summary>
            <param name="duration">Sets Duration</param>
            <param name="priority">Sets Priority</param>
        </member>
        <member name="P:CodeSmith.Data.Linq.CacheSettings.Duration">
            <summary>
            The Absolute Expiration represented as (Duration) seconds from now.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Linq.CacheSettings.SlidingExpiration">
            <summary>
            Used for setting System.Web.Caching.Cache.Insert parameter slidingExpiration:
            The interval between the time the inserted object was last accessed and the
            time at which that object expires. If this value is the equivalent of 20
            minutes, the object will expire and be removed from the cache 20 minutes after
            it was last accessed. If you are using sliding expiration, the
            absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Linq.CacheSettings.Priority">
            <summary>
            Used for setting System.Web.Caching.Cache.Insert parameter priority:
            The cost of the object relative to other items stored in the cache, as
            expressed by the System.Web.Caching.CacheItemPriority enumeration. This value is
            used by the cache when it evicts objects; objects with a lower cost are removed
            from the cache before objects with a higher cost.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Linq.CacheSettings.AbsoluteExpiration">
            <summary>
            Used for setting System.Web.Caching.Cache.Insert parameter absoluteExpiration:
            The time at which the inserted object expires and is removed from the cache. To
            avoid possible issues with local time such as changes from standard time to
            daylight saving time, use System.DateTime.UtcNow rather than System.DateTime.Now
            for this parameter value. If you are using absolute expiration, the
            slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Linq.CacheSettings.CacheEmptyResult">
            <summary>
            Used to determine if an empty result should be cached.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Linq.CacheSettings.CacheDependency">
            <summary>
            Used for setting System.Web.Caching.Cache.Insert parameter dependencies:
            The file or cache key dependencies for the item. When any dependency changes, the
            object becomes invalid and is removed from the cache. If there are no
            dependencies, this parameter contains null.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Linq.CacheSettings.CacheItemRemovedCallback">
            <summary>
            Used for setting System.Web.Caching.Cache.Insert parameter onRemoveCallback:
            A delegate that, if provided, will be called when an object is removed from the
            cache. You can use this to notify applications when their objects are deleted from
            the cache.
            </summary>
        </member>
        <member name="M:System.Data.Linq.DataContextExtensions.ExecuteQuery(System.Data.Linq.DataContext,System.Linq.IQueryable[])">
            <summary>
            Batches together multiple <see cref="T:System.Linq.IQueryable"/> queries into a single <see cref="T:System.Data.Common.DbCommand"/> and returns all data in
            a single round trip to the database.
            </summary>
            <param name="context">The <see cref="T:System.Data.Linq.DataContext"/> to execute the batch select against.</param>
            <param name="queries">Represents a collections of SELECT queries to execute.</param>
            <returns>Returns an <see cref="T:System.Data.Linq.IMultipleResults"/> object containing all results.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when context or queries are null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when context.Connection is invalid.</exception>
        </member>
        <member name="M:System.Data.Linq.DataContextExtensions.CombineCommands(System.Collections.Generic.IEnumerable{System.Data.Common.DbCommand})">
            <summary>
            Combines multiple SELECT commands into a single <see cref="T:System.Data.SqlClient.SqlCommand"/> so that all statements can be executed in a 
            single round trip to the database and return multiple result sets.
            </summary>
            <param name="selectCommands">Represents a collection of commands to be batched together.</param>
            <returns>Returns a single <see cref="T:System.Data.SqlClient.SqlCommand"/> that executes all SELECT statements at once.</returns>
        </member>
        <member name="M:System.Data.Linq.DataContextExtensions.CloneParameter(System.Data.Common.DbParameter)">
            <summary>
            Returns a clone (via copying all properties) of an existing <see cref="T:System.Data.Common.DbParameter"/>.
            </summary>
            <param name="src">The <see cref="T:System.Data.Common.DbParameter"/> to clone.</param>
            <returns>Returns a clone (via copying all properties) of an existing <see cref="T:System.Data.Common.DbParameter"/>.</returns>
        </member>
        <member name="T:CodeSmith.Data.Linq.ExpressionVisitor`1">
            <summary>
            This class visits every Parameter expression in an expression tree and calls a delegate
            to optionally replace the parameter.  This is useful where two expression trees need to
            be merged (and they don't share the same ParameterExpressions).
            </summary>
        </member>
        <member name="T:CodeSmith.Data.Linq.ExpressionVisitor">
            <summary>
            Expression visitor
            (from http://blogs.msdn.com/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx)
            </summary>
        </member>
        <member name="T:CodeSmith.Data.Linq.IPagedList">
            <summary>
            Interface defining a paged list.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.HasPreviousPage">
            <summary>
            Gets a value indicating whether this instance has previous page.
            </summary>
            <value>
            	<c>true</c> if this instance has previous page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.HasNextPage">
            <summary>
            Gets a value indicating whether this instance has next page.
            </summary>
            <value>
            	<c>true</c> if this instance has next page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.IsFirstPage">
            <summary>
            Gets a value indicating whether this instance is first page.
            </summary>
            <value>
            	<c>true</c> if this instance is first page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.IsLastPage">
            <summary>
            Gets a value indicating whether this instance is last page.
            </summary>
            <value>
            	<c>true</c> if this instance is last page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.PageCount">
            <summary>
            Gets the total page count.
            </summary>
            <value>The total page count.</value>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.PageIndex">
            <summary>
            Gets the zero based index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.PageNumber">
            <summary>
            Gets the page number. Page number is PageIndex + 1.
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:CodeSmith.Data.Linq.IPagedList.TotalItemCount">
            <summary>
            Gets the total item count.
            </summary>
            <value>The total item count.</value>
        </member>
        <member name="T:CodeSmith.Data.Linq.IPageList`1">
            <summary>
            Interface defining a paged list.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="T:CodeSmith.Data.Linq.PagedList`1">
            <summary>
            A paged collection.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <remarks>
            When this collection is created, IQueryable Skip and Take is
            caculated and called on the source list. Also, if total count 
            is not specified, IQueryable Count is called.
            </remarks>
        </member>
        <member name="M:CodeSmith.Data.Linq.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Linq.PagedList`1"/> class.
            </summary>
            <param name="source">The source list of items.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Linq.PagedList`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="totalCount">The total count.</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Linq.PagedList`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Linq.PagedList`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="totalCount">The total count.</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.PagedList`1.Initialize(System.Linq.IQueryable{`0},System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="totalCount">The total count.</param>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.HasPreviousPage">
            <summary>
            Gets a value indicating whether this instance has previous page.
            </summary>
            <value>
            	<c>true</c> if this instance has previous page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.HasNextPage">
            <summary>
            Gets a value indicating whether this instance has next page.
            </summary>
            <value>
            	<c>true</c> if this instance has next page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.IsFirstPage">
            <summary>
            Gets a value indicating whether this instance is first page.
            </summary>
            <value>
            	<c>true</c> if this instance is first page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.IsLastPage">
            <summary>
            Gets a value indicating whether this instance is last page.
            </summary>
            <value>
            	<c>true</c> if this instance is last page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.PageCount">
            <summary>
            Gets the total page count.
            </summary>
            <value>The total page count.</value>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.PageIndex">
            <summary>
            Gets the zero based index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.PageNumber">
            <summary>
            Gets the page number. Page number is PageIndex + 1.
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:CodeSmith.Data.Linq.PagedList`1.TotalItemCount">
            <summary>
            Gets the total item count.
            </summary>
            <value>The total item count.</value>
        </member>
        <member name="T:System.Linq.PagingExtensions">
            <summary>
            Paging extension methods.
            </summary>
        </member>
        <member name="M:System.Linq.PagingExtensions.Paginate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Paginates the specified query.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="query">The query.</param>
            <param name="page">The zero based index of the page.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> with Skip and Take set.</returns>
        </member>
        <member name="M:System.Linq.PagingExtensions.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Converts the source to a <see cref="T:CodeSmith.Data.Linq.PagedList`1"/>.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The <see cref="T:System.Linq.IQueryable`1"/> source.</param>
            <param name="pageIndex">The zero based index of the page.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>A new instance of <see cref="T:CodeSmith.Data.Linq.PagedList`1"/>.</returns>
        </member>
        <member name="M:System.Linq.PagingExtensions.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the source to a <see cref="T:CodeSmith.Data.Linq.PagedList`1"/>.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The <see cref="T:System.Linq.IQueryable`1"/> source.</param>
            <param name="pageIndex">The zero based index of the page.</param>
            <param name="pageSize">The size of the page.</param>
            <param name="totalCount">The total count.</param>
            <returns>A new instance of <see cref="T:CodeSmith.Data.Linq.PagedList`1"/>.</returns>
        </member>
        <member name="M:System.Linq.PagingExtensions.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Converts the source to a <see cref="T:CodeSmith.Data.Linq.PagedList`1"/>.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> source.</param>
            <param name="pageIndex">The zero based index of the page.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>A new instance of <see cref="T:CodeSmith.Data.Linq.PagedList`1"/>.</returns>
        </member>
        <member name="M:System.Linq.PagingExtensions.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the source to a <see cref="T:CodeSmith.Data.Linq.PagedList`1"/>.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> source.</param>
            <param name="pageIndex">The zero based index of the page.</param>
            <param name="pageSize">The size of the page.</param>
            <param name="totalCount">The total count.</param>
            <returns>A new instance of <see cref="T:CodeSmith.Data.Linq.PagedList`1"/>.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCache``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            The cache entry has a one minute sliding expiration with normal priority.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCache``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <param name="duration">The amount of time, in seconds, that a cache entry is to remain in the output cache.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCache``1(System.Linq.IQueryable{``0},System.TimeSpan)">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <param name="slidingExpiration">The interval between the time that the cached object was last accessed and the time at which that object expires.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCache``1(System.Linq.IQueryable{``0},System.DateTime)">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCache``1(System.Linq.IQueryable{``0},CodeSmith.Data.Linq.CacheSettings)">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <param name="settings">Cache settings object.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCacheFirstOrDefault``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            The cache entry has a one minute sliding expiration with normal priority.
            Queries, caches, and returns only the first entity.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <returns>The first or default result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCacheFirstOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            Queries, caches, and returns only the first entity.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <param name="duration">The amount of time, in seconds, that a cache entry is to remain in the output cache.</param>
            <returns>The first or default result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCacheFirstOrDefault``1(System.Linq.IQueryable{``0},System.TimeSpan)">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            Queries, caches, and returns only the first entity.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <param name="slidingExpiration">The interval between the time that the cached object was last accessed and the time at which that object expires.</param>
            <returns>The first or default result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCacheFirstOrDefault``1(System.Linq.IQueryable{``0},System.DateTime)">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            Queries, caches, and returns only the first entity.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache.</param>
            <returns>The first or default result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.FromCacheFirstOrDefault``1(System.Linq.IQueryable{``0},CodeSmith.Data.Linq.CacheSettings)">
            <summary>
            Returns the result of the query; if possible from the cache, otherwise
            the query is materialized and the result cached before being returned.
            Queries, caches, and returns only the first entity.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be materialized.</param>
            <param name="settings">Cache settings object.</param>
            <returns>The first or default result of the query.</returns>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.ClearCache``1(System.Linq.IQueryable{``0})">
            <summary>
            Clears the cache of a given query.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to be cleared.</param>
        </member>
        <member name="M:CodeSmith.Data.Linq.QueryResultCache.GetKey``1(System.Linq.IQueryable{``0})">
            <summary>
            Gets a unique Md5 key for a query.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
            <param name="query">The query to build a key from.</param>
            <returns>A Md5 hash unique to the query.</returns>
        </member>
        <member name="T:CodeSmith.Data.Linq.Evaluator">
            <summary>
            Enables the partial evalutation of queries.
            From http://msdn.microsoft.com/en-us/library/bb546158.aspx
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CodeSmith.Data.Linq.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:CodeSmith.Data.Linq.Evaluator.PartialEval(System.Linq.Expressions.Expression)" -->
        <member name="T:CodeSmith.Data.Linq.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CodeSmith.Data.Linq.Evaluator.SubtreeEvaluator" -->
        <member name="M:System.Data.Linq.TableExtensions.Delete``1(System.Data.Linq.Table{``0},System.Linq.IQueryable{``0})">
            <summary>
            Immediately deletes all entities from the collection with a single delete command.
            </summary>
            <typeparam name="TEntity">Represents the object type for rows contained in <paramref name="table"/>.</typeparam>
            <param name="table">Represents a table for a particular type in the underlying database containing rows to be deleted.</param>
            <param name="entities">Represents the collection of items which are to be removed from <paramref name="table"/>.</param>
            <returns>The number of rows deleted from the database.</returns>
            <remarks>
            <para>Similar to stored procedures, and opposite from DeleteAllOnSubmit, rows provided in <paramref name="entities"/> will be deleted immediately with no need to call <see cref="M:System.Data.Linq.DataContext.SubmitChanges"/>.</para>
            <para>Additionally, to improve performance, instead of creating a delete command for each item in <paramref name="entities"/>, a single delete command is created.</para>
            </remarks>
        </member>
        <member name="M:System.Data.Linq.TableExtensions.Delete``1(System.Data.Linq.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Immediately deletes all entities from the collection with a single delete command.
            </summary>
            <typeparam name="TEntity">Represents the object type for rows contained in <paramref name="table"/>.</typeparam>
            <param name="table">Represents a table for a particular type in the underlying database containing rows to be deleted.</param>
            <param name="filter">Represents a filter of items to be deleted in <paramref name="table"/>.</param>
            <returns>The number of rows deleted from the database.</returns>
        </member>
        <member name="M:System.Data.Linq.TableExtensions.Update``1(System.Data.Linq.Table{``0},System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Immediately updates all entities in the collection with a single update command based on a <typeparamref name="TEntity"/> created from a Lambda expression.
            </summary>
            <typeparam name="TEntity">Represents the object type for rows contained in <paramref name="table"/>.</typeparam>
            <param name="table">Represents a table for a particular type in the underlying database containing rows to be updated.</param>
            <param name="entities">Represents the collection of items which are to be updated in <paramref name="table"/>.</param>
            <param name="evaluator">A Lambda expression returning a <typeparamref name="TEntity"/> that defines the update assignments to be performed on each item in <paramref name="entities"/>.</param>
            <returns>The number of rows updated in the database.</returns>
            <remarks>
            <para>Similar to stored procedures, and opposite from InsertAllOnSubmit, rows provided in <paramref name="entities"/> will be updated immediately with no need to call <see cref="M:System.Data.Linq.DataContext.SubmitChanges"/>.</para>
            <para>Additionally, to improve performance, instead of creating an update command for each item in <paramref name="entities"/>, a single update command is created.</para>
            </remarks>
        </member>
        <member name="M:System.Data.Linq.TableExtensions.Update``1(System.Data.Linq.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Immediately updates all entities in the collection with a single update command based on a <typeparamref name="TEntity"/> created from a Lambda expression.
            </summary>
            <typeparam name="TEntity">Represents the object type for rows contained in <paramref name="table"/>.</typeparam>
            <param name="table">Represents a table for a particular type in the underlying database containing rows to be updated.</param>
            <param name="filter">Represents a filter of items to be updated in <paramref name="table"/>.</param>
            <param name="evaluator">A Lambda expression returning a <typeparamref name="TEntity"/> that defines the update assignments to be performed on each item in <paramref name="filter"/>.</param>
            <returns>The number of rows updated in the database.</returns>
        </member>
        <member name="T:CodeSmith.Data.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.DefaultValidationErrorMessage">
            <summary>
              Looks up a localized string similar to Validation Error.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.InvalidValidatorMessage">
            <summary>
              Looks up a localized string similar to {0} cannot be applied to a(n) {1}..
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.ValidatorCompareMessage">
            <summary>
              Looks up a localized string similar to {0} must be {1} to {2}..
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.ValidatorDefaultMessage">
            <summary>
              Looks up a localized string similar to {0} is not valid..
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.ValidatorLengthMessage">
            <summary>
              Looks up a localized string similar to {0} must be of length {1} - {2}..
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.ValidatorNotEmptyMessage">
            <summary>
              Looks up a localized string similar to {0} cannot be empty..
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.ValidatorRangeMessage">
            <summary>
              Looks up a localized string similar to {0} must fall between {1} and {2}..
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.ValidatorRegexMessage">
            <summary>
              Looks up a localized string similar to {0} must match the expression {1}..
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Properties.Resources.ValidatorRequiredMessage">
            <summary>
              Looks up a localized string similar to {0} is a required field..
            </summary>
        </member>
        <member name="T:CodeSmith.Data.Rules.Assign.IpAddressRule">
            <summary>
            Assigns the current users IP address when the entity is committed from the <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new IpAddressRule("IpAddress", EntityState.Dirty));
            }
            ]]></code>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [IpAddress(EntityState.Dirty)]
                public string IpAddress { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:CodeSmith.Data.Attributes.IpAddressAttribute"/>
            <remarks>
            If the <see cref="T:System.Web.HttpContext"/>.Current is not null, then the 
            <see cref="T:System.Web.HttpContext"/>.Current.Request.UserHostAddress is used as the IP address.
            Otherwise, the computers current IP address is used.
            </remarks>
        </member>
        <member name="T:CodeSmith.Data.Rules.PropertyRuleBase">
            <summary>
            A base class for property rules.
            </summary>
        </member>
        <member name="T:CodeSmith.Data.Rules.IRule">
            <summary>
            Interface defining validation rules.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Rules.IRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified rule using the <see cref="T:CodeSmith.Data.Rules.RuleContext"/>.
            </summary>
            <param name="context">The current <see cref="T:CodeSmith.Data.Rules.RuleContext"/>.</param>
        </member>
        <member name="P:CodeSmith.Data.Rules.IRule.Priority">
            <summary>
            Gets the rule priority. The lowest number runs first.
            </summary>
            <value>The rule priority.</value>        
        </member>
        <member name="P:CodeSmith.Data.Rules.IRule.TargetProperty">
            <summary>
            Gets the target property to apply rule to.
            </summary>
            <value>The target property.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.IRule.ErrorMessage">
            <summary>
            Gets the error message when rule fails.
            </summary>
            <value>The error message when rule fails.</value>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.PropertyRuleBase"/> class.
            </summary>
            <param name="property">The target property to apply rule to.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.PropertyRuleBase"/> class.
            </summary>
            <param name="property">The target property to apply rule to.</param>
            <param name="message">The error message when rule fails.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.#ctor(System.String,CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.PropertyRuleBase"/> class.
            </summary>
            <param name="property">The target property to apply rule to.</param>
            <param name="applyState">The state of the entity in which to apply rule.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.#ctor(System.String,System.String,CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.PropertyRuleBase"/> class.
            </summary>
            <param name="property">The target property.</param>
            <param name="message">The error message when rule fails.</param>
            <param name="applyState">The state of the entity in which to apply rule.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified rule using the <see cref="T:CodeSmith.Data.Rules.RuleContext"/>.
            </summary>
            <param name="context">The current <see cref="T:CodeSmith.Data.Rules.RuleContext"/>.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.CanRun(CodeSmith.Data.TrackedObject)">
            <summary>
            Determines whether this instance can run the specified rule based on the <see cref="T:CodeSmith.Data.TrackedObject"/>.
            </summary>
            <param name="trackedObject">The tracked object.</param>
            <returns>
            	<c>true</c> if this instance can run the rule; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.GetPropertyInfo(System.Object)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> for the <see cref="P:CodeSmith.Data.Rules.PropertyRuleBase.TargetProperty"/>.
            </summary>
            <param name="target">The target object.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.GetPropertyValue(System.Object)">
            <summary>
            Gets the property value for the <see cref="P:CodeSmith.Data.Rules.PropertyRuleBase.TargetProperty"/>.
            </summary>
            <param name="target">The target object.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.GetPropertyValue``1(System.Object)">
            <summary>
            Gets the property value for the <see cref="P:CodeSmith.Data.Rules.PropertyRuleBase.TargetProperty"/>.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="target">The target object.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.SetPropertyValue(System.Object,System.Object)">
            <summary>
            Sets the property value for the <see cref="P:CodeSmith.Data.Rules.PropertyRuleBase.TargetProperty"/>.
            </summary>
            <param name="target">The target object.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.PropertyRuleBase.IsPropertyValueModified(System.Object,System.Object)">
            <summary>
            Determines whether the property value is modified.
            </summary>
            <param name="original">The original entity.</param>
            <param name="current">The current entity.</param>
            <returns>
            	<c>true</c> if the property value is modified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeSmith.Data.Rules.PropertyRuleBase.ApplyState">
            <summary>
            Gets the state of the entity in which to apply rule.
            </summary>
            <value>The state of the apply.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.PropertyRuleBase.TargetProperty">
            <summary>
            Gets the target property to apply rule to.
            </summary>
            <value>The target property.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.PropertyRuleBase.ErrorMessage">
            <summary>
            Gets the error message when rule fails.
            </summary>
            <value>The error message when rule fails.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.PropertyRuleBase.Priority">
            <summary>
            Gets the rule priority. The lowest number runs first.
            </summary>
            <value>The rule priority.</value>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.IpAddressRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.IpAddressRule"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.IpAddressRule.#ctor(System.String,CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.IpAddressRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="assignState">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.IpAddressRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs this rule.
            </summary>
            <param name="context">The rule context.</param>
        </member>
        <member name="T:CodeSmith.Data.Rules.EntityState">
            <summary>
            The state to the tracked entity
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.EntityState.New">
            <summary>The entity is new.</summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.EntityState.Changed">
            <summary>The entity is changed.</summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.EntityState.Deleted">
            <summary>The entity is deleted.</summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.EntityState.Dirty">
            <summary>The entity is new or changed.</summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.EntityState.All">
            <summary>All the entity states.</summary>
        </member>
        <member name="T:CodeSmith.Data.Rules.Assign.GuidRule">
            <summary>
            Assigns a new Guid to a property when the entity is committed from the <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new GuidRule("UserId", EntityState.New));
            }
            ]]></code>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [Guid(EntityState.New)]
                public Guid UserId { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:CodeSmith.Data.Attributes.GuidAttribute"/>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.GuidRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.GuidRule"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.GuidRule.#ctor(System.String,CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.GuidRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="assignState">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.GuidRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs this rule.
            </summary>
            <param name="context">The rule context.</param>
        </member>
        <member name="T:CodeSmith.Data.Rules.Assign.NowRule">
            <summary>
            Assigns the current date time to the property when the entity is committed from the <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new NowRule("CreatedDate", EntityState.New));
                RuleManager.AddShared<User>(new NowRule("ModifiedDate", EntityState.Dirty));
            }
            ]]></code>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [Now(EntityState.New)]
                public DateTime CreatedDate { get; set; }
            
                [Now(EntityState.Dirty)]
                public DateTime ModifiedDate { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:CodeSmith.Data.Attributes.NowAttribute"/>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.NowRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.NowRule"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.NowRule.#ctor(System.String,CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.NowRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="assignState">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.NowRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs this rule.
            </summary>
            <param name="context">The rule context.</param>
        </member>
        <member name="T:CodeSmith.Data.Rules.Assign.UserNameRule">
            <summary>
            Assigns the current logged in username when the entity is committed from the <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new UserNameRule("CreatedBy", EntityState.New));
                RuleManager.AddShared<User>(new UserNameRule("ModifiedBy", EntityState.Dirty));
            }
            ]]></code>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [UserName(EntityState.New)]
                public string CreatedBy { get; set; }
            
                [UserName(EntityState.Dirty)]
                public string ModifiedBy { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:CodeSmith.Data.Attributes.NowAttribute"/>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.UserNameRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.UserNameRule"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.UserNameRule.#ctor(System.String,CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.UserNameRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="assignState">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.UserNameRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs this rule.
            </summary>
            <param name="context">The rule context.</param>
        </member>
        <member name="T:CodeSmith.Data.Rules.Assign.DefaultValueRule`1">
            <summary>
            Assign a default value to a property when the entity is committed from the <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new DefaultValueRule<int>("Score", 100, EntityState.New));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.DefaultValueRule`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.DefaultValueRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.DefaultValueRule`1.#ctor(System.String,`0,CodeSmith.Data.Rules.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Assign.DefaultValueRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="defaultValue">The default value.</param>
            <param name="assignState">State of the object that can be assigned.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Assign.DefaultValueRule`1.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs this rule.
            </summary>
            <param name="context">The rule context.</param>
        </member>
        <member name="P:CodeSmith.Data.Rules.Assign.DefaultValueRule`1.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.BrokenRule">
            <summary>
            A class indicating a broken rule.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRule.#ctor(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.BrokenRule"/> class.
            </summary>
            <param name="context">The rule context.</param>
        </member>
        <member name="P:CodeSmith.Data.Rules.BrokenRule.Message">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.BrokenRule.Context">
            <summary>
            Gets or sets the rule context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.BrokenRuleCollection">
            <summary>
            A collection of broken rules.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleCollection.Filter(System.Type)">
            <summary>
            Filters the <see cref="T:CodeSmith.Data.Rules.BrokenRuleCollection"/> to the specified type.
            </summary>
            <param name="type">The type to filter.</param>
            <returns>Enumerator of <see cref="T:CodeSmith.Data.Rules.BrokenRule"/> for the type.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleCollection.Filter``1">
            <summary>
            Filters the <see cref="T:CodeSmith.Data.Rules.BrokenRuleCollection"/> to the specified type.
            </summary>
            <typeparam name="T">The type to filter.</typeparam>
            <returns>Enumerator of <see cref="T:CodeSmith.Data.Rules.BrokenRule"/> for the type.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleCollection.Filter(System.Type,System.String)">
            <summary>
            Filters the <see cref="T:CodeSmith.Data.Rules.BrokenRuleCollection"/> to the specified type and property.
            </summary>
            <param name="property">The property to filter.</param>
            <param name="type">The type to filter.</param>
            <returns>Enumerator of <see cref="T:CodeSmith.Data.Rules.BrokenRule"/> for the type.</returns>        
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleCollection.Filter``1(System.String)">
            <summary>
            Filters the <see cref="T:CodeSmith.Data.Rules.BrokenRuleCollection"/> to the specified type and property.
            </summary>
            <param name="property">The property to filter.</param>
            <typeparam name="T">The type to filter.</typeparam>
            <returns>Enumerator of <see cref="T:CodeSmith.Data.Rules.BrokenRule"/> for the type.</returns>        
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleCollection.GroupByEntity">
            <summary>
            Returns a list of broken rules grouped by entity instance.
            </summary>
            <returns>Dictionary of entities and their list of broken rules.</returns>        
        </member>
        <member name="T:CodeSmith.Data.Rules.BrokenRuleException">
            <summary>
            An exception class for broken rules.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleException.#ctor(CodeSmith.Data.Rules.BrokenRuleCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.BrokenRuleException"/> class.
            </summary>
            <param name="brokenRules">The broken rules.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.BrokenRuleException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleException.op_Implicit(CodeSmith.Data.Rules.BrokenRuleException)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:CodeSmith.Data.Rules.BrokenRuleException"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="ex">The ex.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:CodeSmith.Data.Rules.BrokenRuleException.ToString(System.Boolean)">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <param name="includeState">Boolean</param>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="P:CodeSmith.Data.Rules.BrokenRuleException.BrokenRules">
            <summary>
            Gets the broken rules.
            </summary>
            <value>The broken rules.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.BrokenRuleException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:CodeSmith.Data.Rules.RuleCollection">
            <summary>
            A collection of rules.
            </summary>
        </member>
        <member name="T:CodeSmith.Data.Rules.RuleContext">
            <summary>
            The context for a rule.
            </summary>
            <seealso cref="T:CodeSmith.Data.Rules.IRule"/>   
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleContext.#ctor(CodeSmith.Data.TrackedObject,CodeSmith.Data.Rules.IRule)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.RuleContext"/> class.
            </summary>
            <param name="trackedObject">The tracked object.</param>
            <param name="rule">The rule to apply.</param>
        </member>
        <member name="P:CodeSmith.Data.Rules.RuleContext.TrackedObject">
            <summary>
            Gets or sets the tracked object.
            </summary>
            <value>The tracked object.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.RuleContext.Success">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CodeSmith.Data.Rules.RuleContext"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.RuleContext.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.RuleContext.Rule">
            <summary>
            Gets or sets the rule to run.
            </summary>
            <value>The rule to run.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.RuleManager">
            <summary>
            A class to manage rules.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.RuleManager"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.Add``1(CodeSmith.Data.Rules.IRule)">
            <summary>
            Adds the specified rule.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.AddShared``1(CodeSmith.Data.Rules.IRule)">
            <summary>
            Adds the shared global rules.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.AddShared``1">
            <summary>
            Adds rules to the rule manager from any property attributes on the specified type. 
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.GetRules``1">
            <summary>
            Gets the rules for a type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>A collection of rules.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.GetRules(System.Type)">
            <summary>
            Gets the rules for a type.
            </summary>
            <param name="type">The type of the entity.</param>
            <returns>A collection of rules.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.Run(System.Collections.Generic.IEnumerable{CodeSmith.Data.TrackedObject})">
            <summary>
            Run the rules for the specified <see cref="T:CodeSmith.Data.TrackedObject"/> list.
            </summary>
            <param name="objects">The <see cref="T:CodeSmith.Data.TrackedObject"/> to run rules on.</param>
            <returns><c>true</c> if rules ran successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.Run(CodeSmith.Data.TrackedObject)">
            <summary>
            Run the rules for the specified <see cref="T:CodeSmith.Data.TrackedObject"/>.
            </summary>
            <param name="trackedObject">The <see cref="T:CodeSmith.Data.TrackedObject"/> to run rules on.</param>
            <returns><c>true</c> if rules ran successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.RuleManager.Run(System.Data.Linq.DataContext)">
            <summary>
            Run the rules for the the changed objects in the <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <param name="dataContext">The <see cref="T:System.Data.Linq.DataContext"/> to get the <see cref="T:System.Data.Linq.ChangeSet"/> from and run rules against.</param>
            <returns><c>true</c> if rules ran successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:CodeSmith.Data.Rules.RuleManager.BrokenRules">
            <summary>
            Gets the broken rules.
            </summary>
            <value>The broken rules.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.Security.AuthorizationRuleBase">
            <summary>
            A base class for authorization rules.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Security.AuthorizationRuleBase"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Security.AuthorizationRuleBase"/> class.
            </summary>
            <param name="authorizedRoles">The authorized roles.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified rule using the RuleContext.
            </summary>
            <param name="context">The current RuleContext.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.IsAuthorized">
            <summary>
            Determines whether this instance is authorized.
            </summary>
            <returns>
            	<c>true</c> if this instance is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.GetUser">
            <summary>
            Gets the current username.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.GetPrincipal">
            <summary>
            Gets the current user principal.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.AuthorizedRoles">
            <summary>
            Gets or sets the authorized roles.
            </summary>
            <value>The authorized roles.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.ErrorMessage">
            <summary>
            Gets the error message when rule fails.
            </summary>
            <value>The error message when rule fails.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.TargetProperty">
            <summary>
            Gets the target property to apply rule to.
            </summary>
            <value>The target property.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.Security.AuthorizationRuleBase.Priority">
            <summary>
            Gets the rule priority. The lowest number runs first.
            </summary>
            <value>The rule priority.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.Security.CreateRule">
            <summary>
            A rule to determine if the current user has create permission.
            </summary>
            <example>
            <para>Add rule using the rule manager directly indication which roles have access to create the object.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new CreateRule("Administrators", "Users"));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.CreateRule.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Security.CreateRule"/> class.
            </summary>
            <param name="authorizedRoles">The authorized roles.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.CreateRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified rule using the RuleContext.
            </summary>
            <param name="context">The current RuleContext.</param>
        </member>
        <member name="T:CodeSmith.Data.Rules.Security.DeleteRule">
            <summary>
            A rule to determine if the current user has delete permission.
            </summary>
            <example>
            <para>Add rule using the rule manager directly indication which roles have access to delete the object.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new DeleteRule("Administrators"));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.DeleteRule.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Security.DeleteRule"/> class.
            </summary>
            <param name="authorizedRoles">The authorized roles.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.DeleteRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified rule using the RuleContext.
            </summary>
            <param name="context">The current RuleContext.</param>
        </member>
        <member name="T:CodeSmith.Data.Rules.Security.UpdateRule">
            <summary>
            A rule to determine if the current user has update permission.
            </summary>
            <example>
            <para>Add rule using the rule manager directly indication which roles have access to update the object.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new UpdateRule("Administrators"));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.UpdateRule.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Security.AuthorizationRuleBase"/> class.
            </summary>
            <param name="authorizedRoles">The authorized roles.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Security.UpdateRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified rule using the RuleContext.
            </summary>
            <param name="context">The current RuleContext.</param>
        </member>
        <member name="T:CodeSmith.Data.Rules.Validation.CompareRule`1">
            <summary>
            A rule to compare values.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new CompareRule<int>("Age", 21, ComparisonOperator.GreaterThanOrEqual));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CompareRule`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.CompareRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CompareRule`1.#ctor(System.String,`0,CodeSmith.Data.Rules.Validation.ComparisonOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.CompareRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CompareRule`1.#ctor(System.String,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.CompareRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CompareRule`1.#ctor(System.String,System.String,`0,CodeSmith.Data.Rules.Validation.ComparisonOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.CompareRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CompareRule`1.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CompareRule`1.CompareResult(System.Int32)">
            <summary>
            Tests the comparison result.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="P:CodeSmith.Data.Rules.Validation.CompareRule`1.ComparisonOperator">
            <summary>
            Gets or sets the comparison operator.
            </summary>
            <value>The comparison operator.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.Validation.CompareRule`1.ExpectedValue">
            <summary>
            Gets or sets the expected value.
            </summary>
            <value>The expected value.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.Validation.ComparisonOperator">
            <summary>
            The operator the Compare Validator uses.
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.Validation.ComparisonOperator.Equal">
            <summary>
            A comparison for equality.  
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.Validation.ComparisonOperator.GreaterThan">
            <summary>
            A comparison for greater than.  
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.Validation.ComparisonOperator.GreaterThanOrEqual">
            <summary>
            A comparison for greater than or equal to. 
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.Validation.ComparisonOperator.LessThan">
            <summary>
            A comparison for less than.  
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.Validation.ComparisonOperator.LessThanOrEqual">
            <summary>
            A comparison for less than or equal to.  
            </summary>
        </member>
        <member name="F:CodeSmith.Data.Rules.Validation.ComparisonOperator.NotEqual">
            <summary>
            A comparison for inequality.  
            </summary>
        </member>
        <member name="T:CodeSmith.Data.Rules.Validation.CustomRule`1">
            <summary>
            A rule that run a method to validate.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new CustomRule<string>("UserName", "UserName must be unique.", User.UniqueUserName));
                RuleManager.AddShared<User>(new CustomRule<RuleContext>("UserName", "UserName must be unique.", User.UniqueUserNameContext));
            }
            //This is called by the custom rule. The first argument is the property value.
            private static bool UniqueUserName(string username)
            {
                //check user name is unique, return true when valid.
                return true;
            }
            //This is called by the custom rule. The first argument is the RuleContext.
            private static void UniqueUserNameContext(RuleContext context)
            {
                //check user name is unique, return true when valid.
                context.Success = true;
            }
            ]]></code>
            </example>
            <remarks>
            The custom method should return true when the property is valid.
            </remarks>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CustomRule`1.#ctor(System.String,System.String,System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.CustomRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CustomRule`1.#ctor(System.String,System.String,System.Action{CodeSmith.Data.Rules.RuleContext})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.CustomRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.CustomRule`1.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:CodeSmith.Data.Rules.Validation.CustomRule`1.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.Validation.LengthRule">
            <summary>
            A rule to check the length.
            </summary>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new LengthRule("UserName", 100));
            }
            ]]></code>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [StringLength(100)]            
                public string UserName { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute"/>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.LengthRule.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.LengthRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.LengthRule.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.LengthRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.LengthRule.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.LengthRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.LengthRule.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.LengthRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.LengthRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:CodeSmith.Data.Rules.Validation.LengthRule.MaxLength">
            <summary>
            Gets or sets the max length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.Validation.LengthRule.MinLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.Validation.RangeRule`1">
            <summary>
            A rule to check if the value is between a range.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new RangeRule<int>("Age", 18, 21));
            }
            ]]></code>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [Range(18, 21)]            
                public int Age { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:System.ComponentModel.DataAnnotations.RangeAttribute"/>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RangeRule`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.RangeRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RangeRule`1.#ctor(System.String,System.String,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.RangeRule`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RangeRule`1.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:CodeSmith.Data.Rules.Validation.RangeRule`1.MaxValue">
            <summary>
            Gets or sets the max value.
            </summary>
            <value>The max value.</value>
        </member>
        <member name="P:CodeSmith.Data.Rules.Validation.RangeRule`1.MinValue">
            <summary>
            Gets or sets the min value.
            </summary>
            <value>The min value.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.Validation.RegexRule">
            <summary>
            A rule to match a regular expression.
            </summary>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new RegexRule("EmailAddress", @"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*"));
            }
            ]]></code>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [RegularExpression(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*")]
                public string EmailAddress { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute"/>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RegexRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.RegexRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RegexRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.RegexRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RegexRule.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.RegexRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RegexRule.#ctor(System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.RegexRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RegexRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:CodeSmith.Data.Rules.Validation.RegexRule.Regex">
            <summary>
            Gets or sets the regex.
            </summary>
            <value>The regex.</value>
        </member>
        <member name="T:CodeSmith.Data.Rules.Validation.RequiredRule">
            <summary>
            A rule to check that the value is not null.
            </summary>
            <example>
            <para>Add rule using the rule manager directly.</para>
            <code><![CDATA[
            static partial void AddSharedRules()
            {
                RuleManager.AddShared<User>(new RequiredRule("UserName"));
            }
            ]]></code>
            <para>Add rule using the Metadata class and attribute.</para>
            <code><![CDATA[
            private class Metadata
            {
                // fragment of the metadata class
            
                [Required]
                public string UserName { get; set; }
            }
            ]]></code>
            </example>
            <seealso cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RequiredRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.RequiredRule"/> class.
            </summary>
            <param name="property">The target property to apply rule to.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RequiredRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Rules.Validation.RequiredRule"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeSmith.Data.Rules.Validation.RequiredRule.Run(CodeSmith.Data.Rules.RuleContext)">
            <summary>
            Runs the specified context.
            </summary>
            <param name="context">The rule context.</param>
        </member>
        <member name="T:CodeSmith.Data.Serialization.ByteArrayTypeConverter">
            <summary>
            Implements a byte array <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <remarks>
            The converter supports an array of <see cref="T:System.Byte"/> and <see cref="T:System.Data.Linq.Binary"/>.
            </remarks>
        </member>
        <member name="M:CodeSmith.Data.Serialization.ByteArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Data.Serialization.ByteArrayTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Data.Serialization.ByteArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:CodeSmith.Data.Serialization.ByteArrayTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:CodeSmith.Data.Serialization.JavaScriptSerializerExtensions">
            <summary>
            JavaScriptSerializer extension methods.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Serialization.JavaScriptSerializerExtensions.RegisterByteArrayConverter(System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Registers the byte array converter.
            </summary>
            <param name="serializer">The <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/> instance.</param>
        </member>
        <member name="T:CodeSmith.Data.TrackedObject`1">
            <summary>
            A class representing a tracked object.
            </summary>
            <typeparam name="T">The type of the tracked object.</typeparam>
        </member>
        <member name="M:CodeSmith.Data.TrackedObject`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.TrackedObject`1"/> class.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.TrackedObject`1.Current">
            <summary>
            Gets the current tracked object.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:CodeSmith.Data.TrackedObject`1.IsChanged">
            <summary>
            Gets a value indicating whether this instance is changed.
            </summary>
            <value>
            	<c>true</c> if this instance is changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.TrackedObject`1.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value>
            	<c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Data.TrackedObject`1.IsNew">
            <summary>
            Gets a value indicating whether this instance is new.
            </summary>
            <value><c>true</c> if this instance is new; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Data.TrackedObject`1.Original">
            <summary>
            Gets the original tracked object.
            </summary>
            <value>The original.</value>
        </member>
        <member name="T:CodeSmith.Data.TrackedObject">
            <summary>
            A class representing a tracked object.
            </summary>
        </member>
        <member name="T:CodeSmith.Data.Serialization.ByteArrayConverter">
            <summary>
            Implements a byte array <see cref="T:System.Web.Script.Serialization.JavaScriptConverter"/> for the <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/>.
            </summary>
            <remarks>
            The <see cref="T:CodeSmith.Data.Serialization.ByteArrayConverter"/> converts the byte array to a base64 string. The converter supports 
            an array of <see cref="T:System.Byte"/> and <see cref="T:System.Data.Linq.Binary"/>.
            </remarks>
        </member>
        <member name="M:CodeSmith.Data.Serialization.ByteArrayConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            When overridden in a derived class, converts the provided dictionary into an object of the specified type.
            </summary>
            <param name="dictionary">An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance of property data stored as name/value pairs.</param>
            <param name="type">The type of the resulting object.</param>
            <param name="serializer">The <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/> instance.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:CodeSmith.Data.Serialization.ByteArrayConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            When overridden in a derived class, builds a dictionary of name/value pairs.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="serializer">The object that is responsible for the serialization.</param>
            <returns>
            An object that contains key/value pairs that represent the object’s data.
            </returns>
        </member>
        <member name="P:CodeSmith.Data.Serialization.ByteArrayConverter.SupportedTypes">
            <summary>
            When overridden in a derived class, gets a collection of the supported types.
            </summary>
            <value></value>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> that represents the types supported by the converter.</returns>
        </member>
        <member name="T:CodeSmith.Data.Web.LinqCacheDataSource">
            <summary>
            A LinqDataSource that provides caching for Linq queries.
            </summary>
        </member>
        <member name="M:CodeSmith.Data.Web.LinqCacheDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Data.Web.LinqCacheDataSource"/> class.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Web.LinqCacheDataSource.EnableCache">
            <summary>
            Gets or sets a value indicating whether query caching is enabled.
            </summary>
        </member>
        <member name="P:CodeSmith.Data.Web.LinqCacheDataSource.Duration">
            <summary>
            Gets or sets the time, in seconds, that the query is cached.
            </summary>
        </member>
    </members>
</doc>
