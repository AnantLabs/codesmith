<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" Encoding="UTF-8"
    Description="Linq to Sql Entity Manager Class." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Src="Manager.vb" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>
<%@ Import Namespace="Manager" %>

<%@ Property Category="3.Query" Name="DataManager"
    Type="Manager.DataManager" Optional="False"
    Description="Must be set by parent template" %>

<%@ Property Category="3.Query" Name="EntityManager"
    Type="Manager.EntityManager" Optional="False"
    Description="Must be set by parent template" %>

<%@ Property Category="2.Mapping" Name="Database"
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False"
    Description="Database schema instance. Must be set by parent template" %>

<%@ Property Category="3.Query" Name="MethodPrefix"
    Type="System.String" Default="By" Optional="True"
    Description="The prefix of query method names." %>

<%@ Property Category="3.Query" Name="MethodKeySuffix"
    Type="System.String" Default="Key" Optional="False"
    Description="The suffix of the primary key query method names." %>
    
<%@ Property Category="3.Query" Name="UniqueMethodPrefix" 
    Type="System.String" Default="GetBy" Optional="True" 
    Description="The prefix of query method names." %>

<%@ Map Name="VBKeywordEscape"
    Src="VBKeywordEscape.csmap" Reverse="False"
    Description="Mapping to escape VB keywords" %>

<%@ Map Name="VBAlias"
    Src="System-VBAlias.csmap" Reverse="False"
    Description="Convert system data types to VB alias" %>

'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
<%
Dim safeName as String = Database.EntityNamespace + "." + EntityManager.EntityName
%>

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace <%= Database.ContextNamespace %>
    ''' <summary>
    ''' The query extension class for <%= EntityManager.EntityName %>.
    ''' </summary>
    Public Module <%= EntityManager.EntityName %>Extensions
<% For Each method As ManagerMethod In EntityManager.Methods %>
<% If (method.IsKey) Then %>
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function <%= UniqueMethodPrefix %><%= MethodKeySuffix %>(ByVal queryable As IQueryable(Of <%= safeName %>), <%= GetParameters(method) %>) As <%= safeName %>

<% If (method.Columns.Count < 4) Then %>
            Dim entity As System.Data.Linq.Table(Of <%= safeName %>) = CType(queryable, Table(Of <%= safeName %>))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.<%= UniqueMethodPrefix %><%= MethodKeySuffix %>.Invoke(DirectCast(entity.Context, <%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>), <%= GetParametersNames(method) %>)
            End If
<% End If '' column count%>

            Return queryable.FirstOrDefault(<%= GetLamba(method, 5) %>)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of <%= safeName %>), <%= GetParameters(method) %>) As Integer
            Return table.Delete(<%= GetLamba(method, 5) %>)
        End Function
<% Else If (method.IsUnique) Then
    uniqueMethods.Add(method.NameSuffix )%>

        ''' <summary>
        ''' Gets an instance by using a unique index.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function <%= UniqueMethodPrefix %><%= method.NameSuffix %>(ByVal queryable As IQueryable(Of <%= safeName %>), <%= GetParameters(method) %>) As <%= safeName %>

<% If (method.Columns.Count < 4) Then %>
            Dim entity As Table(Of <%= safeName %>) = CType(queryable, Table(Of <%= safeName %>))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.<%= UniqueMethodPrefix %><%= method.NameSuffix %>.Invoke(DirectCast(entity.Context,<%= Database.ContextNamespace %>.<%= DataManager.DataContextName %>), <%= GetParametersNames(method) %>)
            End If
<% End If ' column count%>

            Return queryable.FirstOrDefault(<%= GetLamba(method, 5) %>)
        End Function
<% End If ' If is key%>
<% Next ' For Each method%>
<% For Each c As Column In Database.GetTypeByName(EntityManager.EntityName).Columns
    Dim paramName as string =  GetParamName(c.Member)
    paramName = CleanParamName(paramName)
    
    If Not c.IsVersion.Value AndAlso c.Type <> "System.Data.Linq.Binary" Then
     %>

        ''' <summary>
        ''' Gets a query for <see cref="<%= safeName %>"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="<%= paramName %>"><%= c.Member %> to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function <%= MethodPrefix %><%= c.Member %>(queryable As IQueryable(Of <%= safeName %>), <%= paramName %> As <%= GetColumnType(c) %>) As IQueryable(Of <%= safeName %>)
<% If (c.CanBeNull.HasValue AndAlso c.CanBeNull.Value) Then %>
            Return queryable.Where(Function(<%= GetAlias() %>) Object.Equals(<%= GetAlias() %>.<%= c.Member %>, <%= paramName %>))
<% Else %>
            Return queryable.Where(Function(<%= GetAlias() %>)<%= GetAlias() %>.<%= c.Member %> = <%= paramName %>)
<% End If %>
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="<%= safeName %>"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="<%= paramName %>"><%= c.Member %> to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function <%= MethodPrefix %><%= c.Member %>(queryable As IQueryable(Of <%= safeName %>), <%= paramName %> As <%= GetColumnType(c) %>, ParamArray additionalValues As <%= GetColumnType(c) %>()) As IQueryable(Of <%= safeName %>)
            Dim <%= c.Member %>List = New List(Of <%= GetColumnType(c) %>)()
            <%= c.Member %>List.Add(<%= paramName %>)
        
            If additionalValues IsNot Nothing Then
                <%= c.Member %>List.AddRange(additionalValues)
<% If (c.CanBeNull.HasValue AndAlso c.CanBeNull.Value) Then %>
            Else
                <%= c.Member %>List.Add(Nothing)
<% End If %>
            End If
        
            If <%= c.Member %>List.Count = 1 Then
                Return queryable.<%= MethodPrefix %><%= c.Member %>(<%= c.Member %>List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of <%= safeName %>, Boolean)("<%= c.Member %>", <%= c.Member %>List)
            Return queryable.Where(expression)
        End Function
<% End If ' if is  not key
 Next ' foreach method%>

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query

<% For Each method As ManagerMethod In EntityManager.Methods %>
<% If method.Columns.Count < 4 Then %>
<% If (method.IsKey) Then %>

            Friend Shared ReadOnly <%= UniqueMethodPrefix %><%= MethodKeySuffix %> As Func(Of <%= DataManager.DataContextName %>, <%= GetParametersTypes(method) %>, <%= safeName %>) = _
                CompiledQuery.Compile( _
                    Function(db As <%= DataManager.DataContextName %> , <%= GetParameters(method) %>) _
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% Else If method.IsUnique Then %>

            Friend Shared ReadOnly <%= UniqueMethodPrefix %><%= method.NameSuffix %> As Func(Of <%= DataManager.DataContextName %>, <%= GetParametersTypes(method) %>, <%= safeName %>) = _
                CompiledQuery.Compile( _
                    Function(db As <%= DataManager.DataContextName %> , <%= GetParameters(method) %>) _
                        db.<%= EntityManager.PropertyName %>.FirstOrDefault(<%= GetLamba(method, 7) %>))
<% End If ' if is key%>
<% End If ' column count%>
<% Next ' foreach method%>

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

<script runat="template">

Dim uniqueMethods As List(Of String) = New List(Of String)()

Public Function GetAlias() As String
    Return EntityManager.EntityName.Substring(0, 1).ToLowerInvariant()
End Function

Public Function CleanParamName(ByVal name As String) As String
    If name <> GetAlias() Then
        Return name
    End If
    Return "my" & StringUtil.ToPascalCase(name)
End Function

Public Function GetParameters(ByVal method As ManagerMethod) As String
    Dim args As New StringBuilder()
    For Each column As Column In method.Columns
        If args.Length > 0 Then
            args.Append(", ")
        End If

        Dim paramType As String = GetColumnType(column)
        Dim paramName As String = GetParamName(column.Member)
        paramName = CleanParamName(paramName)
        
        args.AppendFormat("ByVal {1} As {0}", paramType, paramName)
    Next

    Return args.ToString()
End Function

Public Function GetParametersNames(ByVal method As ManagerMethod) As String
  Dim args As New StringBuilder()
  For Each column As Column In method.Columns
    If args.Length > 0 Then
      args.Append(", ")
    End If

    Dim paramName As String = GetParamName(column.Member)
    paramName = CleanParamName(paramName)
    args.Append(paramName)
  Next

  Return args.ToString()
End Function

Public Function GetParametersTypes(ByVal method As ManagerMethod) As String
  Dim args As New StringBuilder()
  For Each column As Column In method.Columns
    If args.Length > 0 Then
      args.Append(", ")
    End If

    Dim paramType As String = GetColumnType(column)
    args.Append(paramType)
  Next

  Return args.ToString()
End Function

Public Function GetLamba(ByVal method As ManagerMethod, ByVal tabCount As Integer) As String
  Dim lamba As New StringBuilder()

  For Each column As Column In method.Columns
    Dim paramName As String = GetParamName(column.Member)
    paramName = CleanParamName(paramName)

    If lamba.Length = 0 Then
      lamba.AppendFormat("Function({0})", GetAlias())
    Else
      lamba.Append(" _" & Chr(13) & "" & Chr(10) & "")
      lamba.Append(Chr(9), tabCount)
      lamba.Append("AndAlso ")
    End If

    If column.CanBeNull.HasValue AndAlso column.CanBeNull.Value Then
        lamba.AppendFormat("Object.Equals({0}.{1}, {2})", GetAlias(), column.Member, paramName)
    Else
        lamba.AppendFormat("{0}.{1} = {2}", GetAlias(), column.Member, paramName)
    End If

  Next

  Return lamba.ToString()
End Function

Public Function GetParamName(ByVal name as String) As String
    Dim paramName As String = CommonUtility.GetParameterName(name)
    If String.IsNullOrEmpty(MethodPrefix) Then
        paramName = "my" + name
    End If
    paramName = VBKeywordEscape(paramName)
    Return paramName
End Function

Private Shared ReadOnly _sizeRegex As New Regex("(<Size>\d+)", RegexOptions.Compiled)

Public Function GetSize(ByVal s As String) As Integer
  Dim size As Integer = 0

  Dim m As Match = _sizeRegex.Match(s)
  If Not m.Success Then
    Return size
  End If

  Dim temp As String = m.Groups("Size").Value
  Integer.TryParse(temp, size)
  Return size
End Function

Public Function GetColumnType(ByVal column As Column) As String
    Dim dataType As String = column.Type
    
    If column.CanBeNull.HasValue AndAlso column.CanBeNull.Value = True AndAlso CommonUtility.IsNullableType(dataType) Then
        dataType = String.Format("{0}?", VBAlias(dataType))
    Else
        dataType = VBAlias(dataType)
    End If
    
    Return dataType
End Function


</script>
