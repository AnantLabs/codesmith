 <%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the ORMapper" 
	Debug="true" %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Src="CommonUtility.cs" %>

<%@ Register Name="MappingCommon" Template="mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="class.common.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpProperty" Template="cs.property.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<script runat="template">
	
	private System.Collections.Specialized.NameValueCollection  primaryKeys = new System.Collections.Specialized.NameValueCollection();
	private StringBuilder properties;
	private StringBuilder getHelper;
	private StringBuilder setHelper;
	
	private string _className = "";
	
	[Browsable(false)]
	public string ClassName {
        get { return _className;}
    }

	public string GetPrimaryKeyArguments()
	{
		StringBuilder sb = new StringBuilder();
		for(int x = 0; x < primaryKeys.Count; x++)
		{
			string property = primaryKeys.Keys[x];
			string dataType = primaryKeys[x];	
			string paramName = StringUtil.ToCamelCase(property);
			paramName = CommonUtility.CreateEscapedIdentifier(paramName);
			
			sb.AppendFormat("{0} {1}", dataType, paramName);
			if (x < primaryKeys.Count-1)
			{
				sb.Append(", ");
			}
		}
		
		return sb.ToString();
	}
	
	public string GetPrimaryKeyWhere(string helperName, string whereName)
	{
		StringBuilder code = new StringBuilder();
		for(int x = 0; x < primaryKeys.Count; x++)
		{
			string property = primaryKeys.Keys[x];
			string parameter = StringUtil.ToCamelCase(property);
			parameter = CommonUtility.CreateEscapedIdentifier(parameter);
			string dataType = primaryKeys[x];			
			
			if (x > 0)
			{
				code.Append('\t', 3);
				code.Append(whereName);
				code.Append(" += ");
			}
			
			code.Append(helperName);
			code.Append(".GetExpression(\"");
			code.Append(ClassName);
			code.Append(".");
			code.Append(property);
			code.Append("\", ");
			code.Append(parameter);
			code.Append(");");			
			code.Append("\r\n");
			
			if (x < primaryKeys.Count-1)
			{
				code.Append('\t', 3);
				code.Append(whereName);
				code.Append(" += ");
				code.Append("\" and \";");
				code.Append("\r\n");
			}
		}
		
		return code.ToString();
	}
	
	public bool IsPrimaryKey(string name)
	{
		ArrayList keys = new ArrayList(this.MappingEntity.keyMember.Split(new Char[] {',', ' '}));
		return keys.Contains(name);
	}
	
	public void Generate()
	{
		_className = CommonUtility.GetClassName(this.MappingEntity.type);
		CSharpProperty propertyTemplate = new CSharpProperty();
		
		primaryKeys = new System.Collections.Specialized.NameValueCollection ();
		properties = new StringBuilder();
		getHelper = new StringBuilder();
		setHelper = new StringBuilder();
		
		foreach(attribute at in this.MappingEntity.attributes)
		{
			string summary = string.Format("Database mapping to column {0}.{1}", this.MappingEntity.table, at.field);
			string propertyName = at.alias;
			string propertyType = CommonUtility.GetAliasVariableType(at.type);
			string memberName = at.member;
			string memberType = propertyType;
			string memberValue = "";
			string propertyText = "";
			string attributeText = "";
			
			bool isReadonly = (at.persistType == attributePersistType.ReadOnly ||  at.persistType == attributePersistType.Concurrent);
			bool isIdentity = (this.MappingEntity.keyType == entityKeyType.Auto);
			
			if (at.nullValue != null && at.nullable)
			{
				memberValue = CommonUtility.GetNullDefault(at.type, at.nullValue);
			}
			else if (at.nullValue == null && at.nullable && CommonUtility.IsNullableType(at.type))
			{
				propertyType = string.Format("Nullable<{0}>", propertyType);
				memberType = propertyType;
			}
			
			if (IsPrimaryKey(memberName))
			{
				primaryKeys.Add(propertyName, propertyType); // save primary key type
				attributeText = string.Format("[DataObjectField(true, {0})]", isIdentity.ToString().ToLower());
			}
						
			propertyTemplate.MemberName = memberName;
			propertyTemplate.MemberType = memberType;
			propertyTemplate.MemberValue = memberValue;
			propertyTemplate.PropertyName = propertyName;
			propertyTemplate.PropertyType = propertyType;
			propertyTemplate.Readonly = isReadonly;
			propertyTemplate.Summary = summary;
			propertyTemplate.PropertyGet = propertyText;
			propertyTemplate.AttributeText = attributeText;
			propertyTemplate.RaisePropertyChange = (!this.MappingEntity.readOnly);
			
			properties.Append(propertyTemplate.RenderToString());
			
			//IObjectHelper get Indexer case statement
			getHelper.AppendFormat("\t\t\t\t\tcase \"{0}\": return {0};\r\n", memberName);
			//IObjectHelper set Indexer case statement
			setHelper.AppendFormat("\t\t\t\t\tcase \"{0}\": {0} = ({1})value; break;\r\n", memberName, memberType);
		}
		
		if (this.MappingEntity.lookups != null)
		{
			foreach(lookup lp in this.MappingEntity.lookups)
			{
					string summary = string.Format("Database lookup mapping to column {0}.{1}", this.MappingEntity.table, lp.foreignKey);
					string propertyName = lp.alias;
					string propertyType = CommonUtility.GetAliasVariableType(lp.type);
					string memberName = lp.member;
					string memberType = propertyType;
					string memberValue = "";
					string propertyText = "";
					string attributeText = "";
					
					if (lp.nullValue != null && lp.nullable)
					{
						memberValue = CommonUtility.GetNullDefault(lp.type, lp.nullValue);
					}
					else if (lp.nullValue == null && lp.nullable && CommonUtility.IsNullableType(lp.type))
					{
						propertyType = string.Format("Nullable<{0}>", propertyType);
						memberType = propertyType;
					}
					
					propertyTemplate.MemberName = memberName;
					propertyTemplate.MemberType = memberType;
					propertyTemplate.MemberValue = memberValue;
					propertyTemplate.PropertyName = propertyName;
					propertyTemplate.PropertyType = propertyType;
					propertyTemplate.Readonly = true;
					propertyTemplate.Summary = summary;
					propertyTemplate.PropertyGet = propertyText;
					propertyTemplate.AttributeText = attributeText;
					
					properties.Append(propertyTemplate.RenderToString());
					
					//IObjectHelper get Indexer case statement
					getHelper.AppendFormat("\t\t\t\t\tcase \"{0}\": return {0};\r\n", memberName);
					//IObjectHelper set Indexer case statement
					setHelper.AppendFormat("\t\t\t\t\tcase \"{0}\": {0} = ({1})value; break;\r\n", memberName, memberType);
			} // foreach lookup
		} // if lookup
		
		foreach(relation rt in this.MappingEntity.relations)
		{
			if (rt.queryOnly)
				continue; // skip query only
			
			string summary = "";
			string propertyName = rt.alias;
			string propertyType = "";						
			string memberName = rt.member;
			string memberType = "";
			string memberValue = "";			
			string propertyText = memberName;
			bool isReadonly = true;
			string className = CommonUtility.GetClassName(rt.type);
			
			switch (rt.relationship)
			{
				case relationRelationship.ManyToOne :
					summary = string.Format("Instance of a {0} object", className);
					propertyType = className;
					memberType = propertyType;
						
					if (rt.lazyLoad)
					{
						memberType = string.Format("ObjectHolder<{0}>", propertyType);
						propertyText = string.Format("{0}.InnerObject", memberName);
					}
					break;
				case relationRelationship.OneToMany :
				case relationRelationship.ManyToMany :
					summary = string.Format("Collection of {0} objects", className);
					if (rt.lazyLoad)
					{
						propertyType = string.Format("IList<{0}>", className);
					}
					else
					{
						propertyType = string.Format("Collection<{0}>", className);
						memberValue = string.Format("new Collection<{0}>()", className);
					}
					memberType = propertyType;
					break;
			}
						
			propertyTemplate.MemberName = memberName;
			propertyTemplate.MemberType = memberType;
			propertyTemplate.MemberValue = memberValue;
			propertyTemplate.PropertyName = propertyName;
			propertyTemplate.PropertyType = propertyType;
			propertyTemplate.Readonly = isReadonly;
			propertyTemplate.Summary = summary;
			propertyTemplate.PropertyGet = propertyText;
			
			properties.Append(propertyTemplate.RenderToString());
			
			//IObjectHelper get Indexer case statement
			getHelper.AppendFormat("\t\t\t\t\tcase \"{0}\": return {0};\r\n", memberName);
			//IObjectHelper set Indexer case statement
			setHelper.AppendFormat("\t\t\t\t\tcase \"{0}\": {0} = ({1})value; break;\r\n", memberName, memberType);
			
		}
	}
</script>
<% this.Generate();  %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//	   DO NOT MODIFY contents of this file. Changes to this
//	   file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using Wilson.ORMapper;

namespace <%= ClassNamespace %>
{
	///<summary>Database mapping to table <%= this.MappingEntity.table %></summary>
	[DataObject(true)]
    public partial class <%
	 	Response.Write(ClassName);
		if (this.MappingEntity.readOnly)
			Response.Write(string.Format(" : RetrieveBase<{0}>", ClassName));
		else
			Response.Write(string.Format(" : PersistBase<{0}>", ClassName));
			
		if (ImplementHelper)
			Response.Write(", IObjectHelper");
	%>
	{
		#region Properties
<%= properties.ToString() %>
		#endregion
		
		///<summary>Initializes a new instance of this class</summary>
		public <%= ClassName %>() : base()
		{
			// Default Constructor
		}
		<% if (!this.MappingEntity.readOnly 
				&& this.MappingEntity.keyType != entityKeyType.User 
				&& this.MappingEntity.keyType != entityKeyType.Composite 
				&& this.MappingEntity.keyType != entityKeyType.None) { %>
		///<summary>Initializes a new instance of this class</summary>
		///<param name="startTracking">Set to true to begin ORMapper tracking on this instance</param>
		public <%= ClassName %>(bool startTracking) : base(startTracking)
		{
			
		}
		<% } %>	
		
		<% if (this.MappingEntity.keyType != entityKeyType.None
			&& primaryKeys.Count > 0) { %>
		///<summary>Retrieve an instance of this class using its ID from the persistence store</summary>
		[DataObjectMethod(DataObjectMethodType.Select)]
        public static <%= ClassName %> RetrieveByKey(<%= GetPrimaryKeyArguments() %>)
		{
			<% if (this.MappingEntity.keyType == entityKeyType.Composite && primaryKeys.Count > 1) { %>			
			QueryHelper helper = DataManager.ObjectSpace.QueryHelper;
			string where = <%= GetPrimaryKeyWhere("helper", "where") %>
			return RetrieveFirst(where);			
			<% } else {%>	
			return DataManager.ObjectSpace.GetObject<<%= ClassName %>>(<%= CommonUtility.CreateEscapedIdentifier(StringUtil.ToCamelCase(primaryKeys.GetKey(0))) %>);
			<% } %>	
		}
		
		<% if (!this.MappingEntity.readOnly) { %>		
		///<summary>Delete instance from the persistence store based on primary key(s)</summary>
		[DataObjectMethod(DataObjectMethodType.Delete)]
        public static int DeleteByKey(<%= GetPrimaryKeyArguments() %>)
		{			
			QueryHelper helper = DataManager.ObjectSpace.QueryHelper;
			string where = <%= GetPrimaryKeyWhere("helper", "where") %>			
			return Delete(where);
		}
		
		///<summary>Delete instance from the persistence store based on primary key(s) using a transaction</summary>
		///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
		public static int DeleteByKey(Wilson.ORMapper.Transaction transaction, <%= GetPrimaryKeyArguments() %>)
		{			
			QueryHelper helper = DataManager.ObjectSpace.QueryHelper;
			string where = <%= GetPrimaryKeyWhere("helper", "where") %>			
			return Delete(transaction, where);
		}		
		<% } // readonly %>					
		<% } // has primary keys %>					
<% if (ImplementHelper) { %>
		#region IObjectHelper
		/// <summary>Indexer to update local member variables</summary>	
		/// <remarks>This indexer is used by the Wilson ORMapper</remarks>
		object IObjectHelper.this[string memberName]
		{
			get {
				switch (memberName) {
<%= getHelper.ToString() %>									
					default: throw new Exception(string.Format("Mapping: IObjectHelper Get is missing member case {0}", memberName));
				}
			}
			set {
				//handle null values
				if(value == null)
					return;
					
				switch (memberName) {
<%= setHelper.ToString() %>				
					default: throw new Exception(string.Format("Mapping: IObjectHelper Set is missing member case {0}", memberName));
				}
			}
		}
		#endregion
<% } %>		
	}
}
