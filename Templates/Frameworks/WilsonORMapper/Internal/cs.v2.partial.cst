<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the ORMapper" 
	Debug="true" %>

<%@ Assembly Src="CommonUtility.cs" %>
	
<%@ Register Name="MappingCommon" Template="mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="class.common.cst" MergeProperties="True" ExcludeProperties="" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//	   This file is safe to edit because it will not be overwritten.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using Wilson.ORMapper;

namespace <%= ClassNamespace %>
{
	public partial class <%
	 	Response.Write(CommonUtility.GetClassName(this.MappingEntity.type));
		if (ImplementNotification)
			Response.Write(" : IObjectNotification");
		
	%>
	{
<% if (!this.MappingEntity.readOnly) { %>
        
		/// <summary>
        /// Validates the properies of this instance.
        /// </summary>
        /// <returns>
        /// A value indicating if this object is valid.
        /// </returns>
        public override bool IsValid()
        {
            // must be called first to clean error
            bool isValid = base.IsValid();

            //TODO: Validate properties here.            
            //When there is an error, call OnValidationError to publish the error.
            //Example: base.OnValidationError("Name", "Name is required.");

            //Returning false will cause an exception to be thrown on Save.
            return isValid;
        }
		
<% } %>
<% if (ImplementNotification) { %>
		#region IObjectNotification Members
		/// <summary>Triggered after an entity object is created in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		void IObjectNotification.OnCreated(Wilson.ORMapper.Transaction transaction)
		{
			// TODO: Implement OnCreated
		}

		/// <summary>Triggered before an entity object is created in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		void IObjectNotification.OnCreating(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnCreating
		}

		/// <summary>Triggered after an entity object is deleted in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		void IObjectNotification.OnDeleted(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnDeleted
		}

		/// <summary>Triggered before an entity object is deleted in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		void IObjectNotification.OnDeleting(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnDeleting
		}

		/// <summary>Triggered when an entity object is materialized from the database</summary>
		/// <param name="dataRecord">The current dataRecord used to materialize object</param>
		void IObjectNotification.OnMaterialized(System.Data.IDataRecord dataRecord)
		{
			// TODO Implement OnMaterialized
		}

		/// <summary>Triggered when an error has occurred persisting an entity object</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		/// <param name="exception">The current exception encountered in persistence</param>
		void IObjectNotification.OnPersistError(Wilson.ORMapper.Transaction transaction, Exception exception)
		{
			// TODO Implement OnPersistError
		}

		/// <summary>Triggered after an entity object is updated in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		void IObjectNotification.OnUpdated(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnUpdated
		}

		/// <summary>Triggered before an entity object is updated in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		void IObjectNotification.OnUpdating(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnUpdating
		}
		#endregion
<% } %>
	}
}