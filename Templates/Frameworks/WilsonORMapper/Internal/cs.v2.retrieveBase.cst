<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="A read only base class for Wilson ORMapper business objects" 
	Debug="true" %>
	
<%@ Register Name="ClassCommon" Template="class.common.cst" MergeProperties="True" ExcludeProperties="" %>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using Wilson.ORMapper;

namespace <%= ClassNamespace %>
{
    /// <summary>A base class for retrieving business objects</summary>
    /// <typeparam name="T">A business object type to retrieve</typeparam>
    public abstract class RetrieveBase<T>
    {        
        #region Constructors
        public RetrieveBase()
        {

        }
        #endregion

        #region RetrieveFirst
        ///<summary>Retrieve the first instance of this class using the where clause</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        public static T RetrieveFirst(string whereClause)
        {
            return RetrieveFirst(whereClause, string.Empty, false);
        }

        ///<summary>Retrieve the first instance of this class using the where clause</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        ///<param name="sortClause">The SQL sort statement</param>
        public static T RetrieveFirst(string whereClause, string sortClause)
        {
            return RetrieveFirst(whereClause, sortClause, false);
        }

        ///<summary>Retrieve the first instance of this class using the where clause</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        ///<param name="sortClause">The SQL sort statement</param>
        ///<param name="useCache">Cache the result of the query using SqlCacheDependency.</param>
        public static T RetrieveFirst(string whereClause, string sortClause, bool useCache)
        {
            // optimize query, don't need count
            ObjectQuery<T> query = new ObjectQuery<T>(whereClause, sortClause, 1, 1, true);
            
            ObjectSet<T> pageSet;
            if (useCache)
                pageSet = RetrieveCachedQuery(query);
            else
                pageSet = RetrieveQuery(query);


            if (pageSet != null && pageSet.Count > 0)
                return pageSet[0];
            else
                return default(T);
        }

        /// <summary>Retrieve the first instance of this class using an OPathQuery</summary>
        /// <param name="query">OPathQuery to execute.</param>
        public static T RetrieveFirst(OPathQuery<T> query)
        {
            return DataManager.ObjectSpace.GetObject<T>(query);
        }

        /// <summary>Retrieve the first instance of this class using an OPathQuery.</summary>
        /// <param name="query">OPathQuery to execute.</param>
        /// <param name="parameters">Parameter values to use when executing the query.</param>
        public static T RetrieveFirst(OPathQuery<T> query, params object[] parameters)
        {
            return DataManager.ObjectSpace.GetObject<T>(query, parameters);
        }
        #endregion

        #region RetrieveAll
        ///<summary>Retrieve all instances of this class from the persistence store</summary>
        ///<remarks>This method can be used for the <see cref="ObjectDataSource.SelectMethod"/>.</remarks>
        ///<seealso cref="ObjectDataSource"/>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static Collection<T> RetrieveAll()
        {
            return RetrieveAll(string.Empty, false);
        }

        ///<summary>Retrieve all instances of this class from the persistence store</summary>
        ///<param name="sortClause">The SQL sort statement</param>
        ///<remarks>
        /// This method can be used for the <see cref="ObjectDataSource.SelectMethod"/>. 
        /// The <see cref="ObjectDataSource.SortParameterName"/> should be set to sortClause.
        ///</remarks>
        ///<seealso cref="ObjectDataSource"/>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static Collection<T> RetrieveAll(string sortClause)
        {
            return RetrieveAll(sortClause, false);
        }

        ///<summary>Retrieve all instances of this class from the persistence store</summary>
        ///<param name="sortClause">The SQL sort statement</param>
        ///<param name="useCache">Cache the result of the query using SqlCacheDependency.</param>
        public static Collection<T> RetrieveAll(string sortClause, bool useCache)
        {
            ObjectQuery<T> query = new ObjectQuery<T>(string.Empty, sortClause);
            if (useCache)
                return RetrieveCachedQuery(query);
            else
                return RetrieveQuery(query);
        } 
        #endregion

        #region RetrievePage
        /// <summary>Retrieve a paged collection of instances of this class from the persistence store.</summary>
        /// <param name="startRowIndex">Start index of the rows to retrieve.</param>
        /// <param name="maximumRows">The maximum rows.</param>
        /// <returns>Collection of items</returns>
        /// <remarks>
        /// <para>
        ///     This method can be used for the <see cref="ObjectDataSource.SelectMethod"/> when 
        ///     <see cref="ObjectDataSource.EnablePaging"/> is true. 
        /// </para>
        /// <list type="table">
        ///     <listheader>
        ///         <term>Property</term>
        ///         <description>Value</description>
        ///     </listheader>
        ///     <item>
        ///         <term><see cref="ObjectDataSource.StartRowIndexParameterName"/></term>
        ///         <description>startRowIndex</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="ObjectDataSource.MaximumRowsParameterName"/></term>
        ///         <description>maximumRows</description>
        ///     </item>
        /// </list>
        /// </remarks>
        ///<seealso cref="ObjectDataSource"/>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static Collection<T> RetrievePage(int startRowIndex, int maximumRows)
        {
            return RetrievePage(startRowIndex, maximumRows, string.Empty);
        }

        /// <summary>Retrieve a paged collection of instances of this class from the persistence store.</summary>
        /// <param name="startRowIndex">Start index of the rows to retrieve.</param>
        /// <param name="maximumRows">The maximum rows.</param>
        /// <param name="sortClause">The SQL sort statement</param>
        /// <returns>Collection of items</returns>
        /// <remarks>
        /// <para>
        ///     This method can be used for the <see cref="ObjectDataSource.SelectMethod"/> when 
        ///     <see cref="ObjectDataSource.EnablePaging"/> is true. 
        /// </para>
        /// <list type="table">
        ///     <listheader>
        ///         <term>Property</term>
        ///         <description>Value</description>
        ///     </listheader>
        ///     <item>
        ///         <term><see cref="ObjectDataSource.StartRowIndexParameterName"/></term>
        ///         <description>startRowIndex</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="ObjectDataSource.MaximumRowsParameterName"/></term>
        ///         <description>maximumRows</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="ObjectDataSource.SortParameterName"/></term>
        ///         <description>sortClause</description>
        ///     </item>
        /// </list>
        /// </remarks>
        ///<seealso cref="ObjectDataSource"/>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static Collection<T> RetrievePage(int startRowIndex, int maximumRows, string sortClause)
        {
            int pageIndex = (int)Math.Ceiling((double)startRowIndex / maximumRows) + 1;
            ObjectQuery<T> query = new ObjectQuery<T>(string.Empty, sortClause, maximumRows, pageIndex, true);
            ObjectSet<T> pageSet = RetrievePage(query, false);
            return pageSet;
        }

        ///<summary>Retrieve a paged collection of instances of this class from the persistence store</summary>
        ///<param name="pageSize">The number of records in each page</param>
        ///<param name="pageIndex">The page index to return</param>
        ///<param name="totalCount">The total number of objects returned by query</param>
        public static Collection<T> RetrievePage(int pageSize, int pageIndex, out int totalCount)
        {
            return RetrievePage(string.Empty, string.Empty, false, pageSize, pageIndex, out totalCount);
        }

        ///<summary>Retrieve a paged collection of instances of this class from the persistence store</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        ///<param name="pageSize">The number of records in each page</param>
        ///<param name="pageIndex">The page index to return</param>
        ///<param name="totalCount">The total number of objects returned by query</param>
        public static Collection<T> RetrievePage(string whereClause, int pageSize, int pageIndex, out int totalCount)
        {
            return RetrievePage(whereClause, string.Empty, false, pageSize, pageIndex, out totalCount);
        }

        ///<summary>Retrieve a paged collection of instances of this class from the persistence store</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        ///<param name="sortClause">The SQL sort statement</param>
        ///<param name="pageSize">The number of records in each page</param>
        ///<param name="pageIndex">The page index to return</param>
        ///<param name="totalCount">The total number of objects returned by query</param>
        public static Collection<T> RetrievePage(string whereClause, string sortClause, int pageSize, int pageIndex, out int totalCount)
        {
            return RetrievePage(whereClause, sortClause, false, pageSize, pageIndex, out totalCount);
        }

        ///<summary>Retrieve a paged collection of instances of this class from the persistence store</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        ///<param name="sortClause">The SQL sort statement</param>
        ///<param name="pageSize">The number of records in each page</param>
        ///<param name="pageIndex">The page index to return</param>
        ///<param name="totalCount">The total number of objects returned by query</param>
        ///<param name="useCache">Cache the result of the query using SqlCacheDependency.</param>
        public static Collection<T> RetrievePage(string whereClause, string sortClause, bool useCache, int pageSize, int pageIndex, out int totalCount)
        {
            ObjectQuery<T> query = new ObjectQuery<T>(whereClause, sortClause, pageSize, pageIndex);
            ObjectSet<T> pageSet = RetrievePage(query, useCache);            
            totalCount = pageSet.TotalCount;
            return pageSet;
        }

        private static ObjectSet<T> RetrievePage(ObjectQuery<T> query, bool useCache)
        {
            ObjectSet<T> pageSet;
            if (useCache)
                pageSet = RetrieveCachedQuery(query);
            else
                pageSet = RetrieveQuery(query);

            return pageSet;
        }
        #endregion

        #region RetrieveQuery
        ///<summary>Retrieve instances of this class from the persistence store based on the where clause</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        public static Collection<T> RetrieveQuery(string whereClause)
        {
            return RetrieveQuery(whereClause, string.Empty, false);
        }

        ///<summary>Retrieve instances of this class from the persistence store based on the where clause</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        ///<param name="sortClause">The SQL sort statement</param>
        public static Collection<T> RetrieveQuery(string whereClause, string sortClause)
        {
            return RetrieveQuery(whereClause, sortClause, false);
        }

        ///<summary>Retrieve instances of this class from the persistence store based on the where clause</summary>
        ///<param name="whereClause">The SQL where clause to filter the records</param>
        ///<param name="sortClause">The SQL sort statement</param>
        ///<param name="useCache">Cache the result of the query using SqlCacheDependency.</param>
        public static Collection<T> RetrieveQuery(string whereClause, string sortClause, bool useCache)
        {
            ObjectQuery<T> query = new ObjectQuery<T>(whereClause, sortClause);

            if (useCache)
                return RetrieveCachedQuery(query);
            else
                return RetrieveQuery(query);
        }

        /// <summary>Executes an OPathQuery against the data store and returns an IList filled with the results.</summary>
        /// <param name="query">OPathQuery to execute.</param>
        /// <returns>An IList filled with objects retrieved from the data store.</returns>
        public static Collection<T> RetrieveQuery(OPathQuery<T> query)
        {
            return DataManager.ObjectSpace.GetObjectSet(query);
        }

        /// <summary>Executes an OPathQuery against the database and returns an IList filled with the results.</summary>
        /// <param name="query">OPathQuery to execute.</param>
        /// <param name="parameters">Parameter values to use when executing the query.</param>
        /// <returns>An IList filled with objects retrieved from the data store.</returns>
        public static Collection<T> RetrieveQuery(OPathQuery<T> query, params object[] parameters)
        {
            return DataManager.ObjectSpace.GetObjectSet(query, parameters);
        }

        /// <summary>Executes a CompiledQuery against the database and returns an IList filled with the results.</summary>
        /// <param name="compiledQuery">CompiledQuery to execute.</param>
        /// <returns>An IList filled with objects retrieved from the data store.</returns>
        public static Collection<T> RetrieveQuery(CompiledQuery<T> compiledQuery)
        {
            return DataManager.ObjectSpace.GetObjectSet(compiledQuery);
        }

        /// <summary>Executes a CompiledQuery against the database and returns an IList filled with the results.</summary>
        /// <param name="compiledQuery">CompiledQuery to execute.</param>
        /// <param name="parameters">Parameter values to use when executing the query.</param>
        /// <returns>An IList filled with objects retrieved from the data store.</returns>
        public static Collection<T> RetrieveQuery(CompiledQuery<T> compiledQuery, params object[] parameters)
        {
            return DataManager.ObjectSpace.GetObjectSet(compiledQuery, parameters);
        }

        ///<summary>Retrieve instances of this class from the persistence store based on the ObjectQuery</summary>
        ///<param name="query">The object query to filter the records</param>
        public static ObjectSet<T> RetrieveQuery(ObjectQuery<T> query)
        {
            return DataManager.ObjectSpace.GetObjectSet(query);
        }
        
		///<summary>Retrieve instances of this class from the persistence store based on the ObjectQuery.</summary>
		///<remarks>This method uses the SqlCacheDependency to cache the results of the query.</remarks>
        ///<param name="query">The object query to filter the records</param>
        public static ObjectSet<T> RetrieveCachedQuery(ObjectQuery<T> query)
        {
            System.Web.Caching.Cache cache = System.Web.HttpRuntime.Cache;
            if (cache == null)
            {
                return RetrieveQuery(query);
            }

            string key = string.Format("{0}|{1}|{2}|{3}",
                query.ObjectType.Name, query.WhereClause, query.SortClause, query.PageIndex);

            ObjectSet<T> cachedSet = cache[key] as ObjectSet<T>;
            if (cachedSet == null)
            {
                cachedSet = RetrieveQuery(query);
                string tableName = DataManager.ObjectSpace.QueryHelper.GetTableName(typeof(T).Name);
                //TODO: Change as needed
                System.Web.Caching.SqlCacheDependency dependency = new System.Web.Caching.SqlCacheDependency(DataManager.InitialCatalog, tableName);
                cache.Insert(key, cachedSet, dependency);
            }

            return cachedSet;
        }
        #endregion

        #region Other
        /// <summary>Refresh the data for this instance from the persistence store</summary>
        /// <returns>Returns a new instance with the refreshed data or null if instance not tracked</returns>
        /// <example>Resync an instance code fragment
        /// <code>
        /// Task instance;
        /// // Some retrieval and update logic
        /// instance = instance.Resync();
        /// </code>
        /// </example>
        public T Resync()
        {
            if (DataManager.ObjectSpace.GetObjectState(this) == ObjectState.Unknown)
                return default(T);

            return (T)DataManager.ObjectSpace.Resync(this);
        }

        /// <summary>Retrieves the total row count.</summary>
        /// <returns>The number of total rows</returns>
        /// <remarks>This method is used by the ObjectDataSource to get the number of rows for the GridView.</remarks>
        public static int RetrieveTotalRecordCount()
        {
            return DataManager.ObjectSpace.GetObjectCount<T>(string.Empty);
        }

        /// <summary>Retrieves the total row count.</summary>
        /// <returns>The number of total rows</returns>
        /// <remarks>This method is used by the ObjectDataSource to get the number of rows for the GridView.</remarks>
        public static int RetrieveTotalRecordCount(int startRowIndex, int maximumRows)
        {
            return RetrieveTotalRecordCount();
        }


        /// <summary>Retrieves the total row count.</summary>
        /// <returns>The number of total rows</returns>
        /// <remarks>This method is used by the ObjectDataSource to get the number of rows for the GridView.</remarks>
        public static int RetrieveTotalRecordCount(int startRowIndex, int maximumRows, string sortClause)
        {
            return RetrieveTotalRecordCount();
        }

        #endregion
    }
}