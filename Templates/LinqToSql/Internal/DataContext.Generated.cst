<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" 
    Description="Linq to Sql DataContext Class." %>

<%@ Assembly Src="Schema.cs" %>
<%@ Assembly Src="Common.cs" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="DbmlSchema" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="DbmlSchema.Database" Optional="False" 
    Description="Database schema instance. Must be set by parent template" %>

<%@ Map Name="CSharpKeyWordEscape" 
    Src="CSharpKeyWordEscape.csmap" Reverse="False" 
    Description="Mapping to escape c# keywords" %>

<%@ Map Name="CSharpAlias" 
    Src="System-CSharpAlias.csmap" Reverse="False" 
    Description="Convert system data types to c# alias" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
<% if (Database.ContextNamespace != Database.EntityNamespace) { %>
using <%= Database.EntityNamespace %>;
<% } %>

namespace <%= Database.ContextNamespace %>
{
    /// <summary>
    /// The DataContext class for the <%= Database.Name %> database.
    /// </summary>
    <%= Naming.GetModifier(Database.AccessModifier, Database.ClassModifier) %> partial class <%= Database.Class %> : DataContext
    {
        private static MappingSource mappingCache = new AttributeMappingSource();
        
        #region ConnectionString
        private const string CONNECTION_NAME = "<%= Database.Connection.SettingsPropertyName %>";
        private static volatile string _connectionString;
        private static object _connectionLock = new Object();

        /// <summary>The application connection string read from web.config or app.config</summary>
        /// <example>
        /// Add the following key to the "connectionStrings" section of your config:
        /// <code><![CDATA[
        /// <configuration>
        ///     <connectionStrings>
        ///         <add name="<%= Database.Connection.SettingsPropertyName %>" 
        ///             connectionString="Data Source=(local);Initial Catalog=DATABASE;Integrated Security=True"
        ///             providerName="System.Data.SqlClient" />
        ///     </connectionStrings>
        /// </configuration>
        /// ]]></code>
        /// </example>
        public static string ConnectionString
        {
            get
            {
                if (_connectionString == null)
                {
                    lock (_connectionLock)
                    {
                        if (_connectionString == null)
                            _connectionString = GetDefaultConnectionString();
                    }
                }
                return _connectionString;
            }
        }

        private static string GetDefaultConnectionString()
        {
            ConnectionStringSettings settings = ConfigurationManager.ConnectionStrings[CONNECTION_NAME];
            if (settings == null)
            {
                string message = string.Format("Could not find the connection string '{0}' in the configuration file.  " +
                       "Please add an entry to connectionStrings section named '{0}'.", CONNECTION_NAME);
                throw new ConfigurationErrorsException(message);
            }
            return settings.ConnectionString;
        } 
        #endregion

        #region Constructors
        /// <summary>
        /// Initializes the <see cref="<%= Database.Class %>"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        static <%= Database.Class %>()
        { }
<% if (Database.Connection.Mode == ConnectionMode.AppSettings
    && !string.IsNullOrEmpty(Database.Connection.SettingsPropertyName)) { %>
        
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        <%= Naming.GetModifier(Database.AccessModifier) %> <%= Database.Class %>()
            : base(ConnectionString, mappingCache)
        {
            OnCreated();
        }
<% } %>
        
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        [DebuggerNonUserCodeAttribute]
        <%= Naming.GetModifier(Database.AccessModifier) %> <%= Database.Class %>(string connection)
            : base(connection, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        [DebuggerNonUserCodeAttribute]
        <%= Naming.GetModifier(Database.AccessModifier) %> <%= Database.Class %>(IDbConnection connection)
            : base(connection, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [DebuggerNonUserCodeAttribute]
        <%= Naming.GetModifier(Database.AccessModifier) %> <%= Database.Class %>(string connection, MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Database.Class %>"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [DebuggerNonUserCodeAttribute]
        <%= Naming.GetModifier(Database.AccessModifier) %> <%= Database.Class %>(IDbConnection connection, MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        #endregion
        
        #region Tables
<% foreach (Table table in Database.Tables) { %>
        /// <summary>Represents the <%= table.Name %> table in the underlying database.</summary>
        <%= Naming.GetModifier(table.AccessModifier, table.Modifier) %> Table<<%= table.Type.Name %>> <%= GetName(table) %>
        {
            get { return GetTable<<%= table.Type.Name %>>(); }
        }
        
<% } %>
        #endregion

        #region Functions
<% foreach (Function function in Database.Functions) { %>
        /// <summary>Method that is mapped to the <%= function.Name %> database procedure.</summary>
        /// <returns></returns>
        <%= CreateAttribute(function) %>
        <%= Naming.GetModifier(function.AccessModifier, function.Modifier) %> <%= GetReturnType(function) %> <%= function.Method %>(<%= GetArguments(function) %>)
        {
            IExecuteResult result = this.ExecuteMethodCall(this,
                ((MethodInfo)(MethodInfo.GetCurrentMethod()))<%= GetArgumentNames(function) %>);
            
<% 
for(int x = 0; x < function.Parameters.Count; x++) {
    Parameter p = function.Parameters[x];

    if (p.Direction == DbmlSchema.ParameterDirection.In)
        continue;
    
    //set out params
    Response.WriteLine("            {0} = (({1})(result.GetParameterValue({2})));",
        p.ParameterName, GetParameterType(p), x);
}
%>
            
            return ((<%= GetReturnType(function) %>)(result.ReturnValue));
        }

<% } %>
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called after this instance is created.</summary>
        partial void OnCreated();
<% foreach (Table table in Database.Tables) { %>
        /// <summary>Called before a <%= table.Type.Name %> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void Insert<%= table.Type.Name %>(<%= table.Type.Name %> instance);
        /// <summary>Called before a <%= table.Type.Name %> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void Update<%= table.Type.Name %>(<%= table.Type.Name %> instance);
        /// <summary>Called before a <%= table.Type.Name %> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void Delete<%= table.Type.Name %>(<%= table.Type.Name %> instance);
<% } %>
        #endregion
    }
}

<script runat="template">

    public string CreateAttribute(Function f)
    {
        StringBuilder s = new StringBuilder();
        s.Append("[Function(");
        s.AppendFormat("Name=\"{0}\"", f.Name);
        if (f.IsComposable)
            s.Append(", IsComposable=true");
        s.Append(")]");
        
        return s.ToString();
    }
    public string GetName(Table table)
    {
        string name = string.IsNullOrEmpty(table.Member) ? table.Type.Name : table.Member;
        return name;
    }
    
    public string GetReturnType(Function function)
    {
        StringBuilder s = new StringBuilder();
        
        if (function.ElementTypes.Count == 0)
            s.Append(CSharpAlias[function.Return.Type]);
        else if (function.HasMultipleResults)
            s.Append("IMultipleResults");
        else
            s.AppendFormat("ISingleResult<{0}>", GetResultName(function));
        
        return s.ToString();
    }
    
    public string GetResultName(Function function)
    {
        if (function.ElementTypes.Count == 0)
            return string.Empty;
        
        DbmlSchema.Type resultType = function.ElementTypes[0];
        if (string.IsNullOrEmpty(resultType.IdRef))
            return function.ElementTypes[0].Name;
        
        DbmlSchema.Type refType = Database.GetTypeById(resultType.IdRef);
        if (refType == null)
            throw new Exception(string.Format(
                "Could not find a Type for IdRef '{0}' in function '{1}'.",
                resultType.IdRef, 
                function.Name));
                
        return refType.Name;
    }
    
    public string GetArguments(Function function)
    {
        StringBuilder s = new StringBuilder();
        
        for(int x = 0; x < function.Parameters.Count; x++)
        {
            Parameter p = function.Parameters[x];
            s.AppendLine();
            s.AppendFormat("            [Parameter(DbType=\"{0}\")] ", p.DbType);

            if (p.Direction != DbmlSchema.ParameterDirection.In)
                s.Append("ref ");
            
            s.AppendFormat("{0} {1}",GetParameterType(p), p.ParameterName);
                
            if (x < function.Parameters.Count - 1)
                s.Append(", ");
        }
        
        return s.ToString();
    }
    
    public string GetParameterType(Parameter p)
    {
        if (CommonUtility.IsNullableType(p.Type))
            return CSharpAlias[p.Type] + "?";
        else
            return CSharpAlias[p.Type];
    }
    
    public string GetArgumentNames(Function function)
    {
        StringBuilder s = new StringBuilder();
        
        for(int x = 0; x < function.Parameters.Count; x++)
        {
            if (x < function.Parameters.Count)
                s.Append(", ");

            Parameter p = function.Parameters[x];
            s.Append(p.ParameterName);
        }
        
        return s.ToString();
    }
</script>