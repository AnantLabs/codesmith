<%@ Template Language="C#" TargetLanguage="C#" %>


<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="Mono.Cecil" Path="." %>

<%@ Assembly Src="Visitor.cs" %>

<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Mono.Cecil" %>

<%@ Property Category="1.Type" Name="AssemblyFile"
    Type="System.String" Default="" Optional="False"
    Description="The assembly file to load."
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="1.Type" Name="RootClass"
    Type="System.String" Default="" Optional="False"
    Description="The root type name to start the visitor from." %>

<%@ Property Category="2.Class" Name="ClassNamespace"
    Type="System.String" Default="" Optional="False"
    Description="The namespace to use for the entity class file."%>
<%@ Property Category="2.Class" Name="ClassName"
    Type="System.String" Default="" Optional="False"
    Description="The name to use for the entity class file."%>

<% var rootVisitor = GetVisitor(); %>
<% var namespaces = GetVisitors(rootVisitor)
    .Select(v => v.VisitType.Namespace)
    .Except(new[] { "System", "System.Collections.Generic", "System.Text",  ClassNamespace })
    .Distinct(); %>

using System;
using System.Collections.Generic;
using System.Text;

<% foreach (var ns in namespaces) { %>
using <%= ns %>;
<% } %>

namespace <%= this.ClassNamespace %>
{
    
    /// <summary>
    /// A class that represents a visitor for <see cref="<%= rootVisitor.VisitType.Name %>"/>.
    /// </summary>
    public partial class <%= this.ClassName %>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<%= this.ClassName %>"/> class.
        /// </summary>
        public <%= this.ClassName %>()
        {
        }

        /// <summary>
        /// Visits the specified <see cref="<%= rootVisitor.VisitType.Name %>"/>.
        /// </summary>
        /// <param name="<%= StringUtil.ToCamelCase(rootVisitor.VisitType.Name) %>">The <see cref="<%= rootVisitor.VisitType.Name %>"/> to visit.</param>
        public virtual void Visit(<%= rootVisitor.VisitType.Name %> <%= StringUtil.ToCamelCase(rootVisitor.VisitType.Name) %>)
        {
<% foreach(var v in rootVisitor.Children) { %>
    <% if (v.IsCollection) { %>
            foreach (var item in <%= StringUtil.ToCamelCase(rootVisitor.VisitType.Name) %>.<%= v.Property.Name %>)
                Visit<%= StringUtil.ToPascalCase(v.VisitType.Name) %>(item);

    <% } else if (v.IsDictionary) { %>
            foreach(var item in <%= StringUtil.ToCamelCase(rootVisitor.VisitType.Name) %>.<%= v.Property.Name %>)
                Visit<%= StringUtil.ToPascalCase(v.VisitType.Name) %>(item.Value);

    <% } else { %>
            Visit<%= StringUtil.ToPascalCase(v.VisitType.Name) %>(<%= StringUtil.ToCamelCase(rootVisitor.VisitType.Name) %>.<%= v.Property.Name %>);
    <% } // if %>
<% } // foreach %>
        }

<% foreach(var visitor in GetVisitors(rootVisitor).Skip(1)) { %>
        /// <summary>
        /// Visits the specified <see cref="<%= visitor.VisitType.Name %>"/>.
        /// </summary>
        /// <param name="<%= StringUtil.ToCamelCase(visitor.VisitType.Name) %>">The <see cref="<%= visitor.VisitType.Name %>"/> to visit.</param>
        public virtual void Visit<%= StringUtil.ToPascalCase(visitor.VisitType.Name) %>(<%= visitor.VisitType.Name %> <%= StringUtil.ToCamelCase(visitor.VisitType.Name) %>)
        {
<% foreach(var v in visitor.Children) { %>
    <% if (v.IsCollection) { %>
            foreach (var item in <%= StringUtil.ToCamelCase(visitor.VisitType.Name) %>.<%= v.Property.Name %>)
                Visit<%= StringUtil.ToPascalCase(v.VisitType.Name) %>(item);

    <% } else if (v.IsDictionary) { %>
            foreach (var item in <%= StringUtil.ToCamelCase(visitor.VisitType.Name) %>.<%= v.Property.Name %>)
                Visit<%= StringUtil.ToPascalCase(v.VisitType.Name) %>(item.Value);

    <% } else { %>
            Visit<%= StringUtil.ToPascalCase(v.VisitType.Name) %>(<%= StringUtil.ToCamelCase(visitor.VisitType.Name) %>.<%= v.Property.Name %>);
    <% } // if %>
<% } // foreach children %>
        }

<% } // foreach visitor %>
    }
}


<script runat="template">
public Visitor GetVisitor()
{
    var visitor = Visitor.Create(AssemblyFile, RootClass);
    return visitor;
}

public IEnumerable<Visitor> GetVisitors(Visitor root)
{
    return root.Traverse(v => v.Children).DistinctBy(v => v.VisitType);
}
</script>