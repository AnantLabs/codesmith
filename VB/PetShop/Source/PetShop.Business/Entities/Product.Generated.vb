'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.7.X CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Product.vb.
'
'     Template: SwitchableObject.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Validation

<Serializable()> _
Public Partial Class Product 
    Inherits BusinessBase(Of Product)
    
    #Region "Contructor(s)"

	Private Sub New()
    	' require use of factory method 
End Sub
    
    Friend Sub New(Byval reader As SafeDataReader)
        Fetch(reader)
	End Sub
    
	#End Region
    
	#Region "Validation Rules"
	
	Protected Overrides Sub AddBusinessRules()
	
        If AddBusinessValidationRules() Then Exit Sub
       
		ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs("Name", 80))
		ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs("Descn", 255))
		ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs("Image", 80))
		ValidationRules.AddRule(AddressOf CommonRules.StringRequired, "CategoryId")
		ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs("CategoryId", 10))
		ValidationRules.AddRule(AddressOf CommonRules.StringRequired, "ProductId")
		ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs("ProductId", 10))
	End Sub
	
	#End Region
	
	#Region "Business Methods"


	
	Private Shared ReadOnly _productIdProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Product) p.ProductId)
		<System.ComponentModel.DataObjectField(true, false)> _
	Public Property ProductId() As String
		Get 
			Return GetProperty(_productIdProperty)
		End Get
        Set (ByVal value As String)
            OnPropertyChanging("ProductId")
            SetProperty(_productIdProperty, value)
            OnPropertyChanged("ProductId")
        End Set
	End Property
	
	
	Private Shared ReadOnly _nameProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Product) p.Name)
	Public Property Name() As String
		Get 
			Return GetProperty(_nameProperty)
		End Get
        Set (ByVal value As String)
            OnPropertyChanging("Name")
            SetProperty(_nameProperty, value)
            OnPropertyChanged("Name")
        End Set
	End Property
	
	
	Private Shared ReadOnly _descnProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Product) p.Descn)
	Public Property Descn() As String
		Get 
			Return GetProperty(_descnProperty)
		End Get
        Set (ByVal value As String)
            OnPropertyChanging("Descn")
            SetProperty(_descnProperty, value)
            OnPropertyChanged("Descn")
        End Set
	End Property
	
	
	Private Shared ReadOnly _imageProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Product) p.Image)
	Public Property Image() As String
		Get 
			Return GetProperty(_imageProperty)
		End Get
        Set (ByVal value As String)
            OnPropertyChanging("Image")
            SetProperty(_imageProperty, value)
            OnPropertyChanged("Image")
        End Set
	End Property
	
    Private Shared _categoryIdProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p As Product) p.CategoryId)
	Public Property CategoryId() As String 
		Get  
			Return GetProperty(_categoryIdProperty)				
		End Get
        Set (ByVal value As String)
            OnPropertyChanging("CategoryId")
            SetProperty(_categoryIdProperty, value) 
            OnPropertyChanged("CategoryId")
        End Set
	End Property
	
	Private Shared ReadOnly _categoryProperty As PropertyInfo(Of Category) = RegisterProperty(Of Category)(Function(p As Product) p.Category, Csla.RelationshipTypes.LazyLoad)
	Public ReadOnly Property Category() As Category
		Get
        
            If Not(FieldManager.FieldExists(_categoryProperty))
                SetProperty(_categoryProperty, Category.GetCategory(CategoryId))
            End If
            
            Return GetProperty(_categoryProperty) 
        End Get
    End Property
    
	Private Shared ReadOnly _itemsProperty As PropertyInfo(Of ItemList) = RegisterProperty(Of ItemList)(Function(p As Product) p.Items, Csla.RelationshipTypes.LazyLoad)
	Public ReadOnly Property Items() As ItemList 
		Get
            If Not (FieldManager.FieldExists(_itemsProperty)) Then
                SetProperty(_itemsProperty, ItemList.GetByProductId(ProductId))

            End If
            Return GetProperty(_itemsProperty) 
        End Get
    End Property
    
	#End Region
			
	#Region "Root Factory Methods"
	
	Public Shared Function NewProduct() As Product 
		Return DataPortal.Create(Of Product)()
	End Function
	
	Public Shared Function GetProduct(ByVal productId As String) As Product 		
		Return DataPortal.Fetch(Of Product)(New ProductCriteria(productId))
	End Function
    
    Public Shared Function GetByCategoryProductIdName(ByVal categoryId As String, ByVal productId As String, ByVal name As String) As Product 
	    Dim criteria As New ProductCriteria()
        criteria.CategoryId = categoryId
        criteria.ProductId = productId
        criteria.Name = name
        
        Return DataPortal.Fetch(Of Product)(criteria)
    End Function

    Public Shared Sub DeleteProduct(ByVal productId As String)
	    DataPortal.Delete(New ProductCriteria(productId))
	End Sub
    Public Shared Sub DeleteProduct(ByVal categoryId As String, ByVal name As String, ByVal productId As String)
        Dim criteria As New ProductCriteria()
        criteria.CategoryId = categoryId
        criteria.Name = name
        criteria.ProductId = productId

        DataPortal.Delete(criteria)
	End Sub
	
	#End Region
	
	#Region "Child Factory Methods"
	
	Friend Shared Function NewProductChild() As Product
	    Return DataPortal.CreateChild(Of Product)()
	End Function
    
    Friend Shared Function GetProductChild(ByVal productId As String) As Product 		
		Return DataPortal.FetchChild(Of Product)(New ProductCriteria(productId))
	End Function

	#End Region
	

End Class