<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" OutputType="None" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" %>

<%@ Register Name="DynamicRootList" Template="Internal\DynamicRootList.cst" %>
<%@ Register Name="DynamicRootListDataAccess" Template="Internal\DynamicRootList.DataAccess.cst" %>
<%@ Register Name="DynamicRootListDataAccessParameterized" Template="Internal\DynamicRootList.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="DynamicRootListDataAccessStoredProcedures" Template="Internal\DynamicRootList.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="DynamicRootListGenerated" Template="Internal\DynamicRootList.Generated.cst" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

Public Overloads Overrides Sub Render(writer As System.IO.TextWriter)

    RegisterReferences()

    'DynamicRootList
    Dim dynamicRootList As DynamicRootList = Me.Create(Of DynamicRootList)()
    Me.CopyPropertiesTo(dynamicRootList)

    Dim parentFileName As String = System.IO.Path.Combine(Me.Location, String.Format("Collections\{0}.vb", dynamicRootList.BusinessClassName))
    If Not System.IO.File.Exists(parentFileName) Then
        dynamicRootList.RenderToFile(parentFileName, False)
    End If

    'DynamicRootList.Generated
    Dim fileName As String = System.IO.Path.Combine(Location, String.Format("Collections\{0}.Generated.vb", dynamicRootList.BusinessClassName))

    Dim dynamicRootListGenerated As DynamicRootListGenerated = Me.Create(Of DynamicRootListGenerated)()
    Me.CopyPropertiesTo(dynamicRootListGenerated)

    dynamicRootListGenerated.RenderToFile(fileName, parentFileName, True)

    'DynamicRootList.DataAccess
    fileName = System.IO.Path.Combine(Location, String.Format("Collections\{0}.DataAccess.vb", dynamicRootList.BusinessClassName))
    If DataAccessImplementation = DataAccessMethod.None Then
        Dim dynamicRootListDataAccess As DynamicRootListDataAccess = Me.Create(Of DynamicRootListDataAccess)()
        Me.CopyPropertiesTo(dynamicRootListDataAccess)

        dynamicRootListDataAccess.RenderToFile(fileName, parentFileName, True)
    ElseIf DataAccessImplementation = DataAccessMethod.ParameterizedSQL Then
        Dim dynamicRootListDataAccessParameterized As DynamicRootListDataAccessParameterized = Me.Create(Of DynamicRootListDataAccessParameterized)()
        Me.CopyPropertiesTo(dynamicRootListDataAccessParameterized)

        dynamicRootListDataAccessParameterized.RenderToFile(fileName, parentFileName, True)
    ElseIf DataAccessImplementation = DataAccessMethod.StoredProcedures Then
        Dim dynamicRootListDataAccessStoredProcedures As DynamicRootListDataAccessStoredProcedures = Me.Create(Of DynamicRootListDataAccessStoredProcedures)()
        Me.CopyPropertiesTo(dynamicRootListDataAccessStoredProcedures)
        
        dynamicRootListDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, True)
        
        'StoredProcedures
        fileName = System.IO.Path.Combine(Location, String.Format("Collections\{0}.StoredProcedures.sql", dynamicRootList.BusinessClassName))
        Dim sqlStoredProcedures As SqlStoredProcedures = Me.Create(Of SqlStoredProcedures)()
        Me.CopyPropertiesTo(sqlStoredProcedures)
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures."
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, True)
    End If
End Sub

Public Overrides Function OnEntityChanging() As Boolean
    If String.IsNullOrEmpty(BusinessClassName) Then
        BusinessClassName = String.Concat(Entity.ClassName, "List")
        ChildBusinessClassName = Entity.ClassName
    End If

    If String.IsNullOrEmpty(CriteriaClassName) OrElse CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase) Then
        CriteriaClassName = [String].Concat(Entity.ClassName, "Criteria")
    End If

    Return False
End Function

</script>