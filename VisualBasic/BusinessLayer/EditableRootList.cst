<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="EditableRootList" Template="Internal\EditableRootList.cst" %>
<%@ Register Name="EditableRootListDataAccess" Template="Internal\EditableRootList.DataAccess.cst" %>
<%@ Register Name="EditableRootListDataAccessParameterized" Template="Internal\EditableRootList.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="EditableRootListDataAccessStoredProcedures" Template="Internal\EditableRootList.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="EditableRootListGenerated" Template="Internal\EditableRootList.Generated.cst" %>
<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

<script runat="template">

Public Overloads Overrides Sub Render(writer As System.IO.TextWriter)

    RegisterReferences()

    'EditableRootList
    Dim editableRootList As EditableRootList = Me.Create(Of EditableRootList)()
    Me.CopyPropertiesTo(editableRootList)

    Dim parentFileName As String = System.IO.Path.Combine(Me.Location, String.Format("Collections\{0}.vb", editableRootList.BusinessClassName))
    If Not System.IO.File.Exists(parentFileName) Then
        editableRootList.RenderToFile(parentFileName, False)
    End If

    'EditableRootList.Generated
    Dim fileName As String = System.IO.Path.Combine(Location, String.Format("Collections\{0}.Generated.vb", editableRootList.BusinessClassName))

    Dim editableRootListGenerated As EditableRootListGenerated = Me.Create(Of EditableRootListGenerated)()
    Me.CopyPropertiesTo(editableRootListGenerated)

    editableRootListGenerated.RenderToFile(fileName, parentFileName, True)

    'EditableRootList.DataAccess
    fileName = System.IO.Path.Combine(Location, String.Format("Collections\{0}.DataAccess.vb", editableRootList.BusinessClassName))
    If DataAccessImplementation = DataAccessMethod.None Then
        Dim editableRootListDataAccess As EditableRootListDataAccess = Me.Create(Of EditableRootListDataAccess)()
        Me.CopyPropertiesTo(editableRootListDataAccess)

        editableRootListDataAccess.RenderToFile(fileName, parentFileName, True)
    ElseIf DataAccessImplementation = DataAccessMethod.ParameterizedSQL Then
        Dim editableRootListDataAccessParameterized As EditableRootListDataAccessParameterized = Me.Create(Of EditableRootListDataAccessParameterized)()
        Me.CopyPropertiesTo(editableRootListDataAccessParameterized)

        editableRootListDataAccessParameterized.RenderToFile(fileName, parentFileName, True)
    ElseIf DataAccessImplementation = DataAccessMethod.StoredProcedures Then
        Dim editableRootListDataAccessStoredProcedures As EditableRootListDataAccessStoredProcedures = Me.Create(Of EditableRootListDataAccessStoredProcedures)()
        Me.CopyPropertiesTo(editableRootListDataAccessStoredProcedures)
        
        editableRootListDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, True)
        
        'StoredProcedures
        fileName = System.IO.Path.Combine(Location, String.Format("Collections\{0}.StoredProcedures.sql", editableRootList.BusinessClassName))
        Dim sqlStoredProcedures As SqlStoredProcedures = Me.Create(Of SqlStoredProcedures)()
        Me.CopyPropertiesTo(sqlStoredProcedures)
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures."
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, True)
    End If
End Sub

Public Overrides Function OnEntityChanging() As Boolean
    If String.IsNullOrEmpty(BusinessClassName) Then
        BusinessClassName = String.Concat(Entity.Name, "List")
        ChildBusinessClassName = Entity.Name
    End If

    If String.IsNullOrEmpty(CriteriaClassName) OrElse CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase) Then
        CriteriaClassName = [String].Concat(Entity.Name, "Criteria")
    End If

    Return False
End Function

</script>