<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" %>
<%@ Register Name="CompositeKeyMethods" Template="..\..\Common\CompositeKeyMethods.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Constructor" Template="..\..\Common\Constructor.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Exists" Template="..\..\Common\Exists.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirty.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Properties" Template="..\..\Common\Properties.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ValidationRules" Template="..\..\Common\ValidationRules.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\DataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Imports System

Imports Csla
<% If(IsLatestCSLA) Then %>
Imports Csla.Rules
<% Else %>
Imports Csla.Validation
<% End If %>
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
Imports Csla.Serialization
#Else
Imports Csla.Data
#End If
<% Else %>
Imports Csla.Data
<% End If %>

Namespace <%= BusinessProjectName %>
    <Serializable()> _
    <% If(DataAccessImplementation = DataAccessMethod.ObjectFactoryNone Or DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL Or DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures) %>
    <Csla.Server.ObjectFactory(FactoryNames.<%= Entity.ClassName %>FactoryName)> _
    <% End If %>
    Public Partial Class <%= BusinessClassName %><%= Entity.GenericProperty %>
        Inherits BusinessBase(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)
    
    <% RenderHelper(New Constructor()) %>
    
    <% RenderHelper(New ValidationRules()) %>
    
    <% RenderHelper(New Properties()) %>
    
    <% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
    <% End If %>
#Region "Synchronous Factory Methods"
        
        Public Shared Function New<%= BusinessClassName %>() As <%= BusinessClassName %><%= Entity.GenericProperty %> 
            Return DataPortal.Create(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
        End Function
    <% For Each sc As SearchCriteria In  Entity.SearchCriteria %>
    
        Friend Shared Function <%= sc.MethodName %>(<%= sc.Properties.BuildParametersVariables() %>) As <%= BusinessClassName %><%= Entity.GenericProperty %> 
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
            <%= sc.Properties.BuildObjectInitializer() %>
    
            Return DataPortal.Fetch(Of <%= BusinessClassName %>)(criteria)
        End Function
    <% Next %>
    
#End Region
    <% If(IncludeSilverlightSupport) Then %>
#End If
    
#Region "Asynchronous Factory Methods"

#If SILVERLIGHT Then
        Public Shared Sub New<%= BusinessClassName %>Async(ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    <% For Each sc As SearchCriteria In Entity.SearchCriteria %>
    
        Public Shared Sub <%= sc.MethodName %>Async(<%= sc.Properties.BuildParametersVariables() %>, ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
    <%For Each member As Member in sc.Properties %>
            criteria.<%= member.PropertyName %> = <%= member.VariableName %>
    <% Next %>
    
            dp.BeginFetch(criteria)
        End Sub
    <% Next %>  
#End If

#End Region
    
    <% End If %>
    
    <% RenderHelper(New IsDirty()) %>
    
    <% RenderHelper(New PartialMethods()) %>
    <% RenderHelper(New Exists()) %>
    <% RenderHelper(New CompositeKeyMethods()) %>
    End Class
End Namespace