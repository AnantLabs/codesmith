<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="MapDataReader" Template="..\..\Common\MapDataReader.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildCreate" Template="..\..\Common\ChildCreate.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildFetch" Template="..\..\Common\ChildFetch.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildInsert" Template="..\..\Common\ChildInsert.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildUpdate" Template="..\..\Common\ChildUpdate.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalDelete" Template="..\..\Common\ChildDelete.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On
<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
<% End If %>

Imports System
Imports System.Data
Imports System.Data.SqlClient

Imports Csla
Imports Csla.Data

Namespace <%= BusinessProjectName %>
    Public Partial Class <%= BusinessClassName %><%= Entity.GenericProperty %>
        <RunLocal()> _
        Protected Overrides Sub Child_Create()
    <% RenderHelper(New ChildCreate()) %>
        End Sub
        
        Private Sub Child_Fetch(ByVal criteria As <%= CriteriaClassName %><%= Entity.GenericProperty %>)
    <% RenderHelper(New ChildFetch()) %>
        End Sub
    
#Region "Child_Insert"
    
        Private Sub Child_Insert(ByVal connection as SqlConnection)
    <% RenderHelper(New ChildInsert(), true) %>
        End Sub
    <% If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Count() > 0) Then
        If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Distinct().Count() > 1) Then
            Dim index As Integer = 0
        For Each association As Association In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Distinct() %>
    
        Private Sub Child_Insert(<%= association.BuildParametersVariables(True) %>)
        Child_Insert(<%= association.BuildUpdateStatementVariables(Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Distinct().ToList(), index, true) %>)
        End Sub
        <% index += 1 
        Next
        End If %>
    
        Private Sub Child_Insert(<%= Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Distinct().ToList().BuildParametersVariables(True) %>)
    <% RenderHelper(New ChildInsert()) %>
        End Sub
    
    <%End If%>
    
#End Region
    
#Region "Child_Update"
    
        Private Sub Child_Update(ByVal connection as SqlConnection)
    <% RenderHelper(New ChildUpdate(), true) %>
        End Sub
    <% If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Count() > 0) Then
        If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Distinct().Count() > 1) Then
            Dim index As Integer = 0
        For Each association As Association In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Distinct() %>
    
        Private Sub Child_Update(<%= association.BuildParametersVariables(True) %>)
        Child_Update(<%= association.BuildUpdateStatementVariables(Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Distinct().ToList(), index, true) %>)
        End Sub
        <% index += 1 
        Next
        End If %>
    
        Private Sub Child_Update(<%= Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Distinct().ToList().BuildParametersVariables(True) %>)
    <% RenderHelper(New ChildUpdate()) %>
        End Sub
    
    <%End If%>
    
#End Region
    
    
        Private Sub Child_DeleteSelf(ByVal connection as SqlConnection)
            Dim cancel As Boolean = False
            OnChildSelfDeleting(connection, cancel)
            If (cancel) Then
                Return
            End If
        
            DataPortal_Delete(New <%= CriteriaClassName %> (<% If (UseMemberVariables) Then %><%= Entity.GetProperties(PropertyType.Key).BuildPrivateMemberVariableArguments() %><% else %><%= Entity.GetProperties(PropertyType.Key).BuildPropertyVariableArguments() %><% End If %>), connection)
        
            OnChildSelfDeleted()
        End Sub
        
        Protected Shadows Sub DataPortal_Delete(ByVal criteria As <%= CriteriaClassName %><%= Entity.GenericProperty %>, ByVal connection as SqlConnection)
    <% RenderHelper(New DataPortalDelete()) %>
        End Sub
    
        
        Private Sub Map(ByVal reader As SafeDataReader)
    <% RenderHelper(New MapDataReader()) %>
    
            MarkAsChild()
            MarkOld()
        End Sub
    End Class
End Namespace
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>