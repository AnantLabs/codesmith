<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA EditableChildList" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirtyList.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="AddNewCore" Template="..\..\Common\ListAddNewCore.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Collections.Generic

Imports Csla
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
Imports Csla.Serialization
#Else
Imports Csla.Data
#End If
<% Else %>
Imports Csla.Data
<% End If %>

Namespace <%= BusinessProjectName %>
    <Serializable()> _
    <% If(DataAccessImplementation = DataAccessMethod.ObjectFactoryNone Or DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL Or DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures) %>
    <Csla.Server.ObjectFactory(FactoryNames.<%= Entity.ClassName %>ListFactoryName)> _
    <% End If %>
    Public Partial Class <%= BusinessClassName %> 
        Inherits BusinessListBase(Of <%= BusinessClassName %>, <%= ChildBusinessClassName %>)
    
#Region "Contructor(s)"
    <% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
    <% End If %>
        Private Sub New()
            AllowNew = true
            MarkAsChild()
        End Sub
    <% If(IncludeSilverlightSupport) Then %>
#Else
        public Sub New()
            AllowNew = true
            MarkAsChild()
        End Sub
#End If
    <% End If %>
    
#End Region
    
    <% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
    <% End If %>
#Region "Synchronous Factory Methods" 
    
        Friend Shared Function NewList() As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Return DataPortal.CreateChild(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
        End Function
    <% For Each sc As SearchCriteria In  Entity.SearchCriteria() %>
    
        Friend Shared Function <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariables() %>) As <%= BusinessClassName %><%= Entity.GenericProperty %> 
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
            <%= sc.Members.BuildObjectInitializer() %>
    
            Return DataPortal.FetchChild(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)(criteria)
        End Function
    <% Next %>
    
        Friend Shared Function GetAll() As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Return DataPortal.FetchChild(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)(New <%= CriteriaClassName %><%= Entity.GenericProperty %>())
        End Function
    
#End Region
    <% If(IncludeSilverlightSupport) Then %>
#End If        
    
#Region "Asynchronous Factory Methods"

#If SILVERLIGHT Then
        Friend Shared Sub NewListAsync(ByVal handler As EventHandler(Of DataPortalResult(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
<% For Each sc As SearchCriteria In  Entity.SearchCriteria() %>
    
        Friend Shared Sub <%= sc.MethodName %>Async(<%= sc.Members.BuildParametersVariables() %>, ByVal handler As EventHandler(Of DataPortalResult(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)))
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
            <%= sc.Members.BuildObjectInitializer() %>

            'How should this be called? In the sync method we call FetchChild.
            Dim dp As New DataPortal(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler
            dp.BeginFetch(criteria)
        End Sub
<% Next %>
    
        Friend Shared Sub GetAllAsync(ByVal handler As EventHandler(Of DataPortalResult(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)))
            'How should this be called? In the sync method we call FetchChild.
            Dim dp As New DataPortal(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler
            dp.BeginFetch(New <%= CriteriaClassName %><%= Entity.GenericProperty %>())
        End Sub 
#End If

#End Region
<% End If %>
    
#Region "Method Overrides"
    
    <% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
    <% End If %>
        Protected Overrides Function AddNewCore() As <% If (IsCSLA40) Then %><%= ChildBusinessClassName %><%= Entity.GenericProperty %><% Else %>Object<% End If %>
    <% RenderHelper(new AddNewCore()) %>
        End Function
    <% If(IncludeSilverlightSupport) Then %>
#Else
        Protected Overrides Sub AddNewCore() 
    <% RenderHelper(new AddNewCore(), IncludeSilverlightSupport) %>
        End Sub
#End If
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
<% End If %>
        Protected Sub AddNewCoreAsync(ByVal handler As EventHandler(Of DataPortalResult(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)))
            <%= BusinessProjectName %>.<%= ChildBusinessClassName %><%= Entity.GenericProperty %>.New<%= ChildBusinessClassName %>Async(Sub(o, e)
                    If e.Error Is Nothing Then
                        Add(e.Object)
                        handler.Invoke(Me, New DataPortalResult(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)(e.Object, Nothing, Nothing))
                    End If
                End Sub)
        End Sub
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
    <% End If %>
    
#End Region
    <% RenderHelper(New IsDirty()) %>
    <% RenderHelper(New PartialMethods()) %>
    <% RenderHelper(New Exists()) %>
    End Class
End Namespace