<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
            Dim cancel As Boolean = False
            OnChildInserting(connection, cancel)
            If (cancel) Then
                Return
            End If
    
            If Not (connection.State = ConnectionState.Open) Then connection.Open()
            Using command As New SqlCommand("<%= GetInsertStoredProcedureName() %>", connection)
                command.CommandType = CommandType.StoredProcedure
                <%= entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(False, False, Not RenderOptionalContent, True) %>
    <% If(Entity.ConcurrencyProperty != null) Then %>
                command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.ColumnName %>", SqlDbType.Timestamp)
                command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.ColumnName %>").Value = Me.<%= Entity.ConcurrencyProperty.PropertyName %>
                command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.ColumnName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
                command.ExecuteNonQuery()
    
    <% If (Entity.ConcurrencyProperty != null) Then %>
                <%= Entity.ConcurrencyProperty.PropertyName %> = DirectCast(command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.ColumnName %>").Value, <%= Entity.ConcurrencyProperty.SystemType %>)
    <% End If %>
    <% For Each member As Member In Entity.GetProperties(PropertyType.Key)
        If(member.IsType(PropertyType.Identity) OrElse member.DataType = DbType.Guid) Then %>
    
                ' Update identity or guid primary key value.
            <% If(UseMemberVariables) Then %>
                <%= member.PrivateMemberVariableName %> = DirectCast(command.Parameters("<%= member.BuildParameterVariableName() %>").Value, <%= member.SystemType %>)
            <% Else %>
                LoadProperty(<%= member.PrivateMemberVariableName %>Property, DirectCast(command.Parameters("<%= member.BuildParameterVariableName() %>").Value, <%= member.SystemType %>))
            <% End If
        Else %> 
    
                ' Update the original non-identity primary key value.
            <% If(UseMemberVariables) Then %>
                _original<%= member.PropertyName %> = Me.<%= member.PropertyName %>
            <% Else %>
                LoadProperty(_original<%= member.PropertyName %>Property, Me.<%= member.PropertyName %>)
            <% End If %>
    <%  End If
    Next %>
    
            End Using
    <% If Not RenderOptionalContent Then
        For Each member As Member In Entity.Properties
                If member.IsType(PropertyType.Foreign) AndAlso Not member.IsType(PropertyType.Key) Then
            If String.IsNullOrEmpty(member.ResolveAssociationPropertyClassName()) Then
                Continue For
            End If  %>
    
            ' Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
    <% Dim localParameterName As String = member.ResolveAssociationPropertyVariable()
    Dim localParameterNameWithChildProperty As String = member.ResolveAssociationPropertyVariableWithChildProperty() %>
            '   BLAKE: Parent objects in VB require a different syntax check [Please Use IsNothing(ParentObjectParameter)]            
            If(Not IsNothing(<%= localParameterName %>) AndAlso Not <%= localParameterNameWithChildProperty %> = Me.<%= member.PropertyName %>) Then
    <% If(UseMemberVariables) Then %>
                <%= member.PrivateMemberVariableName %> = <%= localParameterNameWithChildProperty %>
    <% Else %>
                LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%= localParameterNameWithChildProperty %>)
    <% End If %>
            End If
                <% End If
        Next
    End If %>
    
    <% If (Entity.Associations.Count(a => a.AssociationType == AssociationType.OneToMany) > 0 OrElse Entity.Associations.Count(a => a.AssociationType == AssociationType.ManyToOne) > 0 OrElse Entity.Associations.Count(a => a.AssociationType == AssociationType.OneToZeroOrOne) > 0) Then
        If (Not RenderOptionalContent) Then
        Dim childCount As Integer = 0
        For Each a As Association In Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany)
            If IsChildBusinessObject(a) Then
                childCount += 1
            End If
        Next
    
        If childCount > 0 Then %>
            FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>)
        <% Else %>
            ' A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            ' TODO: Please override OnChildInserted() and insert this child manually.
            'FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>)
        <% End If 
        Else %>
            FieldManager.UpdateChildren(Me, connection)
    <% End If
    End If %>
    
            OnChildInserted()
