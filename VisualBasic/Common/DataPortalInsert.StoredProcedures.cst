<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
            Dim cancel As Boolean = False
            OnInserting(cancel)
            If (cancel) Then
                Return
            End If
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("<%= GetInsertStoredProcedureName() %>", connection)
                    command.CommandType = CommandType.StoredProcedure
                    <%= entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(False, True, False, True) %>
    <% If(Entity.ConcurrencyProperty != null) Then %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.ColumnName %>", SqlDbType.Timestamp)
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.ColumnName %>").Value = Me.<%= Entity.ConcurrencyProperty.PropertyName %>
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.ColumnName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
                    command.ExecuteNonQuery()
    
                    Using (BypassPropertyChecks)
    <% If (Entity.ConcurrencyProperty != null) Then %>
                        <%= Entity.ConcurrencyProperty.PropertyName %> = DirectCast(command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.ColumnName %>").Value, <%= Entity.ConcurrencyProperty.SystemType %>)
    <% End If %>
    <% for each member As Member in Entity.Key.Properties
        If(member.IsType(PropertyType.Identity) OrElse member.DataType = DbType.Guid) Then
            If(UseMemberVariables) Then %>
                        <%= member.PrivateMemberVariableName %> =  DirectCast(command.Parameters("<%= member.BuildParameterVariableName() %>").Value,<%= member.SystemType %>)
            <% Else %>
                        LoadProperty(<%= member.PrivateMemberVariableName %>Property, DirectCast(command.Parameters("<%= member.BuildParameterVariableName() %>").Value,<%= member.SystemType %>))
            <% End If
        End If
    Next %>
                    End Using
                End Using
                
    <% For Each member As Member In Entity.Key.Properties
        If Not (member.IsType(PropertyType.Identity)) Then
            If(UseMemberVariables) Then %>
                _original<%= member.PropertyName %> = Me.<%= member.PropertyName %>
        <% Else %>
                LoadProperty(_original<%= member.PropertyName %>Property, Me.<%= member.PropertyName %>)
        <% End If
        End If
    Next %>
    <% If (Entity.Associations.Count(a => a.AssociationType == AssociationType.OneToMany) > 0 OrElse Entity.Associations.Count(a => a.AssociationType == AssociationType.ManyToOne) > 0 OrElse Entity.Associations.Count(a => a.AssociationType == AssociationType.OneToZeroOrOne) > 0) Then %>
    
                FieldManager.UpdateChildren(Me, connection)
    <% End If %>
            End Using
    
            OnInserted()
