<%-- 
Name: BL Base Class Template
Author: Chris Lasater
Description: Allows generation of BL Base class from parameters
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Concrete Class Template" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

using System;
using System.Collections;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Validation
{
	/// <summary>
	/// This is a collection class for Validation Messages.
	/// We use this to render and expected type from a collection.
	/// It acts as an iterator and has appropriate collection methods
	/// It also has an indexer
	/// it is marked internal so it cannot be created outside the 
	/// assembly, this makes sure only expected creations of the object are possible
	/// and makes the assembly into a complete facade with only known interfaces as entry points
	/// </summary>
	public class ValidationMessages : ICollection
	{
		#region Private Variables
		private ArrayList _messages = new ArrayList();
		private int _index = 0;
		private bool _hasExceptions = false;
		private bool _hasNonExceptionMessages = false;
		#endregion		

		#region Properties
		/// <summary>
		/// Tells if the collection has validation messages that are exceptions
		/// </summary>
		public bool HasExceptions
		{
			get{return _hasExceptions;}
		}
		/// <summary>
		/// Tells if the collection has validation messages that are Messages
		/// </summary>
		public bool HasMessages
		{
			get{return _hasNonExceptionMessages;}
		}
		#endregion

		#region Indexer
		/// <summary>
		/// 
		/// </summary>
		public  ValidationMessage this[int index]
		{
			get{return (ValidationMessage)_messages[index];}
		}
		#endregion

		#region ICollection Members

		public bool IsSynchronized
		{
			get
			{				
				return _messages.IsSynchronized;
			}
		}

		public int Count
		{
			get
			{
				// TODO:  Add OneWaySearchResultsBL.Count getter implementation
				return _messages.Count;
			}
		}

		public void CopyTo(Array array, int index)
		{
			_messages.CopyTo(array, index);
		}

		public object SyncRoot
		{
			get
			{
				return _messages.SyncRoot;
			}
		}

		#endregion

		#region IEnumerator Members
		
		public void Reset()
		{
			_index = 0;
		}

		public ValidationMessage Current
		{
			get
			{				
				return this[_index];
			}
		}

		public bool MoveNext()
		{
			if(_index + 1 < _messages.Count)
			{
				_index ++;
				return true;
			}
			return false;
		}

		#endregion

		#region IList Members

		public bool IsReadOnly
		{
			get
			{
				// TODO:  Add OneWaySearchResultsBL.IsReadOnly getter implementation
				return _messages.IsReadOnly;
			}
		}

		
		public void RemoveAt(int index)
		{
			_messages.RemoveAt(index);
		}

		public void Insert(int index, ValidationMessage value)
		{
			if(value.ValidationLevel == Base.Validation.ValidationLevel.Exception)
				this._hasExceptions = true;
			if(value.ValidationLevel == Base.Validation.ValidationLevel.Message)
				_hasNonExceptionMessages = true;
			_messages.Insert(index, value);
		}

		public void Remove(ValidationMessage value)
		{
			_messages.Remove(value);
		}

		public bool Contains(ValidationMessage value)
		{
			// TODO:  Add OneWaySearchResultsBL.Contains implementation
			return _messages.Contains(value);
		}

		public void Clear()
		{			
			_messages.Clear();
			if(_messages.Count < 1) 
			{
				this._hasExceptions = false;	
				this._hasNonExceptionMessages = false;
			}
		}

		public int IndexOf(ValidationMessage value)
		{	
			return _messages.IndexOf(value);
		}
		/// <summary>
		/// Adds a ValidationMessage only
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public int Add(ValidationMessage value)
		{			
			if(value.ValidationLevel == Base.Validation.ValidationLevel.Exception)
				this._hasExceptions = true;
			if(value.ValidationLevel == Base.Validation.ValidationLevel.Message)
				_hasNonExceptionMessages = true;
			return _messages.Add(value);
		}

		public bool IsFixedSize
		{
			get
			{		
				return _messages.IsFixedSize;
			}
		}

		#endregion

		#region IEnumerable Members

		public IEnumerator GetEnumerator()
		{
			// TODO:  Add Rules.GetEnumerator implementation
			return _messages.GetEnumerator();
		}

		#endregion
	}
}


<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	return "ValidationMessages";	
}
#endregion



</script>