<%@ CodeTemplate Language="VB" TargetLanguage="VB" Description="Generates a strongly-typed collection of objects." %>
<%@ Property Name="ClassNamespace" Type="System.String" Optional="True" Category="Context" Description="The namespace that the generated class will be a member of." %>
<%@ Property Name="ItemType" Type="System.String" Category="Context" Description="The type to use as an item in the collection." %>
<%@ Property Name="ClassName" Type="System.String" Category="Context" Description="The name of the class to be generated." %>
<%@ Property Name="Accessibility" Type="AccessibilityEnum" Category="Options" Description="The accessibility of the class to be generated." %>
Option Strict On

Imports System
Imports System.Collections

<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>
Namespace <%= ClassNamespace %>
<% End If %>

    '/// <summary>
    '///		A strongly-typed collection of <see cref="<%= ItemType %>"/> objects.
    '/// </summary>
    <Serializable()> _
    <%= GetAccessModifier(Accessibility) %> Class <%= ClassName %>
        Implements ICollection
        Implements IList
        Implements IEnumerable
        Implements ICloneable

#Region "Interfaces"
        '/// <summary>
        '///		Supports type-safe iteration over a <see cref="<%= ClassName %>"/>.
        '/// </summary>
        Public Interface I<%= ClassName %>Enumerator

            '/// <summary>
            '///		Gets the current element in the collection.
            '/// </summary>
            ReadOnly Property Current() As <%= ItemType %>

            '/// <summary>
            '///		Advances the enumerator to the next element in the collection.
            '/// </summary>
            '/// <exception cref="InvalidOperationException">
            '///		The collection was modified after the enumerator was created.
            '/// </exception>
            '/// <returns>
            '///		<c>true</c> if the enumerator was successfully advanced to the next element 
            '///		<c>false</c> if the enumerator has passed the end of the collection.
            '/// </returns>
            Function MoveNext() As Boolean

            '/// <summary>
            '///		Sets the enumerator to its initial position, before the first element in the collection.
            '/// </summary>
            Sub Reset()
        End Interface
#End Region

        Private Const DEFAULT_CAPACITY As Integer = 15

#Region "Implementation (data)"
        Private m_array() As <%= ItemType %>
        Private m_count As Integer = 0
        <NonSerialized()> _
        Private m_version As Integer = 0
#End Region


#Region "Static Wrappers"
        '/// <summary>
        '///		Creates a synchronized (thread-safe) wrapper for a 
        '///     <c><%= ClassName %></c> instance.
        '/// </summary>
        '/// <returns>
        '///     An <c><%= ClassName %></c> wrapper that is synchronized (thread-safe).
        '/// </returns>
        Public Shared Function Synchronized(ByVal list As <%= ClassName %>) As <%= ClassName %>
            If (list Is Nothing) Then
                Throw New ArgumentNullException("list")
            End If
            Return New Sync<%= ClassName %>(list)
        End Function

        '/// <summary>
        '///		Creates a read-only wrapper for a 
        '///     <c><%= ClassName %></c> instance.
        '/// </summary>
        '/// <returns>
        '///     An <c><%= ClassName %></c> wrapper that is read-only.
        '/// </returns>
        Public Shared Function GetReadOnly(ByVal list As <%= ClassName %>) As <%= ClassName %>
            If (list Is Nothing) Then
                Throw New ArgumentNullException("list")
            End If
            Return New ReadOnly<%= ClassName %>(list)
        End Function
#End Region

#Region "Construction"
        '/// <summary>
        '///		Initializes a new instance of the <c><%= ClassName %></c> class
        '///		that is empty and has the default initial capacity.
        '/// </summary>
        Public Sub New()
            m_array = New <%= ItemType %>(DEFAULT_CAPACITY) {}
        End Sub

        '/// <summary>
        '///		Initializes a new instance of the <c><%= ClassName %></c> class
        '///		that has the specified initial capacity.
        '/// </summary>
        '/// <param name="capacity">
        '///		The number of elements that the new <c><%= ClassName %></c> is initially capable of storing.
        '///	</param>
        Public Sub New(ByVal capacity As Integer)
            m_array = New <%= ItemType %>(capacity) {}
        End Sub

        '/// <summary>
        '///		Initializes a new instance of the <c><%= ClassName %></c> class
        '///		that contains elements copied from the specified <c><%= ClassName %></c>.
        '/// </summary>
        '/// <param name="c">The <c><%= ClassName %></c> whose elements are copied to the new collection.</param>
        Public Sub New(ByVal c As <%= ClassName %>)
            m_array = New <%= ItemType %>(c.Count) {}
            AddRange(c)
        End Sub

        '/// <summary>
        '///		Initializes a new instance of the <c><%= ClassName %></c> class
        '///		that contains elements copied from the specified <see cref="<%= ItemType %>"/> array.
        '/// </summary>
        '/// <param name="a">The <see cref="<%= ItemType %>"/> array whose elements are copied to the new list.</param>
        Public Sub New(ByVal a() As <%= ItemType %>)
            m_array = New <%= ItemType %>(a.Length) {}
            AddRange(a)
        End Sub
#End Region

#Region "Operations (type-safe ICollection)"
        '/// <summary>
        '///		Gets the number of elements actually contained in the <c><%= ClassName %></c>.
        '/// </summary>
        Public Overridable ReadOnly Property Count() As Integer Implements ICollection.Count
            Get
                Return m_count
            End Get
        End Property

        '/// <summary>
        '///		Copies the entire <c><%= ClassName %></c> to a one-dimensional
        '///		<see cref="<%= ItemType %>"/> array.
        '/// </summary>
        '/// <param name="array">The one-dimensional <see cref="<%= ItemType %>"/> array to copy to.</param>
        Public Overridable Sub CopyTo(ByVal array() As <%= ItemType %>)
            Me.CopyTo(array, 0)
        End Sub

        '/// <summary>
        '///		Copies the entire <c><%= ClassName %></c> to a one-dimensional
        '///		<see cref="<%= ItemType %>"/> array, starting at the specified index of the target array.
        '/// </summary>
        '/// <param name="array">The one-dimensional <see cref="<%= ItemType %>"/> array to copy to.</param>
        '/// <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        Public Overridable Sub CopyTo(ByVal array() As <%= ItemType %>, ByVal start As Integer)
            If (m_count > (array.GetUpperBound(0) + 1 - start)) Then
                Throw New System.ArgumentException("Destination array was not long enough.")
            End If
            array.Copy(m_array, 0, array, start, m_count)
        End Sub

        '/// <summary>
        '///		Gets a value indicating whether access to the collection is synchronized (thread-safe).
        '/// </summary>
        '/// <returns>true if access to the ICollection is synchronized (thread-safe) otherwise, false.</returns>
        Public Overridable ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized
            Get
                Return m_array.IsSynchronized
            End Get
        End Property

        '/// <summary>
        '///		Gets an object that can be used to synchronize access to the collection.
        '/// </summary>
        Public Overridable ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot
            Get
                Return m_array.SyncRoot
            End Get
        End Property
#End Region


#Region "Operations (type-safe IList)"
        '/// <summary>
        '///		Gets or sets the <see cref="<%= ItemType %>"/> at the specified index.
        '/// </summary>
        '/// <param name="index">The zero-based index of the element to get or set.</param>
        '/// <exception cref="ArgumentOutOfRangeException">
        '///		<para><paramref name="index"/> is less than zero</para>
        '///		<para>-or-</para>
        '///		<para><paramref name="index"/> is equal to or greater than <see cref="<%= ClassName %>.Count"/>.</para>
        '/// </exception>
        Default Public Overridable Property Item(ByVal index As Integer) As <%= ItemType %>
            Get
                ValidateIndex(index) '// throws
                Return m_array(index)
            End Get
            Set(ByVal Value As <%= ItemType %>)
                ValidateIndex(index) '// throws
                m_version += 1
                m_array(index) = Value
            End Set
        End Property

        '/// <summary>
        '///		Adds a <see cref="<%= ItemType %>"/> to the end of the <c><%= ClassName %></c>.
        '/// </summary>
        '/// <param name="item">The <see cref="<%= ItemType %>"/> to be added to the end of the <c><%= ClassName %></c>.</param>
        '/// <returns>The index at which the value has been added.</returns>
        Public Overridable Function Add(ByVal item As <%= ItemType %>) As Integer
            If (m_count = m_array.Length) Then
                EnsureCapacity(m_count + 1)
            End If

            m_array(m_count) = item
            m_version += 1
            m_count += 1
            Return (m_count - 1)
        End Function

        '/// <summary>
        '///		Removes all elements from the <c><%= ClassName %></c>.
        '/// </summary>
        Public Overridable Sub Clear() Implements IList.Clear
            m_version += 1
            m_array = New <%= ItemType %>(DEFAULT_CAPACITY) {}
            m_count = 0
        End Sub

        '/// <summary>
        '///		Creates a shallow copy of the <see cref="<%= ClassName %>"/>.
        '/// </summary>
        Public Overridable Function Clone() As Object Implements ICloneable.Clone
            Dim newColl As <%= ClassName %> = New <%= ClassName %>(m_count)
            Array.Copy(m_array, 0, newColl.m_array, 0, m_count)
            newColl.m_count = m_count
            newColl.m_version = m_version

            Return newColl
        End Function

        '/// <summary>
        '///		Determines whether a given <see cref="<%= ItemType %>"/> is in the <c><%= ClassName %></c>.
        '/// </summary>
        '/// <param name="item">The <see cref="<%= ItemType %>"/> to check for.</param>
        '/// <returns><c>true</c> if <paramref name="item"/> is found in the <c><%= ClassName %></c> otherwise, <c>false</c>.</returns>
        Public Overridable Function Contains(ByVal item As <%= ItemType %>) As Boolean
            Dim i As Integer
            For i = 0 To (m_count - 1) Step 1
                If (m_array(i).Equals(item)) Then
                    Return True
                End If
            Next
            Return False
        End Function

        '/// <summary>
        '///		Returns the zero-based index of the first occurrence of a <see cref="<%= ItemType %>"/>
        '///		in the <c><%= ClassName %></c>.
        '/// </summary>
        '/// <param name="item">The <see cref="<%= ItemType %>"/> to locate in the <c><%= ClassName %></c>.</param>
        '/// <returns>
        '///		The zero-based index of the first occurrence of <paramref name="item"/> 
        '///		in the entire <c><%= ClassName %></c>, if found otherwise, -1.
        '///	</returns>
        Public Overridable Function IndexOf(ByVal item As <%= ItemType %>) As Integer
            Dim i As Integer
            For i = 0 To (m_count - 1) Step 1
                If (m_array(i).Equals(item)) Then
                    Return i
                End If
            Next
            Return -1
        End Function

        '/// <summary>
        '///		Inserts an element into the <c><%= ClassName %></c> at the specified index.
        '/// </summary>
        '/// <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
        '/// <param name="item">The <see cref="<%= ItemType %>"/> to insert.</param>
        '/// <exception cref="ArgumentOutOfRangeException">
        '///		<para><paramref name="index"/> is less than zero</para>
        '///		<para>-or-</para>
        '///		<para><paramref name="index"/> is equal to or greater than <see cref="<%= ClassName %>.Count"/>.</para>
        '/// </exception>
        Public Overridable Sub Insert(ByVal index As Integer, ByVal item As <%= ItemType %>)
            ValidateIndex(index, True) '// throws

            If (m_count = m_array.Length) Then EnsureCapacity(m_count + 1)

            If (index < m_count) Then
                Array.Copy(m_array, index, m_array, index + 1, m_count - index)
            End If

            m_array(index) = item
            m_count += 1
            m_version += 1
        End Sub

        '/// <summary>
        '///		Removes the first occurrence of a specific <see cref="<%= ItemType %>"/> from the <c><%= ClassName %></c>.
        '/// </summary>
        '/// <param name="item">The <see cref="<%= ItemType %>"/> to remove from the <c><%= ClassName %></c>.</param>
        '/// <exception cref="ArgumentException">
        '///		The specified <see cref="<%= ItemType %>"/> was not found in the <c><%= ClassName %></c>.
        '/// </exception>
        Public Overridable Sub Remove(ByVal item As <%= ItemType %>)
            Dim i As Integer = IndexOf(item)
            If (i < 0) Then
                Throw New System.ArgumentException("Cannot remove the specified item because it was not found in the specified Collection.")
            End If

            m_version += 1
            RemoveAt(i)
        End Sub

        '/// <summary>
        '///		Removes the element at the specified index of the <c><%= ClassName %></c>.
        '/// </summary>
        '/// <param name="index">The zero-based index of the element to remove.</param>
        '/// <exception cref="ArgumentOutOfRangeException">
        '///		<para><paramref name="index"/> is less than zero</para>
        '///		<para>-or-</para>
        '///		<para><paramref name="index"/> is equal to or greater than <see cref="<%= ClassName %>.Count"/>.</para>
        '/// </exception>
        Public Overridable Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt

            ValidateIndex(index) '// throws

            m_count -= 1

            If (index < m_count) Then
                Array.Copy(m_array, index + 1, m_array, index, m_count - index)
            End If

            '// We can't set the deleted entry equal to null, because it might be a value type.
            '// Instead, we'll create an empty single-element array of the right type and copy it 
            '// over the entry we want to erase.
            Dim temp(0) As <%= ItemType %>
            temp(0) = New <%= ItemType %>()
            Array.Copy(temp, 0, m_array, m_count, 1)
            m_version += 1
        End Sub

        '/// <summary>
        '///		Gets a value indicating whether the collection has a fixed size.
        '/// </summary>
        '/// <value>true if the collection has a fixed size otherwise, false. The default is false</value>
        Public Overridable ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize
            Get
                Return False
            End Get
        End Property

        '/// <summary>
        '///		gets a value indicating whether the IList is read-only.
        '/// </summary>
        '/// <value>true if the collection is read-only otherwise, false. The default is false</value>
        Public Overridable ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly
            Get
                Return False
            End Get
        End Property
#End Region


#Region "Operations (type-safe IEnumerable)"

        '/// <summary>
        '///		Returns an enumerator that can iterate through the <c><%= ClassName %></c>.
        '/// </summary>
        '/// <returns>An <see cref="Enumerator"/> for the entire <c><%= ClassName %></c>.</returns>
        Public Overridable Function GetEnumerator() As I<%= ClassName %>Enumerator
            Return New Enumerator(Me)
        End Function
#End Region


#Region "Public helpers (just to mimic some nice features of ArrayList)"

        '/// <summary>
        '///		Gets or sets the number of elements the <c><%= ClassName %></c> can contain.
        '/// </summary>
        Public Overridable Property Capacity() As Integer
            Get
                Return m_array.Length
            End Get

            Set(ByVal Value As Integer)
                If (Value < m_count) Then Value = m_count

                If Not (Value = m_array.Length) Then
                    If (Value > 0) Then
						' C# implementation
                        'Dim temp() As <%= ItemType %> = New <%= ItemType %>(Value-1) {}
                        'Array.Copy(m_array, temp, m_count)
                        'm_array = temp
                        ' VB implementation
                        redim preserve m_array(Value)
                    Else
                        m_array = New <%= ItemType %>(DEFAULT_CAPACITY) {}
                    End If
                End If
            End Set
        End Property

        '/// <summary>
        '///		Adds the elements of another <c><%= ClassName %></c> to the current <c><%= ClassName %></c>.
        '/// </summary>
        '/// <param name="x">The <c><%= ClassName %></c> whose elements should be added to the end of the current <c><%= ClassName %></c>.</param>
        '/// <returns>The new <see cref="<%= ClassName %>.Count"/> of the <c><%= ClassName %></c>.</returns>
        Public Overridable Function AddRange(ByVal x As <%= ClassName %>) As Integer

            If (m_count + x.Count >= m_array.Length) Then EnsureCapacity(m_count + x.Count)

            Array.Copy(x.m_array, 0, m_array, m_count, x.Count)
            m_count += x.Count
            m_version += 1

            Return m_count
        End Function

        '/// <summary>
        '///		Adds the elements of a <see cref="<%= ItemType %>"/> array to the current <c><%= ClassName %></c>.
        '/// </summary>
        '/// <param name="x">The <see cref="<%= ItemType %>"/> array whose elements should be added to the end of the <c><%= ClassName %></c>.</param>
        '/// <returns>The new <see cref="<%= ClassName %>.Count"/> of the <c><%= ClassName %></c>.</returns>
        Public Overridable Function AddRange(ByVal x() As <%= ItemType %>) As Integer

            If (m_count + x.Length >= m_array.Length) Then EnsureCapacity(m_count + x.Length)

            Array.Copy(x, 0, m_array, m_count, x.Length)
            m_count += x.Length
            m_version += 1

            Return m_count
        End Function

        '/// <summary>
        '///		Sets the capacity to the actual number of elements.
        '/// </summary>
        Public Overridable Sub TrimToSize()
            Me.Capacity = m_count
        End Sub

#End Region

#Region "Implementation (helpers)"

        '/// <exception cref="ArgumentOutOfRangeException">
        '///		<para><paramref name="index"/> is less than zero</para>
        '///		<para>-or-</para>
        '///		<para><paramref name="index"/> is equal to or greater than <see cref="<%= ClassName %>.Count"/>.</para>
        '/// </exception>
        Private Sub ValidateIndex(ByVal i As Integer)
            ValidateIndex(i, False)
        End Sub

        '/// <exception cref="ArgumentOutOfRangeException">
        '///		<para><paramref name="index"/> is less than zero</para>
        '///		<para>-or-</para>
        '///		<para><paramref name="index"/> is equal to or greater than <see cref="<%= ClassName %>.Count"/>.</para>
        '/// </exception>
        Private Sub ValidateIndex(ByVal i As Integer, ByVal allowEqualEnd As Boolean)
            Dim max As Integer

            If allowEqualEnd Then
                max = m_count
            Else
                max = m_count - 1
            End If

            If (i < 0 Or i > max) Then
                Throw New System.ArgumentOutOfRangeException("Index was out of range.  Must be non-negative and less than the size of the collection.", CType(1, Object), "Specified argument was out of the range of valid values.")
            End If
        End Sub

        Private Sub EnsureCapacity(ByVal min As Integer)

            Dim newCapacity As Integer
            If m_array.Length = 0 Then
                newCapacity = DEFAULT_CAPACITY
            Else
                newCapacity = m_array.Length * 2
            End If

            If (newCapacity < min) Then newCapacity = min

            Me.Capacity = newCapacity
        End Sub

#End Region

#Region "Implementation (ICollection)"

        Sub CopyTo(ByVal array As Array, ByVal start As Integer) Implements ICollection.CopyTo
            Array.Copy(m_array, 0, array, start, m_count)
        End Sub

#End Region

#Region "Implementation (IList)"
        ' Default removed
        Property IList_Item(ByVal i As Integer) As Object Implements IList.Item
            Get
                Return CType(Me(i), Object)
            End Get

            Set(ByVal Value As Object)
                Me(i) = CType(Value, <%= ItemType %>)
            End Set
        End Property

        Function Add(ByVal x As Object) As Integer Implements IList.Add
            Return Me.Add(CType(x, <%= ItemType %>))
        End Function

        Function Contains(ByVal x As Object) As Boolean Implements IList.Contains
            Return Me.Contains(CType(x, <%= ItemType %>))
        End Function

        Function IndexOf(ByVal x As Object) As Integer Implements IList.IndexOf
            Return Me.IndexOf(CType(x, <%= ItemType %>))
        End Function

        Sub Insert(ByVal pos As Integer, ByVal x As Object) Implements IList.Insert
            Me.Insert(pos, CType(x, <%= ItemType %>))
        End Sub

        Sub Remove(ByVal x As Object) Implements IList.Remove
            Me.Remove(CType(x, <%= ItemType %>))
        End Sub

        'Sub RemoveAt(ByVal pos As Integer) Implements IList.RemoveAt
        '    Me.RemoveAt(pos)
        'End Sub

#End Region

#Region "Implementation (IEnumerable)"

        Function IEnumerable_GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator
            Return CType(Me.GetEnumerator(), IEnumerator)
        End Function

#End Region

#Region "Nested enumerator class"
        '/// <summary>
        '///		Supports simple iteration over a <see cref="<%= ClassName %>"/>.
        '/// </summary>
        Private Class Enumerator
            Implements IEnumerator, I<%= ClassName %>Enumerator

#Region "Implementation (data)"

            Private m_collection As <%= ClassName %>
            Private m_index As Integer
            Private m_version As Integer

#End Region

#Region "Construction"

            '/// <summary>
            '///		Initializes a new instance of the <c>Enumerator</c> class.
            '/// </summary>
            '/// <param name="tc"></param>
            Friend Sub New(ByVal tc As <%= ClassName %>)
                m_collection = tc
                m_index = -1
                m_version = tc.m_version
            End Sub

#End Region

#Region "Operations (type-safe IEnumerator)"

            '/// <summary>
            '///		Gets the current element in the collection.
            '/// </summary>
            Public ReadOnly Property Current() As <%= ItemType %> Implements I<%= ClassName %>Enumerator.Current
                Get
                    Return m_collection(m_index)
                End Get
            End Property

            '/// <summary>
            '///		Advances the enumerator to the next element in the collection.
            '/// </summary>
            '/// <exception cref="InvalidOperationException">
            '///		The collection was modified after the enumerator was created.
            '/// </exception>
            '/// <returns>
            '///		<c>true</c> if the enumerator was successfully advanced to the next element 
            '///		<c>false</c> if the enumerator has passed the end of the collection.
            '/// </returns>
            Public Function MoveNext() As Boolean Implements IEnumerator.MoveNext, I<%= ClassName %>Enumerator.MoveNext
                If Not (m_version = m_collection.m_version) Then
                    Throw New System.InvalidOperationException("Collection was modified enumeration operation may not execute.")
                End If

                m_index += 1

                If m_index < m_collection.Count Then
                    Return True
                Else
                    Return False
                End If
            End Function

            '/// <summary>
            '///		Sets the enumerator to its initial position, before the first element in the collection.
            '/// </summary>
            Public Sub Reset() Implements IEnumerator.Reset, I<%= ClassName %>Enumerator.Reset
                m_index = -1
            End Sub
#End Region

#Region "Implementation (IEnumerator)"

            ReadOnly Property IEnumerator_Current() As Object Implements IEnumerator.Current
                Get
                    Return CType(Me.Current, Object)
                End Get
            End Property

#End Region
        End Class
#End Region

#Region "Nested Syncronized Wrapper class"
        Private Class Sync<%= ClassName %>
            Inherits <%= ClassName %>

#Region "Implementation (data)"
            Private m_collection As <%= ClassName %>
            Private m_root As Object
#End Region

#Region "Construction"
            Friend Sub New(ByVal list As <%= ClassName %>)
                m_root = list.SyncRoot
                m_collection = list
            End Sub
#End Region

#Region "Type-safe ICollection"
            
            Public Overloads Overrides Sub CopyTo(ByVal array() As <%= ItemType %>)
                SyncLock Me.m_root
                    m_collection.CopyTo(array)
                End SyncLock
            End Sub
            
            Public Overloads Overrides Sub CopyTo(ByVal array() As <%= ItemType %>, ByVal start As Integer)
                SyncLock Me.m_root
                    m_collection.CopyTo(array, start)
                End SyncLock
            End Sub

            Public Overrides ReadOnly Property Count() As Integer
                Get
                    SyncLock Me.m_root
                        Return m_collection.Count
                    End SyncLock
                End Get
            End Property

            Public Overrides ReadOnly Property IsSynchronized() As Boolean
                Get
                    Return True
                End Get
            End Property

            Public Overrides ReadOnly Property SyncRoot() As Object
                Get
                    Return Me.m_root
                End Get
            End Property
#End Region

#Region "Type-safe IList"
            Default Public Overrides Property Item(ByVal i As Integer) As <%= ItemType %>
                Get
                    SyncLock Me.m_root
                        Return m_collection(i)
                    End SyncLock
                End Get
                Set(ByVal Value As <%= ItemType %>)
                    SyncLock Me.m_root
                        m_collection(i) = Value
                    End SyncLock
                End Set
            End Property
            
            Public Overloads Overrides Function Add(ByVal x As <%= ItemType %>) As Integer
                SyncLock Me.m_root
                    Return m_collection.Add(x)
                End SyncLock
            End Function

            Public Overrides Sub Clear()
                SyncLock Me.m_root
                    m_collection.Clear()
                End SyncLock
            End Sub
           
            Public Overloads Overrides Function Contains(ByVal x As <%= ItemType %>) As Boolean
                SyncLock Me.m_root
                    Return m_collection.Contains(x)
                End SyncLock
            End Function
            
            Public Overloads Overrides Function IndexOf(ByVal x As <%= ItemType %>) As Integer
                SyncLock Me.m_root
                    Return m_collection.IndexOf(x)
                End SyncLock
            End Function
           
            Public Overloads Overrides Sub Insert(ByVal pos As Integer, ByVal x As <%= ItemType %>)
                SyncLock Me.m_root
                    m_collection.Insert(pos, x)
                End SyncLock
            End Sub
            
            Public Overloads Overrides Sub Remove(ByVal x As <%= ItemType %>)
                SyncLock Me.m_root
                    m_collection.Remove(x)
                End SyncLock
            End Sub

            Public Overrides Sub RemoveAt(ByVal pos As Integer)
                SyncLock Me.m_root
                    m_collection.RemoveAt(pos)
                End SyncLock
            End Sub

            Public Overrides ReadOnly Property IsFixedSize() As Boolean
                Get
                    Return m_collection.IsFixedSize
                End Get
            End Property

            Public Overrides ReadOnly Property IsReadOnly() As Boolean
                Get
                    Return m_collection.IsReadOnly
                End Get
            End Property
#End Region

#Region "Type-safe IEnumerable"
            Public Overrides Function GetEnumerator() As I<%= ClassName %>Enumerator
                SyncLock Me.m_root
                    Return m_collection.GetEnumerator()
                End SyncLock
            End Function
#End Region

#Region "Public Helpers"
            '// (just to mimic some nice features of ArrayList)
            Public Overrides Property Capacity() As Integer
                Get
                    SyncLock Me.m_root
                        Return m_collection.Capacity
                    End SyncLock
                End Get

                Set(ByVal Value As Integer)
                    SyncLock Me.m_root
                        m_collection.Capacity = Value
                    End SyncLock
                End Set
            End Property
            
            Public Overloads Overrides Function AddRange(ByVal x As <%= ClassName %>) As Integer
                SyncLock Me.m_root
                    Return m_collection.AddRange(x)
                End SyncLock
            End Function
            
            Public Overloads Overrides Function AddRange(ByVal x() As <%= ItemType %>) As Integer
                SyncLock Me.m_root
                    Return m_collection.AddRange(x)
                End SyncLock
            End Function
#End Region
        End Class
#End Region

#Region "Nested Read Only Wrapper class"
        Private Class ReadOnly<%= ClassName %>
            Inherits <%= ClassName %>

#Region "Implementation (data)"
            Private m_collection As <%= ClassName %>
#End Region

#Region "Construction"
            Friend Sub New(ByVal list As <%= ClassName %>)
                m_collection = list
            End Sub
#End Region

#Region "Type-safe ICollection"
            
            Public Overloads Overrides Sub CopyTo(ByVal array() As <%= ItemType %>)
                m_collection.CopyTo(array)
            End Sub

            Public Overloads Overrides Sub CopyTo(ByVal array() As <%= ItemType %>, ByVal start As Integer)
                m_collection.CopyTo(array, start)
            End Sub

            Public Overrides ReadOnly Property Count() As Integer
                Get
                    Return m_collection.Count
                End Get
            End Property

            Public Overrides ReadOnly Property IsSynchronized() As Boolean
                Get
                    Return m_collection.IsSynchronized
                End Get
            End Property

            Public Overrides ReadOnly Property SyncRoot() As Object
                Get
                    Return Me.m_collection.SyncRoot
                End Get
            End Property
#End Region

#Region "Type-safe IList"
            Default Public Overrides Property Item(ByVal i As Integer) As <%= ItemType %>
                Get
                    Return m_collection(i)
                End Get

                Set(ByVal Value As <%= ItemType %>)
                    Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
                End Set
            End Property
            
            Public Overloads Overrides Function Add(ByVal x As <%= ItemType %>) As Integer
                Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
            End Function

            Public Overrides Sub Clear()
                Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
            End Sub
            
            Public Overloads Overrides Function Contains(ByVal x As <%= ItemType %>) As Boolean
                Return m_collection.Contains(x)
            End Function
            
            Public Overloads Overrides Function IndexOf(ByVal x As <%= ItemType %>) As Integer
                Return m_collection.IndexOf(x)
            End Function
            
            Public Overloads Overrides Sub Insert(ByVal pos As Integer, ByVal x As <%= ItemType %>)
                Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
            End Sub
            
            Public Overloads Overrides Sub Remove(ByVal x As <%= ItemType %>)
                Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
            End Sub

            Public Overrides Sub RemoveAt(ByVal pos As Integer)
                Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
            End Sub

            Public Overrides ReadOnly Property IsFixedSize() As Boolean
                Get
                    Return True
                End Get
            End Property

            Public Overrides ReadOnly Property IsReadOnly() As Boolean
                Get
                    Return True
                End Get
            End Property
#End Region

#Region "Type-safe IEnumerable"
            Public Overrides Function GetEnumerator() As I<%= ClassName %>Enumerator
                Return m_collection.GetEnumerator()
            End Function
#End Region

#Region "Public Helpers"
            '// (just to mimic some nice features of ArrayList)
            Public Overrides Property Capacity() As Integer
                Get
                    Return m_collection.Capacity
                End Get

                Set(ByVal Value As Integer)
                    Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
                End Set
            End Property
            
            Public Overloads Overrides Function AddRange(ByVal x As <%= ClassName %>) As Integer
                Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
            End Function
            
            Public Overloads Overrides Function AddRange(ByVal x() As <%= ItemType %>) As Integer
                Throw New NotSupportedException("This is a Read Only Collection and can not be modified")
            End Function
#End Region
        End Class
#End Region

    End Class
<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>
End Namespace
<% End If %>
<script runat="template">
Public Enum AccessibilityEnum
	[Public]
	[Protected]
	[Friend]
	[ProtectedFriend]
	[Private]
End Enum

Public Function GetAccessModifier(ByVal accessibility As AccessibilityEnum) As String
	Select accessibility
		Case AccessibilityEnum.Public
			GetAccessModifier = "Public"
		Case AccessibilityEnum.Protected
			GetAccessModifier = "Protected"
		Case AccessibilityEnum.Friend
			GetAccessModifier = "Friend"
		Case AccessibilityEnum.ProtectedFriend
			GetAccessModifier = "Protected Friend"
		Case AccessibilityEnum.Private
			GetAccessModifier = "Private"
		Case Else
			GetAccessModifier = "Public"
	End Select
End Function
</script>
