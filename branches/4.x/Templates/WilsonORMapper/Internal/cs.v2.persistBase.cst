<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="A base class for Wilson ORMapper business objects" 
	Debug="true" %>
	
<%@ Register Name="ClassCommon" Template="class.common.cst" MergeProperties="True" ExcludeProperties="" %>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using Wilson.ORMapper;

namespace <%= ClassNamespace %>
{
    #region IPersist
	/// <summary>An interface for persisting business objects</summary>
    public interface IPersist
    {
        ///<summary>Delete this instance from the persistence store</summary>
        void Delete();
        ///<summary>Delete this instance from the persistence store using a transaction</summary>
        ///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
        void Delete(Wilson.ORMapper.Transaction transaction);
        ///<summary>Save this instance to the persistence store</summary>
        void Save();
        ///<summary>Save this instance to the persistence store</summary>
        ///<param name="includeChildren">Include changes to related child instances</param>
        void Save(bool includeChildren);
        ///<summary>Save this instance to the persistence store using a transaction</summary>
        ///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
        void Save(Wilson.ORMapper.Transaction transaction);
        ///<summary>Save this instance to the persistence store using a transaction</summary>
        ///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
        ///<param name="includeChildren">Include changes to related child instances</param>
        void Save(Wilson.ORMapper.Transaction transaction, bool includeChildren);
        /// <summary>Validates the properies of this instance.</summary>
        /// <returns>A value indicating if this object is valid.</returns>
        bool IsValid();
        /// <summary>Returns <see langword="true" /> if this object's data has been changed.</summary>
        /// <returns>A value indicating if this object's data has been changed.</returns>
        bool IsDirty();
        /// <summary>Returns <see langword="true" /> if this object is marked for deletion.</summary>
        /// <returns>A value indicating if this object is marked for deletion.</returns>
        bool IsDeleted();
    }
	#endregion

    #region PersistBase
    /// <summary>A base class for persisting business objects</summary>
    /// <typeparam name="T">An IPersist business object</typeparam>
    public abstract class PersistBase<T> : RetrieveBase<T>,
        IPersist, INotifyPropertyChanged, IDataErrorInfo
        where T : IPersist
    {
        #region Constructors
        public PersistBase() : base()
        {

        }

        public PersistBase(bool startTracking) : base()
        {
            if (startTracking)
            {
				DataManager.ObjectSpace.StartTracking(this, InitialState.Inserted);
				_isDirty = true;
			}
        }
        #endregion
        
        #region Save
        ///<summary>Save this instance to the persistence store</summary>
        ///<exception cref="ValidationException">Throws VaidationException when not <see cref="IsValid"/>.</exception>
		public virtual void Save()
        {
            this.Save(false);
        }

        ///<summary>Save this instance to the persistence store</summary>
        ///<param name="includeChildren">Include changes to related child instances</param>
        ///<exception cref="ValidationException">Throws VaidationException when not <see cref="IsValid"/>.</exception>
		public virtual void Save(bool includeChildren)
        {
            if (DataManager.ObjectSpace.GetObjectState(this) == ObjectState.Unknown)
                DataManager.ObjectSpace.StartTracking(this, InitialState.Inserted);

            //call validate
            Validate();

            PersistDepth depth = includeChildren ? PersistDepth.ObjectGraph : PersistDepth.SingleObject;
            DataManager.ObjectSpace.PersistChanges(this, depth);
            
            //clear isDirty
            _isDirty = false;
        }

        ///<summary>Save this instance to the persistence store using a transaction</summary>
        ///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
        ///<exception cref="ValidationException">Throws VaidationException when not <see cref="IsValid"/>.</exception>
		public virtual void Save(Wilson.ORMapper.Transaction transaction)
        {
            Save(transaction, false);
        }

        ///<summary>Save this instance to the persistence store using a transaction</summary>
        ///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
        ///<param name="includeChildren">Include changes to related child instances</param>
        ///<exception cref="ValidationException">Throws VaidationException when not <see cref="IsValid"/>.</exception>
		public virtual void Save(Wilson.ORMapper.Transaction transaction, bool includeChildren)
        {
            if (transaction == null)
                throw new ArgumentNullException("transaction");

            if (DataManager.ObjectSpace.GetObjectState(this) == ObjectState.Unknown)
                DataManager.ObjectSpace.StartTracking(this, InitialState.Inserted);

            //call validate
            Validate();

            PersistDepth depth = includeChildren ? PersistDepth.ObjectGraph : PersistDepth.SingleObject;
            transaction.PersistChanges(this, depth);
            
            //clear isDirty
            _isDirty = false;
        }

        #endregion		

        #region Delete
        ///<summary>Delete this instance from the persistence store</summary>
        public virtual void Delete()
        {
            if (DataManager.ObjectSpace.GetObjectState(this) == ObjectState.Unknown)
                return;

            DataManager.ObjectSpace.MarkForDeletion(this);
            DataManager.ObjectSpace.PersistChanges(this);
            
            // set isDeleted
            _isDeleted = true;
        }
        
        ///<summary>Delete this instance from the persistence store using a transaction</summary>
        ///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
        public virtual void Delete(Wilson.ORMapper.Transaction transaction)
        {
            if (transaction == null)
                throw new ArgumentNullException("transaction");

            if (DataManager.ObjectSpace.GetObjectState(this) == ObjectState.Unknown)
                return;

            DataManager.ObjectSpace.MarkForDeletion(this);
            transaction.PersistChanges(this);

            // set isDeleted
            _isDeleted = true;
        }

        ///<summary>Deletes the specified instance from the persistence store/</summary>
        ///<param name="instance">The instance to delete.</param>
        ///<remarks>This method can be used for the <see cref="ObjectDataSource.DeleteMethod"/>.</remarks>
        ///<returns>The number of affected rows.</returns>
		///<seealso cref="ObjectDataSource"/>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(T instance)
        {
            if (instance == null)
                throw new ArgumentNullException("instance");

            if (DataManager.ObjectSpace.GetObjectState(instance) == ObjectState.Unknown)
                DataManager.ObjectSpace.StartTracking(instance, InitialState.Updated);
            
            instance.Delete();
			return 1;
        }

        ///<summary>Delete instances from the persistence store based on the where clause</summary>
        ///<param name="whereClause">The SQL where clause of rows to delete</param>
        public static int Delete(string whereClause)
        {
            return DataManager.ObjectSpace.ExecuteDelete(typeof(T), whereClause);
        }

        ///<summary>Delete instances from the persistence store based on the where clause</summary>
        ///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
        ///<param name="whereClause">The SQL where clause of rows to delete</param>
        public static int Delete(Wilson.ORMapper.Transaction transaction, string whereClause)
        {
            if (transaction == null)
                throw new ArgumentNullException("transaction");

            return transaction.ExecuteDelete(typeof(T), whereClause);
        } 
        #endregion

        #region Update

        /// <summary>Updates the specified instance.</summary>
        /// <param name="instance">The instance to update.</param>
        ///<remarks>This method can be used for the <see cref="ObjectDataSource.UpdateMethod"/>.</remarks>
        ///<returns>The number of affected rows.</returns>
		///<seealso cref="ObjectDataSource"/>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Update(T instance)
        {
            if (instance == null)
                throw new ArgumentNullException("instance");
            
            if (DataManager.ObjectSpace.GetObjectState(instance) == ObjectState.Unknown)
                DataManager.ObjectSpace.StartTracking(instance, InitialState.Updated);

            instance.Save();
			return 1;
        }

        ///<summary>Updates instances from the persistence store based on the where clause and uses the Update clause to set the values</summary>
        ///<param name="whereClause">The SQL where clause of rows to update</param>
        ///<param name="updateClause">The SQL update clause for values to set</param>
        public static int Update(string whereClause, string updateClause)
        {
            return DataManager.ObjectSpace.ExecuteUpdate(typeof(T), whereClause, updateClause);
        }

        ///<summary>Updates instances from the persistence store based on the where clause and uses the Update clause to set the values</summary>
        ///<param name="transaction">An instance of a Wilson.ORMapper.Transaction to perform operation with.</param>
        ///<param name="whereClause">The SQL where clause of rows to update</param>
        ///<param name="updateClause">The SQL update clause for values to set</param>
        public static int Update(Wilson.ORMapper.Transaction transaction, string whereClause, string updateClause)
        {
            if (transaction == null)
                throw new ArgumentNullException("transaction");

            return transaction.ExecuteUpdate(typeof(T), whereClause, updateClause);
        } 
        #endregion

        #region Insert
        /// <summary>Inserts the specified instance.</summary>
        /// <param name="instance">The instance to insert.</param>
        ///<remarks>This method can be used for the <see cref="ObjectDataSource.InsertMethod"/>.</remarks>
        ///<returns>The number of affected rows.</returns>
		///<seealso cref="ObjectDataSource"/>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Insert(T instance)
        {
            if (instance == null)
                throw new ArgumentNullException("instance");
            
            instance.Save();
			return 1;
        } 
        #endregion
		
		#region Other

        private Dictionary<string, string> _dataColumnErrors = new Dictionary<string, string>();
        private string _dataErrorMessage;

        /// <summary>
        /// Calls IsVaild to validates this instance.
        /// </summary>
        /// <exception cref="ValidationException">Throws VaidationException when not <see cref="IsValid"/>.</exception>
        ///<seealso cref="IsValid"/>
        protected void Validate()
        {
            const string invalidMessage = "Object is not valid and can not be saved. ";
            bool isVaild;

            try
            {
                isVaild = IsValid();
            }
            catch (Exception ex)
            {
                throw new ValidationException(string.Format("{0} {1} {2}", 
                	invalidMessage, _dataErrorMessage, ex.Message), ex);
            }

            if (!isVaild)
                throw new ValidationException(invalidMessage + _dataErrorMessage);

        }

        /// <summary>
        /// Validates the properies of this instance.
        /// </summary>
        /// <remarks>
        /// Override this method to validate the properies of the object before persisting.
        /// </remarks>
        /// <returns>A value indicating if this object is valid.</returns>
		public virtual bool IsValid()
		{
            //reset values
            _dataColumnErrors.Clear();
            _dataErrorMessage = string.Empty;

            return true;
		}

        /// <summary>
        /// Called when validation error.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="message">The error message.</param>
        protected void OnValidationError(string propertyName, string message)
        {
            string errorMessesage = string.Format("The property '{0}' is invalid. {1}",
                propertyName, message);

            if (string.IsNullOrEmpty(_dataErrorMessage))
                _dataErrorMessage = errorMessesage;
            _dataColumnErrors.Add(propertyName, message);
        }

        /// <summary>
        /// Performs processing required when a property has changed.
        /// </summary>
        protected virtual void OnPropertyChanged(string propertyName)
        {
            _isDirty = true;
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private bool _isDirty;

        /// <summary>
        /// Returns <see langword="true" /> if this object's data has been changed.
        /// </summary>
        /// <returns>A value indicating if this object's data has been changed.</returns>
        public virtual bool IsDirty()
        {
            return _isDirty; 
        }

        private bool _isDeleted;

        /// <summary>
        /// Returns <see langword="true" /> if this object is marked for deletion.
        /// </summary>
        /// <returns>A value indicating if this object is marked for deletion.</returns>
        public bool IsDeleted()
        {
            return _isDeleted; 
        }

		#endregion

        #region INotifyPropertyChanged Members

        /// <summary>
        /// Occurs when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        #region IDataErrorInfo Members

        /// <summary>
        /// Gets an error message indicating what is wrong with this object.
        /// </summary>
        /// <value></value>
        /// <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        string IDataErrorInfo.Error
        {
            get { return _dataErrorMessage; }
        }

        /// <summary>
        /// Gets the <see cref="T:String"/> with the specified column name.
        /// </summary>
        /// <value></value>
        string IDataErrorInfo.this[string columnName]
        {
            get 
            {
                string value;
                _dataColumnErrors.TryGetValue(columnName, out value);
                return value;
            }
        }
        #endregion
    }
    #endregion

    #region ValidationException
    /// <summary>
    /// Exception indicating that there was a validation problem with a business object.
    /// </summary>
    [Serializable]
    public class ValidationException : Exception
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ValidationException"/> class.
        /// </summary>
        public ValidationException() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ValidationException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        public ValidationException(string message) : base(message) { }
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ValidationException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="inner">The inner.</param>
        public ValidationException(string message, Exception inner) : base(message, inner) { }
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ValidationException"/> class.
        /// </summary>
        /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
        /// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
        /// <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
        /// <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        protected ValidationException(
          System.Runtime.Serialization.SerializationInfo info,
          System.Runtime.Serialization.StreamingContext context)
            : base(info, context) { }
    } 
    #endregion
}
