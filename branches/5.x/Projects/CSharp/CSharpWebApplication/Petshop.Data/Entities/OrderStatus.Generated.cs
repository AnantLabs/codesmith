//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Data.Services.Common;
namespace Petshop.Data
{
    /// <summary>
    /// The class representing the dbo.OrderStatus table.
    /// </summary>
    [Table(Name="dbo.OrderStatus")]
    [DataContract(IsReference=true)]
    [ScaffoldTable(true)]
    [MetadataType(typeof(Metadata))]
	[DataServiceKey("OrderId", "LineNum")]
    public partial class OrderStatus
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public OrderStatus()
        {
            OnCreated();
            Initialize();
        }
        
        private void Initialize()
        {
            _orders = default(EntityRef<Orders>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private int _orderId;

        /// <summary>
        /// Gets or sets the OrderId column value.
        /// </summary>
        [Column(Name="OrderId", Storage="_orderId", DbType="int NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        [DataMember(Order=1)]
        public int OrderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId != value)
                {
                    if (_orders.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOrderIdChanging(value);
                    OnPropertyChanging("OrderId");
                    _orderId = value;
                    OnPropertyChanged("OrderId");
                    OnOrderIdChanged();
                }
            }
        }
        
        private int _lineNum;

        /// <summary>
        /// Gets or sets the LineNum column value.
        /// </summary>
        [Column(Name="LineNum", Storage="_lineNum", DbType="int NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        [DataMember(Order=2)]
        public int LineNum
        {
            get { return _lineNum; }
            set
            {
                if (_lineNum != value)
                {
                    OnLineNumChanging(value);
                    OnPropertyChanging("LineNum");
                    _lineNum = value;
                    OnPropertyChanged("LineNum");
                    OnLineNumChanged();
                }
            }
        }
        
        private System.DateTime _timestamp;

        /// <summary>
        /// Gets or sets the Timestamp column value.
        /// </summary>
        [Column(Name="Timestamp", Storage="_timestamp", DbType="datetime NOT NULL", CanBeNull=false)]
        [DataMember(Order=3)]
        public System.DateTime Timestamp
        {
            get { return _timestamp; }
            set
            {
                if (_timestamp != value)
                {
                    OnTimestampChanging(value);
                    OnPropertyChanging("Timestamp");
                    _timestamp = value;
                    OnPropertyChanged("Timestamp");
                    OnTimestampChanged();
                }
            }
        }
        
        private string _status;

        /// <summary>
        /// Gets or sets the Status column value.
        /// </summary>
        [Column(Name="Status", Storage="_status", DbType="varchar(2) NOT NULL", CanBeNull=false)]
        [DataMember(Order=4)]
        public string Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    OnStatusChanging(value);
                    OnPropertyChanging("Status");
                    _status = value;
                    OnPropertyChanged("Status");
                    OnStatusChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Orders> _orders;

        /// <summary>
        /// Gets or sets the Orders association.
        /// </summary>
        [Association(Name="Orders_OrderStatus", Storage="_orders", ThisKey="OrderId", OtherKey="OrderId", IsUnique=true, IsForeignKey=true, DeleteOnNull=true)]
        [DataMember(Order=5, EmitDefaultValue=false)]
        public Orders Orders
        {
            get { return _orders.Entity; }
            set
            {
                Orders previousValue = _orders.Entity;
                if (previousValue != value || _orders.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Orders");
                    if (previousValue != null)
                    {
                        _orders.Entity = null;
                        previousValue.OrderStatusList.Remove(this);
                    }
                    _orders.Entity = value;
                    if (value != null)
                    {
                        value.OrderStatusList.Add(this);
                        _orderId = value.OrderId;
                    }
                    else
                    {
                        _orderId = default(int);
                    }
                    OnPropertyChanged("Orders");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when OrderId is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnOrderIdChanging(int value);
        /// <summary>Called after OrderId has Changed.</summary>
        partial void OnOrderIdChanged();
        /// <summary>Called when LineNum is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLineNumChanging(int value);
        /// <summary>Called after LineNum has Changed.</summary>
        partial void OnLineNumChanged();
        /// <summary>Called when Timestamp is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTimestampChanging(System.DateTime value);
        /// <summary>Called after Timestamp has Changed.</summary>
        partial void OnTimestampChanged();
        /// <summary>Called when Status is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStatusChanging(string value);
        /// <summary>Called after Status has Changed.</summary>
        partial void OnStatusChanged();
        #endregion
        
        #region Serialization
        
        [OnDeserializing()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context) {
            Initialize();
        }
        
        #endregion
        
    }
}

