<%@ CodeTemplate Language="C#" Src="TypedDataSet.cst.cs" Debug="true" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="C#" Description="Generates a typed DataSet class based on a database table schema." %>
<%@ Property Name="ClassNamespace" Type="String" Optional="true" Category="Context" Description="The namespace for the generated classes." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the typed DataSet should contain." %>
<%@ Map Name="SqlToC" src="Sql-CSharp.csmap" Description="A Mapping of SQL Server data types to CSharp data types" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections" %>
using System;
using System.IO;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Xml;
using System.Xml.Schema;
using System.Runtime.Serialization;

<%
if (!string.IsNullOrEmpty(this.ClassNamespace))
{
	Response.WriteLine("namespace {0}", this.ClassNamespace);
	Response.WriteLine("{");
}
%>
	#region <%= GetClassName(SourceTable.Name) %>DataSet
	[Serializable()]
	[DesignerCategoryAttribute("code")]
	[System.Diagnostics.DebuggerStepThrough()]
	[ToolboxItem(true)]
	public class <%= GetClassName(SourceTable.Name) %>DataSet: DataSet
	{
		private <%= GetClassName(SourceTable.Name) %>DataTable _table<%= GetClassName(SourceTable.Name) %>;
		
		[DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
		public <%= GetClassName(SourceTable.Name) %>DataTable <%= GetClassName(SourceTable.Name) %>
		{
			get
			{
				return this._table<%= GetClassName(SourceTable.Name) %>;
			}
		}
		
		public <%= GetClassName(SourceTable.Name) %>DataSet()
		{
			this.InitClass();
		}
		
		protected override XmlSchema GetSchemaSerializable() 
		{
			MemoryStream stream = new MemoryStream();
			this.WriteXmlSchema(new	XmlTextWriter(stream, null));
			stream.Position = 0;
			return XmlSchema.Read(new XmlTextReader(stream), null);
		}
		
		protected override void	ReadXmlSerializable(XmlReader reader) 
		{
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if ((ds.Tables["<%= GetClassName(SourceTable.Name) %>"] != null))
			{
				this.Tables.Add(new <%= GetClassName(SourceTable.Name) %>DataTable(ds.Tables["<%= GetClassName(SourceTable.Name) %>"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		
		protected <%= GetClassName(SourceTable.Name) %>DataSet(SerializationInfo info, StreamingContext context)
		{
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null))
			{
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
				if ((ds.Tables["<%= GetClassName(SourceTable.Name) %>"] != null))
				{
					this.Tables.Add(new <%= GetClassName(SourceTable.Name) %>DataTable(ds.Tables["<%= GetClassName(SourceTable.Name) %>"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.InitClass();
			}
			this.GetSerializationData(info, context);
		}
		
		private void InitClass()
		{
			this.DataSetName = "<%= GetClassName(SourceTable.Name) %>DataSet";
			_table<%= GetClassName(SourceTable.Name) %> = new <%= GetClassName(SourceTable.Name) %>DataTable();
			this.Tables.Add(_table<%= GetClassName(SourceTable.Name) %>);
			this.ExtendedProperties.Add("DataAdapterName", "<%= GetClassName(SourceTable.Name) %>DataAdapter");
			this.ExtendedProperties.Add("ObjectName", "<%= GetClassName(SourceTable.Name) %>");
			this.ExtendedProperties.Add("ObjectDescription", "<%= GetClassName(SourceTable.Name) %>");
			this.ExtendedProperties.Add("NameSpace", "");
		}
		
		public override DataSet Clone()
		{
			<%= GetClassName(SourceTable.Name) %>DataSet cln = ((<%= GetClassName(SourceTable.Name) %>DataSet)(base.Clone()));
			cln.InitVars();
			return cln;
		}
		
		internal void InitVars()
		{
			_table<%= GetClassName(SourceTable.Name) %> = ((<%= GetClassName(SourceTable.Name) %>DataTable)(this.Tables["<%= GetClassName(SourceTable.Name) %>"]));
			if (_table<%= GetClassName(SourceTable.Name) %> != null)
			{
				_table<%= GetClassName(SourceTable.Name) %>.InitVars();
			}
		}
		
		protected override bool ShouldSerializeTables()
		{
			return false;
		}
		
		protected override bool ShouldSerializeRelations()
		{
			return false;
		}
		
		private bool ShouldSerialize<%= GetClassName(SourceTable.Name) %>()
		{
			return false;
		}
		
		public delegate void <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler(object sender, <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs e);
		
		[Serializable()]
		public class <%= GetClassName(SourceTable.Name) %>DataTable: DataTable, System.Collections.IEnumerable
		{
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			private DataColumn _column<%= SourceTable.Columns[i].Name %>;
			<% } %>
			
			internal <%= GetClassName(SourceTable.Name) %>DataTable(): base("<%= GetClassName(SourceTable.Name) %>")
			{
				this.InitClass();
			}
			
			protected <%= GetClassName(SourceTable.Name) %>DataTable(SerializationInfo info, StreamingContext context): base(info, context)
			{
				this.InitVars();
			}
			
			internal <%= GetClassName(SourceTable.Name) %>DataTable(DataTable table): base(table.TableName)
			{
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
				this.DisplayExpression = table.DisplayExpression;
			}
			
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			public DataColumn <%= SourceTable.Columns[i].Name %>Column
			{
				get
				{
					return _column<%= SourceTable.Columns[i].Name %>;
				}
			}
			
			<% } %>
			public <%= GetClassName(SourceTable.Name) %>Row this[int index]
			{
				get
				{
					return ((<%= GetClassName(SourceTable.Name) %>Row)(this.Rows[index]));
				}
			}
			
			public event <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler <%= GetClassName(SourceTable.Name) %>RowChanged;
			public event <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler <%= GetClassName(SourceTable.Name) %>RowChanging;
			public event <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler <%= GetClassName(SourceTable.Name) %>RowDeleted;
			public event <%= GetClassName(SourceTable.Name) %>RowChangeEventHandler <%= GetClassName(SourceTable.Name) %>RowDeleting;
			
			public void Add<%= GetClassName(SourceTable.Name) %>Row(<%= GetClassName(SourceTable.Name) %>Row row)
			{
				this.Rows.Add(row);
			}
			public <%= GetClassName(SourceTable.Name) %>Row Add<%= GetClassName(SourceTable.Name) %>Row(
					<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
					<%= SqlToC[SourceTable.Columns[i].NativeType.ToString()] %> <%= GetCamelCaseName(SourceTable.Columns[i].Name) %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
					<% } %>
				)
			{
				<%= GetClassName(SourceTable.Name) %>Row row<%= GetClassName(SourceTable.Name) %>Row = ((<%= GetClassName(SourceTable.Name) %>Row)(this.NewRow()));
				<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
				row<%= GetClassName(SourceTable.Name) %>Row["<%= SourceTable.Columns[i].Name %>"] = <%= GetCamelCaseName(SourceTable.Columns[i].Name) %>;
				<% } %>
				this.Rows.Add(row<%= GetClassName(SourceTable.Name) %>Row);
				return row<%= GetClassName(SourceTable.Name) %>Row;
			}
			
			<% if (SourceTable.PrimaryKey.MemberColumns.Count == 1) { %>
			public <%= GetClassName(SourceTable.Name) %>Row FindBy<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>(<%= SqlToC[SourceTable.PrimaryKey.MemberColumns[0].NativeType.ToString()] %> <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>)
			{
				return ((<%= GetClassName(SourceTable.Name) %>Row)(this.Rows.Find(new object[] {<%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>})));
			}
			
			<% } %>
			public IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			public override DataTable Clone()
			{
				<%= GetClassName(SourceTable.Name) %>DataTable cln = ((<%= GetClassName(SourceTable.Name) %>DataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}
			
			internal void InitVars()
			{
				<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
				_column<%= SourceTable.Columns[i].Name %> = this.Columns["<%= SourceTable.Columns[i].Name %>"];
				<% } %>
			}
			
			public void InitClass()
			{
				<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
				_column<%= SourceTable.Columns[i].Name %> = new DataColumn("<%= SourceTable.Columns[i].Name %>", typeof(<%= SqlToC[SourceTable.Columns[i].NativeType.ToString()] %>), "", MappingType.Element);
				_column<%= SourceTable.Columns[i].Name %>.AllowDBNull = <% if (SourceTable.Columns[i].AllowDBNull) { %>true<% } else { %>false<% } %>;
				_column<%= SourceTable.Columns[i].Name %>.Caption = "<%= GetSpacedName(SourceTable.Columns[i].Name) %>";
				<% if (SizeMatters(SourceTable.Columns[i])&& SqlToC[SourceTable.Columns[i].NativeType.ToString()] == "string") { %>
				_column<%= SourceTable.Columns[i].Name %>.MaxLength = <%= SourceTable.Columns[i].Size %>;
				<% } %>
				_column<%= SourceTable.Columns[i].Name %>.Unique = <% if (SourceTable.PrimaryKey.MemberColumns.Count == 1 && SourceTable.Columns[i].IsPrimaryKeyMember) { %>true<% } else { %>false<% } %>;
				_column<%= SourceTable.Columns[i].Name %>.DefaultValue = <%if(!(bool)SourceTable.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) { %>Convert.DBNull <%} else {%>Int32.MinValue <% } %>;
				_column<%= SourceTable.Columns[i].Name %>.ExtendedProperties.Add("IsKey", "<% if (SourceTable.Columns[i].IsPrimaryKeyMember) { %>true<% } else { %>false<% } %>");
				_column<%= SourceTable.Columns[i].Name %>.ExtendedProperties.Add("ReadOnly", "false");
				_column<%= SourceTable.Columns[i].Name %>.ExtendedProperties.Add("Description", "<%= GetSpacedName(SourceTable.Columns[i].Name) %>");
				<% if (SizeMatters(SourceTable.Columns[i]) && SqlToC[SourceTable.Columns[i].NativeType.ToString()] == "string"){ %>
				_column<%= SourceTable.Columns[i].Name %>.ExtendedProperties.Add("Length", "<%= SourceTable.Columns[i].Size %>");
				<% } %>
				_column<%= SourceTable.Columns[i].Name %>.ExtendedProperties.Add("Decimals", "0");
				_column<%= SourceTable.Columns[i].Name %>.ExtendedProperties.Add("AllowDBNulls", "<% if (SourceTable.Columns[i].AllowDBNull) { %>true<% } else { %>false<% } %>");
				this.Columns.Add(_column<%= SourceTable.Columns[i].Name %>);
				
				<% } %>
				<% if (SourceTable.PrimaryKey.MemberColumns.Count == 1) { %>
				this.PrimaryKey = new DataColumn[] {_column<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>};
				<% } %>
			}
			
			public <%= GetClassName(SourceTable.Name) %>Row New<%= GetClassName(SourceTable.Name) %>Row()
			{
				<%= GetClassName(SourceTable.Name) %>Row row<%= GetClassName(SourceTable.Name) %>Row = ((<%= GetClassName(SourceTable.Name) %>Row)(this.NewRow()));
				return row<%= GetClassName(SourceTable.Name) %>Row;
			}
			
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new <%= GetClassName(SourceTable.Name) %>Row(builder);
			}
			
			protected override Type GetRowType()
			{
				return typeof(<%= GetClassName(SourceTable.Name) %>Row);
			}
			
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.<%= GetClassName(SourceTable.Name) %>RowChanged != null)
				{
					this.<%= GetClassName(SourceTable.Name) %>RowChanged(this, new <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(((<%= GetClassName(SourceTable.Name) %>Row)(e.Row)), e.Action));
				}
			}
			
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.<%= GetClassName(SourceTable.Name) %>RowChanging != null)
				{
					this.<%= GetClassName(SourceTable.Name) %>RowChanging(this, new <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(((<%= GetClassName(SourceTable.Name) %>Row)(e.Row)), e.Action));
				}
			}
			
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.<%= GetClassName(SourceTable.Name) %>RowDeleted != null)
				{
					this.<%= GetClassName(SourceTable.Name) %>RowDeleted(this, new <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(((<%= GetClassName(SourceTable.Name) %>Row)(e.Row)), e.Action));
				}
			}
			
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.<%= GetClassName(SourceTable.Name) %>RowDeleting != null)
				{
					this.<%= GetClassName(SourceTable.Name) %>RowDeleting(this, new <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(((<%= GetClassName(SourceTable.Name) %>Row)(e.Row)), e.Action));
				}
			}
			
			public void Remove<%= GetClassName(SourceTable.Name) %>Row(<%= GetClassName(SourceTable.Name) %>Row row)
			{
				this.Rows.Remove(row);
			}
		}
		
		public class <%= GetClassName(SourceTable.Name) %>Row: DataRow
		{
			private <%= GetClassName(SourceTable.Name) %>DataTable _table<%= GetClassName(SourceTable.Name) %>;
			
			internal <%= GetClassName(SourceTable.Name) %>Row(DataRowBuilder rb): base(rb)
			{
				_table<%= GetClassName(SourceTable.Name) %> = ((<%= GetClassName(SourceTable.Name) %>DataTable)(this.Table));
			}
			
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			/// <summary>
			/// Gets or sets the value of <%= SourceTable.Columns[i].Name %> property
			/// </summary>
			
			public <%= SqlToC[SourceTable.Columns[i].NativeType.ToString()] %> <%= SourceTable.Columns[i].Name %>
			{
				get
				{
					try
					{
						return ((<%= SqlToC[SourceTable.Columns[i].NativeType.ToString()] %>)(this[_table<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.Columns[i].Name %>Column]));
					}
					catch (InvalidCastException exception)
					{
						throw new StrongTypingException("Cannot get value <%= SourceTable.Columns[i].Name %> because it is DBNull.", exception);
					}
				}
				set
				{
					this[_table<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.Columns[i].Name %>Column] = value;
				}
			}
			
			public bool Is<%= SourceTable.Columns[i].Name %>Null()
			{
				return this.IsNull(_table<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.Columns[i].Name %>Column);
			}
			
			public void Set<%= SourceTable.Columns[i].Name %>Null()
			{
				this[_table<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.Columns[i].Name %>Column] = Convert.DBNull;
			}
			
			<% } %>
		}
		
		public class <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs: EventArgs
		{
			private <%= GetClassName(SourceTable.Name) %>Row _eventRow;
			private System.Data.DataRowAction _eventAction;
			
			public <%= GetClassName(SourceTable.Name) %>RowChangeEventArgs(<%= GetClassName(SourceTable.Name) %>Row row, DataRowAction action)
			{
				_eventRow = row;
				_eventAction = action;
			}
			
			public <%= GetClassName(SourceTable.Name) %>Row Row
			{
				get
				{
					return _eventRow;
				}
			}
			
			public DataRowAction Action
			{
				get
				{
					return _eventAction;
				}
			}
		}
	}
	#endregion
	
	#region <%= GetClassName(SourceTable.Name) %>DataAdapter
	public class <%= GetClassName(SourceTable.Name) %>DataAdapter: MarshalByRefObject, IDataAdapter
	{
		#region Member Variables
		private IDbConnection _connection;
		private IDbTransaction _transaction;
		private IDbCommand _command;
		private IDataReader _reader;
		private int _connectionTimeout = 30;
		private int _commandTimeout = 30;
		private string _connectionStringKey;
		private bool _autoCloseConnection = true;
		private bool _autoCommitTransaction = true;
		private bool _convertEmptyValuesToDBNull = true;
		//private IDataParameter[] _fillDataParameters;
		#endregion
		
		#region Constructors
		public <%= GetClassName(SourceTable.Name) %>DataAdapter()
		{
			_connectionStringKey = "ConnectionString";
		}
		
		public <%= GetClassName(SourceTable.Name) %>DataAdapter(string connectionStringKey)
		{
			_connectionStringKey = connectionStringKey + "_ConnectionString";
		}
		
		public <%= GetClassName(SourceTable.Name) %>DataAdapter(IDbConnection connection)
		{
			this.Connection = connection;
		}
		
		public <%= GetClassName(SourceTable.Name) %>DataAdapter(IDbTransaction transaction)
		{
			this.Transaction = transaction;
		}
		#endregion
		
		#region Properties
		public IDbConnection Connection
		{
			get
			{
				if (_connection == null)
				{
					_connection = new SqlConnection();
					_connection.ConnectionString = System.Configuration.ConfigurationSettings.AppSettings[this.ConnectionStringKey];
					//_connection.ConnectionTimeout = this.ConnectionTimeout;
				}
				return _connection;
			}
			set
			{
				_connection = value;
				// if the connection is passed in then it should be up to the owner to close the connection.
				_autoCloseConnection = false;
			}
		}
		
		public IDbTransaction Transaction
		{
			get	{return _transaction;}
			set
			{
				_transaction = value;
				_connection = _transaction.Connection;
				// if the connection is passed in then it should be up to the owner to close the connection.
				_autoCloseConnection = false;
				// if the transaction is passed in then it should be up to the owner of the transaction to commit.
				_autoCommitTransaction = false;
			}
		}
		
		public bool AutoCloseConnection
		{
			get {return _autoCloseConnection;}
			set {_autoCloseConnection = value;}
		}
		
		public bool AutoCommitTransaction
		{
			get {return _autoCommitTransaction;}
			set {_autoCommitTransaction = value;}
		}
		
		public bool ConvertEmptyValuesToDBNull
		{
			get {return _convertEmptyValuesToDBNull;}
			set {_convertEmptyValuesToDBNull = value;}
		}
		
		public string ConnectionStringKey
		{
			get {return _connectionStringKey;}
		}
		
		public int ConnectionTimeout
		{
			get	{return _connectionTimeout;}
			set	{_connectionTimeout = value;}
		}
		
		public int CommandTimeout
		{
			get	{return _commandTimeout;}
			set	{_commandTimeout = value;}
		}
		
		public MissingMappingAction MissingMappingAction
		{
			get	{return MissingMappingAction.Passthrough;}
			set {}
		}
		
		public MissingSchemaAction MissingSchemaAction
		{
			get	{return MissingSchemaAction.Ignore;}
			set	{}
		}
		
		public ITableMappingCollection TableMappings
		{
			get
			{
				System.Data.Common.DataTableMappingCollection tableMaps;
				tableMaps = new System.Data.Common.DataTableMappingCollection();
				return tableMaps;
			}
		}
		#endregion
		
		#region Helper Methods
		private IDbCommand GetCommand()
		{
			if (this.Connection != null)
			{
				_command = this.Connection.CreateCommand();
				_command.CommandTimeout = this.CommandTimeout;
				_command.CommandType = CommandType.Text;
				_command.Connection = this.Connection;
				if (_transaction != null) _command.Transaction = _transaction;
				
				return _command;
			}
			else
			{
				throw new InvalidOperationException("You must have a valid Connection object before calling GetCommand.");
			}
		}
		
		private void OpenConnection()
		{
			if (this.Connection != null)
			{
				if (this.Connection.State == ConnectionState.Closed) _connection.Open();
			}
			else
			{
				throw new InvalidOperationException("You must have a valid Connection object before calling GetCommand.");
			}
		}

		private void Cleanup()
		{
			try
			{
				if (_reader != null)
				{
					if (!_reader.IsClosed) _reader.Close();
					_reader.Dispose();
					_reader = null;
				}
				
				if (_command != null)
				{
					_command.Dispose();
					_command = null;
				}
				
				if (_connection != null && this.AutoCloseConnection == true)
				{
					if (_connection.State == ConnectionState.Open) _connection.Close();
					_connection.Dispose();
					_connection = null;
				}
			}
			catch {}
		}
		#endregion
		
		#region CreateParameter
		public IDbDataParameter CreateParameter(string name, DbType type, object value)
		{
			IDbDataParameter prm = _command.CreateParameter();
			prm.Direction = ParameterDirection.Input;
			prm.ParameterName = name;
			prm.DbType = type;
			prm.Value = this.PrepareParameterValue(value);
			
			return prm;
		}
		
		public IDbDataParameter CreateParameter(string name, DbType type, object value, int size)
		{
			IDbDataParameter prm = _command.CreateParameter();
			prm.Direction = ParameterDirection.Input;
			prm.ParameterName = name;
			prm.DbType = type;
			prm.Size = size;
			prm.Value = this.PrepareParameterValue(value);
			
			return prm;
		}
		
		public IDbDataParameter CreateParameter(string name, DbType type, object value, ParameterDirection direction)
		{
			IDbDataParameter prm = _command.CreateParameter();
			prm.Direction = direction;
			prm.ParameterName = name;
			prm.DbType = type;
			prm.Value = this.PrepareParameterValue(value);
			
			return prm;
		}
		
		public IDbDataParameter CreateParameter(string name, DbType type, object value, int size, ParameterDirection direction)
		{
			IDbDataParameter prm = _command.CreateParameter();
			prm.Direction = direction;
			prm.ParameterName = name;
			prm.DbType = type;
			prm.Size = size;
			prm.Value = this.PrepareParameterValue(value);
			
			return prm;
		}
		
		private object PrepareParameterValue(object value)
		{
			return PrepareParameterValue(value, false);
		}
		
		private object PrepareParameterValue(object value, bool convertZeroToDBNull)
		{
			if (!_convertEmptyValuesToDBNull) return value;
			
			switch (value.GetType().ToString())
			{
				case "System.String":
					if (Convert.ToString(value) == String.Empty)
					{
						return DBNull.Value;
					}
					else
					{
						return value;
					}
				case "System.Guid":
					if (new Guid(Convert.ToString(value)) == Guid.Empty)
					{
						return DBNull.Value;
					}
					else
					{
						return value;
					}
				case "System.DateTime":
					if (Convert.ToDateTime(value) == DateTime.MinValue)
					{
						return DBNull.Value;
					}
					else
					{
						return value;
					}
				case "System.Int16":
					if (Convert.ToInt16(value) == 0)
					{
						if (convertZeroToDBNull)
						{
							return DBNull.Value;
						}
						else
						{
							return value;
						}
					}
					else
					{
						return value;
					}
				case "System.Int32":
					if (Convert.ToInt32(value) == 0)
					{
						if (convertZeroToDBNull)
						{
							return DBNull.Value;
						}
						else
						{
							return value;
						}
					}
					else
					{
						return value;
					}
				case "System.Int64":
					if (Convert.ToInt64(value) == 0)
					{
						if (convertZeroToDBNull)
						{
							return DBNull.Value;
						}
						else
						{
							return value;
						}
					}
					else
					{
						return value;
					}
				case "System.Single":
					if (Convert.ToSingle(value) == 0)
					{
						if (convertZeroToDBNull)
						{
							return DBNull.Value;
						}
						else
						{
							return value;
						}
					}
					else
					{
						return value;
					}
				case "System.Double":
					if (Convert.ToDouble(value) == 0)
					{
						if (convertZeroToDBNull)
						{
							return DBNull.Value;
						}
						else
						{
							return value;
						}
					}
					else
					{
						return value;
					}
				case "System.Decimal":
					if (Convert.ToDecimal(value) == 0)
					{
						if (convertZeroToDBNull)
						{
							return DBNull.Value;
						}
						else
						{
							return value;
						}
					}
					else
					{
						return value;
					}
				default:
					return value;
			}
		}
		#endregion AddParameter
		
		#region Fill Methods
		<% ArrayList methods = new ArrayList();%>
		
		public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType)
		{
			DataTable[] dataTables;
			dataTables = new DataTable[dataSet.Tables.Count];
			dataSet.Tables.CopyTo(dataTables, dataSet.Tables.Count);
			return dataTables;
		}
		
		public int Fill(<%= GetClassName(SourceTable.Name) %>DataSet dataSet, IDataRecord dataRecord)
		{
			return Fill(dataSet, <% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>((<%= SqlToC[SourceTable.PrimaryKey.MemberColumns[i].NativeType.ToString()] %>)(dataRecord["<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>"]))<% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% } %><% } %>);
		}
		
		public int Fill(<%= GetClassName(SourceTable.Name) %>DataSet dataSet, DataRow dataRecord)
		{
			return Fill(dataSet, <% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>((<%= SqlToC[SourceTable.PrimaryKey.MemberColumns[i].NativeType.ToString()] %>)(dataRecord["<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>"]))<% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% } %><% } %>);
		}
		
		public int Fill(<%= GetClassName(SourceTable.Name) %>DataSet dataSet, <% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %><%= SqlToC[SourceTable.PrimaryKey.MemberColumns[i].NativeType.ToString()] %> <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[i].Name) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>, <% } %><% } %>)
		{
			try
			{
				_command = this.GetCommand();
				_command.CommandText = @"
					SELECT
						<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
						[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
						<% } %>
					FROM
						[<%= GetClassName(SourceTable.Name) %>]
					WHERE
						<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
						[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
						<% } %>
					";
				<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
				_command.Parameters.Add(this.CreateParameter("@<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>", DbType.<%= SourceTable.PrimaryKey.MemberColumns[i].DataType %>, <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[i].Name) %>));
				<% } %>
				this.OpenConnection();
				_reader = _command.ExecuteReader(CommandBehavior.CloseConnection | CommandBehavior.SingleResult | CommandBehavior.SingleRow);
				if (_reader.Read())
				{
					<%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row row = dataSet.<%= GetClassName(SourceTable.Name) %>.New<%= GetClassName(SourceTable.Name) %>Row();
					this.Populate<%= GetClassName(SourceTable.Name) %>DataRow(_reader, row);
					dataSet.<%= GetClassName(SourceTable.Name) %>.Add<%= GetClassName(SourceTable.Name) %>Row(row);
					dataSet.AcceptChanges();
					
					return 1;
				}
				else
				{
					throw new <%= GetClassName(SourceTable.Name) %>NotFoundException();
				}
			}
			catch (Exception e)
			{
				System.Diagnostics.Debug.WriteLine(e.ToString());
				return 0;
			}
			finally
			{
				this.Cleanup();
			}
		}
		
		private void Populate<%= GetClassName(SourceTable.Name) %>DataRow(IDataReader reader, <%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row row)
		{
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
			if (!reader.IsDBNull(<%= i %>)) row.<%= SourceTable.Columns[i].Name %> = reader.<%= GetReaderMethod(SourceTable.Columns[i]) %>(<%= i %>);
			<% } %>
		}
		
		public int Fill(DataSet dataSet)
		{
			<%= GetClassName(SourceTable.Name) %>DataSet pageDataSet = dataSet as <%= GetClassName(SourceTable.Name) %>DataSet;
			if (pageDataSet != null)
			{
				return this.Fill(pageDataSet);
			}
			else
			{
				throw new ApplicationException();
			}
		}
		
		public int Fill(<%= GetClassName(SourceTable.Name) %>DataSet dataSet, string[] columns, string[] values, DbType[] types)
		{
			try
			{
				int recordcount = 0;
				_command = this.GetCommand();
				_command.CommandText = @"
					SELECT
						<% for (int x = 0; x < SourceTable.Columns.Count; x++) { %>
						[<%= SourceTable.Columns[x].Name %>]<% if (x < SourceTable.Columns.Count - 1) { %>,<% } %>
						<% } %>
					FROM
						[<%= GetClassName(SourceTable.Name) %>]
					WHERE ";
				
				for(int i = 0;i < columns.Length; i++)
				{
					_command.CommandText += columns[i] + " = " + (types[i] == DbType.AnsiString ? "'" + values[i] + "'" : values[i]);
					if(i < columns.Length - 1)
						_command.CommandText += " AND ";
				}
				for(int i = 0;i < columns.Length; i++)
					_command.Parameters.Add(this.CreateParameter("@" + columns[i], types[i], columns[i]));
				this.OpenConnection();
				_reader = _command.ExecuteReader(CommandBehavior.CloseConnection | CommandBehavior.SingleResult);
				while (_reader.Read())
				{
					<%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row row = dataSet.<%= GetClassName(SourceTable.Name) %>.New<%= GetClassName(SourceTable.Name) %>Row();
					this.Populate<%= GetClassName(SourceTable.Name) %>DataRow(_reader, row);
					dataSet.<%= GetClassName(SourceTable.Name) %>.Add<%= GetClassName(SourceTable.Name) %>Row(row);
					
					recordcount++;
				}
				dataSet.AcceptChanges();
				
				return recordcount;
			}
			catch (Exception e)
			{
				System.Diagnostics.Debug.WriteLine(e.ToString());
				return 0;
			}
			finally
			{
				this.Cleanup();
			}
		}
		
		public int Fill(<%= GetClassName(SourceTable.Name) %>DataSet dataSet)
		{
			try
			{
				int recordcount = 0;
				_command = this.GetCommand();
				_command.CommandText = @"
					SELECT
						<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
						[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
						<% } %>
					FROM
						[<%= GetClassName(SourceTable.Name) %>]";
				this.OpenConnection();
				_reader = _command.ExecuteReader(CommandBehavior.CloseConnection | CommandBehavior.SingleResult);
				while (_reader.Read())
				{
					<%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row row = dataSet.<%= GetClassName(SourceTable.Name) %>.New<%= GetClassName(SourceTable.Name) %>Row();
					this.Populate<%= GetClassName(SourceTable.Name) %>DataRow(_reader, row);
					dataSet.<%= GetClassName(SourceTable.Name) %>.Add<%= GetClassName(SourceTable.Name) %>Row(row);
					
					recordcount++;
				}
				dataSet.AcceptChanges();
				
				return recordcount;
			}
			catch (Exception e)
			{
				System.Diagnostics.Debug.WriteLine(e.ToString());
				return 0;
			}
			finally
			{
				this.Cleanup();
			}
		}
		
		<% foreach(SearchCriteria method in SearchCriteria.GetAllSearchCriteria(SourceTable)) { %>
		<% method.SetMethodNameGeneration("FillBy","And",""); %> 
		public int <%= method.ToString()%>(<%= GetClassName(SourceTable.Name) %>DataSet dataSet,
		<%foreach(MemberColumnSchema item in method.Items){ %> 
		<%= SqlToC[item.NativeType] %> <%=GetCamelCaseName(item.Name)%><%= method.Items.IndexOf(item) == method.Items.Count - 1 ? " " : "," %> 
		<% } %>)
		{
			try
			{
				int recordcount = 0;
				_command = this.GetCommand();
				_command.CommandText = @"
				SELECT
					<%foreach(MemberColumnSchema item in method.Items){ %> 
					[<%= item.Name %>]<%= method.Items.IndexOf(item) == method.Items.Count - 1 ? " " : "," %> 
					<% } %>
				FROM
					[<%= GetClassName(SourceTable.Name) %>]
				WHERE
					<%foreach(MemberColumnSchema item in method.Items){ %> 
					<% if (method.Items.IndexOf(item) != method.Items.Count && method.Items.IndexOf(item) != 0) { %>AND <% } %>[<%= item.Name %>] = @<%= item.Name %>
					<% } %>
					";
			
			<%foreach(MemberColumnSchema item in method.Items){ %> 
			_command.Parameters.Add(this.CreateParameter("@<%= item.Name %>", DbType.<%= item.DataType %>, <%= GetCamelCaseName(item.Name) %>));
			<% } %>
			this.OpenConnection();
			_reader = _command.ExecuteReader(CommandBehavior.CloseConnection | CommandBehavior.SingleResult);
			while (_reader.Read())
			{
				<%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row row = dataSet.<%= GetClassName(SourceTable.Name) %>.New<%= GetClassName(SourceTable.Name) %>Row();
				this.Populate<%= GetClassName(SourceTable.Name) %>DataRow(_reader, row);
				dataSet.<%= GetClassName(SourceTable.Name) %>.Add<%= GetClassName(SourceTable.Name) %>Row(row);
				
				recordcount++;
			}
			dataSet.AcceptChanges();
				
			return recordcount;
		}
		catch (Exception e)
		{
			System.Diagnostics.Debug.WriteLine(e.ToString());
			return 0;
		}
		finally
		{
			this.Cleanup();
		}
	}
	<% } %>
	
	public IDataParameter[] GetFillParameters()
	{
		// not sure if I should create a <%= GetClassName(SourceTable.Name) %>Id parameter here or not.
		return null; //_fillDataParameters;
	}
	#endregion
		
	#region Update Methods
		public int Update(DataSet dataSet)
		{
			<%= GetClassName(SourceTable.Name) %>DataSet pageDataSet = dataSet as <%= GetClassName(SourceTable.Name) %>DataSet;
			if (pageDataSet != null)
			{
				return this.Update(pageDataSet);
			}
			else
			{
				throw new ApplicationException();
			}
		}
		
		public int Update(<%= GetClassName(SourceTable.Name) %>DataSet dataSet)
		{
			if (dataSet != null)
			{
				try
				{
					int updatedRowCount = 0;
					
					foreach(<%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row row in dataSet.<%= GetClassName(SourceTable.Name) %>)
					{
						switch (row.RowState)
						{
							case DataRowState.Added:
							{
								On<%= GetClassName(SourceTable.Name) %>Updating(new <%= GetClassName(SourceTable.Name) %>EventArgs(row, StatementType.Insert)) ;
								_command = this.GetCommand();
								_command.CommandText = @"
									INSERT INTO [<%= GetClassName(SourceTable.Name) %>] (
										<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
										<% if ((bool)SourceTable.Columns[i].ExtendedProperties["CS_IsIdentity"].Value == false) { %>
										[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
										<% } %>
										<% } %>
									) VALUES (
										<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
										<% if ((bool)SourceTable.Columns[i].ExtendedProperties["CS_IsIdentity"].Value == false) { %>
										@<%= SourceTable.Columns[i].Name %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
										<% } %>
										<% } %>
									)";
								<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
								<% if ((bool)SourceTable.Columns[i].ExtendedProperties["CS_IsIdentity"].Value == false) { %>
								_command.Parameters.Add(this.CreateParameter("@<%= SourceTable.Columns[i].Name %>", DbType.<%= SourceTable.Columns[i].DataType %>, row.Is<%= SourceTable.Columns[i].Name %>Null() ? (object)DBNull.Value : (object)row.<%= SourceTable.Columns[i].Name %>));
								<% } %>
								<% } %>
								this.OpenConnection();
								_command.ExecuteNonQuery();
								On<%= GetClassName(SourceTable.Name) %>Updated(new <%= GetClassName(SourceTable.Name) %>EventArgs(row, StatementType.Insert)) ;
								
								updatedRowCount++;
								break;
							}
							case DataRowState.Modified:
							{
								On<%= GetClassName(SourceTable.Name) %>Updating(new <%= GetClassName(SourceTable.Name) %>EventArgs(row, StatementType.Update)) ;
								_command = this.GetCommand();
								_command.CommandText = @"
									UPDATE [<%= GetClassName(SourceTable.Name) %>] SET
										<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
										[<%= SourceTable.NonPrimaryKeyColumns[i].Name %>] = @<%= SourceTable.NonPrimaryKeyColumns[i].Name %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
										<% } %>
									WHERE
										<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
										[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
										<% } %>
									";
								<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
								_command.Parameters.Add(this.CreateParameter("@<%= SourceTable.Columns[i].Name %>", DbType.<%= SourceTable.Columns[i].DataType %>, row.Is<%= SourceTable.Columns[i].Name %>Null() ? (object)DBNull.Value : (object)row.<%= SourceTable.Columns[i].Name %>));
								<% } %>
								this.OpenConnection();
								_command.ExecuteNonQuery();
								On<%= GetClassName(SourceTable.Name) %>Updated(new <%= GetClassName(SourceTable.Name) %>EventArgs(row, StatementType.Update)) ;
								
								updatedRowCount++;
								break;
							}
							case DataRowState.Deleted:
							{
								On<%= GetClassName(SourceTable.Name) %>Updating(new <%= GetClassName(SourceTable.Name) %>EventArgs(row, StatementType.Delete)) ;
								_command = this.GetCommand();
								_command.CommandText = @"
									DELETE FROM [<%= GetClassName(SourceTable.Name) %>]
									WHERE
										<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
										[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
										<% } %>
									";
								<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
								_command.Parameters.Add(this.CreateParameter("@<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>", DbType.<%= SourceTable.PrimaryKey.MemberColumns[i].DataType %>, row[dataSet.<%= GetClassName(SourceTable.Name) %>.<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>Column, DataRowVersion.Original]));
								<% } %>
								this.OpenConnection();
								_command.ExecuteNonQuery();
								On<%= GetClassName(SourceTable.Name) %>Updated(new <%= GetClassName(SourceTable.Name) %>EventArgs(row, StatementType.Delete)) ;
								
								updatedRowCount++;
								break;
							}
						}
					}
					dataSet.AcceptChanges();
					
					return updatedRowCount;
				}
				catch (Exception e)
				{
					System.Diagnostics.Debug.WriteLine(e.ToString());
					return 0;
				}
				finally
				{
					this.Cleanup();
				}
			}
			else
			{
				this.Cleanup();
				throw new ArgumentException("DataSet null");
			}
		}
	#endregion
		
	#region Events
		public delegate void <%= GetClassName(SourceTable.Name) %>UpdateEventHandler(object sender, <%= GetClassName(SourceTable.Name) %>EventArgs e);
		
		public event <%= GetClassName(SourceTable.Name) %>UpdateEventHandler <%= GetClassName(SourceTable.Name) %>Updated;
		private void On<%= GetClassName(SourceTable.Name) %>Updated(<%= GetClassName(SourceTable.Name) %>EventArgs e)
		{
			if ((this.<%= GetClassName(SourceTable.Name) %>Updated != null))
			{
				this.<%= GetClassName(SourceTable.Name) %>Updated(this, e);
			}
		}
		
		public event <%= GetClassName(SourceTable.Name) %>UpdateEventHandler <%= GetClassName(SourceTable.Name) %>Updating;
		private void On<%= GetClassName(SourceTable.Name) %>Updating(<%= GetClassName(SourceTable.Name) %>EventArgs e)
		{
			if ((this.<%= GetClassName(SourceTable.Name) %>Updating != null))
			{
				this.<%= GetClassName(SourceTable.Name) %>Updating(this, e);
			}
		}
		
		public class <%= GetClassName(SourceTable.Name) %>EventArgs : EventArgs
		{
			private StatementType _statementType;
			private <%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row _dataRow;
			
			public <%= GetClassName(SourceTable.Name) %>EventArgs(<%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row row, StatementType statementType)
			{
				_dataRow = row;
				_statementType = statementType;
			}
			
			public StatementType StatementType
			{
				get {return _statementType;}

			}
			
			public <%= GetClassName(SourceTable.Name) %>DataSet.<%= GetClassName(SourceTable.Name) %>Row Row
			{
				get {return _dataRow;}
				set	{_dataRow = value;}
			}
		}
		#endregion
		
	#region Custom Exceptions
		[Serializable()]
		public class <%= GetClassName(SourceTable.Name) %>NotFoundException: ApplicationException
		{
			public <%= GetClassName(SourceTable.Name) %>NotFoundException()
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>NotFoundException(string message) : base(message)
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>NotFoundException(string message, Exception inner): base(message, inner)
			{
			}
			
			protected <%= GetClassName(SourceTable.Name) %>NotFoundException(SerializationInfo info, StreamingContext context): base(info, context)
			{
			}
		}
		
		[Serializable()]
		public class ForeignKeyNotFoundException: ApplicationException
		{
			public ForeignKeyNotFoundException()
			{
			}
			
			public ForeignKeyNotFoundException(string message): base(message)
			{
			}
			
			public ForeignKeyNotFoundException(string message, Exception inner): base(message, inner)
			{
			}
			
			protected ForeignKeyNotFoundException(SerializationInfo info, StreamingContext context): base(info, context)
			{
			}
		}
		
		[Serializable()]
		public class <%= GetClassName(SourceTable.Name) %>DataLockedException: ApplicationException
		{
			public <%= GetClassName(SourceTable.Name) %>DataLockedException()
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>DataLockedException(string message): base(message)
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>DataLockedException(string message, Exception inner): base(message, inner)
			{
			}
			
			protected <%= GetClassName(SourceTable.Name) %>DataLockedException(SerializationInfo info, StreamingContext context): base(info, context)
			{
			}
		}

		[Serializable()]
		public class <%= GetClassName(SourceTable.Name) %>DataChangedException: ApplicationException
		{
			public <%= GetClassName(SourceTable.Name) %>DataChangedException()
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>DataChangedException(string message): base(message)
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>DataChangedException(string message, Exception inner): base(message, inner)
			{
			}
			
			protected <%= GetClassName(SourceTable.Name) %>DataChangedException(SerializationInfo info, StreamingContext context): base(info, context)
			{
			}
		}
		
		[Serializable()]
		public class <%= GetClassName(SourceTable.Name) %>DuplicateKeyException: ApplicationException
		{
			public <%= GetClassName(SourceTable.Name) %>DuplicateKeyException()
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>DuplicateKeyException(string message): base(message)
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>DuplicateKeyException(string message, Exception inner): base(message, inner)
			{
			}
			
			protected <%= GetClassName(SourceTable.Name) %>DuplicateKeyException(SerializationInfo info, StreamingContext context): base(info, context)
			{
			}
		}
		
		[Serializable()]
		public class <%= GetClassName(SourceTable.Name) %>DataDeletedException: ApplicationException
		{
			public <%= GetClassName(SourceTable.Name) %>DataDeletedException()
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>DataDeletedException(string message) : base(message)
			{
			}
			
			public <%= GetClassName(SourceTable.Name) %>DataDeletedException(string message, Exception inner): base(message, inner)
			{
			}
			
			protected <%= GetClassName(SourceTable.Name) %>DataDeletedException(SerializationInfo info, StreamingContext context): base(info, context)
			{
			}
		}
		#endregion
	}
	#endregion
<%
if (!string.IsNullOrEmpty(this.ClassNamespace))
{
	Response.WriteLine("}");
}
%>