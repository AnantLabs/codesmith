
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using CodeSmith.Data;
using CodeSmith.Data.Rules;
using CodeSmith.Data.Rules.Assign;
using CodeSmith.Data.Rules.Validation;

namespace Petshop.Data
{
    /// <summary>
    /// The manager class for Inventory.
    /// </summary>
    public partial class InventoryManager : EntityManagerBase<PetshopDataManager, Inventory>
    {
        /// <summary>
        /// Initializes the <see cref="InventoryManager"/> class.
        /// </summary>
        static InventoryManager()
        {
            RuleManager.AddShared<Inventory>(typeof(PetshopDataContext));
            AddRules();
        }

        /// <summary>
        /// Initializes the <see cref="InventoryManager"/> class.
        /// </summary>
        /// <param name="manager">The current manager.</param>
        public InventoryManager(PetshopDataManager manager) : base(manager)
        {
            OnCreated();
        }

        /// <summary>
        /// Gets the current context.
        /// </summary>
        protected PetshopDataContext Context
        {
            get { return Manager.Context; }
        }
        
        /// <summary>
        /// Gets the entity for this manager.
        /// </summary>
        protected Table<Inventory> Entity
        {
            get { return Manager.Context.Inventory; }
        }
        
        
        /// <summary>
        /// Creates the key for this entity.
        /// </summary>
        public static IEntityKey<string> CreateKey(string itemId)
        {
            return new EntityKey<string>(itemId);
        }
        
        /// <summary>
        /// Gets an entity by the primary key.
        /// </summary>
        /// <param name="key">The key for the entity.</param>
        /// <returns>
        /// An instance of the entity or null if not found.
        /// </returns>
        /// <remarks>
        /// This method is expecting key to be of type IEntityKey&lt;string&gt;.
        /// </remarks>
        /// <exception cref="ArgumentException">Thrown when key is not of type IEntityKey&lt;string&gt;.</exception>
        public override Inventory GetByKey(IEntityKey key)
        {
            if (key is IEntityKey<string>)
            {
                IEntityKey<string> entityKey = (IEntityKey<string>)key;
                return GetByKey(entityKey.Key);
            }
            else
            {
                throw new ArgumentException("Invalid key, expected key to be of type IEntityKey<string>");
            }
        }
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public Inventory GetByKey(string itemId)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByKey.Invoke(Context, itemId);
            else
                return Entity.FirstOrDefault(i => i.ItemId == itemId);
        }

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddRules();
        /// <summary>Called when the class is created.</summary>
        partial void OnCreated();
        #endregion
        
        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<PetshopDataContext, string, Inventory> GetByKey = 
                CompiledQuery.Compile(
                    (PetshopDataContext db, string itemId) => 
                        db.Inventory.FirstOrDefault(i => i.ItemId == itemId));

        }
        #endregion
    }
}

