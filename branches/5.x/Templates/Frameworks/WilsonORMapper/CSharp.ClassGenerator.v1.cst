<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects in .net 1.1" 
	Debug="true" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Src="Internal\CommonUtility.cs" %>

<%@ Register Name="MappingCommon" Template="Internal\mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="Internal\class.common.cst" MergeProperties="True" ExcludeProperties="ClassNamespace,MappingEntity" %>

<%@ Register Name="CSharpManager" Template="Internal\cs.v1.manager.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpClass" Template="Internal\cs.v1.class.cst" MergeProperties="True" ExcludeProperties="" %>

<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Windows.Forms.Design" %>
 
<script runat="template">
	private static Regex _generagedRegex = new Regex(@"(?<=<CodeSmithGenerated>)[\w\W]*(?=</CodeSmithGenerated>)", RegexOptions.Compiled);

	private MappingCommon _mappingCommon;
	
	private CSharpManager _managerTemplate = null;
	private CSharpClass _classTemplate = null;
	
	private string _fileExtension = ".cs";
	
	public string BuildFileName(string name)
	{
		name = Path.ChangeExtension(name, _fileExtension);
		name = Path.Combine(OutputDirectory, name);
		return name;
	}
	
	public void Initialize()
	{
		// init templates
		_managerTemplate = new CSharpManager();
		_classTemplate = new CSharpClass();
		this.CopyPropertiesTo(_managerTemplate);
		this.CopyPropertiesTo(_classTemplate);
		
		// load mapping file
		_mappingCommon = new MappingCommon();
		this.CopyPropertiesTo(_mappingCommon);
		
		Response.WriteLine("Loading Mapping File '{0}'.", MappingFile);
		_mappingCommon.LoadMappingFile();
	}
	
	public void Generate()
	{
		mappings map = _mappingCommon.MappingObject;
		string classNamespace = map.defaultNamespace;
		
		//generate datamanager
		string managerFile = BuildFileName("DataManager");
		if (!File.Exists(managerFile))
		{
			Response.WriteLine(string.Format("Generating DataManager '{0}' ...", managerFile));		
			_managerTemplate.SetProperty("ClassNamespace", classNamespace);			
			_managerTemplate.RenderToFile(managerFile, true);
			Response.WriteLine("File {0} saved succesfully!", managerFile);
		}
		
		//generate classes
		foreach(entity en in map.entities)
		{
			string className = CommonUtility.GetClassName(en.type);
			string classFile = BuildFileName(className);
			
			_classTemplate.SetProperty("ClassNamespace", classNamespace);
			_classTemplate.SetProperty("MappingEntity", en);
			
			if (File.Exists(classFile))
			{
				Response.WriteLine(string.Format("Updating Class '{0}' ...", classFile));		
				string newBuffer = _classTemplate.RenderToString();
				string oldBuffer = CommonUtility.GetFileText(classFile);
				
				Match newContentMatch = _generagedRegex.Match(newBuffer);
				if (!_generagedRegex.IsMatch(oldBuffer))
				{
					Response.WriteLine(string.Format("Error: Could not find <CodeSmithGenerated> tag in file {0}", classFile));
					return;
				}
				oldBuffer = _generagedRegex.Replace(oldBuffer, newContentMatch.Value);
				string message;
				CommonUtility.WriteFile(oldBuffer, classFile, out message);	
				Response.WriteLine(message);				
			}
			else
			{
				Response.WriteLine("Generating Class '{0}' ...", classFile);		
				_classTemplate.RenderToFile(classFile, true);
				Response.WriteLine("File {0} saved succesfully!", classFile);
			}
		}
	}
</script>
<% 
//Debugger.Break();
this.Initialize();  
this.Generate();  
%>

