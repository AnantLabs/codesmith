<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the ORMapper" 
	Debug="true" %>
	
<%@ Assembly Src="CommonUtility.cs" %>

<%@ Register Name="MappingCommon" Template="mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="class.common.cst" MergeProperties="True" ExcludeProperties="ImplementHelper,ImplementNotification" %>

<%@ Property Name="TestNamespace" Type="System.String" Optional="False" %>
<%@ Property Name="TestFramework" Type="TestFrameworkEnum" Default="NUnit" Optional="False" Category="2.Class" Description="The dotnet langauge to generate class for." %>

<script runat="template">
	

	[Browsable(false)]
	public string ClassName {
        get { return CommonUtility.GetClassName(this.MappingEntity.type);}
    }
	
</script>

//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
//
//		This template is the begining of the test cases for the business objects.
//      This is not a complete set of tests. Please add more tests.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using NUnit.Framework;
using Wilson.ORMapper;
using <%= ClassNamespace %>;

namespace <%= TestNamespace %>
{
	/// <summary>
	/// This class is a test case for <%= ClassName %>
	/// </summary>
	[TestFixture()]		
	public class <%= ClassName %>Test
	{
		public <%= ClassName %>Test()
		{}

		[Test()]
		public void <%= ClassName %>Retrieve()
		{
			//TODO set the key data type and value
			/*
			object key = null;
			<%= ClassName %> instance = <%= ClassName %>.Retrieve(key);
			Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.");
			//TODO assert instance values
			Assert.AreEqual(key, instance.KeyName);
			*/
		}
		
		[Test()]
		public void <%= ClassName %>Save()
		{		
			<%= ClassName %> instance = new <%= ClassName %>();
			Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.");
			
			//TODO Set values
			
			//instance.Save();
		}
		
		
		[Test()]
		public void <%= ClassName %>RetrieveAll()
		{
			IList list = <%= ClassName %>.RetrieveAll();

			Assert.IsNotNull(list, "<%= ClassName %>.RetrieveAll() returned null.");
			Assert.IsTrue(list.Count > 0, "<%= ClassName %>.RetrieveAll() returned a row count of 0.");
		}

		[Test()]
		public void <%= ClassName %>RetrievePage()
		{
			int pageSize = 10;
			int pageIndex = 1;
			int pageCount;
			
			IList list = <%= ClassName %>.RetrievePage(pageSize, pageIndex, out pageCount);
			
			Assert.IsNotNull(list, "<%= ClassName %>.RetrievePage() returned null.");
			Assert.IsTrue(list.Count > 0, "<%= ClassName %>.RetrievePage() returned a row count of 0.");

		}

	}
}

