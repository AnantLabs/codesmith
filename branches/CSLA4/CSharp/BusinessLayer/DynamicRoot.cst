<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>

<%@ Register Name="DynamicRoot" Template="Internal\DynamicRoot.cst" %>
<%@ Register Name="DynamicRootDataAccess" Template="Internal\DynamicRoot.DataAccess.cst" %>
<%@ Register Name="DynamicRootDataAccessParameterized" Template="Internal\DynamicRoot.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="DynamicRootDataAccessLinqToSQL" Template="Internal\DynamicRoot.DataAccess.LinqToSQL.cst" %>
<%@ Register Name="DynamicRootDataAccessStoredProcedures" Template="Internal\DynamicRoot.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="DynamicRootGenerated" Template="Internal\DynamicRoot.Generated.cst" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();
    
    #region DynamicRoot
    
    DynamicRoot dynamicRoot = this.Create<DynamicRoot>();
    this.CopyPropertiesTo(dynamicRoot);
    
    string parentFileName = System.IO.Path.Combine(this.Location, String.Format("Entities\\{0}.cs", dynamicRoot.BusinessClassName));
    if (!System.IO.File.Exists(parentFileName))
    {
        dynamicRoot.RenderToFile(parentFileName, false);
    }
    
    #region DynamicRoot.Generated
    
    string fileName = System.IO.Path.Combine(Location, String.Format("Entities\\{0}.Generated.cs", dynamicRoot.BusinessClassName));
    
    DynamicRootGenerated dynamicRootGenerated = this.Create<DynamicRootGenerated>();
    this.CopyPropertiesTo(dynamicRootGenerated);
    
    dynamicRootGenerated.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #region DynamicRoot.DataAccess
    
    fileName = System.IO.Path.Combine(Location, String.Format("Entities\\{0}.DataAccess.cs", dynamicRoot.BusinessClassName));
    if(DataAccessImplementation == DataAccessMethod.None)
    {
        DynamicRootDataAccess dynamicRootDataAccess = this.Create<DynamicRootDataAccess>();
        this.CopyPropertiesTo(dynamicRootDataAccess);
        
        dynamicRootDataAccess.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
    {
        DynamicRootDataAccessParameterized dynamicRootDataAccessParameterized = this.Create<DynamicRootDataAccessParameterized>();
        this.CopyPropertiesTo(dynamicRootDataAccessParameterized);
        
        dynamicRootDataAccessParameterized.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.LinqToSQL)
    {
        DynamicRootDataAccessLinqToSQL dynamicRootDataAccessLinqToSQL = this.Create<DynamicRootDataAccessLinqToSQL>();
        this.CopyPropertiesTo(dynamicRootDataAccessLinqToSQL);
        
        dynamicRootDataAccessLinqToSQL.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        DynamicRootDataAccessStoredProcedures dynamicRootDataAccessStoredProcedures = this.Create<DynamicRootDataAccessStoredProcedures>();
        this.CopyPropertiesTo(dynamicRootDataAccessStoredProcedures);

        dynamicRootDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, true);

        //StoredProcedures
        fileName = System.IO.Path.Combine(Location, String.Format("Entities\\{0}.StoredProcedures.sql", dynamicRoot.BusinessClassName));
        SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
        this.CopyPropertiesTo(sqlStoredProcedures);
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
    }
    
    #endregion

    #endregion
}

</script>