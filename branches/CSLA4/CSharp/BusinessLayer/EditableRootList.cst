<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>

<%@ Register Name="EditableRootList" Template="Internal\EditableRootList.cst" %>
<%@ Register Name="EditableRootListDataAccess" Template="Internal\EditableRootList.DataAccess.cst" %>
<%@ Register Name="EditableRootListDataAccessParameterized" Template="Internal\EditableRootList.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="EditableRootListDataAccessLinqToSQL" Template="Internal\EditableRootList.DataAccess.LinqToSQL.cst" %>
<%@ Register Name="EditableRootListDataAccessStoredProcedures" Template="Internal\EditableRootList.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="EditableRootListGenerated" Template="Internal\EditableRootList.Generated.cst" %>
<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    #region EditableRootList
    
    EditableRootList editableRootList = this.Create<EditableRootList>();
    this.CopyPropertiesTo(editableRootList);
    
    string parentFileName = System.IO.Path.Combine(this.Location, String.Format("Collections\\{0}.cs", editableRootList.BusinessClassName));
    if (!System.IO.File.Exists(parentFileName))
    {
        editableRootList.RenderToFile(parentFileName, false);
    }
    
    #region EditableRootList.Generated
    
    string fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.Generated.cs", editableRootList.BusinessClassName));
    
    EditableRootListGenerated editableRootListGenerated = this.Create<EditableRootListGenerated>();
    this.CopyPropertiesTo(editableRootListGenerated);
    
    editableRootListGenerated.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #region EditableRootList.DataAccess
    
    fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.DataAccess.cs", editableRootList.BusinessClassName));
    if(DataAccessImplementation == DataAccessMethod.None)
    {
        EditableRootListDataAccess editableRootListDataAccess = this.Create<EditableRootListDataAccess>();
        this.CopyPropertiesTo(editableRootListDataAccess);
        
        editableRootListDataAccess.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
    {
        EditableRootListDataAccessParameterized editableRootListDataAccessParameterized = this.Create<EditableRootListDataAccessParameterized>();
        this.CopyPropertiesTo(editableRootListDataAccessParameterized);
        
        editableRootListDataAccessParameterized.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.LinqToSQL)
    {
        EditableRootListDataAccessLinqToSQL editableRootListDataAccessLinqToSQL = this.Create<EditableRootListDataAccessLinqToSQL>();
        this.CopyPropertiesTo(editableRootListDataAccessLinqToSQL);
        
        editableRootListDataAccessLinqToSQL.RenderToFile(fileName, parentFileName, true);
    }    
    else if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        EditableRootListDataAccessStoredProcedures editableRootListDataAccessStoredProcedures = this.Create<EditableRootListDataAccessStoredProcedures>();
        this.CopyPropertiesTo(editableRootListDataAccessStoredProcedures);

        editableRootListDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, true);

        //StoredProcedures
        fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.StoredProcedures.sql", editableRootList.BusinessClassName));
        SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
        this.CopyPropertiesTo(sqlStoredProcedures);
        
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
    }
    
    #endregion
    
    #endregion

}

public override bool OnEntityChanging()
{
    if (string.IsNullOrEmpty(BusinessClassName))
    {
        BusinessClassName = string.Concat(Entity.Name, "List");
        ChildBusinessClassName = Entity.Name;
    }

    if (string.IsNullOrEmpty(CriteriaClassName) || CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase))
        CriteriaClassName = String.Concat(Entity.Name, "Criteria");

    return false;
}

</script>