<%-- Author: Blake Niemyjski --%>
<%--         Joe McPherson   --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA 3.8.X EditableRoot" %>
<%@ Register Name="MapLinqToSQL" Template="..\..\Common\MapLinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildCreate" Template="..\..\Common\ChildCreate.cst" MergeProperties="False" ExcludeProperties="" %>
<%-- LinqToSQL Modification --%>
<%@ Register Name="ChildFetch" Template="..\..\Common\ChildFetch.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildInsert" Template="..\..\Common\ChildInsert.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildUpdate" Template="..\..\Common\ChildUpdate.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalDelete" Template="..\..\Common\DataPortalDelete.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
#region Using declarations

using System;
using System.Data;
//LinqToSQL Modification
using <%=LinqToSQLContextNamespace%>;
using DAL=<%=LinqToSQLContextNamespace%>;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

#endregion

namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %>
    {
		/// <summary>
        /// Instantiates a CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        /// <returns></returns>
        protected override void Child_Create()
        {
<% RenderHelper(new ChildCreate()); %>
        }

        /// <summary>
        /// Retrieves data from the data base into a CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
		/// using the criteria provided. 
        /// </summary>
		/// <param name="criteria">Object of type <see cref="<%= CriteriaClassName %><%= Entity.GenericProperty %>"/></param>
        /// <returns></returns>
        private void Child_Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new ChildFetch()); %>
        }

		#region Child_Insert
        /// <summary>
        /// Inserts data into the data base using the information in the current 
		///	CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_Insert()
        {
<% RenderHelper(new ChildInsert(), false); %>
        }
<% if (Entity.AssociatedManyToOne.Count > 0) {%>
<% if (Entity.AssociatedManyToOne.Distinct().Count > 1) { int index = 0; foreach(Association association in Entity.AssociatedManyToOne.Distinct()) { %>

        private void Child_Insert(<%= association.BuildParametersVariables(false) %>)
        {
            Child_Insert(<%= association.BuildUpdateStatementVariables(Entity.AssociatedManyToOne.Distinct(), index++, false) %>);
        }

<% } }%>

        private void Child_Insert(<%= Entity.AssociatedManyToOne.Distinct().BuildParametersVariables(false) %>)
        {
<% RenderHelper(new ChildInsert()); %>
        }
<% } %>
        #endregion

        #region Child_Update

        /// <summary>
        /// Updates the corresponding record in the data base with the information in the current 
		///	CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_Update()
        {
<% RenderHelper(new ChildUpdate(), false); %>
        }
<% if (Entity.AssociatedManyToOne.Count > 0) {%>
<% if (Entity.AssociatedManyToOne.Distinct().Count > 1) { int index = 0; foreach(Association association in Entity.AssociatedManyToOne.Distinct()) { %>

        private void Child_Update(<%= association.BuildParametersVariables(false) %>)
        {
            Child_Update(<%= association.BuildUpdateStatementVariables(Entity.AssociatedManyToOne.Distinct(), index++, false) %>);
        }

<% } }%>
 
        private void Child_Update(<%= Entity.AssociatedManyToOne.Distinct().BuildParametersVariables(false) %>)
        {
<% RenderHelper(new ChildUpdate()); %>
        }
<% }%>

        #endregion

        /// <summary>
        /// Deletes the corresponding record in the data base with the information in the current 
		///	CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_DeleteSelf()
        {
            bool cancel = false;
            OnChildSelfDeleting(ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new <%= CriteriaClassName %> (<% if(UseMemberVariables) { %><%= Entity.PrimaryKey.KeyMembers.BuildPrivateMemberVariableArguments() %><% } else { %><%= Entity.PrimaryKey.KeyMembers.BuildPropertyVariableArguments() %><% } %>));
        
            OnChildSelfDeleted();
        }

		/// <summary>
        /// Deletes data in the data base using the criteria specified in the <%= CriteriaClassName %><%= Entity.GenericProperty %> object.
		/// </summary>
		/// <param name="criteria">Object of type <see cref="<%= CriteriaClassName %><%= Entity.GenericProperty %>"/></param>
        /// <returns></returns>
        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(<%= CriteriaClassName %> criteria)
        {
<% RenderHelper(new DataPortalDelete()); %>
        }

		/// <summary>
        /// Maps data columns retrieved from the data base to the respective properties in the current 
		/// <see cref="<%= BusinessClassName %><%= Entity.GenericProperty %> CSLA editable child business object.
		/// </summary>
		/// <param name="criteria">Object of type <see cref="<%=LinqToSQLContextNamespace%>.<%=StringUtil.ToPascalCase(Entity.Table.Name)%> %>"/> containing the data retrieved from the data base.</param>
        /// <returns></returns>
        private void Map(DAL.<%=StringUtil.ToPascalCase(Entity.Table.Name)%> DataSource)
        {
<% RenderHelper(new MapLinqToSQL()); %>

            MarkAsChild();
            MarkOld();
        }
    }
}
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>