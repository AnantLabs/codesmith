<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityMasterCodeTemplate" %>
<%@ Property Name="BusinessProjectName" Type="System.String" Optional="False" Category="3. Business Project" Description="The namespace for the business project." %>
<%@ Property Name="DataProjectName" Type="System.String" Optional="False" Category="4. Data Project" Description="The namespace for the data project." %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this template will not be lost.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% RegisterReferences(); %>
using System;
using System.Runtime.CompilerServices;

// Note: I really don't like having this here but if someone can come up with a better way to populate identity columns after update let me know.
// Documentation: http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute.aspx
[assembly: InternalsVisibleTo("<%= DataProjectName %>")]

namespace <%= BusinessProjectName %>
{
    public static class FactoryNames
    {
        #region "Preserved Code"
        
        #endregion
        
<% foreach(IEntity entity in new EntityManager(DynamicRoot).Entities){ %>
        public const string <%= entity.Name %>FactoryName = "<%= DataProjectName %>.<%= entity.Name %>Factory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(EditableChild).Entities){ %>
        public const string <%= entity.Name %>FactoryName = "<%= DataProjectName %>.<%= entity.Name %>Factory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(EditableRoot).Entities){ %>
        public const string <%= entity.Name %>FactoryName = "<%= DataProjectName %>.<%= entity.Name %>Factory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(ReadOnlyChild).Entities){ %>
        public const string <%= entity.Name %>InfoFactoryName = "<%= DataProjectName %>.<%= entity.Name %>Factory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(ReadOnlyRoot).Entities){ %>
        public const string <%= entity.Name %>InfoFactoryName = "<%= DataProjectName %>.<%= entity.Name %>Factory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(SwitchableObject).Entities){ %>
        public const string <%= entity.Name %>FactoryName = "<%= DataProjectName %>.<%= entity.Name %>Factory, <%= DataProjectName %>";
<% }%> 

<% foreach(IEntity entity in new EntityManager(DynamicListBase).Entities){ %>
        public const string <%= entity.Name %>ListFactoryName = "<%= DataProjectName %>.<%= entity.Name %>ListFactory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(DynamicRootList).Entities){ %>
        public const string <%= entity.Name %>ListFactoryName = "<%= DataProjectName %>.<%= entity.Name %>ListFactory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(EditableRootList).Entities){ %>
        public const string <%= entity.Name %>ListFactoryName = "<%= DataProjectName %>.<%= entity.Name %>ListFactory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(EditableChildList).Entities){ %>
        public const string <%= entity.Name %>ListFactoryName = "<%= DataProjectName %>.<%= entity.Name %>ListFactory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(ReadOnlyList).Entities){ %>
        public const string <%= entity.Name %>InfoListFactoryName = "<%= DataProjectName %>.<%= entity.Name %>ListFactory, <%= DataProjectName %>";
<% } foreach(IEntity entity in new EntityManager(ReadOnlyChildList).Entities){ %>
        public const string <%= entity.Name %>InfoListFactoryName = "<%= DataProjectName %>.<%= entity.Name %>ListFactory, <%= DataProjectName %>";
<% } %>
    }
}