<%-- Author: Blake Niemyjski --%>
<%--         Joe McPherson   --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" Debug="True" Description="CSLA 3.8.X SwitchableObject" %>
<%@ Register Name="MapLinqToSQL" Template="..\..\Common\MapLinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalCreate" Template="..\..\Common\DataPortalCreate.cst" MergeProperties="False" ExcludeProperties="" %>
<%-- LinqToSQL Modification --%>
<%@ Register Name="DataPortalFetch" Template="..\..\Common\DataPortalFetch.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalInsert" Template="..\..\Common\DataPortalInsert.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalUpdate" Template="..\..\Common\DataPortalUpdate.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalDelete" Template="..\..\Common\DataPortalDelete.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildCreate" Template="..\..\Common\ChildCreate.cst" MergeProperties="False" ExcludeProperties="" %>

<%-- LinqToSQL Modification --%>
<%@ Register Name="ChildFetch" Template="..\..\Common\ChildFetch.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildInsert" Template="..\..\Common\ChildInsert.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildUpdate" Template="..\..\Common\ChildUpdate.LinqToSQL.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
using System;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

using Csla;
using Csla.Data;

using <%=LinqToSQLContextNamespace%>;
using DAL=<%=LinqToSQLContextNamespace%>;

namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %>
    {
        #region Root Data Access
        
        /// <summary>
        /// Instantiates a CSLA switchable business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        /// <returns></returns>
        [RunLocal]
        protected override void DataPortal_Create()
        {
<% RenderHelper(new DataPortalCreate()); %>
        }
        
        /// <summary>
        /// Retrieves data from the data base into a CSLA switchable business root object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// using the criteria provided. 
        /// </summary>
        /// <param name="criteria">Object of type <see cref="<%= CriteriaClassName %><%= Entity.GenericProperty %>"/></param>
        /// <returns></returns>
        private void DataPortal_Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new DataPortalFetch()); %>
        }

        /// <summary>
        /// Inserts data into the data base using the information in the current 
        ///    CSLA switchable business root object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Insert()
        {
<% RenderHelper(new DataPortalInsert()); %>
        }

        /// <summary>
        /// Updates the corresponding record in the data base with the information in the current 
        ///    CSLA switchable business root object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Update()
        {
<% RenderHelper(new DataPortalUpdate()); %>
        }

        /// <summary>
        /// Deletes the corresponding record in the data base with the information in the current 
        ///    CSLA switchable business root object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_DeleteSelf()
        {
            bool cancel = false;
            OnSelfDeleting(ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<% if(UseMemberVariables) { %><%= Entity.Key.Properties.BuildPrivateMemberVariableArguments() %><% } else { %><%= Entity.Key.Properties.BuildPropertyVariableArguments() %><% } %>));
        
            OnSelfDeleted();
        }

        /// <summary>
        /// Deletes data in the data base using the criteria specified in the <%= BusinessClassName %>Criteria<%= Entity.GenericProperty %> object.
        /// </summary>
        /// <param name="criteria">Object of type <see cref="<%= CriteriaClassName %><%= Entity.GenericProperty %>"/></param>
        /// <returns></returns>
        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new DataPortalDelete()); %>
        }

        #endregion

        #region Child Data Access

        /// <summary>
        /// Instantiates a CSLA switchable business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        /// <returns></returns>
        protected override void Child_Create()
        {
<% RenderHelper(new ChildCreate()); %>
        }
        /// <summary>
        /// Retrieves data from the data base into a CSLA switchable business child object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// using the criteria provided. 
        /// </summary>
        /// <param name="criteria">Object of type <see cref="<%= CriteriaClassName %><%= Entity.GenericProperty %>"/></param>
        /// <returns></returns>
        private void Child_Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new ChildFetch()); %>

            MarkAsChild();
        }

        #region Child_Insert
        /// <summary>
        /// Inserts data into the data base using the information in the current 
        ///    CSLA switchable business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_Insert()
        {
<% RenderHelper(new ChildInsert(), false); %>
        }
<% if (Entity.Associations.Count(a => a.AssociationType == AssociationType.ManyToOne) > 0) {%>
<% if (Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().Count() > 1) { int index = 0; foreach(Association association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct()) { %>

        private void Child_Insert(<%= association.BuildParametersVariables(false) %>)
        {
            Child_Insert(<%= association.BuildUpdateStatementVariables(Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().ToList(), index++, false) %>);
        }

<% } }%>

        private void Child_Insert(<%= Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().ToList().BuildParametersVariables(false) %>)
        {
<% RenderHelper(new ChildInsert()); %>
        }
<% } %>

        #endregion

        #region Child_Update
        /// <summary>
        /// Updates the corresponding record in the data base with the information in the current 
        ///    CSLA switchable business child object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_Update()
        {
<% RenderHelper(new ChildUpdate(), false); %>
        }
<% if (Entity.Associations.Count(a => a.AssociationType == AssociationType.ManyToOne) > 0) {%>
<% if (Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().Count() > 1) { int index = 0; foreach(Association association in Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct()) { %>

        private void Child_Update(<%= association.BuildParametersVariables(false) %>)
        {
            Child_Update(<%= association.BuildUpdateStatementVariables(Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().ToList(), index++, false) %>);
        }

<% } }%>
 
        private void Child_Update(<%= Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne).Distinct().ToList().BuildParametersVariables(false) %>)
        {
<% RenderHelper(new ChildUpdate()); %>
        }
<% }%>
        #endregion

        /// <summary>
        /// Deletes the corresponding record in the data base with the information in the current 
        ///    CSLA switchable business child object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_DeleteSelf()
        {
            bool cancel = false;
            OnChildSelfDeleting(ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new <%= CriteriaClassName %><%= Entity.GenericProperty %> (<% if(UseMemberVariables) { %><%= Entity.Key.Properties.BuildPrivateMemberVariableArguments() %><% } else { %><%= Entity.Key.Properties.BuildPropertyVariableArguments() %><% } %>));
        
            OnChildSelfDeleted();
        }

        #endregion

        /// <summary>
        /// Maps data columns retrieved from the data base to the respective properties in the current 
        /// <see cref="<%= BusinessClassName %><%= Entity.GenericProperty %> CSLA switchable business child object.
        /// </summary>
        /// <param name="criteria">Object of type <see cref="<%=LinqToSQLContextNamespace%>.<%=Entity.Name%> %>"/> containing the data retrieved from the data base.</param>
        /// <returns></returns>
        private void Map(DAL.<%=Entity.Name%> DataSource)
        {
<% RenderHelper(new MapLinqToSQL()); %>

            MarkOld();
        }
    }
}
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>