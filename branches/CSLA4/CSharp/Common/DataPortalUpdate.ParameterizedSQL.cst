<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>

            bool cancel = false;
            OnUpdating(ref cancel);
            if (cancel) return;

<% if(Entity.CanUpdate) { %>  
<% if(Entity.IdentityProperty == null) { %>
            if(<%= Entity.GetProperties(PropertyType.Key).BuildIdentityKeyEqualityStatements()%>)
            {
                // Insert new child.
                <%= BusinessClassName %> item = new <%= BusinessClassName %> {<%= Entity.GetProperties(PropertyType.NoConcurrency).BuildObjectInitializer(false, true) %>};
                <%= Entity.GetProperties(PropertyType.NoConcurrency).BuildNullableObjectInitializer(false, true, false, "item.")%>
                item = item.Save();

                // Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
<% foreach(Association association in Entity.Associations.Where(a => a.AssociationType == AssociationType.OneToMany)) { 
     if(!BusinessObjectExists(association) && IsReadOnlyBusinessObject( association, "Info")) { continue; }%>
                foreach(<%= association.Name %> itemToUpdate in <%= association.Name %>)
                {
<%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate", "") %>
                }
<% } %>

                // Create a new connection.
                using (var connection = new SqlConnection(ADOHelper.ConnectionString))
                {
                    connection.Open();
                    FieldManager.UpdateChildren(this, connection);
                }

                // Delete the old.
                var criteria = new <%= CriteriaClassName %> {<%= Entity.GetProperties(PropertyType.Key).BuildObjectInitializer(false, false, true) %>};
                <%= Entity.GetProperties(PropertyType.Key).BuildNullableObjectInitializer(false, false, true)%>
                DataPortal_Delete(criteria);

                // Mark the original as the new one.
<% foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(!property.IsType(PropertyType.Identity)) { %>
                Original<%= property.Name %> = <%= property.Name %>;
<% } }%>

                OnUpdated();

                return;
            }

<% } %>
            const string commandText = "UPDATE <%= Entity.EntityKeyName %> <%= Entity.GetProperties(PropertyType.UpdateInsert).BuildSetStatements() %> <%= Entity.GetProperties(PropertyType.Key).BuildWhereStatements(true) %><% if(Entity.ConcurrencyProperty != null) { %> AND [<%= Entity.ConcurrencyProperty.KeyName %>] = <%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %><% } %><%= Entity.BuildUpdateSelectStatement() %>";
            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(var command = new SqlCommand(commandText, connection))
                {
                    <%= Entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(false, false, false, false, true) %>
<% if(Entity.ConcurrencyProperty != null) { %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp);
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Value = this.<%= Entity.ConcurrencyProperty.Name %>;
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Direction = ParameterDirection.InputOutput;
<% } %>

<% if(Entity.ConcurrencyProperty != null || Entity.IdentityProperty != null) { %>
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        if(reader.RecordsAffected == 0)
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

                        if(reader.Read())
                        {
                            using (BypassPropertyChecks)
                            {
<% if(Entity.ConcurrencyProperty != null) { %>
                                <%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>");
<% } foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(!property.IsType(PropertyType.Identity) && property.IsNullable) {%> 
                    //  Update non-identity nullable primary key value.
<%if(UseMemberVariables) { %>
                                <%= property.PrivateMemberVariableName %> = <%if(!property.HasByteArrayColumn()) { %>reader.<%= property.GetReaderMethod() %>("<%= property.KeyName %>");<% } else { %>ADOHelper.GetBytes(reader);<% } %>
<% } else { %>
                                LoadProperty(<%= property.PrivateMemberVariableName %>Property, <%if(!property.HasByteArrayColumn()) { %>reader.<%= property.GetReaderMethod() %>("<%= property.KeyName %>"));<% } else { %>ADOHelper.GetBytes(reader, "<%= property.KeyName %>"));<% } %>
<% } } } %>
                            }
                        }
                    }
<% } else { %>
                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
<% } %>

<% foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(!property.IsType(PropertyType.Identity) || property.IsDbType(DbType.Guid)) { if(UseMemberVariables) { %>
                    _original<%= property.Name %> = this.<%= property.Name %>;
<% } else { %>
                    LoadProperty(_original<%= property.Name %>Property, this.<%= property.Name %>);
<% } } } %>
                }
<% if(Entity.Associations.Count(a => a.AssociationType == AssociationType.OneToMany) > 0 || Entity.Associations.Count(a => a.AssociationType == AssociationType.ManyToOne) > 0 || Entity.Associations.Count(a => a.AssociationType == AssociationType.OneToZeroOrOne) > 0){ %>

                FieldManager.UpdateChildren(this, connection);
<% } %>
            }

            OnUpdated();
<% } else { %>
            throw new NotSupportedException("This business object cannot be updated.");
<% } %>
