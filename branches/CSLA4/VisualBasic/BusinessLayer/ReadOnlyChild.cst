<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" OutputType="None" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" %>

<%@ Register Name="ReadOnlyChild" Template="Internal\ReadOnlyChild.cst" %>
<%@ Register Name="ReadOnlyChildDataAccess" Template="Internal\ReadOnlyChild.DataAccess.cst" %>
<%@ Register Name="ReadOnlyChildDataAccessParameterized" Template="Internal\ReadOnlyChild.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="ReadOnlyChildDataAccessStoredProcedures" Template="Internal\ReadOnlyChild.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="ReadOnlyChildGenerated" Template="Internal\ReadOnlyChild.Generated.cst" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

Public Overloads Overrides Sub Render(writer As System.IO.TextWriter)

    RegisterReferences()

    'ReadOnlyChild
    Dim readOnlyChild As ReadOnlyChild = Me.Create(Of ReadOnlyChild)()
    Me.CopyPropertiesTo(readOnlyChild)

    Dim parentFileName As String = System.IO.Path.Combine(Me.Location, String.Format("Entities\{0}.vb", readOnlyChild.BusinessClassName))
    If Not System.IO.File.Exists(parentFileName) Then
        readOnlyChild.RenderToFile(parentFileName, False)
    End If

    'ReadOnlyChild.Generated
    Dim fileName As String = System.IO.Path.Combine(Location, String.Format("Entities\{0}.Generated.vb", readOnlyChild.BusinessClassName))

    Dim readOnlyChildGenerated As ReadOnlyChildGenerated = Me.Create(Of ReadOnlyChildGenerated)()
    Me.CopyPropertiesTo(readOnlyChildGenerated)

    readOnlyChildGenerated.RenderToFile(fileName, parentFileName, True)

    'ReadOnlyChild.DataAccess
    fileName = System.IO.Path.Combine(Location, String.Format("Entities\{0}.DataAccess.vb", readOnlyChild.BusinessClassName))
    If DataAccessImplementation = DataAccessMethod.None Then
        Dim readOnlyChildDataAccess As ReadOnlyChildDataAccess = Me.Create(Of ReadOnlyChildDataAccess)()
        Me.CopyPropertiesTo(readOnlyChildDataAccess)

        readOnlyChildDataAccess.RenderToFile(fileName, parentFileName, True)
    ElseIf DataAccessImplementation = DataAccessMethod.ParameterizedSQL Then
        Dim readOnlyChildDataAccessParameterized As ReadOnlyChildDataAccessParameterized = Me.Create(Of ReadOnlyChildDataAccessParameterized)()
        Me.CopyPropertiesTo(readOnlyChildDataAccessParameterized)

        readOnlyChildDataAccessParameterized.RenderToFile(fileName, parentFileName, True)
    ElseIf DataAccessImplementation = DataAccessMethod.StoredProcedures Then
        Dim readOnlyChildDataAccessStoredProcedures As ReadOnlyChildDataAccessStoredProcedures = Me.Create(Of ReadOnlyChildDataAccessStoredProcedures)()
        Me.CopyPropertiesTo(readOnlyChildDataAccessStoredProcedures)
        
        readOnlyChildDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, True)
        
        'StoredProcedures
        fileName = System.IO.Path.Combine(Location, String.Format("Entities\{0}.StoredProcedures.sql", readOnlyChild.BusinessClassName))
        Dim sqlStoredProcedures As SqlStoredProcedures = Me.Create(Of SqlStoredProcedures)()
        Me.CopyPropertiesTo(sqlStoredProcedures)
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures."
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, True)
    End If
End Sub

Public Overrides Function OnTableChanging() As Boolean
	If String.IsNullOrEmpty(BusinessClassName) Then
		BusinessClassName = String.Concat(Entity.ClassName, "Info")
	End If

	If String.IsNullOrEmpty(CriteriaClassName) OrElse CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase) Then
		CriteriaClassName = [String].Concat(Entity.ClassName, "Criteria")
	End If

	Return False
End Function

</script>