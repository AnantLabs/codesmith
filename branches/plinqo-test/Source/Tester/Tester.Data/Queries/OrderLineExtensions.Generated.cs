//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Linq;

namespace Tester.Data
{
    /// <summary>
    /// The query extension class for OrderLine.
    /// </summary>
    public static partial class OrderLineExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static Tester.Data.OrderLine GetByKey(this IQueryable<Tester.Data.OrderLine> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<Tester.Data.OrderLine>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((Tester.Data.TesterDataContext)entity.Context, id);
            
            return queryable.FirstOrDefault(o => o.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<Tester.Data.OrderLine> table, int id)
        {
            return table.Delete(o => o.Id == id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="OrderLine.OrderId"/>.
        /// </summary>
        public static IQueryable<Tester.Data.OrderLine> GetByOrderId(this IQueryable<Tester.Data.OrderLine> queryable, int orderId)
        {
            return queryable.Where(o => o.OrderId == orderId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="OrderLine.ItemId"/>.
        /// </summary>
        public static IQueryable<Tester.Data.OrderLine> GetByItemId(this IQueryable<Tester.Data.OrderLine> queryable, int itemId)
        {
            return queryable.Where(o => o.ItemId == itemId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="OrderLine.Quantity"/>.
        /// </summary>
        public static IQueryable<Tester.Data.OrderLine> GetByQuantity(this IQueryable<Tester.Data.OrderLine> queryable, int quantity)
        {
            return queryable.Where(o => o.Quantity == quantity);
        }
        
        /// <summary>
        /// Gets a query for <see cref="OrderLine.Total"/>.
        /// </summary>
        public static IQueryable<Tester.Data.OrderLine> GetByTotal(this IQueryable<Tester.Data.OrderLine> queryable, decimal total)
        {
            return queryable.Where(o => o.Total == total);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<Tester.Data.TesterDataContext, int, Tester.Data.OrderLine> GetByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Tester.Data.TesterDataContext db, int id) => 
                        db.OrderLine.FirstOrDefault(o => o.Id == id));

        }
        #endregion
    }
}

