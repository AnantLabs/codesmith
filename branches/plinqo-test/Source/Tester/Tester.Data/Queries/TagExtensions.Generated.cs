//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Linq;

namespace Tester.Data
{
    /// <summary>
    /// The query extension class for Tag.
    /// </summary>
    public static partial class TagExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static Tester.Data.Tag GetByKey(this IQueryable<Tester.Data.Tag> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<Tester.Data.Tag>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((Tester.Data.TesterDataContext)entity.Context, id);
            
            return queryable.FirstOrDefault(t => t.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<Tester.Data.Tag> table, int id)
        {
            return table.Delete(t => t.Id == id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tag.Name"/>.
        /// </summary>
        public static IQueryable<Tester.Data.Tag> GetByName(this IQueryable<Tester.Data.Tag> queryable, string name)
        {
            return queryable.Where(t => t.Name == name);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tag.CreatedBy"/>.
        /// </summary>
        public static IQueryable<Tester.Data.Tag> GetByCreatedBy(this IQueryable<Tester.Data.Tag> queryable, string createdBy)
        {
            return queryable.Where(t => t.CreatedBy == createdBy);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tag.CreatedDate"/>.
        /// </summary>
        public static IQueryable<Tester.Data.Tag> GetByCreatedDate(this IQueryable<Tester.Data.Tag> queryable, System.DateTime createdDate)
        {
            return queryable.Where(t => t.CreatedDate == createdDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tag.ModifiedBy"/>.
        /// </summary>
        public static IQueryable<Tester.Data.Tag> GetByModifiedBy(this IQueryable<Tester.Data.Tag> queryable, string modifiedBy)
        {
            return queryable.Where(t => t.ModifiedBy == modifiedBy);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tag.ModifiedDate"/>.
        /// </summary>
        public static IQueryable<Tester.Data.Tag> GetByModifiedDate(this IQueryable<Tester.Data.Tag> queryable, System.DateTime modifiedDate)
        {
            return queryable.Where(t => t.ModifiedDate == modifiedDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tag.Type"/>.
        /// </summary>
        public static IQueryable<Tester.Data.Tag> GetByType(this IQueryable<Tester.Data.Tag> queryable, TagEnum type)
        {
            return queryable.Where(t => t.Type == type);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tag.IsBlah"/>.
        /// </summary>
        public static IQueryable<Tester.Data.Tag> GetByIsBlah(this IQueryable<Tester.Data.Tag> queryable, Nullable<int> isBlah)
        {
            return queryable.Where(t => t.IsBlah == isBlah);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tag.T"/>.
        /// </summary>
        public static IQueryable<Tester.Data.Tag> GetByT(this IQueryable<Tester.Data.Tag> queryable, string myT)
        {
            return queryable.Where(t => t.T == myT);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<Tester.Data.TesterDataContext, int, Tester.Data.Tag> GetByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Tester.Data.TesterDataContext db, int id) => 
                        db.Tag.FirstOrDefault(t => t.Id == id));

        }
        #endregion
    }
}

