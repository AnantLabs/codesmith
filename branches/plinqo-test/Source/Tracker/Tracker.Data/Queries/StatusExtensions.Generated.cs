//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using System.Linq.Dynamic;

namespace Tracker.Data
{
    /// <summary>
    /// The query extension class for Status.
    /// </summary>
    public static partial class StatusExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static Tracker.Data.Status GetByKey(this IQueryable<Tracker.Data.Status> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<Tracker.Data.Status>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((Tracker.Data.TrackerDataContext)entity.Context, id);
            
            return queryable.FirstOrDefault(s => s.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<Tracker.Data.Status> table, int id)
        {
            return table.Delete(s => s.Id == id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ById(this IQueryable<Tracker.Data.Status> queryable, int id)
        {
            return queryable.Where(s => s.Id == id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ById(this IQueryable<Tracker.Data.Status> queryable, int id, params int[] additionalValues)
        {
            var idList = new List<int> {id};

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Status, bool>("Id", idList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByName(this IQueryable<Tracker.Data.Status> queryable, string name)
        {
            return queryable.Where(s => s.Name == name);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByName(this IQueryable<Tracker.Data.Status> queryable, string name, params string[] additionalValues)
        {
            var nameList = new List<string> {name};

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Status, bool>("Name", nameList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByDescription(this IQueryable<Tracker.Data.Status> queryable, string description)
        {
            return queryable.Where(s => object.Equals(s.Description, description));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByDescription(this IQueryable<Tracker.Data.Status> queryable, string description, params string[] additionalValues)
        {
            var descriptionList = new List<string> {description};

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);
            else
                descriptionList.Add(null);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Status, bool>("Description", descriptionList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.Order"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="order">Order to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByOrder(this IQueryable<Tracker.Data.Status> queryable, int order)
        {
            return queryable.Where(s => s.Order == order);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.Order"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="order">Order to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByOrder(this IQueryable<Tracker.Data.Status> queryable, int order, params int[] additionalValues)
        {
            var orderList = new List<int> {order};

            if (additionalValues != null)
                orderList.AddRange(additionalValues);

            if (orderList.Count == 1)
                return queryable.ByOrder(orderList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Status, bool>("Order", orderList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByCreatedDate(this IQueryable<Tracker.Data.Status> queryable, System.DateTime createdDate)
        {
            return queryable.Where(s => s.CreatedDate == createdDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByCreatedDate(this IQueryable<Tracker.Data.Status> queryable, System.DateTime createdDate, params System.DateTime[] additionalValues)
        {
            var createdDateList = new List<System.DateTime> {createdDate};

            if (additionalValues != null)
                createdDateList.AddRange(additionalValues);

            if (createdDateList.Count == 1)
                return queryable.ByCreatedDate(createdDateList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Status, bool>("CreatedDate", createdDateList);
            return queryable.Where(expression);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByModifiedDate(this IQueryable<Tracker.Data.Status> queryable, System.DateTime modifiedDate)
        {
            return queryable.Where(s => s.ModifiedDate == modifiedDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Status.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns>IQueryable with additional where clause.</returns>
        public static IQueryable<Tracker.Data.Status> ByModifiedDate(this IQueryable<Tracker.Data.Status> queryable, System.DateTime modifiedDate, params System.DateTime[] additionalValues)
        {
            var modifiedDateList = new List<System.DateTime> {modifiedDate};

            if (additionalValues != null)
                modifiedDateList.AddRange(additionalValues);

            if (modifiedDateList.Count == 1)
                return queryable.ByModifiedDate(modifiedDateList[0]);

            var expression = DynamicExpression.BuildExpression<Tracker.Data.Status, bool>("ModifiedDate", modifiedDateList);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<Tracker.Data.TrackerDataContext, int, Tracker.Data.Status> GetByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Tracker.Data.TrackerDataContext db, int id) => 
                        db.Status.FirstOrDefault(s => s.Id == id));

        }
        #endregion
    }
}

