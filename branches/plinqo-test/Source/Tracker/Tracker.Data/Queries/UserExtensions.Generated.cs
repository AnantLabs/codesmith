//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Linq;

namespace Tracker.Data
{
    /// <summary>
    /// The query extension class for User.
    /// </summary>
    public static partial class UserExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static Tracker.Data.User ByKey(this IQueryable<Tracker.Data.User> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<Tracker.Data.User>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.ByKey.Invoke((Tracker.Data.TrackerDataContext)entity.Context, id);
            
            return queryable.FirstOrDefault(u => u.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<Tracker.Data.User> table, int id)
        {
            return table.Delete(u => u.Id == id);
        }
        
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public static Tracker.Data.User ByEmailAddress(this IQueryable<Tracker.Data.User> queryable, string emailAddress)
        {
            var entity = queryable as System.Data.Linq.Table<Tracker.Data.User>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.ByEmailAddress.Invoke((Tracker.Data.TrackerDataContext)entity.Context, emailAddress);

            return queryable.FirstOrDefault(u => u.EmailAddress == emailAddress);
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.FirstName"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByFirstName(this IQueryable<Tracker.Data.User> queryable, string firstName)
        {
            return queryable.Where(u => object.Equals(u.FirstName, firstName));
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.LastName"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByLastName(this IQueryable<Tracker.Data.User> queryable, string lastName)
        {
            return queryable.Where(u => object.Equals(u.LastName, lastName));
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.CreatedDate"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByCreatedDate(this IQueryable<Tracker.Data.User> queryable, System.DateTime createdDate)
        {
            return queryable.Where(u => u.CreatedDate == createdDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.ModifiedDate"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByModifiedDate(this IQueryable<Tracker.Data.User> queryable, System.DateTime modifiedDate)
        {
            return queryable.Where(u => u.ModifiedDate == modifiedDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.PasswordHash"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByPasswordHash(this IQueryable<Tracker.Data.User> queryable, string passwordHash)
        {
            return queryable.Where(u => u.PasswordHash == passwordHash);
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.PasswordSalt"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByPasswordSalt(this IQueryable<Tracker.Data.User> queryable, string passwordSalt)
        {
            return queryable.Where(u => u.PasswordSalt == passwordSalt);
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.Comment"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByComment(this IQueryable<Tracker.Data.User> queryable, string comment)
        {
            return queryable.Where(u => object.Equals(u.Comment, comment));
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.IsApproved"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByIsApproved(this IQueryable<Tracker.Data.User> queryable, bool isApproved)
        {
            return queryable.Where(u => u.IsApproved == isApproved);
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.LastLoginDate"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByLastLoginDate(this IQueryable<Tracker.Data.User> queryable, System.DateTime? lastLoginDate)
        {
            return queryable.Where(u => object.Equals(u.LastLoginDate, lastLoginDate));
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.LastActivityDate"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByLastActivityDate(this IQueryable<Tracker.Data.User> queryable, System.DateTime lastActivityDate)
        {
            return queryable.Where(u => u.LastActivityDate == lastActivityDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.LastPasswordChangeDate"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByLastPasswordChangeDate(this IQueryable<Tracker.Data.User> queryable, System.DateTime? lastPasswordChangeDate)
        {
            return queryable.Where(u => object.Equals(u.LastPasswordChangeDate, lastPasswordChangeDate));
        }
        
        /// <summary>
        /// Gets a query for <see cref="User.AvatarType"/>.
        /// </summary>
        public static IQueryable<Tracker.Data.User> ByAvatarType(this IQueryable<Tracker.Data.User> queryable, string avatarType)
        {
            return queryable.Where(u => object.Equals(u.AvatarType, avatarType));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<Tracker.Data.TrackerDataContext, int, Tracker.Data.User> ByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Tracker.Data.TrackerDataContext db, int id) => 
                        db.User.FirstOrDefault(u => u.Id == id));

            internal static readonly Func<Tracker.Data.TrackerDataContext, string, Tracker.Data.User> ByEmailAddress = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Tracker.Data.TrackerDataContext db, string emailAddress) => 
                        db.User.FirstOrDefault(u => u.EmailAddress == emailAddress));

        }
        #endregion
    }
}

