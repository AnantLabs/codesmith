
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using CodeSmith.Data;
using CodeSmith.Data.Rules;
using CodeSmith.Data.Rules.Assign;
using CodeSmith.Data.Rules.Validation;

namespace Sample.Data
{
    /// <summary>
    /// The manager class for ActiveUser.
    /// </summary>
    public partial class ActiveUserManager : EntityManagerBase<SampleDataManager, ActiveUser>
    {
        /// <summary>
        /// Initializes the <see cref="ActiveUserManager"/> class.
        /// </summary>
        static ActiveUserManager()
        {
            RuleManager.AddShared<ActiveUser>(new RequiredRule("UserName"));
            RuleManager.AddShared<ActiveUser>(new LengthRule("UserName", 20));
            RuleManager.AddShared<ActiveUser>(new RequiredRule("Password"));
            RuleManager.AddShared<ActiveUser>(new LengthRule("Password", 20));
            RuleManager.AddShared<ActiveUser>(new LengthRule("Email", 150));
            RuleManager.AddShared<ActiveUser>(new LengthRule("FirstName", 100));
            RuleManager.AddShared<ActiveUser>(new LengthRule("LastName", 100));
            AddRules();
        }

        /// <summary>
        /// Initializes the <see cref="ActiveUserManager"/> class.
        /// </summary>
        /// <param name="manager">The current manager.</param>
        public ActiveUserManager(SampleDataManager manager) : base(manager)
        {
            OnCreated();
        }

        /// <summary>
        /// Gets the current context.
        /// </summary>
        protected SampleDataContext Context
        {
            get { return Manager.Context; }
        }
        
        /// <summary>
        /// Gets the entity for this manager.
        /// </summary>
        protected Table<ActiveUser> Entity
        {
            get { return Manager.Context.ActiveUser; }
        }
        

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddRules();
        /// <summary>Called when the class is created.</summary>
        partial void OnCreated();
        #endregion
        
        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

        }
        #endregion
    }
}

