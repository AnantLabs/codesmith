'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v2.0.0.1440, CSLA Framework: v3.8.2.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Item.vb.
'
'     Template: SwitchableObject.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Validation

<Serializable()> _
Public Partial Class Item 
    Inherits BusinessBase(Of Item)

    #Region "Contructor(s)"

    Private Sub New()
        ' require use of factory method 
    End Sub

    Private Sub New(ByVal itemId As System.String)
        Using(BypassPropertyChecks)
            _itemId = itemId
        End Using
    End Sub

    Friend Sub New(Byval reader As SafeDataReader)
        Map(reader)
    End Sub

    #End Region
    #Region "Validation Rules"

    Protected Overrides Sub AddBusinessRules()

        If AddBusinessValidationRules() Then Exit Sub

        ValidationRules.AddRule(AddressOf CommonRules.StringRequired, _itemIdProperty)
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_itemIdProperty, 10))
        ValidationRules.AddRule(AddressOf CommonRules.StringRequired, _productIdProperty)
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_productIdProperty, 10))
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_statusProperty, 2))
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_nameProperty, 80))
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_imageProperty, 80))
    End Sub

    #End Region

    #Region "Properties"


    Private Shared ReadOnly _itemIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.ItemId)
    Private _itemId As System.String = _itemIdProperty.DefaultValue
    
		<System.ComponentModel.DataObjectField(true, false)> _
    Public Property ItemId() As System.String
        Get 
            Return GetProperty(_itemIdProperty, _itemId) 
        End Get
        Set (value As System.String)
            SetProperty(_itemIdProperty, _itemId, value)
        End Set
    End Property

    Private Shared ReadOnly _originalItemIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.OriginalItemId)
    Private _originalItemId As System.String = _originalItemIdProperty.DefaultValue
    ''' <summary>
    ''' Holds the original value for ItemId. This is used for non identity primary keys.
    ''' </summary>
    Friend Property OriginalItemId() As System.String
        Get 
            Return GetProperty(_originalItemIdProperty, _originalItemId) 
        End Get
        Set (value As System.String)
            SetProperty(_originalItemIdProperty, _originalItemId, value)
        End Set
    End Property
    

    Private Shared ReadOnly _productIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.ProductId)
    Private _productId As System.String = _productIdProperty.DefaultValue
    
    Public Property ProductId() As System.String
        Get 
            Return GetProperty(_productIdProperty, _productId) 
        End Get
        Set (value As System.String)
            SetProperty(_productIdProperty, _productId, value)
        End Set
    End Property
    

    Private Shared ReadOnly _listPriceProperty As PropertyInfo(Of System.Nullable(Of System.Decimal)) = RegisterProperty(Of System.Nullable(Of System.Decimal))(Function(p As Item) p.ListPrice)
    Private _listPrice As System.Nullable(Of System.Decimal) = _listPriceProperty.DefaultValue
    
    Public Property ListPrice() As System.Nullable(Of System.Decimal)
        Get 
            Return GetProperty(_listPriceProperty, _listPrice) 
        End Get
        Set (value As System.Nullable(Of System.Decimal))
            SetProperty(_listPriceProperty, _listPrice, value)
        End Set
    End Property
    

    Private Shared ReadOnly _unitCostProperty As PropertyInfo(Of System.Nullable(Of System.Decimal)) = RegisterProperty(Of System.Nullable(Of System.Decimal))(Function(p As Item) p.UnitCost)
    Private _unitCost As System.Nullable(Of System.Decimal) = _unitCostProperty.DefaultValue
    
    Public Property UnitCost() As System.Nullable(Of System.Decimal)
        Get 
            Return GetProperty(_unitCostProperty, _unitCost) 
        End Get
        Set (value As System.Nullable(Of System.Decimal))
            SetProperty(_unitCostProperty, _unitCost, value)
        End Set
    End Property
    

    Private Shared ReadOnly _supplierProperty As PropertyInfo(Of System.Nullable(Of System.Int32)) = RegisterProperty(Of System.Nullable(Of System.Int32))(Function(p As Item) p.Supplier)
    Private _supplier As System.Nullable(Of System.Int32) = _supplierProperty.DefaultValue
    
    Public Property Supplier() As System.Nullable(Of System.Int32)
        Get 
            Return GetProperty(_supplierProperty, _supplier) 
        End Get
        Set (value As System.Nullable(Of System.Int32))
            SetProperty(_supplierProperty, _supplier, value)
        End Set
    End Property
    

    Private Shared ReadOnly _statusProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Status)
    Private _status As System.String = _statusProperty.DefaultValue
    
    Public Property Status() As System.String
        Get 
            Return GetProperty(_statusProperty, _status) 
        End Get
        Set (value As System.String)
            SetProperty(_statusProperty, _status, value)
        End Set
    End Property
    

    Private Shared ReadOnly _nameProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Name)
    Private _name As System.String = _nameProperty.DefaultValue
    
    Public Property Name() As System.String
        Get 
            Return GetProperty(_nameProperty, _name) 
        End Get
        Set (value As System.String)
            SetProperty(_nameProperty, _name, value)
        End Set
    End Property
    

    Private Shared ReadOnly _imageProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Image)
    Private _image As System.String = _imageProperty.DefaultValue
    
    Public Property Image() As System.String
        Get 
            Return GetProperty(_imageProperty, _image) 
        End Get
        Set (value As System.String)
            SetProperty(_imageProperty, _image, value)
        End Set
    End Property
    
    'ManyToOne
    Private Shared ReadOnly _productMemberProperty As PropertyInfo(Of Product) = RegisterProperty(Of Product)(Function(p As Item) p.ProductMember, Csla.RelationshipTypes.Child)
    Private _productMember As Product = _productMemberProperty.DefaultValue
    Public ReadOnly Property ProductMember() As Product
        Get
            If Not(FieldManager.FieldExists(_productMemberProperty))
                Dim criteria As New PetShop.Tests.ParameterizedSQL.ProductCriteria()
                criteria.ProductId = ProductId

                If (Me.IsNew Or Not PetShop.Tests.ParameterizedSQL.Product.Exists(criteria)) Then
                    LoadProperty(_productMemberProperty, PetShop.Tests.ParameterizedSQL.Product.NewProduct())
                Else
                    LoadProperty(_productMemberProperty, PetShop.Tests.ParameterizedSQL.Product.GetByProductId(ProductId))
                End If
            End If
            
            Return GetProperty(_productMemberProperty, _productMember) 
        End Get
    End Property
    
    'ManyToOne
    Private Shared ReadOnly _supplierMemberProperty As PropertyInfo(Of Supplier) = RegisterProperty(Of Supplier)(Function(p As Item) p.SupplierMember, Csla.RelationshipTypes.Child)
    Private _supplierMember As Supplier = _supplierMemberProperty.DefaultValue
    Public ReadOnly Property SupplierMember() As Supplier
        Get
            If Not(FieldManager.FieldExists(_supplierMemberProperty))
                Dim criteria As New PetShop.Tests.ParameterizedSQL.SupplierCriteria()
                criteria.SuppId = Supplier.Value

                If (Me.IsNew Or Not PetShop.Tests.ParameterizedSQL.Supplier.Exists(criteria)) Then
                    LoadProperty(_supplierMemberProperty, PetShop.Tests.ParameterizedSQL.Supplier.NewSupplier())
                Else
                    LoadProperty(_supplierMemberProperty, PetShop.Tests.ParameterizedSQL.Supplier.GetBySuppId(Supplier.Value))
                End If
            End If
            
            Return GetProperty(_supplierMemberProperty, _supplierMember) 
        End Get
    End Property
    
    #End Region

    #Region "Root Factory Methods"

    Public Shared Function NewItem() As Item 
        Return DataPortal.Create(Of Item)()
    End Function

    Public Shared Function GetByItemId(ByVal itemId As System.String) As Item 
        Dim criteria As New ItemCriteria ()
        criteria.ItemId = itemId

        Return DataPortal.Fetch(Of Item)(criteria)
    End Function

    Public Shared Function GetByProductIdItemIdListPriceName(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Nullable(Of System.Decimal), ByVal name As System.String) As Item 
        Dim criteria As New ItemCriteria ()
        criteria.ProductId = productId
			criteria.ItemId = itemId
			criteria.ListPrice = listPrice.Value
			criteria.Name = name

        Return DataPortal.Fetch(Of Item)(criteria)
    End Function

    Public Shared Function GetByProductId(ByVal productId As System.String) As Item 
        Dim criteria As New ItemCriteria ()
        criteria.ProductId = productId

        Return DataPortal.Fetch(Of Item)(criteria)
    End Function

    Public Shared Function GetBySupplier(ByVal supplier As System.Nullable(Of System.Int32)) As Item 
        Dim criteria As New ItemCriteria ()
        criteria.Supplier = supplier.Value

        Return DataPortal.Fetch(Of Item)(criteria)
    End Function

    Public Shared Sub DeleteItem(ByVal itemId As System.String)
        DataPortal.Delete(New ItemCriteria (itemId))
    End Sub

    #End Region

    #Region "Child Factory Methods"

    Friend Shared Function NewItemChild() As Item
        Return DataPortal.CreateChild(Of Item)()
    End Function

    Friend Shared Function GetByItemIdChild(ByVal itemId As System.String) As Item 
        Dim criteria As New ItemCriteria ()
        criteria.ItemId = itemId

        Return DataPortal.FetchChild(Of Item)(criteria)
    End Function

    Friend Shared Function GetByProductIdItemIdListPriceNameChild(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Nullable(Of System.Decimal), ByVal name As System.String) As Item 
        Dim criteria As New ItemCriteria ()
        criteria.ProductId = productId
        criteria.ItemId = itemId
        criteria.ListPrice = listPrice
        criteria.Name = name

        Return DataPortal.FetchChild(Of Item)(criteria)
    End Function

    Friend Shared Function GetByProductIdChild(ByVal productId As System.String) As Item 
        Dim criteria As New ItemCriteria ()
        criteria.ProductId = productId

        Return DataPortal.FetchChild(Of Item)(criteria)
    End Function

    Friend Shared Function GetBySupplierChild(ByVal supplier As System.Nullable(Of System.Int32)) As Item 
        Dim criteria As New ItemCriteria ()
        criteria.Supplier = supplier

        Return DataPortal.FetchChild(Of Item)(criteria)
    End Function

    #End Region

    #Region "Exists Command"

    Public Shared Function Exists(ByVal criteria As ItemCriteria ) As Boolean
        Return ExistsCommand.Execute(criteria)
    End Function

    #End Region


End Class