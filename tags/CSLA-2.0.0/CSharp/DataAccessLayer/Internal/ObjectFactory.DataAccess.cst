<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA 3.8.X DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Server;
using Csla.Data;

using <%= BusinessProjectName %>;

#endregion

namespace <%= DataProjectName %>
{
    public partial class <%= Entity.ClassName %>Factory : ObjectFactory
    {
<% if(!IsReadOnlyBusinessObject) { %>
        #region Create

        /// <summary>
        /// Creates new <%= Entity.ClassName %> with default values.
        /// </summary>
        /// <returns>new <%= Entity.ClassName %>.</returns>
        [RunLocal]
        public <%= Entity.ClassName %> Create()
        {
            var item = (<%= Entity.ClassName %>)Activator.CreateInstance(typeof(<%= Entity.ClassName %>), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            using (BypassPropertyChecks(item))
            {
                // Default values.

                CheckRules(item);
                MarkNew(item);
<% if(IsChildBusinessObject) { %>
                MarkAsChild(item);
<%}%>
            }

            OnCreated();

            return item;
        }

        /// <summary>
        /// Creates new <%= Entity.ClassName %> with default values.
        /// </summary>
        /// <returns>new <%= Entity.ClassName %>.</returns>
        [RunLocal]
        private <%= Entity.ClassName %> Create(<%= Entity.ClassName %>Criteria criteria)
        {
            var item = (<%= Entity.ClassName %>)Activator.CreateInstance(typeof(<%= Entity.ClassName %>), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            //var resource = Fetch(criteria);
            using (BypassPropertyChecks(item))
            {
<% foreach(Member member in Entity.MembersNoRowVersion){ %>
                //item.<%= member.PropertyName %> = resource.<%= member.PropertyName %>;
<% } %>
            }

            CheckRules(item);
            MarkNew(resource);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>

            OnCreated();

            return item;
        }

        #endregion

<% } %>
        #region Fetch

        /// <summary>
        /// Fetch <%= Entity.ClassName %>.
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns></returns>
        public <%= Entity.ClassName %> Fetch(<%= Entity.ClassName %>Criteria criteria)
        {
            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return null;

            <%= Entity.ClassName %> item;

            // Do Fetch

            MarkOld(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            OnFetched();
            return item;
        }

        #endregion
<% if(!IsReadOnlyBusinessObject) { %>

        #region Update

        [Transactional(TransactionalTypes.TransactionScope)]
        public <%= Entity.ClassName %> Update(<%= Entity.ClassName %> item)
        {
            return Update(item, false);
        }

        public <%= Entity.ClassName %> Update(<%= Entity.ClassName %> item, bool stopProccessingChildren)
        {
            if(item.IsDeleted)
            {
                //DoDelete(item);
                MarkNew(item);
            }
            else if(item.IsNew)
            {
                //DoInsert(item, stopProccessingChildren);
            }
            else
            {
                //DoUpdate(item, stopProccessingChildren);
            }

            return item;
        }

        #endregion

        #region Delete

        [Transactional(TransactionTypes.TransactionScope)]
        public void Delete(<%= Entity.ClassName %>Criteria criteria)
        {
            // Delete data here.
        }

        #endregion
<% } %>
    }
}