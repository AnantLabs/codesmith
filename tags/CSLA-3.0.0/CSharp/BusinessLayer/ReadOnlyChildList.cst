<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA ReadOnlyChildList" %>

<%@ Register Name="ReadOnlyChildList" Template="Internal\ReadOnlyChildList.cst" %>
<%@ Register Name="ReadOnlyChildListDataAccess" Template="Internal\ReadOnlyChildList.DataAccess.cst" %>
<%@ Register Name="ReadOnlyChildListDataAccessParameterized" Template="Internal\ReadOnlyChildList.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="ReadOnlyChildListDataAccessStoredProcedures" Template="Internal\ReadOnlyChildList.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="ReadOnlyChildListGenerated" Template="Internal\ReadOnlyChildList.Generated.cst" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    #region ReadOnlyChildList
    
    ReadOnlyChildList readOnlyChildList = this.Create<ReadOnlyChildList>();
    this.CopyPropertiesTo(readOnlyChildList);
    readOnlyChildList.BusinessClassName = string.Format("{0}InfoList", readOnlyChildList.BusinessClassName);
    
    string parentFileName = System.IO.Path.Combine(this.Location, string.Format("Collections\\{0}.cs", readOnlyChildList.BusinessClassName));
    if (!System.IO.File.Exists(parentFileName))
    {
        readOnlyChildList.RenderToFile(parentFileName, false);
    }
    
    #region ReadOnlyChildList.Generated
    
    string fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.Generated.cs", readOnlyChildList.BusinessClassName));
    
    ReadOnlyChildListGenerated readOnlyChildListGenerated = this.Create<ReadOnlyChildListGenerated>();
    this.CopyPropertiesTo(readOnlyChildListGenerated);
    readOnlyChildListGenerated.BusinessClassName = string.Format("{0}InfoList", readOnlyChildListGenerated.BusinessClassName);
    
    readOnlyChildListGenerated.RenderToFile(fileName, parentFileName, true);
    
    #endregion
    
    #region ReadOnlyChildList.DataAccess
    
    fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.DataAccess.cs", readOnlyChildList.BusinessClassName));
    if(DataAccessImplementation == DataAccessMethod.None)
    {
        ReadOnlyChildListDataAccess readOnlyChildListDataAccess = this.Create<ReadOnlyChildListDataAccess>();
        this.CopyPropertiesTo(readOnlyChildListDataAccess);
        readOnlyChildListDataAccess.BusinessClassName = string.Format("{0}InfoList", readOnlyChildListDataAccess.BusinessClassName);
        
        readOnlyChildListDataAccess.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
    {
        ReadOnlyChildListDataAccessParameterized readOnlyChildListDataAccessParameterized = this.Create<ReadOnlyChildListDataAccessParameterized>();
        this.CopyPropertiesTo(readOnlyChildListDataAccessParameterized);
        readOnlyChildListDataAccessParameterized.BusinessClassName = string.Format("{0}InfoList", readOnlyChildListDataAccessParameterized.BusinessClassName);
        
        readOnlyChildListDataAccessParameterized.RenderToFile(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        ReadOnlyChildListDataAccessStoredProcedures readOnlyChildListDataAccessStoredProcedures = this.Create<ReadOnlyChildListDataAccessStoredProcedures>();
        this.CopyPropertiesTo(readOnlyChildListDataAccessStoredProcedures);
        readOnlyChildListDataAccessStoredProcedures.BusinessClassName = string.Format("{0}InfoList", readOnlyChildListDataAccessStoredProcedures.BusinessClassName);

        readOnlyChildListDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, true);

        //StoredProcedures
        fileName = System.IO.Path.Combine(Location, string.Format("Collections\\{0}.StoredProcedures.sql", readOnlyChildList.BusinessClassName));
        SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
        this.CopyPropertiesTo(sqlStoredProcedures);
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
    }
    
    #endregion
    
    #endregion
}

</script>