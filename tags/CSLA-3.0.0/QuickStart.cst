<%-- 
Name: Quick Start
Author: Blake Niemyjski
Description: Used to Quick Start Visual Studio Projects
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Inherits="QuickStart.QuickStartCodeTemplate" Description="QuickStart for CSLA" CompilerVersion="v3.5" Encoding="UTF-8" %>

<%@ Register Name="QuickStartSolution" Template="Common\QuickStartSolution.cst" %>
<%@ Register Name="Entities" Template="CSharp\BusinessLayer\Entities.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataAccess" Template="CSharp\DataAccessLayer\DataAccessLayer.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Web" Template="CSharp\WebLayer\Default.aspx.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="NUnitTests" Template="CSharp\NUnitTests\NUnitTests.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="Common" %>
<%@ Assembly Name="QuickStart" Path="Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>

<%@ Property Name="IncludeInterfaceProject" Type="System.Boolean" Default="True" Category="5. Interface Project" Description="If true, the Interface Project will be included in the generated solution." %>
<%@ Property Name="IncludeTestProject" Type="System.Boolean" Default="False" Category="6. Test Project" Description="If true, the Test Project will be included in the generated solution." %>

<% Generate(); %>

The <%= SolutionName %> Solution has been created at <%= Location %>.

<script runat="template">

public override void Generate()
{
    // Make sure Location is FullPath
    Location = Path.GetFullPath(Location);

	// Check For Existing Project
	if(DirectoriesAlreadyExists)
		throw new System.ApplicationException(AlreadyExistsMessage);

    // Prep Directories
    if (!Directory.Exists(Location))
        Directory.CreateDirectory(Location);

    #region Render CSP's
    
    Entities entityCSP = this.Create<Entities>();
    this.CopyPropertiesTo(entityCSP);
    entityCSP.Location = Path.Combine(this.Location, this.BusinessProjectName);
    entityCSP.SavePropertiesToXmlFile(Path.Combine(CodeTemplateInfo.DirectoryName, "Common\\Entities.csp"));
    
    if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures)
    {
        DataAccess dataAccess = this.Create<DataAccess>();
        this.CopyPropertiesTo(dataAccess);
        dataAccess.Location = Path.Combine(this.Location, this.DataProjectName);
        dataAccess.SavePropertiesToXmlFile(Path.Combine(CodeTemplateInfo.DirectoryName, "Common\\DataAccess.csp"));
    }
    
    if(IncludeInterfaceProject)
    {
        Web web = this.Create<Web>();
        this.CopyPropertiesTo(web);
        web.Location = Path.Combine(this.Location, this.InterfaceProjectName);
        web.SavePropertiesToXmlFile(Path.Combine(CodeTemplateInfo.DirectoryName, "Common\\Web.csp"));
    }
    
    if(IncludeTestProject)
    {
        NUnitTests nUnitTests = this.Create<NUnitTests>();
        this.CopyPropertiesTo(nUnitTests);
        nUnitTests.Location = Path.Combine(this.Location, this.TestProjectName);
        nUnitTests.SavePropertiesToXmlFile(Path.Combine(CodeTemplateInfo.DirectoryName, "Common\\NUnitTests.csp"));
    }

    #endregion

    List<SolutionItem> solutionItems = new List<SolutionItem>();
    ProjectBuilderSettings pbs = CreateProjectBuilderSettings();

    // Create Business Project
    DataProjectCreator businessProjectCreator = new DataProjectCreator(pbs);
    businessProjectCreator.CspFileName = "Entities.csp";
    businessProjectCreator.CreateProject(this.BusinessProjectName);
    solutionItems.Add(businessProjectCreator.SolutionItem);

    DataProjectCreator dataProjectCreator = null;
    // Only create the data project if object factory is used.
    if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures)
    {
        // Create Data Project
        dataProjectCreator = new DataProjectCreator(pbs);
        dataProjectCreator.CspFileName = "DataAccess.csp";
        dataProjectCreator.CreateProject(this.DataProjectName, businessProjectCreator.SolutionItem);
        solutionItems.Add(dataProjectCreator.SolutionItem);
    }
        
    // Create UI Project
    if(IncludeInterfaceProject)
    {
        List<SolutionItem> projectReferences = new List<SolutionItem>();
        
        WebApplicationCreator webAppCreator = new WebApplicationCreator(pbs);
        webAppCreator.CspFileName = "Web.csp";
        projectReferences.Add(businessProjectCreator.SolutionItem);
        
        if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL)
        {
            projectReferences.Add(dataProjectCreator.SolutionItem);
        }
        
        webAppCreator.CreateProject(this.InterfaceProjectName, projectReferences.ToArray());
        solutionItems.Add(webAppCreator.SolutionItem);
    }

    //Create UnitTests Project
    if(IncludeTestProject)
    {
        TestProjectCreator testProjectCreator = new TestProjectCreator(pbs);
        testProjectCreator.CspFileName = "NUnitTests.csp";
        testProjectCreator.CreateProject(this.TestProjectName, businessProjectCreator.SolutionItem);
        solutionItems.Add(testProjectCreator.SolutionItem);
    }

    // Create Solution
    string solutionPath = CreateSolution(solutionItems);

    // Launch Visual Studio
    if (LaunchVisualStudio)
        LaunchVisualStudioWithSolution(solutionPath);
}

private string CreateSolution(List<SolutionItem> solutionItems)
{
    QuickStartSolution quickStartSolution = this.Create<QuickStartSolution>();
    quickStartSolution.IsCSLA40 = this.FrameworkVersion == FrameworkVersion.v40;
    quickStartSolution.SolutionItems = solutionItems;

    string filePathAboslute = Path.Combine(this.Location, String.Concat(SolutionName, ".sln"));
    quickStartSolution.RenderToFile(filePathAboslute, true);

    return filePathAboslute;
}

[Browsable(false)]
public bool DirectoriesAlreadyExists
{
    get
    {
        return (File.Exists(Path.Combine(this.Location, String.Concat(SolutionName, ".sln"))));
    }
}

private string AlreadyExistsMessage
{
	get
	{
		System.Text.StringBuilder sb = new System.Text.StringBuilder();
		sb.AppendLine("It seems that a quick start already exists in specified directory:");
		sb.AppendLine(Location);
		sb.AppendLine("Please delete existing data or selected a different directory.");
		return sb.ToString();
	}
}

 public ProjectBuilderSettings CreateProjectBuilderSettings()
{
    return new ProjectBuilderSettings()
    {
			SourceDatabase = this.SourceDatabase,
			Location = this.Location,
			SolutionName = this.SolutionName,
			Language = this.Language,
            FrameworkVersion = this.FrameworkVersion,
			DataProjectName = this.DataProjectName,
			BusinessProjectName = this.BusinessProjectName,
			InterfaceProjectName = this.InterfaceProjectName,
			TestProjectName = this.TestProjectName,
			IncludeDataProject = !(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures),
			IncludeTestProject = this.IncludeTestProject,
			WorkingDirectory = this.CodeTemplateInfo.DirectoryName
    };
}

</script>