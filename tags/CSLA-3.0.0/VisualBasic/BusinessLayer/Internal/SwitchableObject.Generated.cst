<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA SwitchableObject" %>
<%@ Register Name="CompositeKeyMethods" Template="..\..\Common\CompositeKeyMethods.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Constructor" Template="..\..\Common\Constructor.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Exists" Template="..\..\Common\Exists.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirty.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="Properties" Template="..\..\Common\Properties.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ValidationRules" Template="..\..\Common\ValidationRules.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\DataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
<% If(IsCSLA40) Then %>
Imports Csla.Rules
<% Else %>
Imports Csla.Validation
<% End If %>
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
Imports Csla.Serialization
#Else
Imports Csla.Data
Imports System.Data.SqlClient
#End If
<% Else %>
Imports Csla.Data
Imports System.Data.SqlClient
<% End If %>

Namespace <%= BusinessProjectName %>
    <Serializable()> _
    <% If(DataAccessImplementation = DataAccessMethod.ObjectFactoryNone Or DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL Or DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures) %>
    <Csla.Server.ObjectFactory(FactoryNames.<%= Entity.ClassName %>FactoryName)> _
    <% End If %>
    Public Partial Class <%= BusinessClassName %><%= Entity.GenericProperty %> 
        Inherits BusinessBase(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)
    
    <% RenderHelper(New Constructor(), True) %>
    
    <% RenderHelper(New ValidationRules()) %>
    <% RenderHelper(New Properties()) %>
    
    <% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
    <% End If %>
#Region "Synchronous Root Factory Methods"
    
        Public Shared Function New<%= BusinessClassName %><%= Entity.GenericProperty %>() As <%= BusinessClassName %> 
            Return DataPortal.Create(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
        End Function
    <% For Each sc As SearchCriteria In  Entity.SearchCriteria() %>
    
        Public Shared Function <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariables() %>) As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
            <%= sc.Members.BuildObjectInitializer() %>
    
            Return DataPortal.Fetch(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)(criteria)
        End Function
    <% Next %>
    
    <% If(UseDeferredDeletion)Then %>
        'Public Shared Sub Delete<%= BusinessClassName %><%= Entity.GenericProperty %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
        '   DataPortal.Delete<% If (IsCSLA40) Then %>(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)<% End If %>(New <%= CriteriaClassName %><%= Entity.GenericProperty %> (<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
        'End Sub
    <%Else%>
        Public Shared Sub Delete<%= BusinessClassName %><%= Entity.GenericProperty %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
            DataPortal.Delete<% If (IsCSLA40) Then %>(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)<% End If %>(New <%= CriteriaClassName %><%= Entity.GenericProperty %> (<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
        End Sub
    <%End If%>
    
#End Region
    <% If(IncludeSilverlightSupport) Then %>
#End If        
    
#Region "Asynchronous Root Factory Methods"
            
        Public Shared Sub New<%= BusinessClassName %>Async(ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    <% For Each sc As SearchCriteria In Entity.SearchCriteria() %>
    
        Public Shared Sub <%= sc.MethodName %>Async(<%= sc.Members.BuildParametersVariables() %>, ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
    <%For Each member As Member in sc.Members %>
            criteria.<%= member.PropertyName %> = <%= member.VariableName %>
    <% Next %>
    
            dp.BeginFetch(criteria)
        End Sub
    <% Next %> 
    
    <% If (UseDeferredDeletion) Then %>
        'Public Shared Sub Delete<%= BusinessClassName %>Async<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
            'Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            'AddHandler dp.DeleteCompleted, handler
            'dp.BeginDelete(New <%= CriteriaClassName %><%= Entity.GenericProperty %> (<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
        'End Sub
    <% Else %>
        Public Shared Sub Delete<%= BusinessClassName %>Async(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables()%>, ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.DeleteCompleted, handler
            dp.BeginDelete(New <%= CriteriaClassName %><%= Entity.GenericProperty %> (<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
        End Sub
    
    <% End If %>
            
#End Region
    
#If Not SILVERLIGHT Then
    <% End If %>
#Region "Synchronous Child Factory Methods"
    
        Friend Shared Function New<%= BusinessClassName %>Child() As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Return DataPortal.CreateChild(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
        End Function
    <% For Each sc As SearchCriteria In  Entity.SearchCriteria() %>
    
        Friend Shared Function <%= sc.MethodName %>Child(<%= sc.Members.BuildParametersVariables() %>) As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
    <%For Each member As Member in sc.Members %>
            criteria.<%= member.PropertyName %> = <%= member.VariableName %>
    <% Next %>
    
            Return DataPortal.FetchChild(Of <%= BusinessClassName %>)(criteria)
        End Function
    <% Next %>
    
#End Region
<% If(IncludeSilverlightSupport) Then %>
#End If        
    
#Region "Asynchronous Child Factory Methods"
    
        Friend Shared Sub New<%= BusinessClassName %>ChildAsync(ByVal handler As EventHandler(Of DataPortalResult(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    <% For Each sc As SearchCriteria In  Entity.SearchCriteria() %>

        Friend Shared Sub <%= sc.MethodName %>ChildAsync(<%= sc.Members.BuildParametersVariables() %>, ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
    <%For Each member As Member in sc.Members %>
            criteria.<%= member.PropertyName %> = <%= member.VariableName %>
    <% Next %>

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub
    <% Next %>

#End Region

    <% End If %>
    <% RenderHelper(New PartialMethods()) %>
    
#Region "ChildPortal partial methods"

<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
<% End If %>
        Partial Private Sub OnChildCreating(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildCreated()
        End Sub
        Partial Private Sub OnChildFetching(ByVal criteria As <%= CriteriaClassName %><%= Entity.GenericProperty %>, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildFetched()
        End Sub
        Partial Private Sub OnChildInserting(ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildInserted()
        End Sub
        Partial Private Sub OnChildUpdating(ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildUpdated()
        End Sub
        Partial Private Sub OnChildSelfDeleting(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildSelfDeleted()
        End Sub
<% If(IncludeSilverlightSupport) Then %>
#End If 
<% End If %>
    
#End Region
    <% RenderHelper(New Exists()) %>
    <% RenderHelper(New IsDirty()) %>
    <% RenderHelper(New CompositeKeyMethods()) %>
    End Class
End Namespace