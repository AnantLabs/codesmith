<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.CSLA" %>

<% if(!RenderOptionalContent) { %>
            <%= ChildBusinessClassName %> item = <%= BusinessProjectName %>.<%= ChildBusinessClassName %>.New<%= ChildBusinessClassName %><% if(IsSwitchableObject()){ %>Child<% }%>();

            bool cancel = false;
            OnAddNewCore(ref item, ref cancel);
            if (!cancel)
            {
                // Check to see if someone set the item to null in the OnAddNewCore.
                if(item == null)
                    item = <%= BusinessProjectName %>.<%= ChildBusinessClassName %>.New<%= ChildBusinessClassName %><% if(IsSwitchableObject()){ %>Child<% }%>();

<%  var list = new System.Collections.Generic.List<string>(); 
    bool isObjectFactory = DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures;
    foreach(IProperty property in Entity.Properties) { if(property.IsType(PropertyType.Foreign) && !property.IsType(PropertyType.Identity)) {
        string className = property.ResolveAssociationPropertyClassName();
        if(String.IsNullOrEmpty(className)) continue;

        string variableName = property.ResolveAssociationPropertyVariable();
        string variableWithChildProperty = property.ResolveAssociationPropertyVariableWithChildProperty(); %>
                // Pass the parent value down to the child.
<% if(!list.Contains(className)) { list.Add(className); %>
                <%if(isObjectFactory){%>//<%}%><%= className %> <%= variableName %> = this.Parent as <%= className %>;
<%} else { %>
                <%if(isObjectFactory){%>//<%}%><%= variableName %> = this.Parent as <%= className %>;
<% } %>
                <%if(isObjectFactory){%>//<%}%>if(<%= variableName %> != null)
                <%if(isObjectFactory){%>//<%}%>    item.<%= property.Name %> = <%= variableWithChildProperty %>;

<% } } %>

                Add(item);
            }

            return item;
<% } else { %>
            <%= BusinessProjectName %>.<%= ChildBusinessClassName %>.New<%= ChildBusinessClassName %><% if(IsSwitchableObject()){ %>Child<% }%>Async((o, e) =>
                {
                    <%= ChildBusinessClassName %> item = e.Object;

                    bool cancel = false;
                    OnAddNewCore(ref item, ref cancel);
                    if (!cancel)
                    {
                        // Check to see if someone set the item to null in the OnAddNewCore.
                        if(item == null)
                            return;
<%  var list = new System.Collections.Generic.List<string>(); 
            bool isObjectFactory = DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures;
            foreach(IProperty property in Entity.Properties) { if(property.IsType(PropertyType.Foreign) && !property.IsType(PropertyType.Identity)) {
                string className = property.ResolveAssociationPropertyClassName();
                if(String.IsNullOrEmpty(className)) continue;
        
                string variableName = property.ResolveAssociationPropertyVariable();
                string variableWithChildProperty = property.ResolveAssociationPropertyVariableWithChildProperty(); %>
                        // Pass the parent value down to the child.
        <% if(!list.Contains(className)) { list.Add(className); %>
                        <%if(isObjectFactory){%>//<%}%><%= className %> <%= variableName %> = this.Parent as <%= className %>;
        <%} else { %>
                        <%if(isObjectFactory){%>//<%}%><%= variableName %> = this.Parent as <%= className %>;
        <% } %>
                        <%if(isObjectFactory){%>//<%}%>if(<%= variableName %> != null)
                        <%if(isObjectFactory){%>//<%}%>    item.<%= property.Name %> = <%= variableWithChildProperty %>;
        
        <% } } %>
                        Add(item);
                    }
                });
<% } %>