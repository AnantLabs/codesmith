<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
        #region Business Rules

        /// <summary>
        /// Contains the CodeSmith generated validation rules.
        /// </summary>
        protected override void AddBusinessRules()
        {
            // Call the base class, if this call isn't made than any declared System.ComponentModel.DataAnnotations rules will not work.
            base.AddBusinessRules();

            if(AddBusinessValidationRules())
                return;

<%     foreach(IProperty property in Entity.GetProperties(PropertyType.NoConcurrency)){ %>
<% if(property.SystemType == "System.String" ) { %>
<% if(!property.IsNullable) { %>
<% if(IsLatestCSLA) { %>
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(<%= property.PrivateMemberVariableName %>Property));
<% } else { %>
            ValidationRules.AddRule(Csla.Validation.CommonRules.StringRequired, <%= property.PrivateMemberVariableName %>Property);
<% } }
if(!property.ExcludeBusinessSizeRule()) { %>
<% if(IsLatestCSLA) { %>
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(<%= property.PrivateMemberVariableName %>Property, <%= property.Size %>));
<% } else { %>
            ValidationRules.AddRule(Csla.Validation.CommonRules.StringMaxLength, new Csla.Validation.CommonRules.MaxLengthRuleArgs(<%= property.PrivateMemberVariableName %>Property, <%= property.Size %>));
<% } } } } %>
        }

        #endregion

