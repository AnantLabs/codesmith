<%-- 
Name: XmlTyp.cst
Author: Tom DuPont
Description: Generates XmlType class for XmlDocument columns.
--%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="False" CompilerVersion="v3.5" Description="Generates XmlType class for XmlDocument columns." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Data.Common
Imports System.Text
Imports System.Xml
Imports NHibernate.SqlTypes
Imports NHibernate.UserTypes

Namespace <%= BaseNamespace %>
    ''' <summary>
    ''' UserType allowing easy saving of NHIbernate XmlDocument property.
    ''' 
    ''' Example:
    ''' Message.cs - Example class with a XmlDocument
    ''' public class Message
    ''' {
    '''    public XmlDocument Body{get;set;}
    ''' }
    ''' Document.hbm.xml - The mapping
    ''' <hibernate-mapping xmlns="urn:nhibernate-mapping-2.2">
    '''   <class name="Message">
    '''     <property name="Body" type="NHibernate.Custom.XmlType, NHibernate.Custom" />
    '''   </class>
    ''' </hibernate-mapping>
    ''' 
    ''' Notes:
    ''' - This code was found online somewhere, sorry, I can't remember where :-( 
    ''' - I've tweaked it a little to work with 2nd level cache and NHibernate 2.1.x. 
    ''' - Tobin Harris
    ''' </summary>
    ''' <summary>
    ''' UserType allowing easy saving of NHIbernate XmlDocument property.
    ''' 
    ''' Example:
    ''' Message.cs - Example class with a XmlDocument
    ''' public class Message
    ''' {
    '''    public XmlDocument Body{get;set;}
    ''' }
    ''' Document.hbm.xml - The mapping
    ''' <hibernate-mapping xmlns="urn:nhibernate-mapping-2.2">
    '''   <class name="Message">
    '''     <property name="Body" type="NHibernate.Custom.XmlType, NHibernate.Custom" />
    '''   </class>
    ''' </hibernate-mapping>
    ''' 
    ''' Notes:
    ''' - This code was found online somewhere, sorry, I can't remember where :-( 
    ''' - I've tweaked it a little to work with 2nd level cache and NHibernate 2.1.x. 
    ''' - Tobin Harris
    ''' </summary>
    Public Class XmlType
        Implements IUserType
        Public Shadows Function Equals(ByVal x As Object, ByVal y As Object) As Boolean Implements IUserType.Equals
            If x Is Nothing OrElse y Is Nothing Then
                Return False
            End If

            Dim xdoc_x = DirectCast(x, XmlDocument)
            Dim xdoc_y = DirectCast(y, XmlDocument)
            Return xdoc_y.OuterXml = xdoc_x.OuterXml
        End Function
        
        Public Overridable Function GetHashCode(ByVal x As Object) As Integer Implements IUserType.GetHashCode
            Return x.GetHashCode()
        End Function
        
        Public Overridable Function NullSafeGet(ByVal rs As IDataReader, ByVal names As String(), ByVal owner As Object) As Object Implements IUserType.NullSafeGet
            If names.Length <> 1 Then
                Throw New InvalidOperationException("names array has more than one element. can't handle this!")
            End If

            Dim document = New XmlDocument()

            Dim val = TryCast(rs(names(0)), String)

            If val IsNot Nothing Then
                document.LoadXml(val)
                Return document
            End If

            Return Nothing
        End Function
        
        Public Overridable Sub NullSafeSet(ByVal cmd As IDbCommand, ByVal value As Object, ByVal index As Integer) Implements IUserType.NullSafeSet
            Dim parameter = DirectCast(cmd.Parameters(index), DbParameter)

            If value Is Nothing Then
                parameter.Value = DBNull.Value
                Exit Sub
            End If

            parameter.Value = DirectCast(value, XmlDocument).OuterXml
        End Sub
        
        Public Overridable Function DeepCopy(ByVal value As Object) As Object Implements IUserType.DeepCopy

            Dim toCopy = TryCast(value, XmlDocument)

            If toCopy Is Nothing Then
                Return Nothing
            End If

            Dim copy = New XmlDocument()
            copy.LoadXml(toCopy.OuterXml)
            Return copy
        End Function

        Public Overridable Function Replace(ByVal original As Object, ByVal target As Object, ByVal owner As Object) As Object Implements IUserType.Replace
            Throw New NotImplementedException()
        End Function

        Public Overridable Function Assemble(ByVal cached As Object, ByVal owner As Object) As Object Implements IUserType.Assemble
            Dim str = TryCast(cached, String)
            If str IsNot Nothing Then
                Dim doc = New XmlDocument()
                doc.LoadXml(str)
                Return doc
            Else
                Return Nothing

            End If
        End Function

        Public Overridable Function Disassemble(ByVal value As Object) As Object Implements IUserType.Disassemble
            Dim val = TryCast(value, XmlDocument)
            If val IsNot Nothing Then
                Return val.OuterXml
            Else
                Return Nothing
            End If
        End Function

        Public ReadOnly Property SqlTypes() As SqlType() Implements IUserType.SqlTypes
            Get
                Return New SqlType() {New SqlXmlStringType()}
            End Get
        End Property

        Public ReadOnly Property ReturnedType() As System.Type Implements IUserType.ReturnedType
            Get
                Return GetType(XmlDocument)
            End Get
        End Property

        Public ReadOnly Property IsMutable() As Boolean Implements IUserType.IsMutable
            Get
                Return True
            End Get
        End Property
    End Class
    
    Public Class SqlXmlType
        Inherits SqlType
        Public Sub New()
            MyBase.New(DbType.Xml)
        End Sub
    End Class
    
    Public Class SqlXmlStringType
        Inherits SqlType
        Public Sub New()
            MyBase.New(DbType.[String], 4000)
        End Sub
    End Class
End Namespace
