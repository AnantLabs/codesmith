<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Data Context" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>
<%@ Assembly Name="Xml.Schema.Linq" Path="..\..\Common" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>

<%@ Property Name="LazyLoadingEnabled" Type="System.Boolean" Category="2. Class"  Optional="False" %>
<%@ Property Name="DataContextName" Type="System.String" Category="2. Class" Optional="False" %>
<%@ Property Name="ContextNamespace" Type="System.String" Category="2. Class" Optional="False" Description="The namespace to use for the context class files."%>
<%@ Property Name="EntityNamespace" Type="System.String" Category="2. Class" Optional="False" Description="The namespace to use for the entity class files."%>
<%@ Property Name="Entities" Type="System.Collections.Generic.IEnumerable<IEntity>" Category="2. Class" %>
#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

<% foreach(IAssociation association in UniqueAssociations()) {%>
[assembly: EdmRelationshipAttribute("<%= association.Namespace %>", "<%= association.AssociationKeyName %>", "<%= association.Entity.Name %>", <%= GetRelationshipMultiplicity(association, false) %>, typeof(<%= EntityNamespace %>.<%= association.Entity.Name %>), "<%=  association.ForeignEntity.Name.Equals(association.Entity.Name) ? association.ForeignEntity.Name + "1" : association.ForeignEntity.Name%>", <%= GetRelationshipMultiplicity(association, true) %>, typeof(<%= EntityNamespace %>.<%= association.ForeignEntity.Name %>)<%= association.Properties.Count > 0 ? ", true" : String.Empty %>)]
<%}%>
namespace <%= ContextNamespace %>
{
    public partial class <%= DataContextName %> : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initializes a new <%= DataContextName %> object using the connection string found in the '<%= DataContextName %>' section of the application configuration file.
        /// </summary>
        public <%= DataContextName %>() : base("name=<%= DataContextName %>", "<%= DataContextName %>")
        {
            this.ContextOptions.LazyLoadingEnabled = <%= LazyLoadingEnabled ? "true" : "false" %>;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new <%= DataContextName %> object.
        /// </summary>
        public <%= DataContextName %>(string connectionString) : base(connectionString, "<%= DataContextName %>")
        {
            this.ContextOptions.LazyLoadingEnabled = <%= LazyLoadingEnabled ? "true" : "false" %>;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new <%= DataContextName %> object.
        /// </summary>
        public <%= DataContextName %>(EntityConnection connection) : base(connection, "<%= DataContextName %>")
        {
            this.ContextOptions.LazyLoadingEnabled = <%= LazyLoadingEnabled ? "true" : "false" %>;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion
<% if(Entities.Count(e => IsConceptualEntity(e)) > 0) { %>

        #region ObjectSet Properties
<% foreach(var entity in Entities.Where(e => IsConceptualEntity(e))) { %>

<% if(entity.HasDescription) { %>
        /// <summary>
        /// <%= entity.Description %>
        /// </summary>
<% } %>
        private ObjectSet<<%= ResolveEntityNamespace() %><%= entity.Name %>> <%= entity.PrivateMemberVariableName %>;
        <%= entity.TypeAccess %> ObjectSet<<%= ResolveEntityNamespace() %><%= entity.Name %>> <%= entity.Name %>
        {
            get
            {
                if (<%= entity.PrivateMemberVariableName %> == null)
                {
                    <%= entity.PrivateMemberVariableName %> = base.CreateObjectSet<<%= ResolveEntityNamespace() %><%= entity.Name %>>("<%= entity.Name %>");
                }

                return <%= entity.PrivateMemberVariableName %>;
            }
        }
<% } %>
        #endregion
<% } %>
<% if(Entities.Count(e => IsFunctionEntity(e)) > 0) { %>

        #region Function Imports
<% foreach(FunctionEntity entity in Entities.Where(e => IsFunctionEntity(e))) { 
    bool isConceptualEntityReturnType = entity.AssociatedEntity != null && entity.AssociatedEntity is ConceptualEntity;
    string returnType = entity.AssociatedEntity != null ? String.Concat(ResolveEntityNamespace(), entity.AssociatedEntity.Name) : entity.ReturnType;
%>

        <% if(entity.HasDescription) { %>
        /// <summary>
        /// <%= entity.Description %>
        /// </summary>
        <% } %>
        public ObjectResult<<%= returnType %>> <%= entity.Name %>(<%= HasParameters(entity) ? GetParameters(entity.SearchCriteria[0].Properties) : String.Empty %>)
        {
<%if(HasParameters(entity)) {%>
<% foreach(IProperty property in entity.SearchCriteria[0].Properties) { %>
            ObjectParameter <%= property.VariableName %>Parameter = <% if(IsContainmentOperator(property)) { %><%= property.VariableName %> != null ? new ObjectParameter("<%= property.Name %>", <%= property.VariableName %>) : new ObjectParameter("<%= property.Name %>", typeof(<%= property.SystemType %>));<% } else { %>new ObjectParameter("<%= property.Name %>", <%= property.VariableName %>);<% } %>
<% } %>

<% } %>
            return base.ExecuteFunction<<%= returnType %>>("<%= entity.Name %>"<%if(HasParameters(entity)) {%>, <%= GetParametersNames(entity.SearchCriteria[0].Properties, "Parameter") %><%}%>);
        }
<% if(isConceptualEntityReturnType) { %>

        <% if(entity.HasDescription) { %>
        /// <summary>
        /// <%= entity.Description %>
        /// </summary>
        <% } %>
        public ObjectResult<<%= returnType %>> <%= entity.Name %>(<%if(HasParameters(entity)) {%><%= GetParameters(entity.SearchCriteria[0].Properties) %>, <%}%>MergeOption mergeOption)
        {
<%if(HasParameters(entity)) {%>
<% foreach(IProperty property in entity.SearchCriteria[0].Properties) { %>
            ObjectParameter <%= property.VariableName %>Parameter = <% if(IsContainmentOperator(property)) { %><%= property.VariableName %> != null ? new ObjectParameter("<%= property.Name %>", <%= property.VariableName %>) : new ObjectParameter("<%= property.Name %>", typeof(<%= property.SystemType %>));<% } else { %>new ObjectParameter("<%= property.Name %>", <%= property.VariableName %>);<% } %>
<% } %>

<% } %>
            return base.ExecuteFunction<<%= returnType %>>("<%= entity.Name %>", mergeOption<%if(HasParameters(entity)) {%>, <%= GetParametersNames(entity.SearchCriteria[0].Properties, "Parameter") %><%}%>);
        }
<% } } %>
        #endregion
<% } %>
    }
}
#pragma warning restore 1591
<script runat="template">

private List<IAssociation> UniqueAssociations()
{
    Dictionary<string, IAssociation> associations = new Dictionary<string, IAssociation>();
    foreach(IEntity entity in Entities) 
    {
        foreach(var association in entity.Associations)
        {
            if(association.IsParentEntity && !associations.ContainsKey(association.AssociationKeyName))
                associations.Add(association.AssociationKeyName, association);
        }
    }

    return associations.Values.ToList();
}

private string GetRelationshipMultiplicity(IAssociation assocation, bool isForeignEntity)
{
    //System.Data.Metadata.Edm.RelationshipMultiplicity.One
    //System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne
    //System.Data.Metadata.Edm.RelationshipMultiplicity.Many
    if(!isForeignEntity)
    {
        switch(assocation.AssociationType)
        {
            case AssociationType.ZeroOrOneToMany:
                return "System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne";
            case AssociationType.OneToZeroOrOne:
            case AssociationType.OneToMany:
            case AssociationType.OneToOne:
                return "System.Data.Metadata.Edm.RelationshipMultiplicity.One";
            case AssociationType.ManyToZeroOrOne:
            case AssociationType.ManyToOne:
            case AssociationType.ManyToMany:
                return "System.Data.Metadata.Edm.RelationshipMultiplicity.Many";
        }
    }
    else
    {
        switch(assocation.AssociationType)
        {
            case AssociationType.OneToZeroOrOne:
            case AssociationType.ManyToZeroOrOne:
                return "System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne";
            case AssociationType.OneToOne:
            case AssociationType.ManyToOne:
                return "System.Data.Metadata.Edm.RelationshipMultiplicity.One";
            case AssociationType.OneToMany:
            case AssociationType.ZeroOrOneToMany:
            case AssociationType.ManyToMany:
                return "System.Data.Metadata.Edm.RelationshipMultiplicity.Many";
        }
    }

    return "System.Data.Metadata.Edm.RelationshipMultiplicity.One";
}

private string ResolveEntityNamespace()
{
    if(ContextNamespace.Equals(EntityNamespace))
        return String.Empty;
    if(EntityNamespace.StartsWith(String.Concat(ContextNamespace, ".")))
        return String.Concat(EntityNamespace.Replace(String.Concat(ContextNamespace, "."), String.Empty), ".");

    return String.Concat(EntityNamespace, ".");
}

private bool IsConceptualEntity(IEntity entity)
{
    return (entity is ConceptualEntity);
}

private bool IsFunctionEntity(IEntity entity)
{
    return (entity is FunctionEntity);
}

private bool HasParameters(IEntity entity)
{
    return entity.SearchCriteria != null && entity.SearchCriteria.Count > 0 && entity.SearchCriteria[0].Properties.Count > 0;
}

public string GetParameters(List<IProperty> properties)
{
    StringBuilder args = new StringBuilder();
    foreach(IProperty property in properties)
    {
        if (args.Length > 0)
            args.Append(", ");

        args.AppendFormat("{0} {1}", property.SystemType, property.VariableName);
    }

    return args.ToString();
}

public string GetParametersNames(List<IProperty> properties)
{
    return GetParametersNames(properties, String.Empty);
}

public string GetParametersNames(List<IProperty> properties, string suffix)
{
    StringBuilder args = new StringBuilder();
    foreach(IProperty property in properties)
    {
        if (args.Length > 0)
            args.Append(", ");

        args.Append(property.VariableName + suffix);
    }

    return args.ToString();
}

public bool IsContainmentOperator(IProperty property)
{
    if (property.BaseSystemType.EndsWith("String"))
        return true;
    
    return false;
    }
</script>