
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;
using System.Text;

namespace Petshop.Data
{
    /// <summary>
    /// The manager class for Cart.
    /// </summary>
    public partial class CartManager 
        : CodeSmith.Data.EntityManagerBase<PetshopDataManager, Petshop.Data.Cart>
    {
        /// <summary>
        /// Initializes the <see cref="CartManager"/> class.
        /// </summary>
        /// <param name="manager">The current manager.</param>
        public CartManager(PetshopDataManager manager) : base(manager)
        {
            OnCreated();
        }

        /// <summary>
        /// Gets the current context.
        /// </summary>
        protected Petshop.Data.PetshopDataContext Context
        {
            get { return Manager.Context; }
        }
        
        /// <summary>
        /// Gets the entity for this manager.
        /// </summary>
        protected System.Data.Linq.Table<Petshop.Data.Cart> Entity
        {
            get { return Manager.Context.Cart; }
        }
        
        
        /// <summary>
        /// Creates the key for this entity.
        /// </summary>
        public static CodeSmith.Data.IEntityKey<int> CreateKey(int cartID)
        {
            return new CodeSmith.Data.EntityKey<int>(cartID);
        }
        
        /// <summary>
        /// Gets an entity by the primary key.
        /// </summary>
        /// <param name="key">The key for the entity.</param>
        /// <returns>
        /// An instance of the entity or null if not found.
        /// </returns>
        /// <remarks>
        /// This method is expecting key to be of type IEntityKey&lt;int&gt;.
        /// </remarks>
        /// <exception cref="ArgumentException">Thrown when key is not of type IEntityKey&lt;int&gt;.</exception>
        public override Petshop.Data.Cart GetByKey(CodeSmith.Data.IEntityKey key)
        {
            if (key is CodeSmith.Data.IEntityKey<int>)
            {
                var entityKey = (CodeSmith.Data.IEntityKey<int>)key;
                return GetByKey(entityKey.Key);
            }
            else
            {
                throw new ArgumentException("Invalid key, expected key to be of type IEntityKey<int>");
            }
        }
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public Petshop.Data.Cart GetByKey(int cartID)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByKey.Invoke(Context, cartID);
            else
                return Entity.FirstOrDefault(c => c.CartID == cartID);
        }
        
        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <returns>The number of rows deleted from the database.</returns>
        public int Delete(int cartID)
        {
            return Entity.Delete(c => c.CartID == cartID);
        }
        /// <summary>
        /// Gets a query by an index.
        /// </summary>
        public IQueryable<Petshop.Data.Cart> GetByUniqueID(int uniqueID)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByUniqueID.Invoke(Context, uniqueID);
            else
                return Entity.Where(c => c.UniqueID == uniqueID);
        }
        /// <summary>
        /// Gets a query by an index.
        /// </summary>
        public IQueryable<Petshop.Data.Cart> GetByIsShoppingCart(bool isShoppingCart)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByIsShoppingCart.Invoke(Context, isShoppingCart);
            else
                return Entity.Where(c => c.IsShoppingCart == isShoppingCart);
        }

        #region Extensibility Method Definitions
        /// <summary>Called when the class is created.</summary>
        partial void OnCreated();
        #endregion
        
        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<Petshop.Data.PetshopDataContext, int, Petshop.Data.Cart> GetByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Petshop.Data.PetshopDataContext db, int cartID) => 
                        db.Cart.FirstOrDefault(c => c.CartID == cartID));

            internal static readonly Func<Petshop.Data.PetshopDataContext, int, IQueryable<Petshop.Data.Cart>> GetByUniqueID = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Petshop.Data.PetshopDataContext db, int uniqueID) => 
                        db.Cart.Where(c => c.UniqueID == uniqueID));

            internal static readonly Func<Petshop.Data.PetshopDataContext, bool, IQueryable<Petshop.Data.Cart>> GetByIsShoppingCart = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Petshop.Data.PetshopDataContext db, bool isShoppingCart) => 
                        db.Cart.Where(c => c.IsShoppingCart == isShoppingCart));

        }
        #endregion
    }
}

