//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.2, CSLA Templates: v3.0.0.1817, CSLA Framework: v4.0.0.
//       Changes to this template will not be lost.
//
//     Template: SwitchableObject.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Security;
using Csla.Rules;

#endregion

namespace PetShop.Business
{
    public partial class Order
    {
        #region Business Rules

        /// <summary>
        /// All custom rules need to be placed in this method.
        /// </summary>
        /// <returns>Return true to override the generated rules; If false generated rules will be run.</returns>
        protected bool AddBusinessValidationRules()
        {
            // TODO: add validation rules
            //ValidationRules.AddRule(RuleMethod, "");

            return false;
        }

        #endregion

        #region Authorization Rules

        protected static void AddObjectAuthorizationRules()
        {
            //Csla.Rules.BusinessRules.AddRule(typeof(Order), new Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.CreateObject, "SomeRole"));
            //Csla.Rules.BusinessRules.AddRule(typeof(Order), new Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.EditObject, "SomeRole"));
            //Csla.Rules.BusinessRules.AddRule(typeof(Order), new Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.DeleteObject, "SomeRole", "SomeAdminRole"));
        }
        #endregion

        #region Custom Factory Methods

        /// <summary>
        /// Uses the profile's uniqueID to look up the order.
        /// </summary>
        /// <param name="uniqueId">assumes UserId == Profile.UniqueId</param>
        /// <returns>an Order.</returns>
        public static Order GetOrder(string uniqueId)
        {
            return DataPortal.Fetch<Order>(new OrderCriteria { UserId = uniqueId });
        }

        #endregion

        #region Properties

        private static readonly PropertyInfo<LineItemList> _itemsProperty = RegisterProperty<LineItemList>(p => p.Items, Csla.RelationshipTypes.LazyLoad);
        public LineItemList Items
        {
            get
            {
                if (!FieldManager.FieldExists(_itemsProperty))
                    SetProperty(_itemsProperty, LineItemList.GetByOrderId(OrderId));

                return GetProperty(_itemsProperty);
            }
        }

        public CreditCard CreditCard { get; set; }

        #endregion
    }
}