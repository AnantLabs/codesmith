//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//	   Changes to this template will not be lost.
//
//     Template: ADOHelper.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;

using Csla;
using Csla.Data;

#endregion

namespace PetShop.Business
{
    public static class ADOHelper
    {
        #region Methods

        private static string _connectionString = string.Empty;

        /// <summary>
        /// Returns the Connection String.
        /// </summary>
        public static string ConnectionString
        {
            get
            {
                if(string.IsNullOrEmpty(_connectionString))
                {
                    _connectionString = "Data Source=.;Initial Catalog=PetShop;Integrated Security=True";
                }
                
                return _connectionString;
            }
        }
        
        /// <summary>
        /// Returns an array of SqlParameters
        /// </summary>
        public static SqlParameter[] SqlParameters(Dictionary<string, object> bag)
        {
            List<SqlParameter> parameters = new List<SqlParameter>(bag.Keys.Count);

            foreach (KeyValuePair<string, object> pair in bag)
            {
                parameters.Add(new SqlParameter(string.Format("@p_{0}", pair.Key), pair.Value));
            }

            return parameters.ToArray();
        }

        /// <summary>
        /// Returns a where clause for the current Criteria object.
        /// </summary>
        /// <returns>Returns a where clause for the current Criteria object.</returns>
        public static string BuildWhereStatement(Dictionary<string, object> bag)
        {
            if (bag.Count == 0)
                return string.Empty;

            string columnNames = string.Empty;

            foreach (string columnName in bag.Keys)
            {
                columnNames += string.Format("[{0}] = @p_{0} AND ", columnName);
            }

            return string.Format("WHERE {0}", columnNames.Remove(columnNames.Length - 5, 5));
        }

        /// <summary>
        /// Returns the Bytes stored in a binary column.
        /// </summary>
        /// <param name="reader">The reader.</param>
        /// <param name="columnName">The column name.</param>
        /// <returns>Bytes Stored in a column.</returns>
        public static byte[] GetBytes(SafeDataReader reader, string columnName)
        {
            var buffer = new byte[1024];
            long fieldOffset = 0;
            
            using (var stream = new MemoryStream())
            {
                long bytesRead;

                while ((bytesRead = reader.GetBytes(columnName, fieldOffset, buffer, 0, buffer.Length)) > 0)
                {
                    var actualRead = new byte[bytesRead];
                    Buffer.BlockCopy(buffer, 0, actualRead, 0, (int)bytesRead);
                    stream.Write(actualRead, 0, actualRead.Length);
                    fieldOffset += bytesRead;
                }

                return stream.ToArray();
            }
        }

        #endregion
    }
}
