//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.8.X CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Product.cs'.
//
//     Template: SwitchableObject.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Data;
using Csla.Validation;

#endregion

namespace PetShop.Tests.StoredProcedures
{
    [Serializable]
    public partial class Product : BusinessBase< Product >
    {
        #region Contructor(s)

        private Product()
        { /* Require use of factory methods */ }

        private Product(System.String productId)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_productIdProperty, productId);
            }
        }

        internal Product(SafeDataReader reader)
        {
            Map(reader);
        }
        #endregion

        #region Validation Rules

        protected override void AddBusinessRules()
        {
            if(AddBusinessValidationRules())
                return;

            ValidationRules.AddRule(CommonRules.StringRequired, _productIdProperty);
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_productIdProperty, 10));
            ValidationRules.AddRule(CommonRules.StringRequired, _categoryIdProperty);
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_categoryIdProperty, 10));
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_nameProperty, 80));
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_descnProperty, 255));
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(_imageProperty, 80));
        }

        #endregion

        #region Properties

        private static readonly PropertyInfo< System.String > _productIdProperty = RegisterProperty< System.String >(p => p.ProductId);
		[System.ComponentModel.DataObjectField(true, false)]
        public System.String ProductId
        {
            get { return GetProperty(_productIdProperty); }
            set{ SetProperty(_productIdProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _categoryIdProperty = RegisterProperty< System.String >(p => p.CategoryId);
        public System.String CategoryId
        {
            get { return GetProperty(_categoryIdProperty); }
            set{ SetProperty(_categoryIdProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _nameProperty = RegisterProperty< System.String >(p => p.Name);
        public System.String Name
        {
            get { return GetProperty(_nameProperty); }
            set{ SetProperty(_nameProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _descnProperty = RegisterProperty< System.String >(p => p.Descn);
        public System.String Descn
        {
            get { return GetProperty(_descnProperty); }
            set{ SetProperty(_descnProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _imageProperty = RegisterProperty< System.String >(p => p.Image);
        public System.String Image
        {
            get { return GetProperty(_imageProperty); }
            set{ SetProperty(_imageProperty, value); }
        }

        //AssociatedManyToOne
        private static readonly PropertyInfo< Category > _categoryMemberProperty = RegisterProperty< Category >(p => p.CategoryMember, RelationshipTypes.LazyLoad);
        public Category CategoryMember
        {
            get
            {
                if(!FieldManager.FieldExists(_categoryMemberProperty))
                {
                    if(IsNew)
                        LoadProperty(_categoryMemberProperty, PetShop.Tests.StoredProcedures.Category.NewCategory());
                    else
                        LoadProperty(_categoryMemberProperty, PetShop.Tests.StoredProcedures.Category.GetByCategoryId(CategoryId));
                }

                return GetProperty(_categoryMemberProperty); 
            }
        }


        //AssociatedOneToMany
        private static readonly PropertyInfo< ItemList > _itemsProperty = RegisterProperty<ItemList>(p => p.Items, RelationshipTypes.LazyLoad);
        public ItemList Items
        {
            get
            {
                if(!FieldManager.FieldExists(_itemsProperty))
                {
                    if(IsNew)
                        LoadProperty(_itemsProperty, PetShop.Tests.StoredProcedures.ItemList.NewList());
                    else
                    
                        LoadProperty(_itemsProperty, PetShop.Tests.StoredProcedures.ItemList.GetByProductId(ProductId));
                }

                return GetProperty(_itemsProperty); 
            }
        }

        #endregion

        #region Root Factory Methods 
        
        public static Product NewProduct()
        {
            return DataPortal.Create< Product >();
        }

        public static Product GetByProductId(System.String productId)
        {
            return DataPortal.Fetch< Product >(
                new ProductCriteria{ProductId = productId});
        }

        public static Product GetByName(System.String name)
        {
            return DataPortal.Fetch< Product >(
                new ProductCriteria{Name = name});
        }

        public static Product GetByCategoryId(System.String categoryId)
        {
            return DataPortal.Fetch< Product >(
                new ProductCriteria{CategoryId = categoryId});
        }

        public static Product GetByCategoryIdName(System.String categoryId, System.String name)
        {
            return DataPortal.Fetch< Product >(
                new ProductCriteria{CategoryId = categoryId, Name = name});
        }

        public static Product GetByCategoryIdProductIdName(System.String categoryId, System.String productId, System.String name)
        {
            return DataPortal.Fetch< Product >(
                new ProductCriteria{CategoryId = categoryId, ProductId = productId, Name = name});
        }

        public static void DeleteProduct(System.String productId)
        {
                DataPortal.Delete(new ProductCriteria(productId));
        }
        
        #endregion

        #region Child Factory Methods 
        
        internal static Product NewProductChild()
        {
            return DataPortal.CreateChild< Product >();
        }
        internal static Product GetByProductIdChild(System.String productId)
        {
            return DataPortal.FetchChild< Product >(
                new ProductCriteria{ProductId = productId});
        }
        internal static Product GetByNameChild(System.String name)
        {
            return DataPortal.FetchChild< Product >(
                new ProductCriteria{Name = name});
        }
        internal static Product GetByCategoryIdChild(System.String categoryId)
        {
            return DataPortal.FetchChild< Product >(
                new ProductCriteria{CategoryId = categoryId});
        }
        internal static Product GetByCategoryIdNameChild(System.String categoryId, System.String name)
        {
            return DataPortal.FetchChild< Product >(
                new ProductCriteria{CategoryId = categoryId, Name = name});
        }
        internal static Product GetByCategoryIdProductIdNameChild(System.String categoryId, System.String productId, System.String name)
        {
            return DataPortal.FetchChild< Product >(
                new ProductCriteria{CategoryId = categoryId, ProductId = productId, Name = name});
        }

        #endregion

    }
}