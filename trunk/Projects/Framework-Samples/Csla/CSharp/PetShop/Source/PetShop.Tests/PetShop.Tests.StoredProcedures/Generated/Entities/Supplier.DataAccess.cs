//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.8.X CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Supplier.cs'.
//
//     Template: EditableRoot.DataAccess.StoredProcedures.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

#endregion

namespace PetShop.Tests.StoredProcedures
{
    public partial class Supplier
    {
        [RunLocal]
        protected override void DataPortal_Create()
        {
            ValidationRules.CheckRules();
        }

        protected void DataPortal_Fetch(SupplierCriteria criteria)
        {
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("[dbo].[CSLA_Supplier_Select]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                            Map(reader);
                        else
                            throw new Exception(string.Format("The record was not found in 'Supplier' using the following criteria: {0}.", criteria));
                    }
                }
            }
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Insert()
        {
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand("[dbo].[CSLA_Supplier_Insert]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@p_SuppId", SuppId);
					command.Parameters.AddWithValue("@p_Name", Name);
					command.Parameters.AddWithValue("@p_Status", Status);
					command.Parameters.AddWithValue("@p_Addr1", Addr1);
					command.Parameters.AddWithValue("@p_Addr2", Addr2);
					command.Parameters.AddWithValue("@p_City", City);
					command.Parameters.AddWithValue("@p_State", State);
					command.Parameters.AddWithValue("@p_Zip", Zip);
					command.Parameters.AddWithValue("@p_Phone", Phone);

                    command.ExecuteNonQuery();
                }
            }

            FieldManager.UpdateChildren(this);
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Update()
        {
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand("[dbo].[CSLA_Supplier_Update]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@p_SuppId", SuppId);
					command.Parameters.AddWithValue("@p_Name", Name);
					command.Parameters.AddWithValue("@p_Status", Status);
					command.Parameters.AddWithValue("@p_Addr1", Addr1);
					command.Parameters.AddWithValue("@p_Addr2", Addr2);
					command.Parameters.AddWithValue("@p_City", City);
					command.Parameters.AddWithValue("@p_State", State);
					command.Parameters.AddWithValue("@p_Zip", Zip);
					command.Parameters.AddWithValue("@p_Phone", Phone);

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            FieldManager.UpdateChildren(this);
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(new SupplierCriteria(SuppId));
        }

        [Transactional(TransactionalTypes.TransactionScope)]
        protected void DataPortal_Delete(SupplierCriteria criteria)
        {
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("[dbo].[CSLA_Supplier_Delete]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    
                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }
        }

        private void Map(SafeDataReader reader)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_suppIdProperty, reader.GetInt32("SuppId"));
                LoadProperty(_nameProperty, reader.GetString("Name"));
                LoadProperty(_statusProperty, reader.GetString("Status"));
                LoadProperty(_addr1Property, reader.GetString("Addr1"));
                LoadProperty(_addr2Property, reader.GetString("Addr2"));
                LoadProperty(_cityProperty, reader.GetString("City"));
                LoadProperty(_stateProperty, reader.GetString("State"));
                LoadProperty(_zipProperty, reader.GetString("Zip"));
                LoadProperty(_phoneProperty, reader.GetString("Phone"));
            }

            MarkOld();
        }
    }
}