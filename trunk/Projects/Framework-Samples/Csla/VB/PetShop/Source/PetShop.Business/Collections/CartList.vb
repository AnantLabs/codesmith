'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.7.X CodeSmith Templates.
'	   Changes to this template will not be lost.
'
'     Template: EditableChildList.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Collections.Generic

Imports Csla

Public Partial Class CartList

#Region "Custom Factory Methods"

    Friend Shared Function GetCart(ByVal uniqueID As Integer, ByVal isShoppingCart As Boolean) As CartList
        Return DataPortal.FetchChild(Of CartList)(New CartCriteria())
    End Function

#End Region

#Region "Properties"

    ''' <summary>
    ''' Calculate the total for all the Items in the Cart.
    ''' </summary>
    Public ReadOnly Property Total() As Decimal
        Get
            Dim totalValue As Decimal = 0
            For Each cart As Cart In Me
                totalValue += cart.Price * cart.Quantity
            Next

            Return totalValue
        End Get
    End Property

#End Region

#Region "Methods"

    ''' <summary>
    ''' Update the quantity for item that exists in the cart.
    ''' </summary>
    ''' <param name="itemId">Item Id</param>
    ''' <param name="quantity">Quantity</param>
    Public Sub SetQuantity(ByVal itemId As String, ByVal quantity As Integer)
        Dim index As Integer = 0
        For Each cart As Cart In Me
            If cart.ItemId = itemId Then
                Exit For
            End If

            System.Math.Max(System.Threading.Interlocked.Increment(index), index - 1)
        Next

        Me(index).Quantity = quantity
    End Sub

    ''' <summary>
    ''' Add an item to the cart.
    ''' When ItemId to be added has already existed, this method will update the quantity instead.
    ''' </summary>
    ''' <param name="itemId">Item to add</param>
    ''' <param name="uniqueID">Cart's Unique ID</param>
    ''' <param name="isShoppingCart">Cart is a shopping cart.</param>
    Public Overloads Sub Add(ByVal itemId As String, ByVal uniqueID As Integer, ByVal isShoppingCart As Boolean)
        Add(itemId, uniqueID, isShoppingCart, 1)
    End Sub
    ''' <summary>
    ''' Add an item to the cart.
    ''' When ItemId to be added has already existed, this method will update the quantity instead.
    ''' </summary>
    ''' <param name="itemId">Item to add</param>
    ''' <param name="uniqueID">Cart's Unique ID</param>
    ''' <param name="isShoppingCart">Cart is a shopping cart.</param>
    ''' <param name="quantity">Item Quanitity</param>
    Public Overloads Sub Add(ByVal itemId As String, ByVal uniqueID As Integer, ByVal isShoppingCart As Boolean, ByVal quantity As Integer)
        Dim index As Integer = 0
        Dim found As Boolean = False

        For Each cart As Cart In Me
            If cart.ItemId = itemId Then
                found = True
                Exit For
            End If

            System.Math.Max(System.Threading.Interlocked.Increment(index), index - 1)
        Next

        If found Then
            Items(index).Quantity += quantity
        Else
            Dim item As Item = item.GetItem(itemId)
            Dim product As Product = product.GetProduct(item.ProductId)
            Dim cart As Cart = cart.NewCart()
            cart.UniqueID = uniqueID
            cart.ItemId = itemId
            cart.Name = item.Name
            cart.ProductId = item.ProductId
            cart.IsShoppingCart = isShoppingCart
            cart.Price = If(item.ListPrice, If(item.UnitCost, 0))
            cart.Type = product.Name
            cart.CategoryId = product.CategoryId
            cart.Quantity = quantity

            Add(cart)
        End If
    End Sub

    ''' <summary>
    ''' Remove item from the cart based on itemId.
    ''' </summary>
    ''' <param name="itemId">ItemId of item to remove</param>
    Public Overloads Sub Remove(ByVal itemId As String)
        Dim index As Integer = 0
        For Each cart As Cart In Me
            If cart.ItemId = itemId Then
                Exit For
            End If

            System.Math.Max(System.Threading.Interlocked.Increment(index), index - 1)
        Next

        RemoveItem(index)
    End Sub

    ''' <summary>
    ''' Method to convert all cart items to order line items
    ''' </summary>
    Public Sub SaveOrderLineItems(ByVal orderId As Integer)
        Dim lineNum As Integer = 0

        For Each item As Cart In Me
            Dim lineItem As LineItem = lineItem.NewLineItem()
            lineItem.OrderId = orderId
            lineItem.ItemId = item.ItemId
            lineItem.LineNum = System.Threading.Interlocked.Increment(lineNum)
            lineItem.Quantity = item.Quantity
            lineItem.UnitPrice = item.Price

            lineItem = lineItem.Save()
        Next
    End Sub

#End Region

End Class