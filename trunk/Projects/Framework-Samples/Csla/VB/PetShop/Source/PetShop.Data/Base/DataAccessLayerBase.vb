'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.7.X CodeSmith Templates.
'	   Changes to this template will not be lost.
'
'     Template: ParameterizedSQLBase.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

#Region "Using Declarations"

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections.Generic

Imports Csla
Imports Csla.Data

#End Region

Namespace Base

    <Serializable> _
    Public Class DataAccessLayerBase
        Inherits BusinessBase(Of DataAccessLayerBase)
    
        #Region "Instance"
    
        Public Shared ReadOnly Property Instance() As DataAccessLayerBase
            Get
                Return Nested.Current
            End Get
        End Property
    
        Private Class Nested
            Shared Sub New()
                Current = New DataAccessLayerBase()
            End Sub
    
            ''' <summary>
            ''' Current singleton instance.
            ''' </summary>
            Friend Shared ReadOnly Current As DataAccessLayerBase
        End Class
    
        #End Region
    
        #Region "Methods"
    
        Private _connectionString As String = String.Empty
    
        ''' <summary>
        ''' Returns the Connection String.
        ''' </summary>
        Public Overridable ReadOnly Property ConnectionString() As String
            Get
                If String.IsNullOrEmpty(_connectionString) Then
                    _connectionString = System.Configuration.ConfigurationManager.ConnectionStrings("PetShopConnectionString").ConnectionString
                End If
    
                Return _connectionString
            End Get
        End Property
    
        Private _sqlConnection As SqlConnection
    
        ''' <summary>
        ''' Returns an opened SQLConnection.
        ''' </summary>
        ''' <returns>Returns an opened SQLConnection.</returns>
        Public Overridable Function GetSqlConnection() As SqlConnection
            If _sqlConnection Is Nothing Then
                _sqlConnection = New SqlConnection(ConnectionString)
                _sqlConnection.Open()
            End If
    
            Return _sqlConnection
        End Function
    
        ''' <summary>
        ''' Returns an array of SqlParameters
        ''' </summary>
        Public Overridable Function SqlParameters(bag As Dictionary(Of String, Object)) As SqlParameter()
            Dim parameters As New List(Of SqlParameter)(bag.Keys.Count)
    
            For Each pair As KeyValuePair(Of String, Object) In bag
                parameters.Add(New SqlParameter(String.Format("@p_{0}", pair.Key), pair.Value))
            Next
    
            Return parameters.ToArray()
        End Function
    
        ''' <summary>
        ''' Returns a where clause for the current Criteria object.
        ''' </summary>
        ''' <returns>Returns a where clause for the current Criteria object.</returns>
        Public Overridable Function BuildWhereStatement(bag As Dictionary(Of String, Object)) As String
            If bag.Count = 0 Then
                Return String.Empty
            End If
    
            Dim columnNames As String = String.Empty
    
            For Each columnName As String In bag.Keys
                columnNames += String.Format("[{0}] = @p_{0} AND ", columnName)
            Next
    
            Return String.Format("WHERE {0}", columnNames.Remove(columnNames.Length - 5, 5))
        End Function
    
        #End Region
    
        #Region "Data Access"
        
        #Region "Account"
        
        #Region "Insert"
        
        Public Overridable Function AccountInsert(ByVal email As String, ByVal firstName As String, ByVal lastName As String, ByVal address1 As String, ByVal address2 As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal country As String, ByVal phone As String, ByVal uniqueID As Integer) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Account] ([Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone], [UniqueID]) VALUES (@p_Email, @p_FirstName, @p_LastName, @p_Address1, @p_Address2, @p_City, @p_State, @p_Zip, @p_Country, @p_Phone, @p_UniqueID); SELECT [AccountId] FROM [dbo].[Account] WHERE AccountId = SCOPE_IDENTITY()"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_Email", email)
				command.Parameters.AddWithValue("@p_FirstName", firstName)
				command.Parameters.AddWithValue("@p_LastName", lastName)
				command.Parameters.AddWithValue("@p_Address1", address1)
				command.Parameters.AddWithValue("@p_Address2", address2)
				command.Parameters.AddWithValue("@p_City", city)
				command.Parameters.AddWithValue("@p_State", state)
				command.Parameters.AddWithValue("@p_Zip", zip)
				command.Parameters.AddWithValue("@p_Country", country)
				command.Parameters.AddWithValue("@p_Phone", phone)
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function AccountUpdate(ByVal accountId As Integer, ByVal email As String, ByVal firstName As String, ByVal lastName As String, ByVal address1 As String, ByVal address2 As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal country As String, ByVal phone As String, ByVal uniqueID As Integer) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Account]  SET [Email] = @p_Email, [FirstName] = @p_FirstName, [LastName] = @p_LastName, [Address1] = @p_Address1, [Address2] = @p_Address2, [City] = @p_City, [State] = @p_State, [Zip] = @p_Zip, [Country] = @p_Country, [Phone] = @p_Phone, [UniqueID] = @p_UniqueID WHERE [AccountId] = @p_AccountId"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_AccountId", accountId)
				command.Parameters.AddWithValue("@p_Email", email)
				command.Parameters.AddWithValue("@p_FirstName", firstName)
				command.Parameters.AddWithValue("@p_LastName", lastName)
				command.Parameters.AddWithValue("@p_Address1", address1)
				command.Parameters.AddWithValue("@p_Address2", address2)
				command.Parameters.AddWithValue("@p_City", city)
				command.Parameters.AddWithValue("@p_State", state)
				command.Parameters.AddWithValue("@p_Zip", zip)
				command.Parameters.AddWithValue("@p_Country", country)
				command.Parameters.AddWithValue("@p_Phone", phone)
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function AccountFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [AccountId], [Email], [FirstName], [LastName], [Address1], [Address2], [City], [State], [Zip], [Country], [Phone], [UniqueID] FROM [dbo].[Account] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function AccountDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Account] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "Cart"
        
        #Region "Insert"
        
        Public Overridable Function CartInsert(ByVal itemId As String, ByVal name As String, ByVal type As String, ByVal price As Decimal, ByVal categoryId As String, ByVal productId As String, ByVal isShoppingCart As Boolean, ByVal quantity As Integer, ByVal uniqueID As Integer) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Cart] ([ItemId], [Name], [Type], [Price], [CategoryId], [ProductId], [IsShoppingCart], [Quantity], [UniqueID]) VALUES (@p_ItemId, @p_Name, @p_Type, @p_Price, @p_CategoryId, @p_ProductId, @p_IsShoppingCart, @p_Quantity, @p_UniqueID); SELECT [CartId] FROM [dbo].[Cart] WHERE CartId = SCOPE_IDENTITY()"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_ItemId", itemId)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Type", type)
				command.Parameters.AddWithValue("@p_Price", price)
				command.Parameters.AddWithValue("@p_CategoryId", categoryId)
				command.Parameters.AddWithValue("@p_ProductId", productId)
				command.Parameters.AddWithValue("@p_IsShoppingCart", isShoppingCart)
				command.Parameters.AddWithValue("@p_Quantity", quantity)
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function CartUpdate(ByVal cartId As Integer, ByVal itemId As String, ByVal name As String, ByVal type As String, ByVal price As Decimal, ByVal categoryId As String, ByVal productId As String, ByVal isShoppingCart As Boolean, ByVal quantity As Integer, ByVal uniqueID As Integer) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Cart]  SET [ItemId] = @p_ItemId, [Name] = @p_Name, [Type] = @p_Type, [Price] = @p_Price, [CategoryId] = @p_CategoryId, [ProductId] = @p_ProductId, [IsShoppingCart] = @p_IsShoppingCart, [Quantity] = @p_Quantity, [UniqueID] = @p_UniqueID WHERE [CartId] = @p_CartId"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_CartId", cartId)
				command.Parameters.AddWithValue("@p_ItemId", itemId)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Type", type)
				command.Parameters.AddWithValue("@p_Price", price)
				command.Parameters.AddWithValue("@p_CategoryId", categoryId)
				command.Parameters.AddWithValue("@p_ProductId", productId)
				command.Parameters.AddWithValue("@p_IsShoppingCart", isShoppingCart)
				command.Parameters.AddWithValue("@p_Quantity", quantity)
				command.Parameters.AddWithValue("@p_UniqueID", uniqueID)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function CartFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [CartId], [ItemId], [Name], [Type], [Price], [CategoryId], [ProductId], [IsShoppingCart], [Quantity], [UniqueID] FROM [dbo].[Cart] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function CartDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Cart] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "Category"
        
        #Region "Insert"
        
        Public Overridable Function CategoryInsert(ByVal categoryId As String, ByVal name As String, ByVal descn As String) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Category] ([CategoryId], [Name], [Descn]) VALUES (@p_CategoryId, @p_Name, @p_Descn)"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_CategoryId", categoryId)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Descn", descn)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function CategoryUpdate(ByVal categoryId As String, ByVal name As String, ByVal descn As String) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Category]  SET [Name] = @p_Name, [Descn] = @p_Descn WHERE [CategoryId] = @p_CategoryId"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_CategoryId", categoryId)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Descn", descn)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function CategoryFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [CategoryId], [Name], [Descn] FROM [dbo].[Category] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function CategoryDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Category] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "Inventory"
        
        #Region "Insert"
        
        Public Overridable Function InventoryInsert(ByVal itemId As String, ByVal qty As Integer) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Inventory] ([ItemId], [Qty]) VALUES (@p_ItemId, @p_Qty)"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_ItemId", itemId)
				command.Parameters.AddWithValue("@p_Qty", qty)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function InventoryUpdate(ByVal itemId As String, ByVal qty As Integer) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Inventory]  SET [Qty] = @p_Qty WHERE [ItemId] = @p_ItemId"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_ItemId", itemId)
				command.Parameters.AddWithValue("@p_Qty", qty)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function InventoryFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [ItemId], [Qty] FROM [dbo].[Inventory] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function InventoryDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Inventory] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "Item"
        
        #Region "Insert"
        
        Public Overridable Function ItemInsert(ByVal itemId As String, ByVal listPrice As System.Nullable(Of Decimal), ByVal unitCost As System.Nullable(Of Decimal), ByVal status As String, ByVal name As String, ByVal image As String, ByVal productId As String, ByVal supplier As Integer) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Item] ([ItemId], [ListPrice], [UnitCost], [Status], [Name], [Image], [ProductId], [Supplier]) VALUES (@p_ItemId, @p_ListPrice, @p_UnitCost, @p_Status, @p_Name, @p_Image, @p_ProductId, @p_Supplier)"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_ItemId", itemId)
				command.Parameters.AddWithValue("@p_ListPrice", listPrice)
				command.Parameters.AddWithValue("@p_UnitCost", unitCost)
				command.Parameters.AddWithValue("@p_Status", status)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Image", image)
				command.Parameters.AddWithValue("@p_ProductId", productId)
				command.Parameters.AddWithValue("@p_Supplier", supplier)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function ItemUpdate(ByVal itemId As String, ByVal listPrice As System.Nullable(Of Decimal), ByVal unitCost As System.Nullable(Of Decimal), ByVal status As String, ByVal name As String, ByVal image As String, ByVal productId As String, ByVal supplier As Integer) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Item]  SET [ListPrice] = @p_ListPrice, [UnitCost] = @p_UnitCost, [Status] = @p_Status, [Name] = @p_Name, [Image] = @p_Image, [ProductId] = @p_ProductId, [Supplier] = @p_Supplier WHERE [ItemId] = @p_ItemId"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_ItemId", itemId)
				command.Parameters.AddWithValue("@p_ListPrice", listPrice)
				command.Parameters.AddWithValue("@p_UnitCost", unitCost)
				command.Parameters.AddWithValue("@p_Status", status)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Image", image)
				command.Parameters.AddWithValue("@p_ProductId", productId)
				command.Parameters.AddWithValue("@p_Supplier", supplier)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function ItemFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [ItemId], [ListPrice], [UnitCost], [Status], [Name], [Image], [ProductId], [Supplier] FROM [dbo].[Item] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function ItemDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Item] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "LineItem"
        
        #Region "Insert"
        
        Public Overridable Function LineItemInsert(ByVal orderId As Integer, ByVal lineNum As Integer, ByVal itemId As String, ByVal quantity As Integer, ByVal unitPrice As Decimal) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[LineItem] ([OrderId], [LineNum], [ItemId], [Quantity], [UnitPrice]) VALUES (@p_OrderId, @p_LineNum, @p_ItemId, @p_Quantity, @p_UnitPrice)"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_OrderId", orderId)
				command.Parameters.AddWithValue("@p_LineNum", lineNum)
				command.Parameters.AddWithValue("@p_ItemId", itemId)
				command.Parameters.AddWithValue("@p_Quantity", quantity)
				command.Parameters.AddWithValue("@p_UnitPrice", unitPrice)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function LineItemUpdate(ByVal orderId As Integer, ByVal lineNum As Integer, ByVal itemId As String, ByVal quantity As Integer, ByVal unitPrice As Decimal) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[LineItem]  SET [ItemId] = @p_ItemId, [Quantity] = @p_Quantity, [UnitPrice] = @p_UnitPrice WHERE [OrderId] = @p_OrderId AND [LineNum] = @p_LineNum"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_OrderId", orderId)
				command.Parameters.AddWithValue("@p_LineNum", lineNum)
				command.Parameters.AddWithValue("@p_ItemId", itemId)
				command.Parameters.AddWithValue("@p_Quantity", quantity)
				command.Parameters.AddWithValue("@p_UnitPrice", unitPrice)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function LineItemFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [OrderId], [LineNum], [ItemId], [Quantity], [UnitPrice] FROM [dbo].[LineItem] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function LineItemDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[LineItem] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "Order"
        
        #Region "Insert"
        
        Public Overridable Function OrderInsert(ByVal userId As String, ByVal orderDate As SmartDate, ByVal shipAddr1 As String, ByVal shipAddr2 As String, ByVal shipCity As String, ByVal shipState As String, ByVal shipZip As String, ByVal shipCountry As String, ByVal billAddr1 As String, ByVal billAddr2 As String, ByVal billCity As String, ByVal billState As String, ByVal billZip As String, ByVal billCountry As String, ByVal courier As String, ByVal totalPrice As Decimal, ByVal billToFirstName As String, ByVal billToLastName As String, ByVal shipToFirstName As String, ByVal shipToLastName As String, ByVal authorizationNumber As Integer, ByVal locale As String) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Orders] ([UserId], [OrderDate], [ShipAddr1], [ShipAddr2], [ShipCity], [ShipState], [ShipZip], [ShipCountry], [BillAddr1], [BillAddr2], [BillCity], [BillState], [BillZip], [BillCountry], [Courier], [TotalPrice], [BillToFirstName], [BillToLastName], [ShipToFirstName], [ShipToLastName], [AuthorizationNumber], [Locale]) VALUES (@p_UserId, @p_OrderDate, @p_ShipAddr1, @p_ShipAddr2, @p_ShipCity, @p_ShipState, @p_ShipZip, @p_ShipCountry, @p_BillAddr1, @p_BillAddr2, @p_BillCity, @p_BillState, @p_BillZip, @p_BillCountry, @p_Courier, @p_TotalPrice, @p_BillToFirstName, @p_BillToLastName, @p_ShipToFirstName, @p_ShipToLastName, @p_AuthorizationNumber, @p_Locale); SELECT [OrderId] FROM [dbo].[Orders] WHERE OrderId = SCOPE_IDENTITY()"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_UserId", userId)
				command.Parameters.AddWithValue("@p_OrderDate", DirectCast(orderDate.Date, DateTime))
				command.Parameters.AddWithValue("@p_ShipAddr1", shipAddr1)
				command.Parameters.AddWithValue("@p_ShipAddr2", shipAddr2)
				command.Parameters.AddWithValue("@p_ShipCity", shipCity)
				command.Parameters.AddWithValue("@p_ShipState", shipState)
				command.Parameters.AddWithValue("@p_ShipZip", shipZip)
				command.Parameters.AddWithValue("@p_ShipCountry", shipCountry)
				command.Parameters.AddWithValue("@p_BillAddr1", billAddr1)
				command.Parameters.AddWithValue("@p_BillAddr2", billAddr2)
				command.Parameters.AddWithValue("@p_BillCity", billCity)
				command.Parameters.AddWithValue("@p_BillState", billState)
				command.Parameters.AddWithValue("@p_BillZip", billZip)
				command.Parameters.AddWithValue("@p_BillCountry", billCountry)
				command.Parameters.AddWithValue("@p_Courier", courier)
				command.Parameters.AddWithValue("@p_TotalPrice", totalPrice)
				command.Parameters.AddWithValue("@p_BillToFirstName", billToFirstName)
				command.Parameters.AddWithValue("@p_BillToLastName", billToLastName)
				command.Parameters.AddWithValue("@p_ShipToFirstName", shipToFirstName)
				command.Parameters.AddWithValue("@p_ShipToLastName", shipToLastName)
				command.Parameters.AddWithValue("@p_AuthorizationNumber", authorizationNumber)
				command.Parameters.AddWithValue("@p_Locale", locale)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function OrderUpdate(ByVal orderId As Integer, ByVal userId As String, ByVal orderDate As SmartDate, ByVal shipAddr1 As String, ByVal shipAddr2 As String, ByVal shipCity As String, ByVal shipState As String, ByVal shipZip As String, ByVal shipCountry As String, ByVal billAddr1 As String, ByVal billAddr2 As String, ByVal billCity As String, ByVal billState As String, ByVal billZip As String, ByVal billCountry As String, ByVal courier As String, ByVal totalPrice As Decimal, ByVal billToFirstName As String, ByVal billToLastName As String, ByVal shipToFirstName As String, ByVal shipToLastName As String, ByVal authorizationNumber As Integer, ByVal locale As String) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Orders]  SET [UserId] = @p_UserId, [OrderDate] = @p_OrderDate, [ShipAddr1] = @p_ShipAddr1, [ShipAddr2] = @p_ShipAddr2, [ShipCity] = @p_ShipCity, [ShipState] = @p_ShipState, [ShipZip] = @p_ShipZip, [ShipCountry] = @p_ShipCountry, [BillAddr1] = @p_BillAddr1, [BillAddr2] = @p_BillAddr2, [BillCity] = @p_BillCity, [BillState] = @p_BillState, [BillZip] = @p_BillZip, [BillCountry] = @p_BillCountry, [Courier] = @p_Courier, [TotalPrice] = @p_TotalPrice, [BillToFirstName] = @p_BillToFirstName, [BillToLastName] = @p_BillToLastName, [ShipToFirstName] = @p_ShipToFirstName, [ShipToLastName] = @p_ShipToLastName, [AuthorizationNumber] = @p_AuthorizationNumber, [Locale] = @p_Locale WHERE [OrderId] = @p_OrderId"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_OrderId", orderId)
				command.Parameters.AddWithValue("@p_UserId", userId)
				command.Parameters.AddWithValue("@p_OrderDate", DirectCast(orderDate.Date, DateTime))
				command.Parameters.AddWithValue("@p_ShipAddr1", shipAddr1)
				command.Parameters.AddWithValue("@p_ShipAddr2", shipAddr2)
				command.Parameters.AddWithValue("@p_ShipCity", shipCity)
				command.Parameters.AddWithValue("@p_ShipState", shipState)
				command.Parameters.AddWithValue("@p_ShipZip", shipZip)
				command.Parameters.AddWithValue("@p_ShipCountry", shipCountry)
				command.Parameters.AddWithValue("@p_BillAddr1", billAddr1)
				command.Parameters.AddWithValue("@p_BillAddr2", billAddr2)
				command.Parameters.AddWithValue("@p_BillCity", billCity)
				command.Parameters.AddWithValue("@p_BillState", billState)
				command.Parameters.AddWithValue("@p_BillZip", billZip)
				command.Parameters.AddWithValue("@p_BillCountry", billCountry)
				command.Parameters.AddWithValue("@p_Courier", courier)
				command.Parameters.AddWithValue("@p_TotalPrice", totalPrice)
				command.Parameters.AddWithValue("@p_BillToFirstName", billToFirstName)
				command.Parameters.AddWithValue("@p_BillToLastName", billToLastName)
				command.Parameters.AddWithValue("@p_ShipToFirstName", shipToFirstName)
				command.Parameters.AddWithValue("@p_ShipToLastName", shipToLastName)
				command.Parameters.AddWithValue("@p_AuthorizationNumber", authorizationNumber)
				command.Parameters.AddWithValue("@p_Locale", locale)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function OrderFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [OrderId], [UserId], [OrderDate], [ShipAddr1], [ShipAddr2], [ShipCity], [ShipState], [ShipZip], [ShipCountry], [BillAddr1], [BillAddr2], [BillCity], [BillState], [BillZip], [BillCountry], [Courier], [TotalPrice], [BillToFirstName], [BillToLastName], [ShipToFirstName], [ShipToLastName], [AuthorizationNumber], [Locale] FROM [dbo].[Orders] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function OrderDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Orders] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "OrderStatus"
        
        #Region "Insert"
        
        Public Overridable Function OrderStatusInsert(ByVal orderId As Integer, ByVal lineNum As Integer, ByVal timestamp As SmartDate, ByVal status As String) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[OrderStatus] ([OrderId], [LineNum], [Timestamp], [Status]) VALUES (@p_OrderId, @p_LineNum, @p_Timestamp, @p_Status)"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_OrderId", orderId)
				command.Parameters.AddWithValue("@p_LineNum", lineNum)
				command.Parameters.AddWithValue("@p_Timestamp", DirectCast(timestamp.Date, DateTime))
				command.Parameters.AddWithValue("@p_Status", status)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function OrderStatusUpdate(ByVal orderId As Integer, ByVal lineNum As Integer, ByVal timestamp As SmartDate, ByVal status As String) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[OrderStatus]  SET [Timestamp] = @p_Timestamp, [Status] = @p_Status WHERE [OrderId] = @p_OrderId AND [LineNum] = @p_LineNum"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_OrderId", orderId)
				command.Parameters.AddWithValue("@p_LineNum", lineNum)
				command.Parameters.AddWithValue("@p_Timestamp", DirectCast(timestamp.Date, DateTime))
				command.Parameters.AddWithValue("@p_Status", status)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function OrderStatusFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [OrderId], [LineNum], [Timestamp], [Status] FROM [dbo].[OrderStatus] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function OrderStatusDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[OrderStatus] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "Product"
        
        #Region "Insert"
        
        Public Overridable Function ProductInsert(ByVal productId As String, ByVal name As String, ByVal descn As String, ByVal image As String, ByVal categoryId As String) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Product] ([ProductId], [Name], [Descn], [Image], [CategoryId]) VALUES (@p_ProductId, @p_Name, @p_Descn, @p_Image, @p_CategoryId)"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_ProductId", productId)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Descn", descn)
				command.Parameters.AddWithValue("@p_Image", image)
				command.Parameters.AddWithValue("@p_CategoryId", categoryId)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function ProductUpdate(ByVal productId As String, ByVal name As String, ByVal descn As String, ByVal image As String, ByVal categoryId As String) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Product]  SET [Name] = @p_Name, [Descn] = @p_Descn, [Image] = @p_Image, [CategoryId] = @p_CategoryId, [ProductId] = @p_ProductId WHERE [ProductId] = @p_ProductId"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_ProductId", productId)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Descn", descn)
				command.Parameters.AddWithValue("@p_Image", image)
				command.Parameters.AddWithValue("@p_CategoryId", categoryId)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function ProductFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [ProductId], [Name], [Descn], [Image], [CategoryId], [ProductId] FROM [dbo].[Product] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function ProductDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Product] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "Profile"
        
        #Region "Insert"
        
        Public Overridable Function ProfileInsert(ByVal username As String, ByVal applicationName As String, ByVal isAnonymous As System.Nullable(Of Boolean), ByVal lastActivityDate As System.Nullable(Of SmartDate), ByVal lastUpdatedDate As System.Nullable(Of SmartDate)) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Profiles] ([Username], [ApplicationName], [IsAnonymous], [LastActivityDate], [LastUpdatedDate]) VALUES (@p_Username, @p_ApplicationName, @p_IsAnonymous, @p_LastActivityDate, @p_LastUpdatedDate); SELECT [UniqueID] FROM [dbo].[Profiles] WHERE UniqueID = SCOPE_IDENTITY()"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_Username", username)
				command.Parameters.AddWithValue("@p_ApplicationName", applicationName)
				command.Parameters.AddWithValue("@p_IsAnonymous", isAnonymous)
				command.Parameters.AddWithValue("@p_LastActivityDate", IIf(lastActivityDate.HasValue, DirectCast(lastActivityDate.Value.Date, DateTime), System.DBNull.Value))
				command.Parameters.AddWithValue("@p_LastUpdatedDate", IIf(lastUpdatedDate.HasValue, DirectCast(lastUpdatedDate.Value.Date, DateTime), System.DBNull.Value))
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function ProfileUpdate(ByVal uniqueID As Integer, ByVal username As String, ByVal applicationName As String, ByVal isAnonymous As System.Nullable(Of Boolean), ByVal lastActivityDate As System.Nullable(Of SmartDate), ByVal lastUpdatedDate As System.Nullable(Of SmartDate)) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Profiles]  SET [Username] = @p_Username, [ApplicationName] = @p_ApplicationName, [IsAnonymous] = @p_IsAnonymous, [LastActivityDate] = @p_LastActivityDate, [LastUpdatedDate] = @p_LastUpdatedDate WHERE [UniqueID] = @p_UniqueID"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_UniqueID", uniqueID)
				command.Parameters.AddWithValue("@p_Username", username)
				command.Parameters.AddWithValue("@p_ApplicationName", applicationName)
				command.Parameters.AddWithValue("@p_IsAnonymous", isAnonymous)
				command.Parameters.AddWithValue("@p_LastActivityDate", IIf(lastActivityDate.HasValue, DirectCast(lastActivityDate.Value.Date, DateTime), System.DBNull.Value))
				command.Parameters.AddWithValue("@p_LastUpdatedDate", IIf(lastUpdatedDate.HasValue, DirectCast(lastUpdatedDate.Value.Date, DateTime), System.DBNull.Value))
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function ProfileFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [UniqueID], [Username], [ApplicationName], [IsAnonymous], [LastActivityDate], [LastUpdatedDate] FROM [dbo].[Profiles] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function ProfileDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Profiles] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #Region "Supplier"
        
        #Region "Insert"
        
        Public Overridable Function SupplierInsert(ByVal suppId As Integer, ByVal name As String, ByVal status As String, ByVal addr1 As String, ByVal addr2 As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal phone As String) As SafeDataReader
            Const commandText As String = "INSERT INTO [dbo].[Supplier] ([SuppId], [Name], [Status], [Addr1], [Addr2], [City], [State], [Zip], [Phone]) VALUES (@p_SuppId, @p_Name, @p_Status, @p_Addr1, @p_Addr2, @p_City, @p_State, @p_Zip, @p_Phone)"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_SuppId", suppId)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Status", status)
				command.Parameters.AddWithValue("@p_Addr1", addr1)
				command.Parameters.AddWithValue("@p_Addr2", addr2)
				command.Parameters.AddWithValue("@p_City", city)
				command.Parameters.AddWithValue("@p_State", state)
				command.Parameters.AddWithValue("@p_Zip", zip)
				command.Parameters.AddWithValue("@p_Phone", phone)
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
        Public Overridable Function SupplierUpdate(ByVal suppId As Integer, ByVal name As String, ByVal status As String, ByVal addr1 As String, ByVal addr2 As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal phone As String) As SafeDataReader
            Const commandText As String = "UPDATE [dbo].[Supplier]  SET [Name] = @p_Name, [Status] = @p_Status, [Addr1] = @p_Addr1, [Addr2] = @p_Addr2, [City] = @p_City, [State] = @p_State, [Zip] = @p_Zip, [Phone] = @p_Phone WHERE [SuppId] = @p_SuppId"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddWithValue("@p_SuppId", suppId)
				command.Parameters.AddWithValue("@p_Name", name)
				command.Parameters.AddWithValue("@p_Status", status)
				command.Parameters.AddWithValue("@p_Addr1", addr1)
				command.Parameters.AddWithValue("@p_Addr2", addr2)
				command.Parameters.AddWithValue("@p_City", city)
				command.Parameters.AddWithValue("@p_State", state)
				command.Parameters.AddWithValue("@p_Zip", zip)
				command.Parameters.AddWithValue("@p_Phone", phone)
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function SupplierFetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("SELECT [SuppId], [Name], [Status], [Addr1], [Addr2], [City], [State], [Zip], [Phone] FROM [dbo].[Supplier] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function SupplierDelete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [dbo].[Supplier] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
        #End Region
        
    End Class

End NameSpace