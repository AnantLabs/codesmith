'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v5.2.1, CSLA Templates: v1.5.0.0, CSLA Framework: v3.8.0.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Product.vb.
'
'     Template: SwitchableObject.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Validation

<Serializable()> _
Public Partial Class Product 
    Inherits BusinessBase(Of Product)

    #Region "Contructor(s)"

    Private Sub New()
        ' require use of factory method 
    End Sub

    Private Sub New(ByVal productId As System.String)
        Using(BypassPropertyChecks)
           LoadProperty(_productIdProperty, productId)
        End Using
    End Sub

    Friend Sub New(Byval reader As SafeDataReader)
        Map(reader)
    End Sub

    #End Region
    #Region "Validation Rules"

    Protected Overrides Sub AddBusinessRules()

        If AddBusinessValidationRules() Then Exit Sub

        ValidationRules.AddRule(AddressOf CommonRules.StringRequired, _productIdProperty)
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_productIdProperty, 10))
        ValidationRules.AddRule(AddressOf CommonRules.StringRequired, _categoryIdProperty)
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_categoryIdProperty, 10))
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_nameProperty, 80))
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_descriptionProperty, 255))
        ValidationRules.AddRule(AddressOf CommonRules.StringMaxLength, New CommonRules.MaxLengthRuleArgs(_imageProperty, 80))
    End Sub

    #End Region

    #Region "Properties"

    
    Private Shared ReadOnly _productIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.ProductId)
		<System.ComponentModel.DataObjectField(true, false)> _
    Public Property ProductId() As System.String
        Get 
            Return GetProperty(_productIdProperty)
        End Get
        Set (ByVal value As System.String)
            SetProperty(_productIdProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _categoryIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.CategoryId)
    Public Property CategoryId() As System.String
        Get 
            Return GetProperty(_categoryIdProperty)
        End Get
        Set (ByVal value As System.String)
            SetProperty(_categoryIdProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _nameProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.Name)
    Public Property Name() As System.String
        Get 
            Return GetProperty(_nameProperty)
        End Get
        Set (ByVal value As System.String)
            SetProperty(_nameProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _descriptionProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.Description)
    Public Property Description() As System.String
        Get 
            Return GetProperty(_descriptionProperty)
        End Get
        Set (ByVal value As System.String)
            SetProperty(_descriptionProperty, value)
        End Set
    End Property
    
    
    Private Shared ReadOnly _imageProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.Image)
    Public Property Image() As System.String
        Get 
            Return GetProperty(_imageProperty)
        End Get
        Set (ByVal value As System.String)
            SetProperty(_imageProperty, value)
        End Set
    End Property
    
    'ManyToOne
    Private Shared ReadOnly _categoryMemberProperty As PropertyInfo(Of Category) = RegisterProperty(Of Category)(Function(p As Product) p.CategoryMember, Csla.RelationshipTypes.Child)
    Public ReadOnly Property CategoryMember() As Category
        Get
            If Not(FieldManager.FieldExists(_categoryMemberProperty))
                Dim criteria As New PetShop.Business.CategoryCriteria()
                criteria.CategoryId = CategoryId
                
                If (Me.IsNew Or Not PetShop.Business.Category.Exists(criteria)) Then
                    LoadProperty(_categoryMemberProperty, PetShop.Business.Category.NewCategory())
                Else
                    LoadProperty(_categoryMemberProperty, PetShop.Business.Category.GetByCategoryId(CategoryId))
                End If
            End If
            
            Return GetProperty(_categoryMemberProperty) 
        End Get
    End Property
    
    'OneToMany
    Private Shared ReadOnly _itemsProperty As PropertyInfo(Of ItemList) = RegisterProperty(Of ItemList)(Function(p As Product) p.Items, Csla.RelationshipTypes.Child)
Public ReadOnly Property Items() As ItemList 
        Get
            If Not (FieldManager.FieldExists(_itemsProperty)) Then
                Dim criteria As New PetShop.Business.ItemCriteria()
                criteria.ProductId = ProductId
                
                If (Me.IsNew Or Not PetShop.Business.ItemList.Exists(criteria)) Then
                    LoadProperty(_itemsProperty, PetShop.Business.ItemList.NewList())
                Else
                    LoadProperty(_itemsProperty, PetShop.Business.ItemList.GetByProductId(ProductId))
                End If
            End If
            
            Return GetProperty(_itemsProperty) 
        End Get
    End Property
    
    #End Region

    #Region "Root Factory Methods"

    Public Shared Function NewProduct() As Product 
        Return DataPortal.Create(Of Product)()
    End Function

    Public Shared Function GetByProductId(ByVal productId As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.ProductId = productId

        Return DataPortal.Fetch(Of Product)(criteria)
    End Function

    Public Shared Function GetByName(ByVal name As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.Name = name

        Return DataPortal.Fetch(Of Product)(criteria)
    End Function

    Public Shared Function GetByCategoryId(ByVal categoryId As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.CategoryId = categoryId

        Return DataPortal.Fetch(Of Product)(criteria)
    End Function

    Public Shared Function GetByCategoryIdName(ByVal categoryId As System.String, ByVal name As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.CategoryId = categoryId
		criteria.Name = name

        Return DataPortal.Fetch(Of Product)(criteria)
    End Function

    Public Shared Function GetByCategoryIdProductIdName(ByVal categoryId As System.String, ByVal productId As System.String, ByVal name As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.CategoryId = categoryId
		criteria.ProductId = productId
		criteria.Name = name

        Return DataPortal.Fetch(Of Product)(criteria)
    End Function

    Public Shared Sub DeleteProduct(ByVal productId As System.String)
        DataPortal.Delete(New ProductCriteria (productId))
    End Sub

    #End Region

    #Region "Child Factory Methods"

    Friend Shared Function NewProductChild() As Product
        Return DataPortal.CreateChild(Of Product)()
    End Function

    Friend Shared Function GetByProductIdChild(ByVal productId As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.ProductId = productId

        Return DataPortal.FetchChild(Of Product)(criteria)
    End Function

    Friend Shared Function GetByNameChild(ByVal name As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.Name = name

        Return DataPortal.FetchChild(Of Product)(criteria)
    End Function

    Friend Shared Function GetByCategoryIdChild(ByVal categoryId As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.CategoryId = categoryId

        Return DataPortal.FetchChild(Of Product)(criteria)
    End Function

    Friend Shared Function GetByCategoryIdNameChild(ByVal categoryId As System.String, ByVal name As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.CategoryId = categoryId
        criteria.Name = name

        Return DataPortal.FetchChild(Of Product)(criteria)
    End Function

    Friend Shared Function GetByCategoryIdProductIdNameChild(ByVal categoryId As System.String, ByVal productId As System.String, ByVal name As System.String) As Product 
        Dim criteria As New ProductCriteria ()
        criteria.CategoryId = categoryId
        criteria.ProductId = productId
        criteria.Name = name

        Return DataPortal.FetchChild(Of Product)(criteria)
    End Function

    #End Region

    #Region "Exists Command"

    Public Shared Function Exists(ByVal criteria As ProductCriteria ) As Boolean
        Return ExistsCommand.Execute(criteria)
    End Function

    #End Region


End Class