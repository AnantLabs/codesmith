//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Linq;

namespace PetShop.Core.Data
{
    /// <summary>
    /// The query extension class for LineItem.
    /// </summary>
    public static partial class LineItemExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static PetShop.Core.Data.LineItem ByKey(this IQueryable<PetShop.Core.Data.LineItem> queryable, int orderId, int lineNum)
        {
            var entity = queryable as System.Data.Linq.Table<PetShop.Core.Data.LineItem>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.ByKey.Invoke((PetShop.Core.Data.PetShopDataContext)entity.Context, orderId, lineNum);
            
            return queryable.FirstOrDefault(l => l.OrderId == orderId 
					&& l.LineNum == lineNum);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<PetShop.Core.Data.LineItem> table, int orderId, int lineNum)
        {
            return table.Delete(l => l.OrderId == orderId 
					&& l.LineNum == lineNum);
        }
        
        /// <summary>
        /// Gets a query for <see cref="LineItem.ItemId"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.LineItem> ByItemId(this IQueryable<PetShop.Core.Data.LineItem> queryable, string itemId)
        {
            return queryable.Where(l => l.ItemId == itemId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="LineItem.Quantity"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.LineItem> ByQuantity(this IQueryable<PetShop.Core.Data.LineItem> queryable, int quantity)
        {
            return queryable.Where(l => l.Quantity == quantity);
        }
        
        /// <summary>
        /// Gets a query for <see cref="LineItem.UnitPrice"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.LineItem> ByUnitPrice(this IQueryable<PetShop.Core.Data.LineItem> queryable, decimal unitPrice)
        {
            return queryable.Where(l => l.UnitPrice == unitPrice);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<PetShop.Core.Data.PetShopDataContext, int, int, PetShop.Core.Data.LineItem> ByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (PetShop.Core.Data.PetShopDataContext db, int orderId, int lineNum) => 
                        db.LineItem.FirstOrDefault(l => l.OrderId == orderId 
							&& l.LineNum == lineNum));

        }
        #endregion
    }
}

