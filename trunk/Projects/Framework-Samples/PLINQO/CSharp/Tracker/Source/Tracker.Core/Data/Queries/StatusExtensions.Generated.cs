//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Linq;

namespace Tracker.Core.Data
{
    /// <summary>
    /// The query extension class for Status.
    /// </summary>
    public static partial class StatusExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static Tracker.Core.Data.Status ByKey(this IQueryable<Tracker.Core.Data.Status> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<Tracker.Core.Data.Status>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.ByKey.Invoke((Tracker.Core.Data.TrackerDataContext)entity.Context, id);
            
            return queryable.FirstOrDefault(s => s.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<Tracker.Core.Data.Status> table, int id)
        {
            return table.Delete(s => s.Id == id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Status.Name"/>.
        /// </summary>
        public static IQueryable<Tracker.Core.Data.Status> ByName(this IQueryable<Tracker.Core.Data.Status> queryable, string name)
        {
            return queryable.Where(s => s.Name == name);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Status.Description"/>.
        /// </summary>
        public static IQueryable<Tracker.Core.Data.Status> ByDescription(this IQueryable<Tracker.Core.Data.Status> queryable, string description)
        {
            return queryable.Where(s => object.Equals(s.Description, description));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Status.Order"/>.
        /// </summary>
        public static IQueryable<Tracker.Core.Data.Status> ByOrder(this IQueryable<Tracker.Core.Data.Status> queryable, int order)
        {
            return queryable.Where(s => s.Order == order);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Status.CreatedDate"/>.
        /// </summary>
        public static IQueryable<Tracker.Core.Data.Status> ByCreatedDate(this IQueryable<Tracker.Core.Data.Status> queryable, System.DateTime createdDate)
        {
            return queryable.Where(s => s.CreatedDate == createdDate);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Status.ModifiedDate"/>.
        /// </summary>
        public static IQueryable<Tracker.Core.Data.Status> ByModifiedDate(this IQueryable<Tracker.Core.Data.Status> queryable, System.DateTime modifiedDate)
        {
            return queryable.Where(s => s.ModifiedDate == modifiedDate);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<Tracker.Core.Data.TrackerDataContext, int, Tracker.Core.Data.Status> ByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Tracker.Core.Data.TrackerDataContext db, int id) => 
                        db.Status.FirstOrDefault(s => s.Id == id));

        }
        #endregion
    }
}

