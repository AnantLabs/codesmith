//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace Tracker.Core.Data
{
    /// <summary>
    /// The class representing the dbo.TaskExtended table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.TaskExtended")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(Metadata))]
    [System.Data.Services.Common.DataServiceKey("TaskId")]
    [System.Diagnostics.DebuggerDisplay("TaskId: {TaskId}")]
    public partial class TaskExtended
        : LinqEntityBase, ICloneable
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="TaskExtended"/> class.
        /// </summary>
        static TaskExtended()
        {
            CodeSmith.Data.Rules.RuleManager.AddShared<TaskExtended>();
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExtended"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public TaskExtended()
        {
            OnCreated();
            Initialize();
        }

        private void Initialize()
        {
            _task = default(System.Data.Linq.EntityRef<Task>);
        }
        #endregion

        #region Column Mapped Properties

        private int _taskId;

        /// <summary>
        /// Gets or sets the TaskId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "TaskId", Storage = "_taskId", DbType = "int NOT NULL", IsPrimaryKey = true, CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        public int TaskId
        {
            get { return _taskId; }
            set
            {
                if (_taskId != value)
                {
                    if (_task.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnTaskIdChanging(value);
                    SendPropertyChanging("TaskId");
                    _taskId = value;
                    SendPropertyChanged("TaskId");
                    OnTaskIdChanged();
                }
            }
        }

        private string _browser;

        /// <summary>
        /// Gets or sets the Browser column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Browser", Storage = "_browser", DbType = "nvarchar(200)", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        public string Browser
        {
            get { return _browser; }
            set
            {
                if (_browser != value)
                {
                    OnBrowserChanging(value);
                    SendPropertyChanging("Browser");
                    _browser = value;
                    SendPropertyChanged("Browser");
                    OnBrowserChanged();
                }
            }
        }

        private string _os;

        /// <summary>
        /// Gets or sets the OS column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "OS", Storage = "_os", DbType = "nvarchar(150)", UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        public string Os
        {
            get { return _os; }
            set
            {
                if (_os != value)
                {
                    OnOsChanging(value);
                    SendPropertyChanging("Os");
                    _os = value;
                    SendPropertyChanged("Os");
                    OnOsChanged();
                }
            }
        }

        private System.DateTime _createdDate;

        /// <summary>
        /// Gets or sets the CreatedDate column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "CreatedDate", Storage = "_createdDate", DbType = "datetime NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        public System.DateTime CreatedDate
        {
            get { return _createdDate; }
            set
            {
                if (_createdDate != value)
                {
                    OnCreatedDateChanging(value);
                    SendPropertyChanging("CreatedDate");
                    _createdDate = value;
                    SendPropertyChanged("CreatedDate");
                    OnCreatedDateChanged();
                }
            }
        }

        private System.DateTime _modifiedDate;

        /// <summary>
        /// Gets or sets the ModifiedDate column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "ModifiedDate", Storage = "_modifiedDate", DbType = "datetime NOT NULL", CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 5)]
        public System.DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    OnModifiedDateChanging(value);
                    SendPropertyChanging("ModifiedDate");
                    _modifiedDate = value;
                    SendPropertyChanged("ModifiedDate");
                    OnModifiedDateChanged();
                }
            }
        }

        private System.Data.Linq.Binary _rowVersion = default(System.Data.Linq.Binary);

        /// <summary>
        /// Gets the RowVersion column value.
        /// </summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Data.Linq.Mapping.Column(Name = "RowVersion", Storage = "_rowVersion", DbType = "timestamp NOT NULL", IsDbGenerated = true, IsVersion = true, CanBeNull = false, UpdateCheck = System.Data.Linq.Mapping.UpdateCheck.Never)]
        [System.Runtime.Serialization.DataMember(Order = 6)]
        public System.Data.Linq.Binary RowVersion
        {
            get { return _rowVersion; }
            set
            {
                if (_rowVersion != value)
                {
                    OnRowVersionChanging(value);
                    SendPropertyChanging("RowVersion");
                    _rowVersion = value;
                    SendPropertyChanged("RowVersion");
                    OnRowVersionChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties

        private System.Data.Linq.EntityRef<Task> _task;

        /// <summary>
        /// Gets or sets the Task association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "Task_TaskExtended", Storage = "_task", ThisKey = "TaskId", OtherKey = "Id", IsUnique = true, IsForeignKey = true)]
        [System.Runtime.Serialization.DataMember(Order = 7, EmitDefaultValue = false)]
        public Task Task
        {
            get { return (serializing && !_task.HasLoadedOrAssignedValue) ? null : _task.Entity; }
            set
            {
                Task previousValue = _task.Entity;
                if (previousValue != value || _task.HasLoadedOrAssignedValue == false)
                {
                    OnTaskChanging(value);
                    SendPropertyChanging("Task");
                    if (previousValue != null)
                    {
                        _task.Entity = null;
                        previousValue.TaskExtended = null;
                    }
                    _task.Entity = value;
                    if (value != null)
                    {
                        value.TaskExtended = this;
                        _taskId = value.Id;
                    }
                    else
                    {
                        _taskId = default(int);
                    }
                    SendPropertyChanged("Task");
                    OnTaskChanged();
                }
            }
        }
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when <see cref="TaskId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTaskIdChanging(int value);
        /// <summary>Called after <see cref="TaskId"/> has Changed.</summary>
        partial void OnTaskIdChanged();
        /// <summary>Called when <see cref="Browser"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnBrowserChanging(string value);
        /// <summary>Called after <see cref="Browser"/> has Changed.</summary>
        partial void OnBrowserChanged();
        /// <summary>Called when <see cref="Os"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnOsChanging(string value);
        /// <summary>Called after <see cref="Os"/> has Changed.</summary>
        partial void OnOsChanged();
        /// <summary>Called when <see cref="CreatedDate"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCreatedDateChanging(System.DateTime value);
        /// <summary>Called after <see cref="CreatedDate"/> has Changed.</summary>
        partial void OnCreatedDateChanged();
        /// <summary>Called when <see cref="ModifiedDate"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnModifiedDateChanging(System.DateTime value);
        /// <summary>Called after <see cref="ModifiedDate"/> has Changed.</summary>
        partial void OnModifiedDateChanged();
        /// <summary>Called when <see cref="RowVersion"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnRowVersionChanging(System.Data.Linq.Binary value);
        /// <summary>Called after <see cref="RowVersion"/> has Changed.</summary>
        partial void OnRowVersionChanged();
        /// <summary>Called when <see cref="Task"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTaskChanging(Task value);
        /// <summary>Called after <see cref="Task"/> has Changed.</summary>
        partial void OnTaskChanged();

        #endregion

        #region Serialization
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        public TaskExtended Clone()
        {
            return (TaskExtended)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
            _task = Detach(_task);
        }
        #endregion
    }
}

