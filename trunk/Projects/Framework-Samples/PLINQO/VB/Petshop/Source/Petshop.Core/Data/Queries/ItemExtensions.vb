
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Item.
    ''' </summary>
    Public Module ItemExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal itemId As String) As PetShop.Core.Data.Item

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Item) = CType(queryable, Table(Of PetShop.Core.Data.Item))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), itemId)
            End If

            Return queryable.FirstOrDefault(Function(i)i.ItemId = itemId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Item), ByVal itemId As String) As Integer
            Return table.Delete(Function(i)i.ItemId = itemId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByItemId(queryable As IQueryable(Of PetShop.Core.Data.Item), itemId As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i)i.ItemId = itemId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByItemId(queryable As IQueryable(Of PetShop.Core.Data.Item), itemId As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim ItemIdList = New List(Of String)()
            ItemIdList.Add(itemId)
        
            If additionalValues IsNot Nothing Then
                ItemIdList.AddRange(additionalValues)
            End If
        
            If ItemIdList.Count = 1 Then
                Return queryable.ByItemId(ItemIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("ItemId", ItemIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="productId">ProductId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByProductId(queryable As IQueryable(Of PetShop.Core.Data.Item), productId As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i)i.ProductId = productId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="productId">ProductId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByProductId(queryable As IQueryable(Of PetShop.Core.Data.Item), productId As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim ProductIdList = New List(Of String)()
            ProductIdList.Add(productId)
        
            If additionalValues IsNot Nothing Then
                ProductIdList.AddRange(additionalValues)
            End If
        
            If ProductIdList.Count = 1 Then
                Return queryable.ByProductId(ProductIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("ProductId", ProductIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="listPrice">ListPrice to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByListPrice(queryable As IQueryable(Of PetShop.Core.Data.Item), listPrice As Decimal?) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.ListPrice, listPrice))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="listPrice">ListPrice to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByListPrice(queryable As IQueryable(Of PetShop.Core.Data.Item), listPrice As Decimal?, ParamArray additionalValues As Decimal?()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim ListPriceList = New List(Of Decimal?)()
            ListPriceList.Add(listPrice)
        
            If additionalValues IsNot Nothing Then
                ListPriceList.AddRange(additionalValues)
            Else
                ListPriceList.Add(Nothing)
            End If
        
            If ListPriceList.Count = 1 Then
                Return queryable.ByListPrice(ListPriceList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("ListPrice", ListPriceList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="unitCost">UnitCost to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUnitCost(queryable As IQueryable(Of PetShop.Core.Data.Item), unitCost As Decimal?) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.UnitCost, unitCost))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="unitCost">UnitCost to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUnitCost(queryable As IQueryable(Of PetShop.Core.Data.Item), unitCost As Decimal?, ParamArray additionalValues As Decimal?()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim UnitCostList = New List(Of Decimal?)()
            UnitCostList.Add(unitCost)
        
            If additionalValues IsNot Nothing Then
                UnitCostList.AddRange(additionalValues)
            Else
                UnitCostList.Add(Nothing)
            End If
        
            If UnitCostList.Count = 1 Then
                Return queryable.ByUnitCost(UnitCostList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("UnitCost", UnitCostList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="supplier">Supplier to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function BySupplier(queryable As IQueryable(Of PetShop.Core.Data.Item), supplier As Integer?) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.Supplier, supplier))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="supplier">Supplier to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function BySupplier(queryable As IQueryable(Of PetShop.Core.Data.Item), supplier As Integer?, ParamArray additionalValues As Integer?()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim SupplierList = New List(Of Integer?)()
            SupplierList.Add(supplier)
        
            If additionalValues IsNot Nothing Then
                SupplierList.AddRange(additionalValues)
            Else
                SupplierList.Add(Nothing)
            End If
        
            If SupplierList.Count = 1 Then
                Return queryable.BySupplier(SupplierList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("Supplier", SupplierList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByStatus(queryable As IQueryable(Of PetShop.Core.Data.Item), status As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.Status, status))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByStatus(queryable As IQueryable(Of PetShop.Core.Data.Item), status As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim StatusList = New List(Of String)()
            StatusList.Add(status)
        
            If additionalValues IsNot Nothing Then
                StatusList.AddRange(additionalValues)
            Else
                StatusList.Add(Nothing)
            End If
        
            If StatusList.Count = 1 Then
                Return queryable.ByStatus(StatusList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("Status", StatusList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByName(queryable As IQueryable(Of PetShop.Core.Data.Item), name As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.Name, name))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByName(queryable As IQueryable(Of PetShop.Core.Data.Item), name As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim NameList = New List(Of String)()
            NameList.Add(name)
        
            If additionalValues IsNot Nothing Then
                NameList.AddRange(additionalValues)
            Else
                NameList.Add(Nothing)
            End If
        
            If NameList.Count = 1 Then
                Return queryable.ByName(NameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("Name", NameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="image">Image to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByImage(queryable As IQueryable(Of PetShop.Core.Data.Item), image As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.Image, image))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="image">Image to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByImage(queryable As IQueryable(Of PetShop.Core.Data.Item), image As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim ImageList = New List(Of String)()
            ImageList.Add(image)
        
            If additionalValues IsNot Nothing Then
                ImageList.AddRange(additionalValues)
            Else
                ImageList.Add(Nothing)
            End If
        
            If ImageList.Count = 1 Then
                Return queryable.ByImage(ImageList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("Image", ImageList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, String, PetShop.Core.Data.Item) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal itemId As String) _
                        db.Item.FirstOrDefault(Function(i)i.ItemId = itemId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

