
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace Tracker.Core.Data
    ''' <summary>
    ''' The query extension class for Audit.
    ''' </summary>
    Public Module AuditExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of Tracker.Core.Data.Audit), ByVal id As Integer) As Tracker.Core.Data.Audit

            Dim entity As System.Data.Linq.Table(Of Tracker.Core.Data.Audit) = CType(queryable, Table(Of Tracker.Core.Data.Audit))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, Tracker.Core.Data.TrackerDataContext), id)
            End If

            Return queryable.FirstOrDefault(Function(a)a.Id = id)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of Tracker.Core.Data.Audit), ByVal id As Integer) As Integer
            Return table.Delete(Function(a)a.Id = id)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ById(queryable As IQueryable(Of Tracker.Core.Data.Audit), id As Integer) As IQueryable(Of Tracker.Core.Data.Audit)
            Return queryable.Where(Function(a)a.Id = id)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ById(queryable As IQueryable(Of Tracker.Core.Data.Audit), id As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.Audit)
            Dim IdList = New List(Of Integer)()
            IdList.Add(id)
        
            If additionalValues IsNot Nothing Then
                IdList.AddRange(additionalValues)
            End If
        
            If IdList.Count = 1 Then
                Return queryable.ById(IdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Audit, Boolean)("Id", IdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="[Date]">Date to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDate(queryable As IQueryable(Of Tracker.Core.Data.Audit), [Date] As Date) As IQueryable(Of Tracker.Core.Data.Audit)
            Return queryable.Where(Function(a)a.Date = [Date])
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="[Date]">Date to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDate(queryable As IQueryable(Of Tracker.Core.Data.Audit), [Date] As Date, ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.Audit)
            Dim DateList = New List(Of Date)()
            DateList.Add([Date])
        
            If additionalValues IsNot Nothing Then
                DateList.AddRange(additionalValues)
            End If
        
            If DateList.Count = 1 Then
                Return queryable.ByDate(DateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Audit, Boolean)("Date", DateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUserId(queryable As IQueryable(Of Tracker.Core.Data.Audit), userId As Integer?) As IQueryable(Of Tracker.Core.Data.Audit)
            Return queryable.Where(Function(a) Object.Equals(a.UserId, userId))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUserId(queryable As IQueryable(Of Tracker.Core.Data.Audit), userId As Integer?, ParamArray additionalValues As Integer?()) As IQueryable(Of Tracker.Core.Data.Audit)
            Dim UserIdList = New List(Of Integer?)()
            UserIdList.Add(userId)
        
            If additionalValues IsNot Nothing Then
                UserIdList.AddRange(additionalValues)
            Else
                UserIdList.Add(Nothing)
            End If
        
            If UserIdList.Count = 1 Then
                Return queryable.ByUserId(UserIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Audit, Boolean)("UserId", UserIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="taskId">TaskId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByTaskId(queryable As IQueryable(Of Tracker.Core.Data.Audit), taskId As Integer?) As IQueryable(Of Tracker.Core.Data.Audit)
            Return queryable.Where(Function(a) Object.Equals(a.TaskId, taskId))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="taskId">TaskId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByTaskId(queryable As IQueryable(Of Tracker.Core.Data.Audit), taskId As Integer?, ParamArray additionalValues As Integer?()) As IQueryable(Of Tracker.Core.Data.Audit)
            Dim TaskIdList = New List(Of Integer?)()
            TaskIdList.Add(taskId)
        
            If additionalValues IsNot Nothing Then
                TaskIdList.AddRange(additionalValues)
            Else
                TaskIdList.Add(Nothing)
            End If
        
            If TaskIdList.Count = 1 Then
                Return queryable.ByTaskId(TaskIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Audit, Boolean)("TaskId", TaskIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="content">Content to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByContent(queryable As IQueryable(Of Tracker.Core.Data.Audit), content As String) As IQueryable(Of Tracker.Core.Data.Audit)
            Return queryable.Where(Function(a)a.Content = content)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="content">Content to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByContent(queryable As IQueryable(Of Tracker.Core.Data.Audit), content As String, ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Audit)
            Dim ContentList = New List(Of String)()
            ContentList.Add(content)
        
            If additionalValues IsNot Nothing Then
                ContentList.AddRange(additionalValues)
            End If
        
            If ContentList.Count = 1 Then
                Return queryable.ByContent(ContentList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Audit, Boolean)("Content", ContentList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="username">Username to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUsername(queryable As IQueryable(Of Tracker.Core.Data.Audit), username As String) As IQueryable(Of Tracker.Core.Data.Audit)
            Return queryable.Where(Function(a)a.Username = username)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="username">Username to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUsername(queryable As IQueryable(Of Tracker.Core.Data.Audit), username As String, ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Audit)
            Dim UsernameList = New List(Of String)()
            UsernameList.Add(username)
        
            If additionalValues IsNot Nothing Then
                UsernameList.AddRange(additionalValues)
            End If
        
            If UsernameList.Count = 1 Then
                Return queryable.ByUsername(UsernameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Audit, Boolean)("Username", UsernameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCreatedDate(queryable As IQueryable(Of Tracker.Core.Data.Audit), createdDate As Date) As IQueryable(Of Tracker.Core.Data.Audit)
            Return queryable.Where(Function(a)a.CreatedDate = createdDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCreatedDate(queryable As IQueryable(Of Tracker.Core.Data.Audit), createdDate As Date, ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.Audit)
            Dim CreatedDateList = New List(Of Date)()
            CreatedDateList.Add(createdDate)
        
            If additionalValues IsNot Nothing Then
                CreatedDateList.AddRange(additionalValues)
            End If
        
            If CreatedDateList.Count = 1 Then
                Return queryable.ByCreatedDate(CreatedDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Audit, Boolean)("CreatedDate", CreatedDateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="myxml">Myxml to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByMyxml(queryable As IQueryable(Of Tracker.Core.Data.Audit), myxml As String) As IQueryable(Of Tracker.Core.Data.Audit)
            Return queryable.Where(Function(a) Object.Equals(a.Myxml, myxml))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Audit"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="myxml">Myxml to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByMyxml(queryable As IQueryable(Of Tracker.Core.Data.Audit), myxml As String, ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Audit)
            Dim MyxmlList = New List(Of String)()
            MyxmlList.Add(myxml)
        
            If additionalValues IsNot Nothing Then
                MyxmlList.AddRange(additionalValues)
            Else
                MyxmlList.Add(Nothing)
            End If
        
            If MyxmlList.Count = 1 Then
                Return queryable.ByMyxml(MyxmlList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Audit, Boolean)("Myxml", MyxmlList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of TrackerDataContext, Integer, Tracker.Core.Data.Audit) = _
                CompiledQuery.Compile( _
                    Function(db As TrackerDataContext , ByVal id As Integer) _
                        db.Audit.FirstOrDefault(Function(a)a.Id = id))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

