
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace Tracker.Core.Data
    ''' <summary>
    ''' The query extension class for Role.
    ''' </summary>
    Public Module RoleExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of Tracker.Core.Data.Role), ByVal id As Integer) As Tracker.Core.Data.Role

            Dim entity As System.Data.Linq.Table(Of Tracker.Core.Data.Role) = CType(queryable, Table(Of Tracker.Core.Data.Role))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, Tracker.Core.Data.TrackerDataContext), id)
            End If

            Return queryable.FirstOrDefault(Function(r)r.Id = id)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of Tracker.Core.Data.Role), ByVal id As Integer) As Integer
            Return table.Delete(Function(r)r.Id = id)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ById(queryable As IQueryable(Of Tracker.Core.Data.Role), id As Integer) As IQueryable(Of Tracker.Core.Data.Role)
            Return queryable.Where(Function(r)r.Id = id)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ById(queryable As IQueryable(Of Tracker.Core.Data.Role), id As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.Role)
            Dim IdList = New List(Of Integer)()
            IdList.Add(id)
        
            If additionalValues IsNot Nothing Then
                IdList.AddRange(additionalValues)
            End If
        
            If IdList.Count = 1 Then
                Return queryable.ById(IdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Role, Boolean)("Id", IdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByName(queryable As IQueryable(Of Tracker.Core.Data.Role), name As String) As IQueryable(Of Tracker.Core.Data.Role)
            Return queryable.Where(Function(r)r.Name = name)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByName(queryable As IQueryable(Of Tracker.Core.Data.Role), name As String, ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Role)
            Dim NameList = New List(Of String)()
            NameList.Add(name)
        
            If additionalValues IsNot Nothing Then
                NameList.AddRange(additionalValues)
            End If
        
            If NameList.Count = 1 Then
                Return queryable.ByName(NameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Role, Boolean)("Name", NameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="description">Description to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDescription(queryable As IQueryable(Of Tracker.Core.Data.Role), description As String) As IQueryable(Of Tracker.Core.Data.Role)
            Return queryable.Where(Function(r) Object.Equals(r.Description, description))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="description">Description to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDescription(queryable As IQueryable(Of Tracker.Core.Data.Role), description As String, ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Role)
            Dim DescriptionList = New List(Of String)()
            DescriptionList.Add(description)
        
            If additionalValues IsNot Nothing Then
                DescriptionList.AddRange(additionalValues)
            Else
                DescriptionList.Add(Nothing)
            End If
        
            If DescriptionList.Count = 1 Then
                Return queryable.ByDescription(DescriptionList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Role, Boolean)("Description", DescriptionList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCreatedDate(queryable As IQueryable(Of Tracker.Core.Data.Role), createdDate As Date) As IQueryable(Of Tracker.Core.Data.Role)
            Return queryable.Where(Function(r)r.CreatedDate = createdDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCreatedDate(queryable As IQueryable(Of Tracker.Core.Data.Role), createdDate As Date, ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.Role)
            Dim CreatedDateList = New List(Of Date)()
            CreatedDateList.Add(createdDate)
        
            If additionalValues IsNot Nothing Then
                CreatedDateList.AddRange(additionalValues)
            End If
        
            If CreatedDateList.Count = 1 Then
                Return queryable.ByCreatedDate(CreatedDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Role, Boolean)("CreatedDate", CreatedDateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByModifiedDate(queryable As IQueryable(Of Tracker.Core.Data.Role), modifiedDate As Date) As IQueryable(Of Tracker.Core.Data.Role)
            Return queryable.Where(Function(r)r.ModifiedDate = modifiedDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Role"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByModifiedDate(queryable As IQueryable(Of Tracker.Core.Data.Role), modifiedDate As Date, ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.Role)
            Dim ModifiedDateList = New List(Of Date)()
            ModifiedDateList.Add(modifiedDate)
        
            If additionalValues IsNot Nothing Then
                ModifiedDateList.AddRange(additionalValues)
            End If
        
            If ModifiedDateList.Count = 1 Then
                Return queryable.ByModifiedDate(ModifiedDateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Role, Boolean)("ModifiedDate", ModifiedDateList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of TrackerDataContext, Integer, Tracker.Core.Data.Role) = _
                CompiledQuery.Compile( _
                    Function(db As TrackerDataContext , ByVal id As Integer) _
                        db.Role.FirstOrDefault(Function(r)r.Id = id))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

