
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace Tracker.Core.Data
    ''' <summary>
    ''' The query extension class for UserRole.
    ''' </summary>
    Public Module UserRoleExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of Tracker.Core.Data.UserRole), ByVal userId As Integer, ByVal roleId As Integer) As Tracker.Core.Data.UserRole

            Dim entity As System.Data.Linq.Table(Of Tracker.Core.Data.UserRole) = CType(queryable, Table(Of Tracker.Core.Data.UserRole))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, Tracker.Core.Data.TrackerDataContext), userId, roleId)
            End If

            Return queryable.FirstOrDefault(Function(u)u.UserId = userId _
					AndAlso u.RoleId = roleId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of Tracker.Core.Data.UserRole), ByVal userId As Integer, ByVal roleId As Integer) As Integer
            Return table.Delete(Function(u)u.UserId = userId _
					AndAlso u.RoleId = roleId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.UserRole"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUserId(queryable As IQueryable(Of Tracker.Core.Data.UserRole), userId As Integer) As IQueryable(Of Tracker.Core.Data.UserRole)
            Return queryable.Where(Function(u)u.UserId = userId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.UserRole"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUserId(queryable As IQueryable(Of Tracker.Core.Data.UserRole), userId As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.UserRole)
            Dim UserIdList = New List(Of Integer)()
            UserIdList.Add(userId)
        
            If additionalValues IsNot Nothing Then
                UserIdList.AddRange(additionalValues)
            End If
        
            If UserIdList.Count = 1 Then
                Return queryable.ByUserId(UserIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.UserRole, Boolean)("UserId", UserIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.UserRole"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="roleId">RoleId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByRoleId(queryable As IQueryable(Of Tracker.Core.Data.UserRole), roleId As Integer) As IQueryable(Of Tracker.Core.Data.UserRole)
            Return queryable.Where(Function(u)u.RoleId = roleId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.UserRole"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="roleId">RoleId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByRoleId(queryable As IQueryable(Of Tracker.Core.Data.UserRole), roleId As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.UserRole)
            Dim RoleIdList = New List(Of Integer)()
            RoleIdList.Add(roleId)
        
            If additionalValues IsNot Nothing Then
                RoleIdList.AddRange(additionalValues)
            End If
        
            If RoleIdList.Count = 1 Then
                Return queryable.ByRoleId(RoleIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.UserRole, Boolean)("RoleId", RoleIdList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of TrackerDataContext, Integer, Integer, Tracker.Core.Data.UserRole) = _
                CompiledQuery.Compile( _
                    Function(db As TrackerDataContext , ByVal userId As Integer, ByVal roleId As Integer) _
                        db.UserRole.FirstOrDefault(Function(u)u.UserId = userId _
							AndAlso u.RoleId = roleId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

