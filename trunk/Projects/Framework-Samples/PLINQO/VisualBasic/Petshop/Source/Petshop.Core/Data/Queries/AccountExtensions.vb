
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Account.
    ''' </summary>
    Public Module AccountExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal accountID As Integer) As PetShop.Core.Data.Account

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Account) = CType(queryable, Table(Of PetShop.Core.Data.Account))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), accountID)
            End If

            Return queryable.FirstOrDefault(Function(a)a.AccountID = accountID)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Account), ByVal accountID As Integer) As Integer
            Return table.Delete(Function(a)a.AccountID = accountID)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="accountID">AccountID to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAccountID(queryable As IQueryable(Of PetShop.Core.Data.Account), accountID As Integer) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.AccountID = accountID)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="accountID">AccountID to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAccountID(queryable As IQueryable(Of PetShop.Core.Data.Account), accountID As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim AccountIDList = New List(Of Integer)()
            AccountIDList.Add(accountID)
        
            If additionalValues IsNot Nothing Then
                AccountIDList.AddRange(additionalValues)
            End If
        
            If AccountIDList.Count = 1 Then
                Return queryable.ByAccountID(AccountIDList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("AccountID", AccountIDList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="uniqueID">UniqueID to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUniqueID(queryable As IQueryable(Of PetShop.Core.Data.Account), uniqueID As Integer) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.UniqueID = uniqueID)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="uniqueID">UniqueID to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUniqueID(queryable As IQueryable(Of PetShop.Core.Data.Account), uniqueID As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim UniqueIDList = New List(Of Integer)()
            UniqueIDList.Add(uniqueID)
        
            If additionalValues IsNot Nothing Then
                UniqueIDList.AddRange(additionalValues)
            End If
        
            If UniqueIDList.Count = 1 Then
                Return queryable.ByUniqueID(UniqueIDList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("UniqueID", UniqueIDList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="email">Email to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByEmail(queryable As IQueryable(Of PetShop.Core.Data.Account), email As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.Email = email)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="email">Email to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByEmail(queryable As IQueryable(Of PetShop.Core.Data.Account), email As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim EmailList = New List(Of String)()
            EmailList.Add(email)
        
            If additionalValues IsNot Nothing Then
                EmailList.AddRange(additionalValues)
            End If
        
            If EmailList.Count = 1 Then
                Return queryable.ByEmail(EmailList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Email", EmailList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="firstName">FirstName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByFirstName(queryable As IQueryable(Of PetShop.Core.Data.Account), firstName As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.FirstName = firstName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="firstName">FirstName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByFirstName(queryable As IQueryable(Of PetShop.Core.Data.Account), firstName As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim FirstNameList = New List(Of String)()
            FirstNameList.Add(firstName)
        
            If additionalValues IsNot Nothing Then
                FirstNameList.AddRange(additionalValues)
            End If
        
            If FirstNameList.Count = 1 Then
                Return queryable.ByFirstName(FirstNameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("FirstName", FirstNameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastName">LastName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByLastName(queryable As IQueryable(Of PetShop.Core.Data.Account), lastName As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.LastName = lastName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastName">LastName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByLastName(queryable As IQueryable(Of PetShop.Core.Data.Account), lastName As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim LastNameList = New List(Of String)()
            LastNameList.Add(lastName)
        
            If additionalValues IsNot Nothing Then
                LastNameList.AddRange(additionalValues)
            End If
        
            If LastNameList.Count = 1 Then
                Return queryable.ByLastName(LastNameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("LastName", LastNameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address1">Address1 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAddress1(queryable As IQueryable(Of PetShop.Core.Data.Account), address1 As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.Address1 = address1)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address1">Address1 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAddress1(queryable As IQueryable(Of PetShop.Core.Data.Account), address1 As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim Address1List = New List(Of String)()
            Address1List.Add(address1)
        
            If additionalValues IsNot Nothing Then
                Address1List.AddRange(additionalValues)
            End If
        
            If Address1List.Count = 1 Then
                Return queryable.ByAddress1(Address1List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Address1", Address1List)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address2">Address2 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAddress2(queryable As IQueryable(Of PetShop.Core.Data.Account), address2 As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a) Object.Equals(a.Address2, address2))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address2">Address2 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAddress2(queryable As IQueryable(Of PetShop.Core.Data.Account), address2 As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim Address2List = New List(Of String)()
            Address2List.Add(address2)
        
            If additionalValues IsNot Nothing Then
                Address2List.AddRange(additionalValues)
            Else
                Address2List.Add(Nothing)
            End If
        
            If Address2List.Count = 1 Then
                Return queryable.ByAddress2(Address2List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Address2", Address2List)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCity(queryable As IQueryable(Of PetShop.Core.Data.Account), city As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.City = city)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCity(queryable As IQueryable(Of PetShop.Core.Data.Account), city As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim CityList = New List(Of String)()
            CityList.Add(city)
        
            If additionalValues IsNot Nothing Then
                CityList.AddRange(additionalValues)
            End If
        
            If CityList.Count = 1 Then
                Return queryable.ByCity(CityList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("City", CityList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByState(queryable As IQueryable(Of PetShop.Core.Data.Account), state As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.State = state)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByState(queryable As IQueryable(Of PetShop.Core.Data.Account), state As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim StateList = New List(Of String)()
            StateList.Add(state)
        
            If additionalValues IsNot Nothing Then
                StateList.AddRange(additionalValues)
            End If
        
            If StateList.Count = 1 Then
                Return queryable.ByState(StateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("State", StateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByZip(queryable As IQueryable(Of PetShop.Core.Data.Account), zip As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.Zip = zip)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByZip(queryable As IQueryable(Of PetShop.Core.Data.Account), zip As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim ZipList = New List(Of String)()
            ZipList.Add(zip)
        
            If additionalValues IsNot Nothing Then
                ZipList.AddRange(additionalValues)
            End If
        
            If ZipList.Count = 1 Then
                Return queryable.ByZip(ZipList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Zip", ZipList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="country">Country to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCountry(queryable As IQueryable(Of PetShop.Core.Data.Account), country As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.Country = country)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="country">Country to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCountry(queryable As IQueryable(Of PetShop.Core.Data.Account), country As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim CountryList = New List(Of String)()
            CountryList.Add(country)
        
            If additionalValues IsNot Nothing Then
                CountryList.AddRange(additionalValues)
            End If
        
            If CountryList.Count = 1 Then
                Return queryable.ByCountry(CountryList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Country", CountryList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByPhone(queryable As IQueryable(Of PetShop.Core.Data.Account), phone As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a) Object.Equals(a.Phone, phone))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByPhone(queryable As IQueryable(Of PetShop.Core.Data.Account), phone As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim PhoneList = New List(Of String)()
            PhoneList.Add(phone)
        
            If additionalValues IsNot Nothing Then
                PhoneList.AddRange(additionalValues)
            Else
                PhoneList.Add(Nothing)
            End If
        
            If PhoneList.Count = 1 Then
                Return queryable.ByPhone(PhoneList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Phone", PhoneList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="number">Number to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByNumber(queryable As IQueryable(Of PetShop.Core.Data.Account), number As Integer?) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a) Object.Equals(a.Number, number))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="number">Number to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByNumber(queryable As IQueryable(Of PetShop.Core.Data.Account), number As Integer?, ParamArray additionalValues As Integer?()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim NumberList = New List(Of Integer?)()
            NumberList.Add(number)
        
            If additionalValues IsNot Nothing Then
                NumberList.AddRange(additionalValues)
            Else
                NumberList.Add(Nothing)
            End If
        
            If NumberList.Count = 1 Then
                Return queryable.ByNumber(NumberList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Number", NumberList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, Integer, PetShop.Core.Data.Account) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal accountID As Integer) _
                        db.Account.FirstOrDefault(Function(a)a.AccountID = accountID))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

