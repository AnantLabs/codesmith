
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Category.
    ''' </summary>
    Public Module CategoryExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Category), ByVal categoryId As String) As PetShop.Core.Data.Category

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Category) = CType(queryable, Table(Of PetShop.Core.Data.Category))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), categoryId)
            End If

            Return queryable.FirstOrDefault(Function(c)c.CategoryId = categoryId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Category), ByVal categoryId As String) As Integer
            Return table.Delete(Function(c)c.CategoryId = categoryId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Category"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="categoryId">CategoryId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCategoryId(queryable As IQueryable(Of PetShop.Core.Data.Category), categoryId As String) As IQueryable(Of PetShop.Core.Data.Category)
            Return queryable.Where(Function(c)c.CategoryId = categoryId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Category"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="categoryId">CategoryId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCategoryId(queryable As IQueryable(Of PetShop.Core.Data.Category), categoryId As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Category)
            Dim CategoryIdList = New List(Of String)()
            CategoryIdList.Add(categoryId)
        
            If additionalValues IsNot Nothing Then
                CategoryIdList.AddRange(additionalValues)
            End If
        
            If CategoryIdList.Count = 1 Then
                Return queryable.ByCategoryId(CategoryIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Category, Boolean)("CategoryId", CategoryIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Category"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByName(queryable As IQueryable(Of PetShop.Core.Data.Category), name As String) As IQueryable(Of PetShop.Core.Data.Category)
            Return queryable.Where(Function(c) Object.Equals(c.Name, name))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Category"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByName(queryable As IQueryable(Of PetShop.Core.Data.Category), name As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Category)
            Dim NameList = New List(Of String)()
            NameList.Add(name)
        
            If additionalValues IsNot Nothing Then
                NameList.AddRange(additionalValues)
            Else
                NameList.Add(Nothing)
            End If
        
            If NameList.Count = 1 Then
                Return queryable.ByName(NameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Category, Boolean)("Name", NameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Category"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="descn">Descn to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDescn(queryable As IQueryable(Of PetShop.Core.Data.Category), descn As String) As IQueryable(Of PetShop.Core.Data.Category)
            Return queryable.Where(Function(c) Object.Equals(c.Descn, descn))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Category"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="descn">Descn to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByDescn(queryable As IQueryable(Of PetShop.Core.Data.Category), descn As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Category)
            Dim DescnList = New List(Of String)()
            DescnList.Add(descn)
        
            If additionalValues IsNot Nothing Then
                DescnList.AddRange(additionalValues)
            Else
                DescnList.Add(Nothing)
            End If
        
            If DescnList.Count = 1 Then
                Return queryable.ByDescn(DescnList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Category, Boolean)("Descn", DescnList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, String, PetShop.Core.Data.Category) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal categoryId As String) _
                        db.Category.FirstOrDefault(Function(c)c.CategoryId = categoryId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

