
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Inventory.
    ''' </summary>
    Public Module InventoryExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Inventory), ByVal itemId As String) As PetShop.Core.Data.Inventory

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Inventory) = CType(queryable, Table(Of PetShop.Core.Data.Inventory))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), itemId)
            End If

            Return queryable.FirstOrDefault(Function(i)i.ItemId = itemId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Inventory), ByVal itemId As String) As Integer
            Return table.Delete(Function(i)i.ItemId = itemId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Inventory"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByItemId(queryable As IQueryable(Of PetShop.Core.Data.Inventory), itemId As String) As IQueryable(Of PetShop.Core.Data.Inventory)
            Return queryable.Where(Function(i)i.ItemId = itemId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Inventory"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByItemId(queryable As IQueryable(Of PetShop.Core.Data.Inventory), itemId As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Inventory)
            Dim ItemIdList = New List(Of String)()
            ItemIdList.Add(itemId)
        
            If additionalValues IsNot Nothing Then
                ItemIdList.AddRange(additionalValues)
            End If
        
            If ItemIdList.Count = 1 Then
                Return queryable.ByItemId(ItemIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Inventory, Boolean)("ItemId", ItemIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Inventory"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="qty">Qty to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByQty(queryable As IQueryable(Of PetShop.Core.Data.Inventory), qty As Integer) As IQueryable(Of PetShop.Core.Data.Inventory)
            Return queryable.Where(Function(i)i.Qty = qty)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Inventory"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="qty">Qty to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByQty(queryable As IQueryable(Of PetShop.Core.Data.Inventory), qty As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Inventory)
            Dim QtyList = New List(Of Integer)()
            QtyList.Add(qty)
        
            If additionalValues IsNot Nothing Then
                QtyList.AddRange(additionalValues)
            End If
        
            If QtyList.Count = 1 Then
                Return queryable.ByQty(QtyList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Inventory, Boolean)("Qty", QtyList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, String, PetShop.Core.Data.Inventory) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal itemId As String) _
                        db.Inventory.FirstOrDefault(Function(i)i.ItemId = itemId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

