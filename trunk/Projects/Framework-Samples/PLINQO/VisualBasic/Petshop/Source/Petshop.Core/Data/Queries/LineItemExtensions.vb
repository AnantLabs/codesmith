
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for LineItem.
    ''' </summary>
    Public Module LineItemExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.LineItem), ByVal orderId As Integer, ByVal lineNum As Integer) As PetShop.Core.Data.LineItem

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.LineItem) = CType(queryable, Table(Of PetShop.Core.Data.LineItem))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), orderId, lineNum)
            End If

            Return queryable.FirstOrDefault(Function(l)l.OrderId = orderId _
					AndAlso l.LineNum = lineNum)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.LineItem), ByVal orderId As Integer, ByVal lineNum As Integer) As Integer
            Return table.Delete(Function(l)l.OrderId = orderId _
					AndAlso l.LineNum = lineNum)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderId">OrderId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByOrderId(queryable As IQueryable(Of PetShop.Core.Data.LineItem), orderId As Integer) As IQueryable(Of PetShop.Core.Data.LineItem)
            Return queryable.Where(Function(l)l.OrderId = orderId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderId">OrderId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByOrderId(queryable As IQueryable(Of PetShop.Core.Data.LineItem), orderId As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.LineItem)
            Dim OrderIdList = New List(Of Integer)()
            OrderIdList.Add(orderId)
        
            If additionalValues IsNot Nothing Then
                OrderIdList.AddRange(additionalValues)
            End If
        
            If OrderIdList.Count = 1 Then
                Return queryable.ByOrderId(OrderIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.LineItem, Boolean)("OrderId", OrderIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lineNum">LineNum to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByLineNum(queryable As IQueryable(Of PetShop.Core.Data.LineItem), lineNum As Integer) As IQueryable(Of PetShop.Core.Data.LineItem)
            Return queryable.Where(Function(l)l.LineNum = lineNum)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lineNum">LineNum to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByLineNum(queryable As IQueryable(Of PetShop.Core.Data.LineItem), lineNum As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.LineItem)
            Dim LineNumList = New List(Of Integer)()
            LineNumList.Add(lineNum)
        
            If additionalValues IsNot Nothing Then
                LineNumList.AddRange(additionalValues)
            End If
        
            If LineNumList.Count = 1 Then
                Return queryable.ByLineNum(LineNumList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.LineItem, Boolean)("LineNum", LineNumList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByItemId(queryable As IQueryable(Of PetShop.Core.Data.LineItem), itemId As String) As IQueryable(Of PetShop.Core.Data.LineItem)
            Return queryable.Where(Function(l)l.ItemId = itemId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByItemId(queryable As IQueryable(Of PetShop.Core.Data.LineItem), itemId As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.LineItem)
            Dim ItemIdList = New List(Of String)()
            ItemIdList.Add(itemId)
        
            If additionalValues IsNot Nothing Then
                ItemIdList.AddRange(additionalValues)
            End If
        
            If ItemIdList.Count = 1 Then
                Return queryable.ByItemId(ItemIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.LineItem, Boolean)("ItemId", ItemIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="quantity">Quantity to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByQuantity(queryable As IQueryable(Of PetShop.Core.Data.LineItem), quantity As Integer) As IQueryable(Of PetShop.Core.Data.LineItem)
            Return queryable.Where(Function(l)l.Quantity = quantity)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="quantity">Quantity to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByQuantity(queryable As IQueryable(Of PetShop.Core.Data.LineItem), quantity As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.LineItem)
            Dim QuantityList = New List(Of Integer)()
            QuantityList.Add(quantity)
        
            If additionalValues IsNot Nothing Then
                QuantityList.AddRange(additionalValues)
            End If
        
            If QuantityList.Count = 1 Then
                Return queryable.ByQuantity(QuantityList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.LineItem, Boolean)("Quantity", QuantityList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="unitPrice">UnitPrice to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUnitPrice(queryable As IQueryable(Of PetShop.Core.Data.LineItem), unitPrice As Decimal) As IQueryable(Of PetShop.Core.Data.LineItem)
            Return queryable.Where(Function(l)l.UnitPrice = unitPrice)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.LineItem"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="unitPrice">UnitPrice to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByUnitPrice(queryable As IQueryable(Of PetShop.Core.Data.LineItem), unitPrice As Decimal, ParamArray additionalValues As Decimal()) As IQueryable(Of PetShop.Core.Data.LineItem)
            Dim UnitPriceList = New List(Of Decimal)()
            UnitPriceList.Add(unitPrice)
        
            If additionalValues IsNot Nothing Then
                UnitPriceList.AddRange(additionalValues)
            End If
        
            If UnitPriceList.Count = 1 Then
                Return queryable.ByUnitPrice(UnitPriceList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.LineItem, Boolean)("UnitPrice", UnitPriceList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, Integer, Integer, PetShop.Core.Data.LineItem) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal orderId As Integer, ByVal lineNum As Integer) _
                        db.LineItem.FirstOrDefault(Function(l)l.OrderId = orderId _
							AndAlso l.LineNum = lineNum))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

