
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports System.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Supplier.
    ''' </summary>
    Public Module SupplierExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal suppId As Integer) As PetShop.Core.Data.Supplier

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Supplier) = CType(queryable, Table(Of PetShop.Core.Data.Supplier))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), suppId)
            End If

            Return queryable.FirstOrDefault(Function(s)s.SuppId = suppId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Supplier), ByVal suppId As Integer) As Integer
            Return table.Delete(Function(s)s.SuppId = suppId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="suppId">SuppId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function BySuppId(queryable As IQueryable(Of PetShop.Core.Data.Supplier), suppId As Integer) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s)s.SuppId = suppId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="suppId">SuppId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function BySuppId(queryable As IQueryable(Of PetShop.Core.Data.Supplier), suppId As Integer, ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim SuppIdList = New List(Of Integer)()
            SuppIdList.Add(suppId)
        
            If additionalValues IsNot Nothing Then
                SuppIdList.AddRange(additionalValues)
            End If
        
            If SuppIdList.Count = 1 Then
                Return queryable.BySuppId(SuppIdList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("SuppId", SuppIdList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByName(queryable As IQueryable(Of PetShop.Core.Data.Supplier), name As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Name, name))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByName(queryable As IQueryable(Of PetShop.Core.Data.Supplier), name As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim NameList = New List(Of String)()
            NameList.Add(name)
        
            If additionalValues IsNot Nothing Then
                NameList.AddRange(additionalValues)
            Else
                NameList.Add(Nothing)
            End If
        
            If NameList.Count = 1 Then
                Return queryable.ByName(NameList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Name", NameList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByStatus(queryable As IQueryable(Of PetShop.Core.Data.Supplier), status As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s)s.Status = status)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByStatus(queryable As IQueryable(Of PetShop.Core.Data.Supplier), status As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim StatusList = New List(Of String)()
            StatusList.Add(status)
        
            If additionalValues IsNot Nothing Then
                StatusList.AddRange(additionalValues)
            End If
        
            If StatusList.Count = 1 Then
                Return queryable.ByStatus(StatusList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Status", StatusList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr1">Addr1 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAddr1(queryable As IQueryable(Of PetShop.Core.Data.Supplier), addr1 As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Addr1, addr1))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr1">Addr1 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAddr1(queryable As IQueryable(Of PetShop.Core.Data.Supplier), addr1 As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim Addr1List = New List(Of String)()
            Addr1List.Add(addr1)
        
            If additionalValues IsNot Nothing Then
                Addr1List.AddRange(additionalValues)
            Else
                Addr1List.Add(Nothing)
            End If
        
            If Addr1List.Count = 1 Then
                Return queryable.ByAddr1(Addr1List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Addr1", Addr1List)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr2">Addr2 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAddr2(queryable As IQueryable(Of PetShop.Core.Data.Supplier), addr2 As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Addr2, addr2))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr2">Addr2 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByAddr2(queryable As IQueryable(Of PetShop.Core.Data.Supplier), addr2 As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim Addr2List = New List(Of String)()
            Addr2List.Add(addr2)
        
            If additionalValues IsNot Nothing Then
                Addr2List.AddRange(additionalValues)
            Else
                Addr2List.Add(Nothing)
            End If
        
            If Addr2List.Count = 1 Then
                Return queryable.ByAddr2(Addr2List(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Addr2", Addr2List)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCity(queryable As IQueryable(Of PetShop.Core.Data.Supplier), city As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.City, city))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByCity(queryable As IQueryable(Of PetShop.Core.Data.Supplier), city As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim CityList = New List(Of String)()
            CityList.Add(city)
        
            If additionalValues IsNot Nothing Then
                CityList.AddRange(additionalValues)
            Else
                CityList.Add(Nothing)
            End If
        
            If CityList.Count = 1 Then
                Return queryable.ByCity(CityList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("City", CityList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByState(queryable As IQueryable(Of PetShop.Core.Data.Supplier), state As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.State, state))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByState(queryable As IQueryable(Of PetShop.Core.Data.Supplier), state As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim StateList = New List(Of String)()
            StateList.Add(state)
        
            If additionalValues IsNot Nothing Then
                StateList.AddRange(additionalValues)
            Else
                StateList.Add(Nothing)
            End If
        
            If StateList.Count = 1 Then
                Return queryable.ByState(StateList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("State", StateList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByZip(queryable As IQueryable(Of PetShop.Core.Data.Supplier), zip As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Zip, zip))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByZip(queryable As IQueryable(Of PetShop.Core.Data.Supplier), zip As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim ZipList = New List(Of String)()
            ZipList.Add(zip)
        
            If additionalValues IsNot Nothing Then
                ZipList.AddRange(additionalValues)
            Else
                ZipList.Add(Nothing)
            End If
        
            If ZipList.Count = 1 Then
                Return queryable.ByZip(ZipList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Zip", ZipList)
            Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByPhone(queryable As IQueryable(Of PetShop.Core.Data.Supplier), phone As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Phone, phone))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension> _
        Public Function ByPhone(queryable As IQueryable(Of PetShop.Core.Data.Supplier), phone As String, ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim PhoneList = New List(Of String)()
            PhoneList.Add(phone)
        
            If additionalValues IsNot Nothing Then
                PhoneList.AddRange(additionalValues)
            Else
                PhoneList.Add(Nothing)
            End If
        
            If PhoneList.Count = 1 Then
                Return queryable.ByPhone(PhoneList(0))
            End If
        
            Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Phone", PhoneList)
            Return queryable.Where(expression)
        End Function

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, Integer, PetShop.Core.Data.Supplier) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal suppId As Integer) _
                        db.Supplier.FirstOrDefault(Function(s)s.SuppId = suppId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

