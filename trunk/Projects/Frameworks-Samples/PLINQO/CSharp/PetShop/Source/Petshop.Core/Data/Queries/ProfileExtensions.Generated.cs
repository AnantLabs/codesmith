//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Linq;

namespace PetShop.Core.Data
{
    /// <summary>
    /// The query extension class for Profile.
    /// </summary>
    public static partial class ProfileExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static PetShop.Core.Data.Profile ByKey(this IQueryable<PetShop.Core.Data.Profile> queryable, int uniqueID)
        {
            var entity = queryable as System.Data.Linq.Table<PetShop.Core.Data.Profile>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.ByKey.Invoke((PetShop.Core.Data.PetShopDataContext)entity.Context, uniqueID);
            
            return queryable.FirstOrDefault(p => p.UniqueID == uniqueID);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<PetShop.Core.Data.Profile> table, int uniqueID)
        {
            return table.Delete(p => p.UniqueID == uniqueID);
        }
        
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public static PetShop.Core.Data.Profile ByUsernameApplicationName(this IQueryable<PetShop.Core.Data.Profile> queryable, string username, string applicationName)
        {
            var entity = queryable as System.Data.Linq.Table<PetShop.Core.Data.Profile>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.ByUsernameApplicationName.Invoke((PetShop.Core.Data.PetShopDataContext)entity.Context, username, applicationName);

            return queryable.FirstOrDefault(p => p.Username == username 
					&& p.ApplicationName == applicationName);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Profile.Username"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.Profile> ByUsername(this IQueryable<PetShop.Core.Data.Profile> queryable, string username)
        {
            return queryable.Where(p => p.Username == username);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Profile.ApplicationName"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.Profile> ByApplicationName(this IQueryable<PetShop.Core.Data.Profile> queryable, string applicationName)
        {
            return queryable.Where(p => p.ApplicationName == applicationName);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Profile.IsAnonymous"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.Profile> ByIsAnonymous(this IQueryable<PetShop.Core.Data.Profile> queryable, bool? isAnonymous)
        {
            return queryable.Where(p => object.Equals(p.IsAnonymous, isAnonymous));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Profile.LastActivityDate"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.Profile> ByLastActivityDate(this IQueryable<PetShop.Core.Data.Profile> queryable, System.DateTime? lastActivityDate)
        {
            return queryable.Where(p => object.Equals(p.LastActivityDate, lastActivityDate));
        }
        
        /// <summary>
        /// Gets a query for <see cref="Profile.LastUpdatedDate"/>.
        /// </summary>
        public static IQueryable<PetShop.Core.Data.Profile> ByLastUpdatedDate(this IQueryable<PetShop.Core.Data.Profile> queryable, System.DateTime? lastUpdatedDate)
        {
            return queryable.Where(p => object.Equals(p.LastUpdatedDate, lastUpdatedDate));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<PetShop.Core.Data.PetShopDataContext, int, PetShop.Core.Data.Profile> ByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (PetShop.Core.Data.PetShopDataContext db, int uniqueID) => 
                        db.Profile.FirstOrDefault(p => p.UniqueID == uniqueID));

            internal static readonly Func<PetShop.Core.Data.PetShopDataContext, string, string, PetShop.Core.Data.Profile> ByUsernameApplicationName = 
                System.Data.Linq.CompiledQuery.Compile(
                    (PetShop.Core.Data.PetShopDataContext db, string username, string applicationName) => 
                        db.Profile.FirstOrDefault(p => p.Username == username 
							&& p.ApplicationName == applicationName));

        }
        #endregion
    }
}

