
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Data.Linq
Imports System.Data.SqlTypes
Imports System.Linq
Imports System.Text
Imports CodeSmith.Data
Imports CodeSmith.Data.Rules
Imports CodeSmith.Data.Rules.Assign
Imports CodeSmith.Data.Rules.Validation

Namespace Petshop.Data
    ''' <summary>
    ''' The manager class for Product.
    ''' </summary>
    Partial Public Class ProductManager 
    Inherits EntityManagerBase(Of PetshopDataManager,Product)
        ''' <summary>
        ''' Initializes the <see cref="ProductManager"/> class.
        ''' </summary>
        Shared Sub New()
            RuleManager.AddShared(Of Product )(GetType(PetshopDataContext))
            
            AddRules()
            
        End Sub

        ''' <summary>
        ''' Initializes the <see cref="ProductManager"/> class.
        ''' </summary>
        ''' <param name="manager">The current manager.</param>
        Public Sub New(ByVal manager As PetshopDataManager) 
            MyBase.New(manager)
            OnCreated()
        End Sub

        ''' <summary>
        ''' Gets the current context.
        ''' </summary>
        Protected ReadOnly Property Context As PetshopDataContext
            Get
                return Manager.Context
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the entity for this manager.
        ''' </summary>
        Protected ReadOnly Property Entity As Table(Of Product)
            Get 
                return Manager.Context.Product
            End Get
        End Property
        
        
        ''' <summary>
        ''' Creates the key for this entity.
        ''' </summary>
        Public Shared Function CreateKey(productId As String) As IEntityKey(Of String)
            Return New EntityKey(Of String)(productId)
        End Function
        
        ''' <summary>
        ''' Gets an entity by the primary key.
        ''' </summary>
        ''' <param name="key">The key for the entity.</param>
        ''' <returns>
        ''' An instance of the entity or null if not found.
        ''' </returns>
        ''' <remarks>
        ''' This method is expecting key to be of type IEntityKey(Of String).
        ''' </remarks>
        ''' <exception cref="ArgumentException">Thrown when key is not of type IEntityKey(Of String).</exception>
        Public Overrides Function GetByKey(ByVal key As IEntityKey) As Product
            If (key Is GetType(IEntityKey(Of String))) Then
                Dim entityKey As IEntityKey(Of String) = DirectCast(key,IEntityKey(Of String))
                return GetByKey(entityKey.Key)
            Else
                Throw New ArgumentException("Invalid key, expected key to be of type IEntityKey(Of String)")
            End If
        End Function
        
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        Public Overloads Function GetByKey(productId As String) As Product
            If (Context.LoadOptions Is Nothing) Then 
                return Query.GetByKey.Invoke(Context, productId)
            Else
                return Entity.FirstOrDefault(Function(p)p.ProductId = productId)
            End If
        End Function
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        Public Overloads Function GetByName([Name] As String) As IQueryable(Of Product)
            If Context.LoadOptions Is Nothing Then 
                return Query.GetByName.Invoke(Context, [Name])
            Else
                return Entity.Where(Function(p)p.Name = [Name])
            End If
        End Function
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        Public Overloads Function GetByCategoryId(categoryId As String) As IQueryable(Of Product)
            If Context.LoadOptions Is Nothing Then 
                return Query.GetByCategoryId.Invoke(Context, categoryId)
            Else
                return Entity.Where(Function(p)p.CategoryId = categoryId)
            End If
        End Function
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        Public Overloads Function GetByCategoryIdName(categoryId As String, [Name] As String) As IQueryable(Of Product)
            If Context.LoadOptions Is Nothing Then 
                return Query.GetByCategoryIdName.Invoke(Context, categoryId, [Name])
            Else
                return Entity.Where(Function(p)p.CategoryId = categoryId _
					AndAlso p.Name = [Name])
            End If
        End Function
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        Public Overloads Function GetByCategoryIdProductIdName(categoryId As String, productId As String, [Name] As String) As IQueryable(Of Product)
            If Context.LoadOptions Is Nothing Then 
                return Query.GetByCategoryIdProductIdName.Invoke(Context, categoryId, productId, [Name])
            Else
                return Entity.Where(Function(p)p.CategoryId = categoryId _
					AndAlso p.ProductId = productId _
					AndAlso p.Name = [Name])
            End If
        End Function

        #Region "Extensibility Method Definitions"
        ''' <summary>Called by the static constructor to add shared rules.</summary>
        Shared Partial Private Sub AddRules()
        End Sub
        ''' <summary>Called when the class is created.</summary>
        Partial Private Sub OnCreated()
        End Sub
        #End Region
        
        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query

            Friend Shared Readonly GetByKey As Func(Of PetshopDataContext, String, Product) = _
                CompiledQuery.Compile( _
                     Function(db As PetshopDataContext, productId As String) _
                        db.Product.FirstOrDefault(Function(p)p.ProductId = productId))

            Friend Shared Readonly  GetByName As Func(Of PetshopDataContext, String, IQueryable(Of Product)) = _
                CompiledQuery.Compile( _
                    Function( db As PetshopDataContext , [Name] As String) _
                        db.Product.Where(Function(p)p.Name = [Name]))

            Friend Shared Readonly  GetByCategoryId As Func(Of PetshopDataContext, String, IQueryable(Of Product)) = _
                CompiledQuery.Compile( _
                    Function( db As PetshopDataContext , categoryId As String) _
                        db.Product.Where(Function(p)p.CategoryId = categoryId))

            Friend Shared Readonly  GetByCategoryIdName As Func(Of PetshopDataContext, String, String, IQueryable(Of Product)) = _
                CompiledQuery.Compile( _
                    Function( db As PetshopDataContext , categoryId As String, [Name] As String) _
                        db.Product.Where(Function(p)p.CategoryId = categoryId _
							AndAlso p.Name = [Name]))

            Friend Shared Readonly  GetByCategoryIdProductIdName As Func(Of PetshopDataContext, String, String, String, IQueryable(Of Product)) = _
                CompiledQuery.Compile( _
                    Function( db As PetshopDataContext , categoryId As String, productId As String, [Name] As String) _
                        db.Product.Where(Function(p)p.CategoryId = categoryId _
							AndAlso p.ProductId = productId _
							AndAlso p.Name = [Name]))

        End Class
        #End Region
    End Class
End Namespace

