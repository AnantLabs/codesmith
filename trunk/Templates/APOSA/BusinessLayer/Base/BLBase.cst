<%-- 
Name: BL Base Class Template
Author: Chris Lasater
Description: Allows generation of BL Base class from parameters
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Concrete Class Template" %>


<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

using System;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base
{
    /// <summary>
    /// BL base is the base for all bl classes
    /// it is marked internal so it cannot be created outside the 
    /// assembly, this makes sure only expected creations of the oobject are possible
    /// and makes the assembly into a complete facade with only known interfaces as entry points
    /// </summary>
    internal abstract class BLBase : System.MarshalByRefObject
    {
        #region Private Varaibles
        private <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Collections.Rules _rules = new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Collections.Rules();
        private Base.Validation.ValidationMessages _messages = new Base.Validation.ValidationMessages();
        
        #endregion

        #region Public Properties
        /// <summary>
        /// Determines whether or not the BL data object has validation messages which are exceptions
        /// </summary>
        public bool HasExceptionValidationMessages
        {
            get
            {
                return _messages.HasExceptions;
            }
        }
        /// <summary>
        /// Determines whether or not the BL data object has validation messages which are messages
        /// </summary>
        public bool HasValidationMessages
        {
            get
            {
                return _messages.HasMessages;
            }
        }
        /// <summary>
        /// Gets the ValidationMessages collection for the BL
        /// </summary>
        public Base.Validation.ValidationMessages ValidationMessages
        {
            get { return this._messages; }
        }
       

        #endregion

        #region Internal Properties
        /// <summary>
        /// Gets the Rules collection for the BL
        /// </summary>
        internal <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Collections.Rules Rules
        {
            get { return this._rules; }
        }

        #endregion

		#region Public Methods
		/// <summary>
        /// Returns Record from Query
        /// </summary>
        public abstract void Get();
		#endregion
		
        #region Protected Methods

        /// <summary>
        /// Allows Bl class implementations to add thier own rules
        /// </summary>
        /// <param name="rule"></param>
        protected void AddRule(RuleBase rule)
        {
            if (rule == null) throw new ArgumentException("Rule cannot be null", "RuleBase");
            _rules.Add(rule);
        }
        /// <summary>
        /// Allows Bl class implementations to add thier own rules
        /// </summary>
        /// <param name="rule"></param>
        protected void AddValidationMessage(Base.Validation.ValidationMessage message)
        {
            if (message == null) throw new ArgumentException("ValidationMessage cannot be null", "ValidationMessage");
            _messages.Add(message);
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Called in BL implementation before save
        /// </summary>
        public bool Validate()
        {
            this.ValidationMessages.Clear();
            for (int i = 0; i < _rules.Count; i++)
                ((RuleBase)_rules[i]).Validate();
            return !this.HasExceptionValidationMessages;
        }
        #endregion

        #region Internal Methods
        /// <summary>
        /// This method is used to provide a memento pattern implementation
        /// for setting restore data for properties on the DL classes. 
        /// You should implement this method only if reflection across
        /// multiple rows is not an issue, for instanc ethis might not be 
        /// effcient if you have a collection of 1000000 rows or more.
        /// If you implement this method after a clean Database read, 
        /// you will be assured of being able to restore the original data if a validation fails,
        /// without a refresh from the database.
        /// </summary>
        internal void SetRestore(<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.Base.IDataTemplate data)
        {
            ((<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.Base.DALBase)data).SetRestore();
        }
        #endregion

        #region Protected Internal Methods

        /// <summary>
        /// This is an abstract method to be implemented in the BL implementation concrete class
        /// gives the implementation concrete class full control of validation and how the data gets saved.
        /// </summary>
        protected internal virtual void SaveData(<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.Base.IDataTemplate data)
        {
            if (!Validate())
            {
                ((<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.Base.DALBase)data).Restore();
                return;
            }
            int recordsAffected = 0;
            try
            {
                recordsAffected = data.ExecuteNonQuery();
                this.ValidationMessages.Add(
                    new Base.Validation.ValidationMessage(
                    Base.Validation.ValidationLevel.Message,
                    "Records Affected", string.Format("Number of records affected : {0}", recordsAffected)));
            }
            catch (Exception ex)
            {
                ((<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.Base.DALBase)data).Restore();
                this.ValidationMessages.Add(
                    new Base.Validation.ValidationMessage(
                    Base.Validation.ValidationLevel.Exception,
                    "", ex.Message));
                this.LogError(ex);		
                throw ex;
            }
            finally
            {


            }

        }

        protected internal void LogError(Exception ex)
        {            
           //logging functions here
        }
        protected internal void LogMessage(string message)
        {
           //logging functions here
        }
        #endregion

        #region Abstract Methods
        /// <summary>
        /// Used inside the assembly to allow data classes to load thier data
        /// </summary>
        protected internal abstract void Load();
        #endregion


    }
}



<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	return "BLBase";	
}
#endregion



</script>