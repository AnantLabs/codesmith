<%-- 
Name: BL Base Class Template
Author: Chris Lasater
Description: Allows generation of BL Base class from parameters
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Concrete Class Template" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

using System;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base
{
	/// <summary>
	/// This is the base class for all rules.
	/// it is marked internal so it cannot be created outside the 
	/// assembly, this makes sure only expected creations of the oobject are possible
	/// and makes the assembly into a complete facade with only known interfaces as entry points
	/// </summary>
	internal abstract class RuleBase
	{
		protected BLBase classToValidate;
		/// <summary>
		/// Houses the BL class that we need to validate
		/// </summary>
		/// <param name="validate"></param>
		public RuleBase(BLBase validate)
		{
			classToValidate = validate;
		}
		/// <summary>
		/// Throw validation exceptions in this method
		/// </summary>
		/// <exception cref="ArgumentException">Must throw an argument exception for propigation of UI exception
		/// display</exception>
        public abstract void Validate();
	}
}


<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	return "RuleBase";	
}
#endregion



</script>