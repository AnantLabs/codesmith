<%-- 
Name: MDIForms Template
Author: Chris Lasater
Description: Allows generation of MDI Forms for Domain Objects
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Interface Template" %>

<%@ XmlProperty Name="ProcedureMap" Schema="../ProceduresToMap.xsd" Default="../ProceduresToMap.xml" Category="Context" Description="The procedure map XML file." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Forms;
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.MDIForms.UI
{
	/// <summary>
	/// Summary description for ApplicationEntry.
	/// </summary>
	public static class ApplicationEntry
	{
		#region Private Static Form Varaibles
		private static ApplicationContext _context;
        private static MainMDI _mainForm;
        private static AboutForm _aboutForm = null;
		<% for(int i = 0;i < ProcedureMap.RecordSets.Count; i++) { %>
        private static <%= GetPluralName(ProcedureMap.RecordSets[i].Name) %>Form _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form;
        <% } %>
		#endregion
		
		#region Private Static Environment Varaibles
        private static string _userName = string.Empty;
        private static string _environment = string.Empty;
        private static System.Security.Principal.WindowsIdentity _identity;
		#endregion
		
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);     
   
            _mainForm = new MainMDI();
            _context = new ApplicationContext();
            _context.MainForm = _mainForm;
            _context.MainForm.FormClosing += new FormClosingEventHandler(MainForm_FormClosing);
                
            Application.Run(_context);           

            
        }

		#region Form Events
        static void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (MessageBox.Show("Are you sure you want to exit?", "Exit", MessageBoxButtons.YesNo) == DialogResult.Yes)
                e.Cancel = false;
            else
                e.Cancel = true;
        }


        public static void Dispose(bool disposing)
        {
            if (disposing)
            {                
                if (_aboutForm != null)
                {
                    _aboutForm.Close();
                    _aboutForm.Dispose();
                    _aboutForm = null;
                }
				<% for(int i = 0;i < ProcedureMap.RecordSets.Count; i++) { %>
				if (_<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form != null)
                {
                    _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form.Close();
                    _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form.Dispose();
                    _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form = null;
                }				
				<% } %>
            }
        }

		#endregion

        #region Global Public Static Properties
        private static System.Security.Principal.WindowsIdentity GetIdentity()
        {
            if (_identity == null)
            {
                try
                {
                    _identity = System.Security.Principal.WindowsIdentity.GetCurrent();
                    if (!_identity.IsAuthenticated || _identity.IsGuest)
                        throw new System.Security.SecurityException("You are either logged on as 'guest' or are not an authenticated client. The application will shutdown now.");

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Authentication Error", MessageBoxButtons.OK);
                    Application.Exit();
                }
            }
            return _identity;
        }
        /// <summary>
        /// 
        /// </summary>
        public static System.Security.Principal.IdentityReferenceCollection CurrentClientGroups
        {
            get { return GetIdentity().Groups; }
        }
        
        /// <summary>
        /// returns the current client environment : Produection | Development
        /// </summary>
        /// <returns></returns>
        public static string GetCurrentEnvironment()
        {
            if (string.IsNullOrEmpty(_environment))
            {
                _environment = Convert.ToString(
                    System.Configuration.ConfigurationManager.AppSettings["Environment"]);
            }
            return _environment;

        }
        /// <summary>
        /// sets the current client environment : Produection | Development
        /// </summary>
        /// <returns></returns>
        public static void SetCurrentEnvironment(string environment)
        {
            System.Configuration.ConfigurationManager.AppSettings.Set("Environment", environment);
            _environment = environment;
            _mainForm.SetCurrentEnvironment();

        }
        /// <summary>
        /// Gets collection of client environments
        /// </summary>
        /// <returns></returns>
        public static IList<System.Configuration.ConnectionStringSettings> GetEnvironments()
        {
            IList<System.Configuration.ConnectionStringSettings> list = new List<System.Configuration.ConnectionStringSettings>();

            foreach (System.Configuration.ConnectionStringSettings setting in System.Configuration.ConfigurationManager.ConnectionStrings)
                list.Add(setting);
            return list;
        }
        /// <summary>
        /// Returns the truncated client name of the current logged in client
        /// </summary>
        /// <returns></returns>
        public static string GetUserName()
        {
            if (GetFullUserName().IndexOf("\\") > 0)
                return GetFullUserName().Substring(GetFullUserName().IndexOf("\\") + 1);
            else
                return GetFullUserName();
        }
        /// <summary>
        /// Returns the full client name of the current logged in client
        /// </summary>
        /// <returns></returns>
        public static string GetFullUserName()
        {
            if (string.IsNullOrEmpty(_userName))
            {
                _userName = string.Empty;
                try
                {
                    _userName = GetIdentity().Name;
                    if (_userName == null) _userName = string.Empty;

                }
                catch (Exception) { _userName = string.Empty; }
            }
            return _userName;
        }

        
        #endregion

        #region Form Events
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static void OpenAboutBox(object sender, EventArgs e)
        {

            if (_aboutForm != null)
            {
                _aboutForm.Close();
                _aboutForm.Dispose();
                _aboutForm = null;
            }
            _aboutForm = new AboutForm();
            _aboutForm.Cursor = Cursors.WaitCursor;
            _aboutForm.ShowDialog(_mainForm);
            _aboutForm.Cursor = Cursors.Default;
        }
		<% for(int i = 0;i < ProcedureMap.RecordSets.Count; i++) { %>		
		/// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static void Open<%= GetPluralName(ProcedureMap.RecordSets[i].Name) %>Form(object sender, EventArgs e)
        {
            if (_<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form != null)
            {
                _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form.Close();
                _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form.Dispose();
                _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form = null;
            }
            _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form = new <%= GetPluralName(ProcedureMap.RecordSets[i].Name) %>Form();
            _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form.MdiParent = _mainForm;
            _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form.Cursor = Cursors.WaitCursor;
            _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form.Show();
            _<%= GetCamelCaseName(GetPluralName(ProcedureMap.RecordSets[i].Name)) %>Form.Cursor = Cursors.Default;
        }
		<% } %>
        
        
		#endregion

		
	}
}
