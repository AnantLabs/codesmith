<%-- 
Name: MDIForms Template
Author: Chris Lasater
Description: Allows generation of MDI Forms for Domain Objects
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Interface Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="SelectCollectionStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="False" Category="Context" Description="Stored Procedure to use for record collection for select." %>
<%@ Property Name="UpdateStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True"  Category="Context" Description="Stored Procedure to use for properties for update." %>


<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer;
using <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Factory;
using <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Validation;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.MDIForms.UI
{
	public partial class <%= GetSingularName(RecordSetName) %>EditForm : Form
    {
        private I<%= GetSingularName(RecordSetName) %>BL _selected<%= GetSingularName(RecordSetName) %>;
         #region Programmer - indicate private variables
		//Used to indicate private varaibles
		#endregion
		
        public <%= GetSingularName(RecordSetName) %>EditForm
			(
				I<%= GetSingularName(RecordSetName) %>BL <%= StringUtil.ToCamelCase(GetSingularName(RecordSetName)) %>
				#region Programmer - Add Form Input Parameters
				//Used to indicate any input parameters
				#endregion
			)
        {
            _selected<%= GetSingularName(RecordSetName) %> = <%= StringUtil.ToCamelCase(GetSingularName(RecordSetName)) %>;
            InitializeComponent();
			#region Programmer - set private variables
			//Used to set private varaibles
			#endregion         
        }
        private void <%= GetSingularName(RecordSetName) %>EditForm_Load(object sender, EventArgs e)
        {
             try
            {
               	#region Programmer - Do any form loading work
				//Used to do form loading functions
				#endregion
                
				<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { %>	
				<%  if(parameter.Name != "@TransactionType") { %>
				<%= GetUIControlName(parameter, true) %> = <%= GetUIControlConversionType(parameter, string.Format("_selected{0}.{1}",GetSingularName(RecordSetName), GetPropertyName(parameter))) %>;
				<%  } %>
				<% } %> 		
                
                this.Text = "Edit <%= GetSingularName(RecordSetName) %>";

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void btnCancel_Click(object sender, EventArgs e)
        {
            #region Programmer - Do any form closing work
			//Used to do form closing functions
			#endregion
            this.Close();
        }

        private void btnSave_Click(object sender, EventArgs e)
        {            
            <% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { %>	
			<%  if(parameter.Name != "@TransactionType") { %>
            _formErrorProvider.AddControlToValidate("<%= GetPropertyName(parameter) %>", <%= GetUIControlName(parameter, false) %>);  
			<%  } %>
			<% } %>   
            _formErrorProvider.ResetError();
            try
            { 
				<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { %>	
				<%  if(parameter.Name != "@TransactionType") { %>
				_selected<%= GetSingularName(RecordSetName) %>.<%= GetPropertyName(parameter) %> = <%= GetUIControlValueStatementOUT(parameter) %>;
				<%  } %>
				<% } %> 
                _selected<%= GetSingularName(RecordSetName) %>.SaveData();
                if (_selected<%= GetSingularName(RecordSetName) %>.HasExceptionValidationMessages)
                {
                    foreach (ValidationMessage message in _selected<%= GetSingularName(RecordSetName) %>.ValidationMessages)
                        _formErrorProvider.SetError(message.FieldName, message.Message);                 

                }               
            
                if (!_formErrorProvider.HasErrors)
                {
                    this.DialogResult = DialogResult.OK;
                    this.Close();
                }
            }
            catch (ArgumentException ex)
            {
                _formErrorProvider.SetError(ex);
                MessageBox.Show(ex.Message);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
       
    }
}