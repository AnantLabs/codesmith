<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Description: This template will generate wrappers for all stored procedures in a database.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate OutputType="None" Language="C#" TargetLanguage="Text" Description="This template will generate wrappers for all stored procedures in a database." %>

<%-- Required Properties  --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Required" Description="Database that the stored procedures wrappers should be based on." OnChanged="OnSourceDatabaseChanged" DeepLoad="True" %>
<%@ Property Name="ResultSchema" Type="CommandWrapperTemplate.ResultSchemaEnum" Category="Required" Default="StronglyTyped"  Description="Determines what type of result schema should be used for the wrapper class." %>
<%@ Property Name="Accessibility" Type="CommandWrapperTemplate.AccessibilityEnum" Category="Required" Default="Public" Description="The accessibility of the generated classes." %>

<%-- Optional Properties  --%>
<%@ Property Name="IgnoreExpressions" Type="StringCollection" Default="" Optional="True" Category="Optional" Description="If supplied, any matching commands will not get wrappers generated. (* is treated as a wildcard)" %>

<%-- Register the StoredProcedures template and have it's properties merged into this template.  --%>
<%@ Register Template="CommandWrapperClass.cst" Name="CommandWrapperTemplate" MergeProperties="True" ExcludeProperties="SourceCommand,BatchMode,CommandClassName,ResultRowClassName,Accessibility,OutputFile" %>

<%-- Register referenced assemblies.  --%>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>

<%-- Import commonly used namespaces. --%>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

private string _outputDirectory = String.Empty;

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
[Optional]
[Category("Output")]
[Description("The directory to output the results to.")]
public string OutputDirectory 
{
	get
	{
		// default to the directory that the template is located in
		if (_outputDirectory.Length == 0) 
			return ".\\";
		
		return _outputDirectory;
	}
	set
	{
		_outputDirectory = value;
		if (_outputDirectory.EndsWith("\\") == false)
		{
			_outputDirectory += "\\";
		}
	} 
}

private List<Regex> _expressions = null;
public bool CommandIsExcluded(CommandSchema command)
{
	if (IgnoreExpressions != null && IgnoreExpressions.Count > 0)
	{
        if(_expressions == null)
        {
            _expressions = new List<Regex>();
            foreach (string ignore in IgnoreExpressions)
            {
                if (!string.IsNullOrEmpty(ignore))
                {
                    _expressions.Add(new Regex(ignore.Trim(), RegexOptions.IgnoreCase));
                }
            }
        }
        
        foreach (Regex regex in _expressions)
        {
            if (regex.IsMatch(command.FullName))
                return true;
        }
	}
    
	return false;
}

public override void Render(TextWriter writer)
{
    if(SourceDatabase.Commands.Count > 0)
        this.Progress.MaximumValue = SourceDatabase.Commands.Count;
    else
    {
        Trace.WriteLine("No commands were found! Please choose a DataSource that contains commands.");
        this.Progress.MaximumValue = 100;
    }
    
	this.Progress.Step = 1;
	
	string outputDirectory = Path.GetFullPath(this.OutputDirectory);
	
	// Create Directory if it doesn't already exist.
	if (!Directory.Exists(outputDirectory)) 
		Directory.CreateDirectory(outputDirectory);
	
	for (int i = 0; i < SourceDatabase.Commands.Count; i++)
	{
		if (!CommandIsExcluded(SourceDatabase.Commands[i]))
		{
			Trace.WriteLine("Generating wrapper for " + SourceDatabase.Commands[i].FullName + "...");
			try
			{
				CommandWrapperTemplate commandWrapperTemplate = this.Create<CommandWrapperTemplate>();
				this.CopyPropertiesTo(commandWrapperTemplate);
				commandWrapperTemplate.SourceCommand = SourceDatabase.Commands[i];
                
                string path = Path.Combine(outputDirectory, commandWrapperTemplate.GetFileName());
                commandWrapperTemplate.RenderToFile(path, true);
			}
			catch (Exception e)
			{
				Trace.WriteLine("Unable to generate wrapper for " + SourceDatabase.Commands[i].FullName + "\r\n" + e.ToString() + "\r\n");
			}
		}
		
		this.Progress.PerformStep();
	}
}

public void OnSourceDatabaseChanged(object sender, System.EventArgs args)
{
    if(SourceDatabase == null) return;
    
    if (string.IsNullOrEmpty(TargetNamespace))
    {
        TargetNamespace = SourceDatabase.Name;
    }
    
    if(IgnoreExpressions == null)
        IgnoreExpressions = new StringCollection();
    
    if (IgnoreExpressions.Count == 0)
    {
        IgnoreExpressions.Add("^dbo.aspnet");
        IgnoreExpressions.Add("^dbo.vw_aspnet");
    }
}
    
</script>