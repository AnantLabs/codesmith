
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace Petshop.Data
{
    /// <summary>
    /// The class representing the dbo.Account table.
    /// </summary>
    [Table(Name="dbo.Account")]
    [DataContract]
    public partial class Account
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Account"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Account()
        {
            OnCreated();
            _profiles = default(EntityRef<Profiles>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private int _accountID = default(int);

        /// <summary>
        /// Gets the AccountID column value.
        /// </summary>
        [Column(Name="AccountID", Storage="_accountID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        [DataMember]
        public int AccountID
        {
            get { return _accountID; }
            set
            {
                if (_accountID != value)
                {
                    OnAccountIDChanging(value);
                    OnPropertyChanging("AccountID");
                    _accountID = value;
                    OnPropertyChanged("AccountID");
                    OnAccountIDChanged();
                }
            }
        }
        
        private int _uniqueID;

        /// <summary>
        /// Gets or sets the UniqueID column value.
        /// </summary>
        [Column(Name="UniqueID", Storage="_uniqueID", DbType="int NOT NULL", CanBeNull=false)]
        [DataMember]
        public int UniqueID
        {
            get { return _uniqueID; }
            set
            {
                if (_uniqueID != value)
                {
                    if (_profiles.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUniqueIDChanging(value);
                    OnPropertyChanging("UniqueID");
                    _uniqueID = value;
                    OnPropertyChanged("UniqueID");
                    OnUniqueIDChanged();
                }
            }
        }
        
        private string _email;

        /// <summary>
        /// Gets or sets the Email column value.
        /// </summary>
        [Column(Name="Email", Storage="_email", DbType="varchar(80) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    OnEmailChanging(value);
                    OnPropertyChanging("Email");
                    _email = value;
                    OnPropertyChanged("Email");
                    OnEmailChanged();
                }
            }
        }
        
        private string _firstName;

        /// <summary>
        /// Gets or sets the FirstName column value.
        /// </summary>
        [Column(Name="FirstName", Storage="_firstName", DbType="varchar(80) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    OnFirstNameChanging(value);
                    OnPropertyChanging("FirstName");
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                    OnFirstNameChanged();
                }
            }
        }
        
        private string _lastName;

        /// <summary>
        /// Gets or sets the LastName column value.
        /// </summary>
        [Column(Name="LastName", Storage="_lastName", DbType="varchar(80) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
                    OnLastNameChanging(value);
                    OnPropertyChanging("LastName");
                    _lastName = value;
                    OnPropertyChanged("LastName");
                    OnLastNameChanged();
                }
            }
        }
        
        private string _address1;

        /// <summary>
        /// Gets or sets the Address1 column value.
        /// </summary>
        [Column(Name="Address1", Storage="_address1", DbType="varchar(80) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string Address1
        {
            get { return _address1; }
            set
            {
                if (_address1 != value)
                {
                    OnAddress1Changing(value);
                    OnPropertyChanging("Address1");
                    _address1 = value;
                    OnPropertyChanged("Address1");
                    OnAddress1Changed();
                }
            }
        }
        
        private string _address2;

        /// <summary>
        /// Gets or sets the Address2 column value.
        /// </summary>
        [Column(Name="Address2", Storage="_address2", DbType="varchar(80)")]
        [DataMember]
        public string Address2
        {
            get { return _address2; }
            set
            {
                if (_address2 != value)
                {
                    OnAddress2Changing(value);
                    OnPropertyChanging("Address2");
                    _address2 = value;
                    OnPropertyChanged("Address2");
                    OnAddress2Changed();
                }
            }
        }
        
        private string _city;

        /// <summary>
        /// Gets or sets the City column value.
        /// </summary>
        [Column(Name="City", Storage="_city", DbType="varchar(80) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    OnCityChanging(value);
                    OnPropertyChanging("City");
                    _city = value;
                    OnPropertyChanged("City");
                    OnCityChanged();
                }
            }
        }
        
        private string _state;

        /// <summary>
        /// Gets or sets the State column value.
        /// </summary>
        [Column(Name="State", Storage="_state", DbType="varchar(80) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    OnStateChanging(value);
                    OnPropertyChanging("State");
                    _state = value;
                    OnPropertyChanged("State");
                    OnStateChanged();
                }
            }
        }
        
        private string _zip;

        /// <summary>
        /// Gets or sets the Zip column value.
        /// </summary>
        [Column(Name="Zip", Storage="_zip", DbType="varchar(20) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string Zip
        {
            get { return _zip; }
            set
            {
                if (_zip != value)
                {
                    OnZipChanging(value);
                    OnPropertyChanging("Zip");
                    _zip = value;
                    OnPropertyChanged("Zip");
                    OnZipChanged();
                }
            }
        }
        
        private string _country;

        /// <summary>
        /// Gets or sets the Country column value.
        /// </summary>
        [Column(Name="Country", Storage="_country", DbType="varchar(20) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    OnCountryChanging(value);
                    OnPropertyChanging("Country");
                    _country = value;
                    OnPropertyChanged("Country");
                    OnCountryChanged();
                }
            }
        }
        
        private string _phone;

        /// <summary>
        /// Gets or sets the Phone column value.
        /// </summary>
        [Column(Name="Phone", Storage="_phone", DbType="varchar(20)")]
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    OnPhoneChanging(value);
                    OnPropertyChanging("Phone");
                    _phone = value;
                    OnPropertyChanged("Phone");
                    OnPhoneChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Profiles> _profiles;

        /// <summary>
        /// Gets or sets the Profiles association.
        /// </summary>
        [Association(Name="Profiles_Account", Storage="_profiles", ThisKey="UniqueID", OtherKey="UniqueID", IsUnique=true, IsForeignKey=true)]
        [DataMember]
        public Profiles Profiles
        {
            get { return _profiles.Entity; }
            set
            {
                Profiles previousValue = _profiles.Entity;
                if (previousValue != value || _profiles.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Profiles");
                    if (previousValue != null)
                    {
                        _profiles.Entity = null;
                        previousValue.AccountList.Remove(this);
                    }
                    _profiles.Entity = value;
                    if (value != null)
                    {
                        value.AccountList.Add(this);
                        _uniqueID = value.UniqueID;
                    }
                    else
                    {
                        _uniqueID = default(int);
                    }
                    OnPropertyChanged("Profiles");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when AccountID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAccountIDChanging(int value);
        /// <summary>Called after AccountID has Changed.</summary>
        partial void OnAccountIDChanged();
        /// <summary>Called when UniqueID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUniqueIDChanging(int value);
        /// <summary>Called after UniqueID has Changed.</summary>
        partial void OnUniqueIDChanged();
        /// <summary>Called when Email is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnEmailChanging(string value);
        /// <summary>Called after Email has Changed.</summary>
        partial void OnEmailChanged();
        /// <summary>Called when FirstName is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnFirstNameChanging(string value);
        /// <summary>Called after FirstName has Changed.</summary>
        partial void OnFirstNameChanged();
        /// <summary>Called when LastName is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLastNameChanging(string value);
        /// <summary>Called after LastName has Changed.</summary>
        partial void OnLastNameChanged();
        /// <summary>Called when Address1 is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAddress1Changing(string value);
        /// <summary>Called after Address1 has Changed.</summary>
        partial void OnAddress1Changed();
        /// <summary>Called when Address2 is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAddress2Changing(string value);
        /// <summary>Called after Address2 has Changed.</summary>
        partial void OnAddress2Changed();
        /// <summary>Called when City is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCityChanging(string value);
        /// <summary>Called after City has Changed.</summary>
        partial void OnCityChanged();
        /// <summary>Called when State is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStateChanging(string value);
        /// <summary>Called after State has Changed.</summary>
        partial void OnStateChanged();
        /// <summary>Called when Zip is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnZipChanging(string value);
        /// <summary>Called after Zip has Changed.</summary>
        partial void OnZipChanged();
        /// <summary>Called when Country is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCountryChanging(string value);
        /// <summary>Called after Country has Changed.</summary>
        partial void OnCountryChanged();
        /// <summary>Called when Phone is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnPhoneChanging(string value);
        /// <summary>Called after Phone has Changed.</summary>
        partial void OnPhoneChanged();
        #endregion
        
    }
}

