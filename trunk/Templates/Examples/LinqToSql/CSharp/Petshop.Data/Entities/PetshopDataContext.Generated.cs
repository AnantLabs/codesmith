
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace Petshop.Data
{
    /// <summary>
    /// The DataContext class for the Petshop database.
    /// </summary>
    public partial class PetshopDataContext : DataContext
    {
        private static MappingSource mappingCache = new AttributeMappingSource();
        
        #region ConnectionString
        private const string CONNECTION_NAME = "PetshopConnectionString";
        private static volatile string _connectionString;
        private static object _connectionLock = new Object();

        /// <summary>The application connection string read from web.config or app.config</summary>
        /// <example>
        /// Add the following key to the "connectionStrings" section of your config:
        /// <code><![CDATA[
        /// <configuration>
        ///     <connectionStrings>
        ///         <add name="PetshopConnectionString" 
        ///             connectionString="Data Source=(local);Initial Catalog=DATABASE;Integrated Security=True"
        ///             providerName="System.Data.SqlClient" />
        ///     </connectionStrings>
        /// </configuration>
        /// ]]></code>
        /// </example>
        public static string ConnectionString
        {
            get
            {
                if (_connectionString == null)
                {
                    lock (_connectionLock)
                    {
                        if (_connectionString == null)
                            _connectionString = GetDefaultConnectionString();
                    }
                }
                return _connectionString;
            }
        }

        private static string GetDefaultConnectionString()
        {
            ConnectionStringSettings settings = ConfigurationManager.ConnectionStrings[CONNECTION_NAME];
            if (settings == null)
            {
                string message = string.Format("Could not find the connection string '{0}' in the configuration file.  " +
                       "Please add an entry to connectionStrings section named '{0}'.", CONNECTION_NAME);
                throw new ConfigurationErrorsException(message);
            }
            return settings.ConnectionString;
        } 
        #endregion

        #region Constructors
        /// <summary>
        /// Initializes the <see cref="PetshopDataContext"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        static PetshopDataContext()
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetshopDataContext"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        public PetshopDataContext()
            : base(ConnectionString, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PetshopDataContext"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        [DebuggerNonUserCodeAttribute]
        public PetshopDataContext(string connection)
            : base(connection, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PetshopDataContext"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        [DebuggerNonUserCodeAttribute]
        public PetshopDataContext(IDbConnection connection)
            : base(connection, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PetshopDataContext"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [DebuggerNonUserCodeAttribute]
        public PetshopDataContext(string connection, MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PetshopDataContext"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [DebuggerNonUserCodeAttribute]
        public PetshopDataContext(IDbConnection connection, MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        #endregion
        
        #region Tables
        /// <summary>Represents the dbo.Account table in the underlying database.</summary>
        public Table<Account> Account
        {
            get { return GetTable<Account>(); }
        }
        
        /// <summary>Represents the dbo.Cart table in the underlying database.</summary>
        public Table<Cart> Cart
        {
            get { return GetTable<Cart>(); }
        }
        
        /// <summary>Represents the dbo.Category table in the underlying database.</summary>
        public Table<Category> Category
        {
            get { return GetTable<Category>(); }
        }
        
        /// <summary>Represents the dbo.Inventory table in the underlying database.</summary>
        public Table<Inventory> Inventory
        {
            get { return GetTable<Inventory>(); }
        }
        
        /// <summary>Represents the dbo.Item table in the underlying database.</summary>
        public Table<Item> Item
        {
            get { return GetTable<Item>(); }
        }
        
        /// <summary>Represents the dbo.LineItem table in the underlying database.</summary>
        public Table<LineItem> LineItem
        {
            get { return GetTable<LineItem>(); }
        }
        
        /// <summary>Represents the dbo.Orders table in the underlying database.</summary>
        public Table<Orders> Orders
        {
            get { return GetTable<Orders>(); }
        }
        
        /// <summary>Represents the dbo.OrderStatus table in the underlying database.</summary>
        public Table<OrderStatus> OrderStatus
        {
            get { return GetTable<OrderStatus>(); }
        }
        
        /// <summary>Represents the dbo.Product table in the underlying database.</summary>
        public Table<Product> Product
        {
            get { return GetTable<Product>(); }
        }
        
        /// <summary>Represents the dbo.Profiles table in the underlying database.</summary>
        public Table<Profiles> Profiles
        {
            get { return GetTable<Profiles>(); }
        }
        
        /// <summary>Represents the dbo.Supplier table in the underlying database.</summary>
        public Table<Supplier> Supplier
        {
            get { return GetTable<Supplier>(); }
        }
        
        #endregion

        #region Functions
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called after this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called before a Account is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertAccount(Account instance);
        /// <summary>Called before a Account is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateAccount(Account instance);
        /// <summary>Called before a Account is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteAccount(Account instance);
        /// <summary>Called before a Cart is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertCart(Cart instance);
        /// <summary>Called before a Cart is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateCart(Cart instance);
        /// <summary>Called before a Cart is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteCart(Cart instance);
        /// <summary>Called before a Category is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertCategory(Category instance);
        /// <summary>Called before a Category is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateCategory(Category instance);
        /// <summary>Called before a Category is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteCategory(Category instance);
        /// <summary>Called before a Inventory is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertInventory(Inventory instance);
        /// <summary>Called before a Inventory is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateInventory(Inventory instance);
        /// <summary>Called before a Inventory is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteInventory(Inventory instance);
        /// <summary>Called before a Item is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertItem(Item instance);
        /// <summary>Called before a Item is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateItem(Item instance);
        /// <summary>Called before a Item is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteItem(Item instance);
        /// <summary>Called before a LineItem is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertLineItem(LineItem instance);
        /// <summary>Called before a LineItem is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateLineItem(LineItem instance);
        /// <summary>Called before a LineItem is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteLineItem(LineItem instance);
        /// <summary>Called before a Orders is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertOrders(Orders instance);
        /// <summary>Called before a Orders is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateOrders(Orders instance);
        /// <summary>Called before a Orders is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteOrders(Orders instance);
        /// <summary>Called before a OrderStatus is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertOrderStatus(OrderStatus instance);
        /// <summary>Called before a OrderStatus is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateOrderStatus(OrderStatus instance);
        /// <summary>Called before a OrderStatus is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteOrderStatus(OrderStatus instance);
        /// <summary>Called before a Product is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertProduct(Product instance);
        /// <summary>Called before a Product is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateProduct(Product instance);
        /// <summary>Called before a Product is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteProduct(Product instance);
        /// <summary>Called before a Profiles is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertProfiles(Profiles instance);
        /// <summary>Called before a Profiles is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateProfiles(Profiles instance);
        /// <summary>Called before a Profiles is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteProfiles(Profiles instance);
        /// <summary>Called before a Supplier is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertSupplier(Supplier instance);
        /// <summary>Called before a Supplier is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateSupplier(Supplier instance);
        /// <summary>Called before a Supplier is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteSupplier(Supplier instance);
        #endregion
    }
}

