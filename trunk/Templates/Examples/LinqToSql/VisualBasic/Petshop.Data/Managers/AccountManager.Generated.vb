
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Data.Linq
Imports System.Data.SqlTypes
Imports System.Linq
Imports System.Text
Imports CodeSmith.Data
Imports CodeSmith.Data.Rules
Imports CodeSmith.Data.Rules.Assign
Imports CodeSmith.Data.Rules.Validation
Imports Petshop.Data

Namespace Petshop.Data.Managers
    ''' <summary>
    ''' The manager class for Account.
    ''' </summary>
    Partial Public Class AccountManager 
	Inherits EntityManagerBase(Of PetshopDataManager,Account)
        ''' <summary>
        ''' Initializes the <see cref="AccountManager"/> class.
        ''' </summary>
        Shared Sub New()
            RuleManager.AddShared(Of Account)(new RequiredRule("Email"))
            RuleManager.AddShared(Of Account)(new LengthRule("Email", 80))
            RuleManager.AddShared(Of Account)(new RequiredRule("FirstName"))
            RuleManager.AddShared(Of Account)(new LengthRule("FirstName", 80))
            RuleManager.AddShared(Of Account)(new RequiredRule("LastName"))
            RuleManager.AddShared(Of Account)(new LengthRule("LastName", 80))
            RuleManager.AddShared(Of Account)(new RequiredRule("Address1"))
            RuleManager.AddShared(Of Account)(new LengthRule("Address1", 80))
            RuleManager.AddShared(Of Account)(new LengthRule("Address2", 80))
            RuleManager.AddShared(Of Account)(new RequiredRule("City"))
            RuleManager.AddShared(Of Account)(new LengthRule("City", 80))
            RuleManager.AddShared(Of Account)(new RequiredRule("State"))
            RuleManager.AddShared(Of Account)(new LengthRule("State", 80))
            RuleManager.AddShared(Of Account)(new RequiredRule("Zip"))
            RuleManager.AddShared(Of Account)(new LengthRule("Zip", 20))
            RuleManager.AddShared(Of Account)(new RequiredRule("Country"))
            RuleManager.AddShared(Of Account)(new LengthRule("Country", 20))
            RuleManager.AddShared(Of Account)(new LengthRule("Phone", 20))
            AddRules()
        End Sub

        ''' <summary>
        ''' Initializes the <see cref="AccountManager"/> class.
        ''' </summary>
        ''' <param name="manager">The current manager.</param>
        Public Sub New(ByVal manager As PetshopDataManager) 
			MyBase.New(manager)
            OnCreated()
        End Sub

        ''' <summary>
        ''' Gets the current context.
        ''' </summary>
        Protected ReadOnly Property Context As PetshopDataContext
            Get
				return Manager.Context
			End Get
        End Property
        
        ''' <summary>
        ''' Gets the entity for this manager.
        ''' </summary>
        Protected ReadOnly Property Entity As Table(Of Account)
            Get 
				return Manager.Context.Account
			End Get
        End Property
        
        
        ''' <summary>
        ''' Creates the key for this entity.
        ''' </summary>
        Public Shared Function CreateKey(accountID As Integer) As IEntityKey(Of Integer)
            Return New EntityKey(Of Integer)(accountID)
        End Function
        
        ''' <summary>
        ''' Gets an entity by the primary key.
        ''' </summary>
        ''' <param name="key">The key for the entity.</param>
        ''' <returns>
        ''' An instance of the entity or null if not found.
        ''' </returns>
        ''' <remarks>
        ''' This method is expecting key to be of type IEntityKey(Of Integer).
        ''' </remarks>
        ''' <exception cref="ArgumentException">Thrown when key is not of type IEntityKey(Of Integer).</exception>
        Public Overrides Function GetByKey(ByVal key As IEntityKey) As Account
            If (key Is GetType(IEntityKey(Of Integer))) Then
                Dim entityKey As IEntityKey(Of Integer) = DirectCast(key,IEntityKey(Of Integer))
                return GetByKey(entityKey.Key)
            Else
                Throw New ArgumentException("Invalid key, expected key to be of type IEntityKey(Of Integer)")
            End If
        End Function
        
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        Public Overloads Function GetByKey(accountID As Integer) As Account
            If (Context.LoadOptions Is Nothing) Then 
                return Query.GetByKey.Invoke(Context, accountID)
            Else
                return Entity.FirstOrDefault(Function(a)a.AccountID = accountID)
			End If
        End Function
        ''' <summary>
        ''' Gets a query by an index.
        ''' </summary>
        Public Overloads Function GetByUniqueID(uniqueID As Integer) As IQueryable(Of Account)
            If Context.LoadOptions Is Nothing Then 
                return Query.GetByUniqueID.Invoke(Context, uniqueID)
            Else
                return Entity.Where(Function(a)a.UniqueID = uniqueID)
			End If
        End Function

        #Region "Extensibility Method Definitions"
        ''' <summary>Called by the static constructor to add shared rules.</summary>
        Shared Partial Private Sub AddRules()
		End Sub
        ''' <summary>Called when the class is created.</summary>
        Partial Private Sub OnCreated()
		End Sub
        #End Region
        
        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query

            Friend Shared Readonly GetByKey As Func(Of PetshopDataContext, Integer, Account) = _
                CompiledQuery.Compile( _
                     Function(db As PetshopDataContext, accountID As Integer) _
                        db.Account.FirstOrDefault(Function(a)a.AccountID = accountID))

            Friend Shared Readonly  GetByUniqueID As Func(Of PetshopDataContext, Integer, IQueryable(Of Account)) = _
                CompiledQuery.Compile( _
                    Function( db As PetshopDataContext , uniqueID As Integer) _
                        db.Account.Where(Function(a)a.UniqueID = uniqueID))

        End Class
        #End Region
    End Class
End Namespace

