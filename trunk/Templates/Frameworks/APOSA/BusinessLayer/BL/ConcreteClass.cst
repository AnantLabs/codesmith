<%-- 
Name: Concrete DL Class Template
Author: Chris Lasater
Description: Allows generation of Concrete Public DL class from Update and Select stored procs
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper"  Description="Single Record Concrete Class Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="UpdateStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True"  Category="Context" Description="Stored Procedure to use for properties for update." %>
<%@ Property Name="SelectStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True" Category="Context" Description="Stored Procedure to use for properties for select." %>
<%@ Property Name="SelectCollectionStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="False" Category="Context" Description="Stored Procedure to use for record collection for select." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;
using System.Data;
using System.Collections.Generic;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

/// <summary>
/// This class can be used without reflection or moved into the Bl assembly if desired for simplification.
/// It is where data for a particualr database type is written for access into that database
/// The constructor requires a connections tring to be fed from the UI or calling process.
/// THis is the BL class for User Table
/// it is serialized to facilitate databinding and to give it more flexibility in the UI
/// it is marked internal so it cannot be created outside the 
/// assembly, this makes sure only expected creations of the oobject are possible
/// and makes the assembly into a complete facade with only known interfaces as entry points
/// </summary>
namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL
{
	
	<%= BuildXmlClassComment(SelectCollectionStoredProcedure) %>
	[Serializable]
	internal class <%= GetSingularName(RecordSetName)%>BL : <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.BLBase, <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.I<%= GetSingularName(RecordSetName)%>BL
	{
		#region Private Variables
		private <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.I<%= GetSingularName(RecordSetName)%>DL _data;
		#endregion		

		#region Constructor
		/// <summary>
		/// This base constructor is called by other constructors by adding : this()
		/// to the end of the expanded constructors. This is done to allow the rules to be set 
		/// up without re-writing the code in every constructor.
		/// </summary>
		/// <param name="connectionString"></param>
		public <%= GetSingularName(RecordSetName)%>BL()
		{
			
		}
		
		/// <summary>
		/// This is used to create the object from serialization data
		/// </summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		public <%= GetSingularName(RecordSetName)%>BL(System.Runtime.Serialization.SerializationInfo info,
			System.Runtime.Serialization.StreamingContext context) : this()
		{
			<% foreach (CommandResultColumnSchema column in SelectCollectionStoredProcedure.CommandResults[0].Columns) { %>	
			this.<%= GetPropertyName(column) %> = (<%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %>)info.GetValue("<%= GetPropertyName(column) %>", typeof(<%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %>));
			<% } %>
			
			<% if(UpdateStoredProcedure != null) { %>
			<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { 
				if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null) {%>	
			this.<%= GetPropertyName(parameter) %> = (<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>)info.GetValue("<%= GetPropertyName(parameter) %>", typeof(<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>));
			<%	} %>
			<% } %>
			
			<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllOutputParameters) {  
				if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null &&
					UpdateStoredProcedure.AllInputParameters[parameter.Name] == null) { %>	
			this.<%= GetPropertyName(parameter) %> = (<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>)info.GetValue("<%= GetPropertyName(parameter) %>", typeof(<%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %>));
			<%	} %>	
			<% } %>
			<% } %>
			
			<% if(SelectStoredProcedure != null) { %>
			<% foreach (CommandResultColumnSchema column in SelectStoredProcedure.CommandResults[0].Columns) { 
				if(SelectCollectionStoredProcedure.CommandResults[0].Columns[column.Name.Trim(new char[]{'[',']'})] == null && 
					((UpdateStoredProcedure == null) ||  
					(UpdateStoredProcedure != null && 
					UpdateStoredProcedure.AllInputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null &&
					UpdateStoredProcedure.AllOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null))) { %>			
			this.<%= GetPropertyName(column) %> = (<%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %>)info.GetValue("<%= GetPropertyName(column) %>", typeof(<%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %>));
			<%	} %>		
			<% } %>
			<% } %>	
		}
		#endregion

		#region Internal Protected Properties
		/// <summary>
		/// returns IDataTemplate for the underlying DL data class
		/// </summary>
		protected internal <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.I<%= GetSingularName(RecordSetName)%>DL Data
		{
            get
            {
                if (_data == null)
                    _data = new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.Impl.<%= GetSingularName(RecordSetName)%>DL();
                return _data;
            }
			
		}
		#endregion

        #region Properties
		<% foreach (CommandResultColumnSchema column in SelectCollectionStoredProcedure.CommandResults[0].Columns) { %>	
		<%= BuildXmlParameterComment(column) %>        
		public <%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(column) %> { get { return Data.<%= GetPropertyName(column) %>; } set { Data.<%= GetPropertyName(column) %> = value; } }
		<% } %>
		
		<% if(UpdateStoredProcedure != null) { %>
        <% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null) {%>	
		<%= BuildXmlParameterComment(parameter) %>        
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return Data.<%= GetPropertyName(parameter) %>; } set { Data.<%= GetPropertyName(parameter) %> = value; } }
		<%	} %>
		<% } %>
		
		<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllOutputParameters) {  
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null &&
				UpdateStoredProcedure.AllInputParameters[parameter.Name] == null) { %>	
		<%= BuildXmlParameterComment(parameter) %>        
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return Data.<%= GetPropertyName(parameter) %>; } set { Data.<%= GetPropertyName(parameter) %> = value; } }
		<%	} %>	
		<% } %>
		<% } %>
		
		<% if(SelectStoredProcedure != null) { %>
		<% foreach (CommandResultColumnSchema column in SelectStoredProcedure.CommandResults[0].Columns) { 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[column.Name.Trim(new char[]{'[',']'})] == null && 
				((UpdateStoredProcedure == null) ||  
				(UpdateStoredProcedure != null && 
				UpdateStoredProcedure.AllInputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null &&
				UpdateStoredProcedure.AllOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null))) { %>			
		<%= BuildXmlParameterComment(column) %>        
		public <%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(column) %> { get { return Data.<%= GetPropertyName(column) %>; } set { Data.<%= GetPropertyName(column) %> = value; } }
		<%	} %>		
		<% } %>
		<% } %>	
        
        #endregion		

		#region Programmer - Properties
			// Developer Code Goes here 
		#endregion
		
        #region ISerializable Members

        public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, 
			System.Runtime.Serialization.StreamingContext context)
		{
			
			<% foreach (CommandResultColumnSchema column in SelectCollectionStoredProcedure.CommandResults[0].Columns) { %>	
			info.AddValue("<%= GetPropertyName(column) %>", <%= GetPropertyName(column) %>);
			<% } %>
			
			<% if(UpdateStoredProcedure != null) { %>
			<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { 
				if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null) {%>	
			info.AddValue("<%= GetPropertyName(parameter) %>", <%= GetPropertyName(parameter) %>);
			<%	} %>
			<% } %>
			
			<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllOutputParameters) {  
				if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null &&
					UpdateStoredProcedure.AllInputParameters[parameter.Name] == null) { %>	
			info.AddValue("<%= GetPropertyName(parameter) %>", <%= GetPropertyName(parameter) %>);
			<%	} %>	
			<% } %>
			<% } %>
			
			<% if(SelectStoredProcedure != null) { %>
			<% foreach (CommandResultColumnSchema column in SelectStoredProcedure.CommandResults[0].Columns) { 
				if(SelectCollectionStoredProcedure.CommandResults[0].Columns[column.Name.Trim(new char[]{'[',']'})] == null && 
					((UpdateStoredProcedure == null) ||  
					(UpdateStoredProcedure != null && 
					UpdateStoredProcedure.AllInputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null &&
					UpdateStoredProcedure.AllOutputParameters[string.Format("@{0}",column.Name.Trim(new char[]{'[',']'}))] == null))) { %>			
			info.AddValue("<%= GetPropertyName(column) %>", <%= GetPropertyName(column) %>);
			<%	} %>		
			<% } %>
			<% } %>	
		}

		#endregion

		#region IBLBase Members		
        /// <summary>
        /// Allows local data class to be pushed back to the base class
        /// </summary>
        public void SaveData()
        {
			int index = this.Rules.Add(new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.Rules.<%= GetSingularName(RecordSetName)%>UpdateRule(this));
			try
			{
            	this.SaveData(Data);
			}
			finally
			{
				this.Rules.RemoveAt(index);
			}
        }
		/// <summary>
		/// 
		/// </summary>
		protected internal override void Load()
		{
			if(!Validate()) return;
			IDataReader reader = null;
			
			try
			{
				reader = this.Data.Execute();
				
				if (reader == null) return;			
					
				while(reader.Read())
				{	
					try
					{						
						
						<% if(SelectStoredProcedure != null) { %>
						<% foreach (CommandResultColumnSchema column in SelectStoredProcedure.CommandResults[0].Columns) { %>			
						this.<%= GetPropertyName(column) %> = reader["<%= GetOriginalPropertyName(column) %>"] != DBNull.Value && reader["<%= GetOriginalPropertyName(column) %>"] != null ? (<%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %>)reader["<%= GetOriginalPropertyName(column) %>"] : <%= GetMemberVariableDefaultValue(column.DataType, CanHaveNullablePrimitives, column.Name == "TransactionType") %>;
						<%  } %>
						<% } %>	
                        
                        this.SetRestore(Data);
					}
					catch (Exception ex)
					{	
						this.ValidationMessages.Add(
							new Base.Validation.ValidationMessage(
                            Base.Validation.ValidationLevel.Exception,
							"",ex.Message));
                        base.LogError(ex);				
						
					}						
				}	
						
			}
			catch (Exception ex)
			{			
				this.ValidationMessages.Add(
                    new Base.Validation.ValidationMessage(
                    Base.Validation.ValidationLevel.Exception,
					"",ex.Message));
                base.LogError(ex);		
				throw ex;
			}
			finally
			{
				
				if(reader != null)
					try
					{
						reader.Close();
						reader = null;
					}
					catch(Exception){}
			}				
		}
		#endregion

        #region BLBase Members
		/// <summary>
		/// Pulls data from the DL. Call this to retrieve a collection of users.
		/// </summary>
		public override void Get()
		{
			int index = this.Rules.Add(new <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.Rules.<%= GetSingularName(RecordSetName)%>SelectRule(this));
			try
			{
				Load();		
			}
			finally
			{
				this.Rules.RemoveAt(index);
			}
		}        
        /// <summary>
        /// This method is used to provide a memento pattern implementation
        /// for setting restore data for properties on the DL classes. 
        /// You should implement this method only if reflection across
        /// multiple rows is not an issue, for instanc ethis might not be 
        /// effcient if you have a collection of 1000000 rows or more.
        /// If you implement this method after a clean Database read, 
        /// you will be assured of being able to restore the original data if a validation fails,
        /// without a refresh from the database.
        /// </summary>
        internal void SetRestore()
        {
            base.SetRestore(this.Data);
        }
        #endregion

        #region Equals Implementation
        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if (obj != null && obj is <%= GetSingularName(RecordSetName)%>BL)			
			return <%= GenerateEqualsImplStatement() %>;
            else
                return false;

        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
			return <%= GenerateHashCodeImplStatement() %>;
        }


        #endregion

        #region Programmer - Methods
			// Developer Code Goes here 
		#endregion
    }
}

<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	if (RecordSetName != null && RecordSetName.Length > 0)
	{
		return GetSingularName(RecordSetName);
	}
	else
	{
		return SelectStoredProcedure.Name.Replace(" ", "");
	}
}

public string GenerateEqualsImplStatement()
{
	System.Text.StringBuilder sb = new System.Text.StringBuilder();
	for(int i = 0; i < SelectCollectionStoredProcedure.CommandResults[0].Columns.Count; i++) 
	{ 	
		sb.Append(string.Format("\r\n\t\t\t\t{0}.Equals((({1}BL)obj).{2})", 
			GetPropertyName(SelectCollectionStoredProcedure.CommandResults[0].Columns[i]),
			GetSingularName(RecordSetName),
			GetPropertyName(SelectCollectionStoredProcedure.CommandResults[0].Columns[i])));
		sb.Append(" && "); 		
	} 
	if(UpdateStoredProcedure != null) 
	{ 
		for(int i = 0; i < UpdateStoredProcedure.AllInputParameters.Count; i++) 
		{ 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[UpdateStoredProcedure.AllInputParameters[i].Name.Trim(new char[]{'[',']','@'})] == null) 	
			{ 	
				sb.Append(string.Format("\r\n\t\t\t\t{0}.Equals((({1}BL)obj).{2})", 
					GetPropertyName(UpdateStoredProcedure.AllInputParameters[i]),
					GetSingularName(RecordSetName),
					GetPropertyName(UpdateStoredProcedure.AllInputParameters[i])));
				sb.Append(" && "); 				
			}
		}
		
		for(int i = 0; i < UpdateStoredProcedure.AllOutputParameters.Count; i++) 
		{ 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[UpdateStoredProcedure.AllOutputParameters[i].Name.Trim(new char[]{'[',']','@'})] == null &&
				UpdateStoredProcedure.AllInputParameters[UpdateStoredProcedure.AllOutputParameters[i].Name] == null) 
			{  			 	
				sb.Append(string.Format("\r\n\t\t\t\t{0}.Equals((({1}BL)obj).{2})", 
					GetPropertyName(UpdateStoredProcedure.AllOutputParameters[i]),
					GetSingularName(RecordSetName),
					GetPropertyName(UpdateStoredProcedure.AllOutputParameters[i])));
				sb.Append(" && "); 				
			}
		} 	
	} 
	if(SelectStoredProcedure != null) 
	{ 			
		for(int i = 0; i < SelectStoredProcedure.CommandResults[0].Columns.Count; i++) 
		{ 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[SelectStoredProcedure.CommandResults[0].Columns[i].Name.Trim(new char[]{'[',']'})] == null && 
				((UpdateStoredProcedure == null) ||  
				(UpdateStoredProcedure != null && 
				UpdateStoredProcedure.AllInputParameters[string.Format("@{0}",SelectStoredProcedure.CommandResults[0].Columns[i].Name.Trim(new char[]{'[',']'}))] == null &&
				UpdateStoredProcedure.AllOutputParameters[string.Format("@{0}",SelectStoredProcedure.CommandResults[0].Columns[i].Name.Trim(new char[]{'[',']'}))] == null))) 
			{
				sb.Append(string.Format("\r\n\t\t\t\t{0}.Equals((({1}BL)obj).{2})", 
					GetPropertyName(SelectStoredProcedure.CommandResults[0].Columns[i]),
					GetSingularName(RecordSetName),
					GetPropertyName(SelectStoredProcedure.CommandResults[0].Columns[i])));
				sb.Append(" && "); 				
			}
		} 
	} 	
	return sb.ToString().TrimEnd(new char[]{'&',' ','\t','\r','\n'});
}

public string GenerateHashCodeImplStatement()
{
	System.Text.StringBuilder sb = new System.Text.StringBuilder();
	for(int i = 0; i < SelectCollectionStoredProcedure.CommandResults[0].Columns.Count; i++) 
	{ 	
		sb.Append(string.Format("\r\n\t\t\t\t{0}.GetHashCode()", 
			GetPropertyName(SelectCollectionStoredProcedure.CommandResults[0].Columns[i])));
		sb.Append(" ^ "); 		
	} 
	if(UpdateStoredProcedure != null) 
	{ 
		for(int i = 0; i < UpdateStoredProcedure.AllInputParameters.Count; i++) 
		{ 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[UpdateStoredProcedure.AllInputParameters[i].Name.Trim(new char[]{'[',']','@'})] == null) 	
			{ 	
				sb.Append(string.Format("\r\n\t\t\t\t{0}.GetHashCode()", 
					GetPropertyName(UpdateStoredProcedure.AllInputParameters[i])));
				sb.Append(" ^ "); 				
			}
		}
		
		for(int i = 0; i < UpdateStoredProcedure.AllOutputParameters.Count; i++) 
		{ 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[UpdateStoredProcedure.AllOutputParameters[i].Name.Trim(new char[]{'[',']','@'})] == null &&
				UpdateStoredProcedure.AllInputParameters[UpdateStoredProcedure.AllOutputParameters[i].Name] == null) 
			{  			 	
				sb.Append(string.Format("\r\n\t\t\t\t{0}.GetHashCode()", 
					GetPropertyName(UpdateStoredProcedure.AllOutputParameters[i])));
				sb.Append(" ^ "); 				
			}
		} 	
	} 
	if(SelectStoredProcedure != null) 
	{ 			
		for(int i = 0; i < SelectStoredProcedure.CommandResults[0].Columns.Count; i++) 
		{ 
			if(SelectCollectionStoredProcedure.CommandResults[0].Columns[SelectStoredProcedure.CommandResults[0].Columns[i].Name.Trim(new char[]{'[',']'})] == null && 
				((UpdateStoredProcedure == null) ||  
				(UpdateStoredProcedure != null && 
				UpdateStoredProcedure.AllInputParameters[string.Format("@{0}",SelectStoredProcedure.CommandResults[0].Columns[i].Name.Trim(new char[]{'[',']'}))] == null &&
				UpdateStoredProcedure.AllOutputParameters[string.Format("@{0}",SelectStoredProcedure.CommandResults[0].Columns[i].Name.Trim(new char[]{'[',']'}))] == null))) 
			{
				sb.Append(string.Format("\r\n\t\t\t\t{0}.GetHashCode()", 
					GetPropertyName(SelectStoredProcedure.CommandResults[0].Columns[i])));
				sb.Append(" ^ "); 				
			}
			 	
		} 
	} 	
	return sb.ToString().TrimEnd(new char[]{'^',' ','\t','\r','\n'});
}
#endregion

</script>
