<%-- 
Name: Concrete DL Class Template
Author: Chris Lasater
Description: Allows generation of Concrete Public DL class from Update and Select stored procs
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper"  Description="Single Record Concrete Class Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="SelectStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True" Category="Context" Description="Stored Procedure to use for properties for select." %>
<%@ Property Name="ExcludedFromRules" Type="System.String" Optional="True" Category="Data" Description="Column or Parameter names to Be Excluded from the rules engine." %>


<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
using System;
using <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Validation;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.Rules
{
	
	/// <summary>
	/// This is the concrete implementation for the Rule
	/// </summary>
	internal class <%= GetSingularName(RecordSetName)%>SelectRule : <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.RuleBase
	{
        public <%= GetSingularName(RecordSetName)%>SelectRule(<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.<%= GetSingularName(RecordSetName)%>BL validate) : base(validate) { }

        protected <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.<%= GetSingularName(RecordSetName)%>BL Data
		{
            get { return (<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.BL.<%= GetSingularName(RecordSetName)%>BL)classToValidate; }
		}
		/// <summary>
		/// Used to hold validation logic for properties of the BL class 
		/// </summary>	
		public override void Validate()
		{
			<% if(SelectStoredProcedure != null) { %>
				<% foreach (ParameterSchema parameter in SelectStoredProcedure.AllInputParameters) { %>						
					<% if(!IsParameterExcluded(parameter) && !IsParameterNullable(parameter)) { %>
			<%= WriteValidationStatement(parameter, CanHaveNullablePrimitives) %>
					<% } %>					
				<% } %>
			<% } %>
			
			#region Programmer - Rules
				// Developer Code Goes here 
			#endregion
		}
	}
}


<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	if (RecordSetName != null && RecordSetName.Length > 0)
	{
		return GetSingularName(RecordSetName);
	}
	else
	{
		return SelectStoredProcedure.Name.Replace(" ", "");
	}
}
#endregion

protected bool IsParameterExcluded(ParameterSchema parameter) 
{ 
	if (!string.IsNullOrEmpty(ExcludedFromRules))
	{
		string[] excluded = ExcludedFromRules.Split(new char[]{','});
		for (int i = 0; i < excluded.Length; i++)
		{
			if(parameter.Name.Trim(new char[]{'[',']','@'}) == excluded[i].Trim()) return true;
		}			
	}
	return false;	
}
</script>