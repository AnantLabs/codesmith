<%-- 
Name: BL Base Class Template
Author: Chris Lasater
Description: Allows generation of BL Base class from parameters
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Concrete Class Template" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

using System;
using System.Collections;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Collections
{
	/// <summary>
	/// This is a collection class for rules.
	/// We use this to render and expected type from a collection.
	/// It acts as an iterator and has appropriate collection methods
	/// It also has an indexer
	/// it is marked internal so it cannot be created outside the 
	/// assembly, this makes sure only expected creations of the object are possible
	/// and makes the assembly into a complete facade with only known interfaces as entry points
	/// </summary>
	internal class Rules : IEnumerator, ICollection
	{
		#region Private Variables
		private ArrayList _rules = new ArrayList();
		private int _index = 0;
		#endregion		

		#region Indexer
		/// <summary>
		/// 
		/// </summary>
		public  <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.RuleBase this[int index]
		{
			get{return (<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.RuleBase)_rules[index];}
		}
		#endregion

		#region ICollection Members

		public bool IsSynchronized
		{
			get
			{				
				return _rules.IsSynchronized;
			}
		}

		public int Count
		{
			get
			{
				// TODO:  Add OneWaySearchResultsBL.Count getter implementation
				return _rules.Count;
			}
		}

		public void CopyTo(Array array, int index)
		{
			_rules.CopyTo(array, index);
		}

		public object SyncRoot
		{
			get
			{
				// TODO:  Add OneWaySearchResultsBL.SyncRoot getter implementation
				return _rules.SyncRoot;
			}
		}

		#endregion

		#region IEnumerator Members
		
		public void Reset()
		{
			_index = 0;
		}

		public object Current
		{
			get
			{				
				return this[_index];
			}
		}

		public bool MoveNext()
		{
			if(_index + 1 < _rules.Count)
			{
				_index ++;
				return true;
			}
			return false;
		}

		#endregion

		#region IList Members

		public bool IsReadOnly
		{
			get
			{
				// TODO:  Add OneWaySearchResultsBL.IsReadOnly getter implementation
				return _rules.IsReadOnly;
			}
		}
		

		public void RemoveAt(int index)
		{
			_rules.RemoveAt(index);
		}

		public void Insert(int index, <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.RuleBase value)
		{
			_rules.Insert(index, value);
		}

		public void Remove(object value)
		{
			_rules.Remove(value);
		}

		public bool Contains(<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.RuleBase value)
		{
			// TODO:  Add OneWaySearchResultsBL.Contains implementation
			return _rules.Contains(value);
		}

		public void Clear()
		{
			_rules.Clear();
		}

		public int IndexOf(<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.RuleBase value)
		{
			// TODO:  Add OneWaySearchResultsBL.IndexOf implementation
			return _rules.IndexOf(value);
		}

		public int Add(<%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.RuleBase value)
		{
			// TODO:  Add OneWaySearchResultsBL.Add implementation
			return _rules.Add(value);
		}

		public bool IsFixedSize
		{
			get
			{
				// TODO:  Add OneWaySearchResultsBL.IsFixedSize getter implementation
				return _rules.IsFixedSize;
			}
		}

		#endregion

		#region IEnumerable Members

		public IEnumerator GetEnumerator()
		{
			// TODO:  Add Rules.GetEnumerator implementation
			return _rules.GetEnumerator();
		}

		#endregion
	}
}


<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	return "Rules";	
}
#endregion



</script>