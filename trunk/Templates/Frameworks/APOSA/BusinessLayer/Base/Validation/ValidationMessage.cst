<%-- 
Name: BL Base Class Template
Author: Chris Lasater
Description: Allows generation of BL Base class from parameters
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Concrete Class Template" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

using System;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Validation
{
	/// <summary>
	/// Summary description for ValidationMessage.
	/// </summary>
	public class ValidationMessage
	{
		#region Private Variables
		private Base.Validation.ValidationLevel _level;
		private string _fieldName;
		private string _message;
		#endregion

		#region Constructors
		/// <summary>
		/// Simple constructor accepts a message and defaults
		/// the Base.Validation.ValidationLevel to Message level.
		/// </summary>
		/// <param name="message"></param>
		public ValidationMessage(string message): this(
			Base.Validation.ValidationLevel.Message,
			string.Empty,
			message)
		{
		}
		/// <summary>
		/// Overloaded Constructor for Validation Message class accepts and exception level
		/// a field name for a data parameter
		/// and a string message for display or logging
		/// </summary>
		/// <param name="level">Base.Validation.ValidationLevel enum</param>
		/// <param name="fieldName">string for the data field in question, if any</param>
		/// <param name="message">string for the display or logging message</param>
		public ValidationMessage(
            Base.Validation.ValidationLevel level,
			string fieldName, 
			string message)
		{
			_level = level;
			_fieldName = fieldName;
			_message = message;
		}

		#endregion

		#region Properties
		/// <summary>
		/// Returns the validation level of exception		
		/// </summary>
        public Base.Validation.ValidationLevel ValidationLevel
		{
			get{return _level;}
		}
		/// <summary>
		/// Returns the FieldName that was validated	
		/// </summary>
		public string FieldName
		{
			get{return _fieldName;}
		}
		/// <summary>
		/// Message to return for display or logging	
		/// </summary>
		public string Message
		{
			get{return _message;}
		}
		#endregion
	}
}


<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	return "ValidationMessage";	
}
#endregion



</script>