<%-- 
Name: Concrete DL Class Template
Author: Chris Lasater
Description: Allows generation of Concrete Public DL class from Update and Select stored procs
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../../../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Concrete Class Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="UpdateStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True"  Category="Context" Description="Stored Procedure to use for properties for update." %>
<%@ Property Name="SelectStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True" Category="Context" Description="Stored Procedure to use for properties for select." %>
<%@ Property Name="SelectCollectionStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="False" Category="Context" Description="Stored Procedure to use for record collection for select." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

/// <summary>
/// This class can be used without reflection or moved into the Bl assembly if desired for simplification.
/// It is where data for a particualr database type is written for access into that database
/// The constructor requires a connections tring to be fed from the UI or calling process.
/// </summary>
namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.Impl
{
	
	<%= BuildXmlClassComment(SelectCollectionStoredProcedure) %>
	[Base.InsertStoredProcedureNameAttribute("<%=UpdateStoredProcedure%>")]
	[Base.SelectStoredProcedureNameAttribute("<%=SelectStoredProcedure%>")]
	public class  <%= GetSingularName(RecordSetName)%>DL : <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.Base.DALBase, <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.DataLayer.DL.I<%= GetSingularName(RecordSetName)%>DL
	{
		
		#region Private Variables		
        <% System.Collections.ArrayList columnsUsed = new System.Collections.ArrayList(); %>
		<% foreach (CommandResultColumnSchema column in SelectCollectionStoredProcedure.CommandResults[0].Columns) { %>	
		<%= GetMemberVariableDeclarationStatement(column, CanHaveNullablePrimitives) %> <% columnsUsed.Add(column.Name.Trim(new char[]{'[',']','@',' '})); %>
		<% } %>   
		
		<% if(UpdateStoredProcedure != null) { %>
		<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { 
			if(!columnsUsed.Contains(parameter.Name.Trim(new char[]{'[',']','@',' '}))) {%>							
		<%= GetMemberVariableDeclarationStatement(parameter, CanHaveNullablePrimitives) %> <% columnsUsed.Add(parameter.Name.Trim(new char[]{'[',']','@',' '})); %>	
		<%	} %>
		<% } %>      		
		<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllOutputParameters) { 
			if(!columnsUsed.Contains(parameter.Name.Trim(new char[]{'[',']','@',' '}))) { %>				
		<%= GetMemberVariableDeclarationStatement(parameter, CanHaveNullablePrimitives) %> <% columnsUsed.Add(parameter.Name.Trim(new char[]{'[',']','@',' '})); %>	
		<%	} %>
		<% } %>    
		<% } %>
		
		<% if(SelectStoredProcedure != null) { %>
		<% foreach (CommandResultColumnSchema column in SelectStoredProcedure.CommandResults[0].Columns) { 
			if(!columnsUsed.Contains(column.Name.Trim(new char[]{'[',']','@',' '})))  { %>		
		<%= GetMemberVariableDeclarationStatement(column, CanHaveNullablePrimitives) %>	
		<%	} %>	
		<% } %>
		<% } %>	
        #endregion		        	

		#region Programmer - Private Varaibles
			// Developer Code Goes here 
		#endregion
		
        #region Properties
		<% columnsUsed.Clear(); %>
        <% foreach (CommandResultColumnSchema column in SelectCollectionStoredProcedure.CommandResults[0].Columns) { %>	
		<%= BuildXmlParameterComment(column) %>  <% columnsUsed.Add(column.Name.Trim(new char[]{'[',']','@',' '})); %>      
		public <%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(column) %> { get { return <%= GetMemberVariableName(column) %>; } set { <%= GetMemberVariableName(column) %> = value; } }
		<% } %>
		
		<% if(UpdateStoredProcedure != null) { %>
        <% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { 
			if(!columnsUsed.Contains(parameter.Name.Trim(new char[]{'[',']','@',' '}))) {%>	
		<%= BuildXmlParameterComment(parameter) %>  <% columnsUsed.Add(parameter.Name.Trim(new char[]{'[',']','@',' '})); %>	      
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return <%= GetMemberVariableName(parameter) %>; } set { <%= GetMemberVariableName(parameter) %> = value; } }
		<%	} %>
		<% } %>
		
		<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllOutputParameters) {  
			if(!columnsUsed.Contains(parameter.Name.Trim(new char[]{'[',']','@',' '})))  { %>	
		<%= BuildXmlParameterComment(parameter) %>   <% columnsUsed.Add(parameter.Name.Trim(new char[]{'[',']','@',' '})); %>	     
		public <%= GetCSharpVariableType(parameter.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(parameter) %> { get { return <%= GetMemberVariableName(parameter) %>; } set { <%= GetMemberVariableName(parameter) %> = value; } }
		<%	} %>	
		<% } %>
		<% } %>
		
		<% if(SelectStoredProcedure != null) { %>
		<% foreach (CommandResultColumnSchema column in SelectStoredProcedure.CommandResults[0].Columns) { 
			if(!columnsUsed.Contains(column.Name.Trim(new char[]{'[',']','@',' '}))) { %>			
		<%= BuildXmlParameterComment(column) %>        
		public <%= GetCSharpVariableType(column.DataType, CanHaveNullablePrimitives) %> <%= GetPropertyName(column) %> { get { return <%= GetMemberVariableName(column) %>; } set { <%= GetMemberVariableName(column) %> = value; } }
		<%	} %>		
		<% } %>
		<% } %>	
        #endregion
		
		#region Programmer - Properties
			// Developer Code Goes here 
		#endregion
      
		#region Programmer - Methods
			// Developer Code Goes here 
		#endregion
    }
}


<script runat="template">
#region Public Methods
public enum AccessibilityEnum
{
    Public,
    Protected,
    Internal,
    ProtectedInternal,
    Private
}

public override string GetFileName()
{
	return this.GetClassName() + ".cs";
}


public string GetClassName()
{
	if (RecordSetName != null && RecordSetName.Length > 0)
	{
		return GetSingularName(RecordSetName);
	}
	else
	{
		return SelectStoredProcedure.Name.Replace(" ", "");
	}
}
#endregion

</script>
