<%-- 
Name: Collection DL Class Template
Author: Chris Lasater
Description: Allows generation of error provider componenet
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Allows generation of error provider componenet" %>


using System;
using System.ComponentModel;
using System.Collections;
using System.Diagnostics;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------


namespace FormsUIComponent
{
	/// <summary>
	/// This class is used to propigate the Rules exceptions to the UI
	/// </summary>
	public class FormsUIErrorProvider : System.Windows.Forms.ErrorProvider
	{
		#region Private Varaibles
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container _components = null;
		private Hashtable _controlsToValidate = new Hashtable();
        private bool _hasErrors = false;
		#endregion

		#region Constructors
		/// <summary>
		/// Typical compenent constructors
		/// </summary>
		/// <param name="container"></param>
		public FormsUIErrorProvider(System.ComponentModel.IContainer container)
		{
			///
			/// Required for Windows.Forms Class Composition Designer support
			///
			container.Add(this);
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
		}

		/// <summary>
		/// Typical compenent constructors
		/// </summary>
		public FormsUIErrorProvider()
		{
			///
			/// Required for Windows.Forms Class Composition Designer support
			///
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
		}

		#endregion

		#region Properties

		#endregion

		#region Protected methods
		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(_components != null)
				{
					_components.Dispose();
				}
			}
			base.Dispose( disposing );
		}


		#endregion

        #region Public Properties
        /// <summary>
        /// Shows whether there are errors
        /// this is set to false on call of ResetError()
        /// </summary>
        public bool HasErrors
        {
            get { return _hasErrors; }
        }
        #endregion

        #region Public Methods
        /// <summary>
		/// This method adds a control to the dictionary collection.
		/// Each control has a control key that should map to a Property name 
		/// on its specific BL. This mapping is necessary because the rule will throw an ArgumentException 
		/// and the parameter name is mapped to a control and returned via this method
		/// </summary>
		/// <param name="controlKey">Name of a property on the specific BL</param>
		/// <example>'UserName' maps to the UserDataBL property UserName</example>
		/// <returns></returns>
		public System.Windows.Forms.Control GetControlToValidate(string controlKey)
		{
			return (System.Windows.Forms.Control)_controlsToValidate[controlKey];
		}
		/// <summary>
		/// Each control has a control key that should map to a Property name 
		/// on its specific BL. The parameter name is mapped to a control via this method
		/// </summary>
		/// <param name="controlKey"></param>
		/// <param name="control"></param>
		public void AddControlToValidate(string controlKey, System.Windows.Forms.Control control)
		{
			if(!_controlsToValidate.ContainsKey(controlKey) && 
				!_controlsToValidate.ContainsValue(control))
			_controlsToValidate[controlKey] = control;
		}
		/// <summary>
		/// Resets the underlying ErrorProvider for all controls
		/// </summary>
		/// <param name="ex"></param>
		public void ResetError()
		{
            _hasErrors = false;
			foreach(DictionaryEntry obj in _controlsToValidate)
			{
				System.Windows.Forms.Control control = (System.Windows.Forms.Control)obj.Value;
				if(control != null)
					base.SetError(control, "");
			}
		}
		/// <summary>
		/// Sets the Control that maps to an argument exception from the arguments exceptions
		/// ParamName property, and uses the underlying ErrorProvider to implement the display exception
		/// </summary>
		/// <param name="ex"></param>
		public void SetError(ArgumentException ex)
		{
			System.Windows.Forms.Control control = 
				(System.Windows.Forms.Control)_controlsToValidate[ex.ParamName];
            if (control != null)
            {
                base.SetError(control, ex.Message);
                _hasErrors = true;
            }
		}

		/// <summary>
		/// Sets the Control that maps to an argument exception from the arguments exceptions
		/// ParamName property, and uses the underlying ErrorProvider to implement the display exception
		/// </summary>
		/// <param name="fieldName">the name of the control for the error data field</param>
		/// <param name="message"> the display message text</param>
		public void SetError(string fieldName, string message)
		{
			System.Windows.Forms.Control control = 
				(System.Windows.Forms.Control)_controlsToValidate[fieldName];
            if (control != null)
            {
                base.SetError(control, message);
                _hasErrors = true;
            }
		}
		
		#endregion

		#region Component Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			_components = new System.ComponentModel.Container();
		}
		#endregion
	}
}