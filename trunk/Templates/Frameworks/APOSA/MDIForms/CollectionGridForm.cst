<%-- 
Name: MDIForms Template
Author: Chris Lasater
Description: Allows generation of MDI Forms for Domain Objects
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../Utility/ProjectHelper.cs" Inherits="Utility.ProjectHelper" Description="Single Record Interface Template" %>

<%@ Property Name="RecordSetName" Type="System.String" Category="Data" Description="The name of the recordset classes" %>
<%@ Property Name="SelectCollectionStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="False" Category="Context" Description="Stored Procedure to use for record collection for select." %>
<%@ Property Name="UpdateStoredProcedure" Type="SchemaExplorer.CommandSchema" Optional="True"  Category="Context" Description="Stored Procedure to use for properties for update." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import NameSpace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import NameSpace="CodeSmith.CustomProperties" %>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer;
using <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Factory;
using <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.BusinessLayer.Base.Validation;

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by APOSA CodeSmith Domain Object Template.
//
//     Date:    <%= DateTime.Now.ToString("M/d/yyyy") %>
//     Time:    <%= DateTime.Now.ToString("h:mm tt") %>
//     Version: <%= typeof(CodeTemplate).Assembly.GetName().Version.ToString() %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= CompanyNameSpace %>.<%=ProjectNameSpace%>.MDIForms.UI
{
	public partial class <%= GetPluralName(RecordSetName) %>Form : Form
    {
        private I<%= GetSingularName(RecordSetName) %>BL _current<%= GetSingularName(RecordSetName) %>Item;
		
        public <%= GetPluralName(RecordSetName) %>Form()
        {
			
			InitializeComponent();
			
			this.btnEdit.Enabled = false;
			this.btnDelete.Enabled = false;
        }
		#region Load Events & Methods
        private void LoadData()
        {
            try
            {
                I<%= GetPluralName(RecordSetName)%>BL bc = 
				<%= GetSingularName(RecordSetName)%>Factory.Get<%= GetPluralName(RecordSetName)%>BL
				(
				<% for(int i = 0; i < SelectCollectionStoredProcedure.AllInputParameters.Count; i++) { %>	
				<%= GetUIControlValueStatementOUT(SelectCollectionStoredProcedure.AllInputParameters[i]).Replace(";",string.Empty) %><% if(i < SelectCollectionStoredProcedure.AllInputParameters.Count - 1) { %>, <% } %>
				<% } %>				
				);
                if (bc.HasExceptionValidationMessages)
                {
                    string exceptions = string.Empty;
                    foreach (ValidationMessage message in bc.ValidationMessages)
                        exceptions += string.Format("{0} : {1}\n", message.FieldName, message.Message);
                    throw new Exception(exceptions);
                }
				if (bc.Count < 1)
                {
                    MessageBox.Show("No Records Were Returned From the Query.");
                }
                this.dgvRecords.DataSource = bc;
				#region Programmer - After Processing Area
				//Used to allow developers to add code after processing
				#endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void <%= GetPluralName(RecordSetName) %>Form_Load(object sender, EventArgs e)
        {
            <% if(SelectCollectionStoredProcedure.AllInputParameters.Count < 1) { %>
			LoadData();	
			<% } %>
        }
		#endregion
		
		#region Button Events
		<% if(SelectCollectionStoredProcedure.AllInputParameters.Count > 0) { %>
        private void btnGetRecords_Click(object sender, EventArgs e)
        {
            LoadData();
        }
		<% } %>
		
		<% if(UpdateStoredProcedure != null) { %>
        private void btnAdd_Click(object sender, EventArgs e)
        {
            try
            {
				#region Programmer - Add Form Input Parameters Validation Area
				//Used to validate any input parameters
				#endregion
				<%= GetSingularName(RecordSetName) %>AddForm form = new <%= GetSingularName(RecordSetName) %>AddForm
				(
				<% for(int i = 0; i < SelectCollectionStoredProcedure.AllInputParameters.Count; i++) { %>	
				<%= GetUIControlValueStatementOUT(SelectCollectionStoredProcedure.AllInputParameters[i]).Replace(";",string.Empty) %><% if(i < SelectCollectionStoredProcedure.AllInputParameters.Count - 1) { %>, <% } %>
				<% } %>	
				#region Programmer - Add Form Input Parameters
				//Used to indicate any input parameters
				#endregion
				);
                DialogResult result = form.ShowDialog(this);
                if (result != DialogResult.OK) return;

                LoadData();   
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            try
            {
                this._current<%= GetSingularName(RecordSetName) %>Item = (I<%= GetSingularName(RecordSetName) %>BL)dgvRecords.CurrentRow.DataBoundItem;
            }
            catch (Exception)
            { }
            try
            {
                if (this._current<%= GetSingularName(RecordSetName) %>Item == null) throw new Exception("You must first select a valid <%= GetSingularName(RecordSetName) %> Record");
                <%= GetSingularName(RecordSetName) %>EditForm form = new <%= GetSingularName(RecordSetName) %>EditForm(this._current<%= GetSingularName(RecordSetName) %>Item);
                DialogResult result = form.ShowDialog(this);
                if (result != DialogResult.OK) return;

                LoadData();     
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
		
		private void btnDelete_Click(object sender, EventArgs e)
        {
			
            try
            {
                this._current<%= GetSingularName(RecordSetName) %>Item = (I<%= GetSingularName(RecordSetName) %>BL)dgvRecords.CurrentRow.DataBoundItem;
            }
            catch (Exception)
            { }
            try
            {
                if (this._current<%= GetSingularName(RecordSetName) %>Item == null) throw new Exception("You must first select a valid <%= GetSingularName(RecordSetName) %> Record");
                if (MessageBox.Show("Are you sure you want to delete this <%= GetSingularName(RecordSetName) %> record?", "Delete?", MessageBoxButtons.OKCancel) == DialogResult.Cancel)
                	return;
					
				_current<%= GetSingularName(RecordSetName) %>Item.TransactionType = 1;
				_current<%= GetSingularName(RecordSetName) %>Item.SaveData();
                if (_current<%= GetSingularName(RecordSetName) %>Item.HasExceptionValidationMessages)
                {
					string messageString = string.Empty;
                    foreach (ValidationMessage message in _current<%= GetSingularName(RecordSetName) %>Item.ValidationMessages)
                        messageString += string.Format("{0} : {1}",message.FieldName, message.Message);   
					throw new Exception(messageString);

                }         

                LoadData();     
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }			
        }
		<% } %>
		#endregion
		
		#region DataGrid Events
		void dgvRecords_SelectionChanged(object sender, System.EventArgs e)
        {
			this.btnEdit.Enabled = false;
			this.btnDelete.Enabled = false;
			try
            {
                this._current<%= GetSingularName(RecordSetName) %>Item = (I<%= GetSingularName(RecordSetName) %>BL)dgvRecords.CurrentRow.DataBoundItem;
            }
            catch (Exception)
            { }
            try
            {
				if (this._current<%= GetSingularName(RecordSetName) %>Item != null)
				{
					this.btnEdit.Enabled = true;
					this.btnDelete.Enabled = true;
				}
			}
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }	
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void dgvRecords_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {          
			<% if(UpdateStoredProcedure != null) { %>
			btnEdit.Enabled = false;
            if (dgvRecords.RowCount > 0)
            	btnEdit.Enabled = true; 
			<% } %>
            try
            {
                if (dgvRecords.Columns.Contains("HasExceptionValidationMessages"))
                    dgvRecords.Columns.Remove("HasExceptionValidationMessages");
                if (dgvRecords.Columns.Contains("HasValidationMessages"))
                    dgvRecords.Columns.Remove("HasValidationMessages");
                if (dgvRecords.Columns.Contains("ValidationMessages"))
                    dgvRecords.Columns.Remove("ValidationMessages");
                if (dgvRecords.Columns.Contains("TransactionType"))
                    dgvRecords.Columns.Remove("TransactionType");
                
					
				<% int displayIndex = 0; %>
				<% foreach (CommandResultColumnSchema column in SelectCollectionStoredProcedure.CommandResults[0].Columns) { %>						
				if (dgvRecords.Columns.Contains("<%= GetPropertyName(column) %>"))
                    dgvRecords.Columns["<%= GetPropertyName(column) %>"].DisplayIndex = <%= displayIndex %>; 
				<% displayIndex ++; %>
				<% } %>   
				
				<% if(UpdateStoredProcedure != null) { %>
				<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllInputParameters) { 
					if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null) {%>							
				if (dgvRecords.Columns.Contains("<%= GetPropertyName(parameter) %>"))
                    dgvRecords.Columns["<%= GetPropertyName(parameter) %>"].DisplayIndex = <%= displayIndex %>; 
				<% displayIndex ++; %>
				<%	} %>
				<% } %>      		
				<% foreach (ParameterSchema parameter in UpdateStoredProcedure.AllOutputParameters) { 
					if(SelectCollectionStoredProcedure.CommandResults[0].Columns[parameter.Name.Trim(new char[]{'[',']','@'})] == null &&
						UpdateStoredProcedure.AllInputParameters[parameter.Name] == null) { %>				
				if (dgvRecords.Columns.Contains("<%= GetPropertyName(parameter) %>"))
                    dgvRecords.Columns["<%= GetPropertyName(parameter) %>"].DisplayIndex = <%= displayIndex %>; 
				<% displayIndex ++; %>
				<%	} %>
				<% } %>    
				<% } %>
				
				

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            
        }
        
      
        #endregion        
    }
}