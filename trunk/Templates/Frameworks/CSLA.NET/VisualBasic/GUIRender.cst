<%@ CodeTemplate Language="VB" Src="CSLAHelper.vb" Inherits="CSLAHelper" Debug="TRUE" TargetLanguage="VB" Description="Calls templates for a table in the database" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%-- OutputSubTemplate Signature is: --%>
<%-- OutputSubTemplate(TemplateName as String, Optional OverwriteGeneratedFile as Boolean, Optional IsCollection as Boolean, Optional DeveloperClassFolder as String ) --%>
<%-- Generate the Base Class --%>
   <% OutputSubTemplate(ObjectTemplate.ToString, True, False) %>

<%-- Generate the Custom Code Class --%>
   <% If IsBaseClass then %>
      <% OutputSubTemplate("CustomCodeClass", False, False,OutPutDeveloperCodeDirectory) %> 
   <% End If %>
       
<%-- Generate the Base Collection Class --%>
   <% If GenerateCollection then %>
      <% OutputSubTemplate(CollectionTemplate.ToString, True, True) %>
   <% End If %>

<%-- Generate the Custom Collection Class --%>
   <% If GenerateCollection then %>
      <% OutputSubTemplate("CustomCodeClass", False, True, OutPutDeveloperCodeDirectory) %>  
   <% End If %>


<%-- ************************************************************************************************************ --%>

<script runat="template">
'Where is the template directory
Private TemplatePath as String = "C:\AltaSystems\Development Standards\Templates\CSLA\Development\"
Private mSubTemplate As CodeTemplate

<Browsable(False)> _
Public ReadOnly Property MySubTemplate() As CodeTemplate
   Get     
         Return mSubTemplate    
   End Get
End Property

Public Sub OutputSubTemplate(ByVal cst as String, Optional bOverwriteFile as Boolean = False, Optional bIsCollection as Boolean = False, Optional DeveloperClassFolder as String = "")
   Try     
   'Compile the Template        
      CompileTemplate(GetTemplate(cst)) 
	  'The mSubTemplate is set to a compiled template or to nothing
      'Depending on the error state of the compile
      If mSubTemplate Is Nothing then 
		'msgbox( "Template is nothing")
		Exit Sub
	  End If
      'Set the is collection code to intercept and set what to use as the class names
         IsCollectionCode = bIsCollection
   
      'Set all properties and we'll use only what we need it the templates
	With MySubTemplate
      .SetProperty("ClassNamespace", ClassNamespace)
      .SetProperty("FLCPrefix", FLCPrefix)
      .SetProperty("ObjectName", ObjectName)
      .SetProperty("ObjectTemplate", ObjectTemplate)
      .SetProperty("OutPutBaseDirectory", OutPutBaseDirectory)
      .SetProperty("RootTable", RootTable)
      .SetProperty("SetAsBaseClass", SetAsBaseClass)
	  .SetProperty("BaseClassExt", BaseClassExt)
      
      .SetProperty("MemberPrefix", MemberPrefix)
      .SetProperty("Accessibility", Accessibility)
      .SetProperty("Serializable", Serializable)
      .SetProperty("MustBeInherited", MustBeInherited)
      .SetProperty("TransactionType", TransactionType)
      
      .SetProperty("IsCollectionCode", IsCollectionCode)  
      .SetProperty("CollectionTemplate", CollectionTemplate)
      .SetProperty("CollectionName", CollectionName)
      .SetProperty("ChildCollectionName", ChildCollectionName)
      .SetProperty("ChildMemberName", ChildMemberName)
      .SetProperty("ParentName", ParentName)
      .SetProperty("ParentType", ParentType)      
      .SetProperty("AllowSort", AllowSort)
      .SetProperty("AllowFind", AllowFind)
      
      .SetProperty("KeyColumn", KeyColumn)
      .SetProperty("ValueColumn", ValueColumn)        
      
      .SetProperty("GeneralSPPrefix", GeneralSPPrefix)
      .SetProperty("InsertPrefix", InsertPrefix)
      .SetProperty("UpdatePrefix", UpdatePrefix)
      .SetProperty("DeletePrefix", DeletePrefix)
      .SetProperty("SelectPrefix", SelectPrefix)       
 
 
      'Send results to the Output screen
      .Render(Response)
   
      'Send results to a file
      'Use True to overwrite files with the same name. False to prevent overwriting.
      DirExists(OutPutBaseDirectory & OutPutDeveloperCodeDirectory)
	  .RenderToFile(OutPutBaseDirectory & VBSourceFileName(cst, bIsCollection), bOverwriteFile)
   
	End With
	
   Catch ex as System.InvalidOperationException
      'This is what will be thrown when it cannot overwrite the existing Custom Class File
      'So catch it and continue on
   Finally
   End Try
End Sub

Public Function GetTemplate(ByVal cst as String) As String
   'Used to get the Full Template Name with the Path and extention  
   Return TemplatePath & cst & ".cst"
End Function 

Public Sub CompileTemplate(ByVal cstTemplateFile as String)
   Dim compiler As New CodeTemplateCompiler(cstTemplateFile)
      compiler.Compile()      
      If compiler.Errors.Count = 0 Then
        mSubTemplate = compiler.CreateInstance()
      Else
        Dim i As Integer
		Dim err as string
        For i = 0 To compiler.Errors.Count - 1
          Response.WriteLine(compiler.Errors(i).ToString())
		  err += compiler.Errors(i).ToString() & vbnewline
        Next i
		msgbox("The Template " & cstTemplateFile & " contains an error." & vbnewline & err, vbexclamation, "Template Error")
    	mSubTemplate = Nothing  
	End If
End Sub

<Browsable(False)> _
Public Function VBSourceFileName(ByVal cst as string, ByVal bIsCollection as Boolean) As String
   If bIsCollection Then
      If cst.ToLower = "customcodeclass" Then                     
         Return OutPutDeveloperCodeDirectory & GetCustomCollectionName & ".vb"                   
      Else
         Return GetCustomCollectionName & BaseClassExt & ".vb"           
      End If
   ElseIF IsBaseClass AndAlso SetAsBaseClass Then                 
      If cst.ToLower = "customcodeclass" Then                     
         Return OutPutDeveloperCodeDirectory & GetCustomClassName & ".vb"                        
      Else
         Return GetCustomClassName & BaseClassExt & ".vb"                   
      End If
   End If
   
   Return ObjectName & ".vb"
   
End Function

</script>
