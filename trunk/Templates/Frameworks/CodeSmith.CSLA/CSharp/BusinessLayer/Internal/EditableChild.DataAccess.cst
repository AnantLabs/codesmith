<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 EditableRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;

using <%= DataProjectName %>;

#endregion

namespace <%= BusinessProjectName %>
{
	public partial class <%= BusinessClassName %>
	{
		#region Data Access
		
<% if(DataAccessImplementation == DataAccessMethod.None) { %>		
		protected override void Child_Create()
		{
			// TODO: load default values
			// omit this override if you have no defaults to set
			base.Child_Create();
		}
		
		private void Child_Fetch(object childData)
		{
			// TODO: load values
		}
		
		private override void Child_Insert(object parent)
		{
			// TODO: insert values
		}
		
		private override void Child_Update(object parent)
		{
			// TODO: update values
		}
		
		private override void Child_DeleteSelf(object parent)
		{
			// TODO: delete values
		}
<% } else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL) { %>
		protected override void Child_Create()
		{
			// TODO: load default values
			// omit this override if you have no defaults to set
			base.Child_Create();
		}
		
		private void Child_Fetch(object childData)
		{
			// TODO: load values
		}
		
		private override void Child_Insert(object parent)
		{
			// TODO: insert values
		}
		
		private override void Child_Update(object parent)
		{
			// TODO: update values
		}
		
		private override void Child_DeleteSelf(object parent)
		{
			// TODO: delete values
		}
<% } %>
		#endregion
	}
}