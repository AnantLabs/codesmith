<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 EditableRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;

using <%= DataProjectName %>;

#endregion

namespace <%= BusinessProjectName %>
{
	public partial class <%= BusinessClassName %>
	{
		#region Data Access
		
<% if(DataAccessImplementation == DataAccessMethod.None) { %>		
		protected override void Child_Create()
		{
			// TODO: load default values
			// omit this override if you have no defaults to set
			base.Child_Create();
		}
		
		private void Child_Fetch(object childData)
		{
			// TODO: load values
		}
		
		private void Child_Insert(object parent)
		{
			// TODO: insert values
		}
		
		private void Child_Update(object parent)
		{
			// TODO: update values
		}
		
		private void Child_DeleteSelf(object parent)
		{
			// TODO: delete values
		}
<% } else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL) { %>
		protected override void Child_Create()
		{
			// TODO: load default values
			// omit this override if you have no defaults to set
			base.Child_Create();
		}
		
		private void Child_Fetch(SafeDataReader reader)
		{
			Fetch(reader);
		}
		
		private void Child_Insert()
		{
			using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Insert(<% if(UseMemberVariables) { %><%= Entity.MembersNoRowVersionIncludePrimaryKeyIncludeRemoteAssociations.BuildInsertPrivateMemberVariableParameters() %><% } else { %><%= Entity.MembersNoRowVersionIncludePrimaryKeyIncludeRemoteAssociations.BuildInsertReadPropertyParametersVariables() %><% } %>))
			{
			}
		}
		
		private void Child_Update()
		{
<% if(Entity.Table.ForeignKeyColumns.Count == 0) { %>
            using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Update(<% if(UseMemberVariables) { %><%= Entity.MembersNoRowVersion.BuildPrivateMemberVariableParameters() %><% } else { %><%= Entity.MembersNoRowVersion.BuildReadPropertyParametersVariables() %><% } %>))
<% } else { %>
            using(SafeDataReader reader = <%= DataClassName %>.Instance.<%= BusinessClassName %>Update(<% if(UseMemberVariables) { %><%= Entity.MembersNoRowVersionIncludePrimaryKeyIncludeRemoteAssociations.BuildPrivateMemberVariableParameters() %><% } else { %><%= Entity.MembersNoRowVersionIncludePrimaryKeyIncludeRemoteAssociations.BuildReadPropertyParametersVariables() %><% } %>))
<% } %>     
            {
			}
		}
		
		private void Child_DeleteSelf()
		{
			DataPortal_Delete(new <%= BusinessClassName %>Criteria(<% if(UseMemberVariables) { %><%= Entity.PrimaryKey.KeyMembers.BuildPrivateMemberVariableParameters() %><% } else { %><%= Entity.PrimaryKey.KeyMembers.BuildPropertyVariableArguments() %><% } %>));
		}
		
		private void Fetch(SafeDataReader reader)
		{
<% foreach(Member member in Entity.MembersPrimaryKeyUnion) { if(UseMemberVariables) { %>
			<%= member.PrivateMemberVariableName %> = reader.<%= member.GetReaderMethod() %>("<%= member.Name %>");
<% } else { %>
			LoadProperty(<%= member.PrivateMemberVariableName %>Property, reader.<%= member.GetReaderMethod() %>("<%= member.Name %>"));
<% } } %>

<%-- Many-To-One --%>
<% foreach(AssociationMember association in Entity.ManyToOne) {  if (UseMemberVariables){ %>
            <%= association.PrivateMemberVariableName %>ID = reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>");
<% } else { %>
			LoadProperty(<%= association.Entity.ResolveCriteriaPrivateMemberVariableName(association.ColumnName) %>Property, reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>"));
<% } if(!UseLazyLoading){ if (UseMemberVariables){ %>
			<%= association.Entity.ResolveCriteriaPrivateMemberVariableName(association.ColumnName) %> = new <%= association.ClassName %>(reader);
<% } else { %>
			LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.New<%= association.ClassName %>());
<% } } }  %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association2 in Entity.ToManyUnion) { if (!UseLazyLoading){ %>

<% if (UseMemberVariables){ %>
			<%= association2.PrivateMemberVariableName %> = new <%= association2.ClassName %>List.New<%= association2.ClassName %>();
<% } else { %>
			LoadProperty(<%= association2.PrivateMemberVariableName %>Property, <%= association2.ClassName %>List.New<%= association2.ClassName %>());
<% } } } %> 
        }
<% } %>
		#endregion
	}
}