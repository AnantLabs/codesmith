<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 ReadOnlyChild" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;
<% if(Entity.HasByteArrayColumn()) { %>
using System.Data;
using System.IO;
<% } %>

using Csla;
using Csla.Data;

using <%= DataProjectName %>;

#endregion

namespace <%= BusinessProjectName %>
{
	public partial class <%= BusinessClassName %>
	{
		#region Data Access
<% if(DataAccessImplementation == DataAccessMethod.None) { %>		
		private void Child_Fetch(object childData)
		{
			// TODO: load values from childData
		}
<% } else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL) { %>
		private void Child_Fetch(SafeDataReader reader)
		{
			Fetch(reader);
		}
        
        private void Fetch(SafeDataReader reader)
		{
<% foreach(Member member in Entity.MembersNoRowVersionIncludePrimaryKey) { if(UseMemberVariables) { %>
			<%= member.PrivateMemberVariableName %> = <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>");<% } else { %>GetBytes(reader);<% } %>
<% } else { %>
			LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>"));<% } else { %>GetBytes(reader," <%= member.ColumnName %>"));<% } %>
<% } } %>

<%-- Many-To-One --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { if (UseMemberVariables){  %>
            <%= association.Entity.ResolveCriteriaPrivateMemberVariableName(association.ColumnName) %> = <%if(!association.HasByteArrayColumn()) { %>reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>");<% } else { %>GetBytes(reader);<% } %>
<% } else { %>
			LoadProperty(<%= association.Entity.ResolveCriteriaPrivateMemberVariableName(association.ColumnName) %>Property, <%if(!association.HasByteArrayColumn()) { %>reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>"));<% } else { %>GetBytes(reader," <%= association.ColumnName %>"));<% } %>
<% } }  %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association2 in Entity.ToManyUnion) { if (!UseLazyLoading){ %>

<% if (UseMemberVariables){ %>
			<%= association2.PrivateMemberVariableName %> = new <%= association2.ClassName %>List.NewList();
<% } else { %>
			LoadProperty(<%= association2.PrivateMemberVariableName %>Property, <%= association2.ClassName %>List.NewList());
<% } } } %> 

            MarkOld();
        }
		
<% if(Entity.HasByteArrayColumn()) { %>		
		#endregion

		#region Helper Methods

        /// <summary>
        /// Returns the Bytes stored in a binary column.
        /// </summary>
        /// <param name="reader">The reader.</param>
        /// <param name="columnName">The column name.</param>
        /// <returns>Bytes Stored in a column.</returns>
        internal static byte[] GetBytes(SafeDataReader reader, string columnName)
        {
            var buffer = new byte[1024];
            long fieldOffset = 0;
            
            using (var stream = new MemoryStream())
            {
                long bytesRead;
            
                while ((bytesRead = reader.GetBytes(columnName, fieldOffset, buffer, 0, buffer.Length)) > 0)
                {
                    var actualRead = new byte[bytesRead];
                    Buffer.BlockCopy(buffer, 0, actualRead, 0, (int)bytesRead);
                    stream.Write(actualRead, 0, actualRead.Length);
                    fieldOffset += bytesRead;
                }

                return stream.ToArray();
            }
        }

<% } } %>
		#endregion
	}
}