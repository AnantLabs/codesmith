<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 ReadOnlyRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;

#endregion

namespace <%= BusinessProjectName %>
{
	[Serializable]
	public partial class <%= BusinessClassName %> : ReadOnlyBase< <%= BusinessClassName %> >
	{
        #region Contructor(s)

		private <%= BusinessClassName %>()
		{ /* Require use of factory methods */ }
        
        internal <%= BusinessClassName %>(SafeDataReader reader)
        {
<% if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL){ %>
            Fetch(reader);
<% } %>
        }
        
		#endregion
        
        #region Business Methods
                
<%  foreach(Member member in Entity.MembersNoRowVersionIncludePrimaryKey){ if (UseMemberVariables){ %>
		private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);
		private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue;<%= member.BuildDataObjectField() %>
		public <%= member.SystemType %> <%= member.PropertyName %>
		{
			get { return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>); }				
		}
		
<% } else { %>
		private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);<%= member.BuildDataObjectField() %>
		public <%= member.SystemType %> <%= member.PropertyName %>
		{
			get { return GetProperty(<%= member.PrivateMemberVariableName %>Property); }				
		}
		
<% } } %>
<%-- Many-To-One --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { if (UseMemberVariables){ %>
		private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>);
		private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue;
		public <%= association.ClassName %> <%= association.PropertyName %>
		{
			get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.Entity.ResolveCriteriaPropertyName(association.ColumnName) %>));

<% } %> 
                return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>); 
            }
		}

<% } else { %>
		private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>);
		public <%= association.ClassName %> <%= association.PropertyName %>
		{
			get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.Entity.ResolveCriteriaPropertyName(association.ColumnName) %>));

<% } %>  
                   return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
		}

<% } } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association in Entity.ToManyUnion) { if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>);
		private <%= association.ClassName %>List <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue;
		public <%= association.ClassName %>List <%= association.PropertyName %>
		{
			get
            { 
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
<% if(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name) != null) { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name).MethodName %>(<%= association.LocalColumn.ColumnName %>));

<% } else { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= association.LocalColumn.ColumnName %>));

<% } } %> 
                return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>); 
            }
		}

<% } else { %>
		private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>);
		public <%= association.ClassName %>List <%= association.PropertyName %>
		{
			get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
<% if(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name) != null) { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name).MethodName %>(<%= association.LocalColumn.ColumnName %>));

<% } else { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= association.LocalColumn.ColumnName %>));

<% } } } %>   
                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
		}

<% } %>
		#endregion
				
		#region Factory Methods 
		
		public static <%= BusinessClassName %> Get<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
			return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= BusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>));
		}
        
<%-- One-To-Many & Many-To-Many --%>
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { if(sc.IsUniqueResult && !(sc.Members.Count == Entity.PrimaryKey.KeyMembers.Count && sc.Members[0].Name == Entity.PrimaryKey.KeyMember.Name)) { %>

        public static <%= BusinessClassName %> <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariablesCriteria(false) %>)
		{
            return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= BusinessClassName %>Criteria { <%= sc.Members.BuildCriteriaObjectInitializer() %> });
        }
 <% } } %>

		#endregion
		
<% if(Entity.PrimaryKey.IsCompositeKey) { %>
		#region Protected Overriden Method(s)
		
		// NOTE: This is needed for Composite Keys. 
		private readonly Guid _guidID = Guid.NewGuid();
		protected override object GetIdValue()
        {
            return _guidID;
        }
		
		#endregion
<% } %>
	}
}