<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="QuickStart.EntitiesCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 ReadOnlyList" %>

<%@ Register Name="ReadOnlyList" Template="Internal\ReadOnlyList.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyListDataAccess" Template="Internal\ReadOnlyList.DataAccess.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyListGenerated" Template="Internal\ReadOnlyList.Generated.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>

<% Generate(); %>

<script runat="template">

public override void Generate()
{
    RegisterReferences();
    
	foreach(Entity entity in Entities)
	{
		#region ReadOnlyList
		
		string parentFileName = System.IO.Path.Combine(Location, string.Format("{0}List.cs", entity.ClassName));
		
		ReadOnlyList readOnlyList = this.Create<ReadOnlyList>();
		this.CopyPropertiesTo(readOnlyList);
		readOnlyList.SourceTable = entity.Table;
		readOnlyList.BusinessClassName = string.Format("{0}List", entity.ClassName);
		
		if (!System.IO.File.Exists(parentFileName))
		{
			readOnlyList.RenderToFile(parentFileName, false);
		}
		
		#region ReadOnlyList.Generated
		
		string fileName = System.IO.Path.Combine(Location, string.Format("{0}List.Generated.cs", entity.ClassName));
		
		ReadOnlyListGenerated readOnlyListGenerated = this.Create<ReadOnlyListGenerated>();
		this.CopyPropertiesTo(readOnlyListGenerated);
		readOnlyListGenerated.SourceTable = entity.Table;
		readOnlyListGenerated.BusinessClassName = string.Format("{0}List", entity.ClassName);
		
		readOnlyListGenerated.RenderToFile(fileName, parentFileName, true);
		
		#endregion
		
		#region ReadOnlyList.DataAccess
		
		fileName = System.IO.Path.Combine(Location, string.Format("{0}List.DataAccess.cs", entity.ClassName));
		
		ReadOnlyListDataAccess readOnlyListDataAccess = this.Create<ReadOnlyListDataAccess>();
		this.CopyPropertiesTo(readOnlyListDataAccess);
		readOnlyListDataAccess.SourceTable = entity.Table;
		readOnlyListDataAccess.BusinessClassName = string.Format("{0}List", entity.ClassName);
		
		readOnlyListDataAccess.RenderToFile(fileName, parentFileName, true);
		
		#endregion
		
		#endregion
	}
}

</script>