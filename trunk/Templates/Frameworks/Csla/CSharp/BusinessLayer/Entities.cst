<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Debug="False" Inherits="QuickStart.EntityMasterCodeTemplate" CompilerVersion="v3.5" Description="CSLA 3.8.X Entities" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections.Generic" %>

<%@ Register Name="CommandObjectTemplate" Template="CommandObject.cst" %>
<%@ Register Name="CriteriaTemplate" Template="Criteria.cst" %>
<%@ Register Name="DynamicRootTemplate" Template="DynamicRoot.cst" %>
<%@ Register Name="DynamicRootListTemplate" Template="DynamicRootList.cst" %>
<%@ Register Name="EditableChildTemplate" Template="EditableChild.cst" %>
<%@ Register Name="EditableChildListTemplate" Template="EditableChildList.cst" %>
<%@ Register Name="EditableRootTemplate" Template="EditableRoot.cst" %>
<%@ Register Name="EditableRootListTemplate" Template="EditableRootList.cst" %>
<%@ Register Name="NameValueListTemplate" Template="NameValueList.cst" %>
<%@ Register Name="ReadOnlyChildTemplate" Template="ReadOnlyChild.cst" %>
<%@ Register Name="ReadOnlyChildListTemplate" Template="ReadOnlyChildList.cst" %>
<%@ Register Name="ReadOnlyListTemplate" Template="ReadOnlyList.cst" %>
<%@ Register Name="ReadOnlyRootTemplate" Template="ReadOnlyRoot.cst" %>
<%@ Register Name="SwitchableObjectTemplate" Template="SwitchableObject.cst" %>

<%@ Register Name="ADOHelperTemplate" Template="Internal\ADOHelper.cst" %>
<%@ Register Name="FactoryNamesTemplate" Template="Internal\FactoryNames.cst" %>
<%@ Register Name="ExistsCommandTemplate" Template="Internal\ExistsCommand.cst" %>
<% Generate(); %>

<script runat="template">

public override void Generate()
{
    #region CommandObjectTemplate
    
    foreach(TableSchema table in this.CommandObject)
    {
        CommandObjectTemplate template = this.Create<CommandObjectTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion
    
    #region CriteriaTemplate
    
    foreach(TableSchema table in this.Criteria)
    {
        CriteriaTemplate template = this.Create<CriteriaTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion
    
    #region DynamicRootTemplate
    
    foreach(TableSchema table in this.DynamicRoot)
    {
        DynamicRootTemplate template = this.Create<DynamicRootTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion
    
    #region DynamicRootListTemplate
    
    foreach(TableSchema table in this.DynamicRootList)
    {
        DynamicRootListTemplate template = this.Create<DynamicRootListTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion    
    
    #region EditableChildTemplate
    
    foreach(TableSchema table in this.EditableChild)
    {
        EditableChildTemplate template = this.Create<EditableChildTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion
    
    #region EditableChildListTemplate
    
    foreach(TableSchema table in this.EditableChildList)
    {
        EditableChildListTemplate template = this.Create<EditableChildListTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion    
    
    #region EditableRootTemplate
    
    foreach(TableSchema table in this.EditableRoot)
    {
        EditableRootTemplate template = this.Create<EditableRootTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion    
    
    #region EditableRootListTemplate
    
    foreach(TableSchema table in this.EditableRootList)
    {
        EditableRootListTemplate template = this.Create<EditableRootListTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion
    
    #region NameValueListTemplate
    
    foreach(TableSchema table in this.NameValueList)
    {
        NameValueListTemplate template = this.Create<NameValueListTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion    
    
    #region ReadOnlyChildTemplate
    
    foreach(TableSchema table in this.ReadOnlyChild)
    {
        ReadOnlyChildTemplate template = this.Create<ReadOnlyChildTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion
    
    #region ReadOnlyChildListTemplate
    
    foreach(TableSchema table in this.ReadOnlyChildList)
    {
        ReadOnlyChildListTemplate template = this.Create<ReadOnlyChildListTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion    
    
    #region ReadOnlyListTemplate
    
    foreach(TableSchema table in this.ReadOnlyList)
    {
        ReadOnlyListTemplate template = this.Create<ReadOnlyListTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion
    
    #region ReadOnlyRootTemplate
    
    foreach(TableSchema table in this.ReadOnlyRoot)
    {
        ReadOnlyRootTemplate template = this.Create<ReadOnlyRootTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion    
    
    #region SwitchableObjectTemplate
    
    foreach(TableSchema table in this.SwitchableObject)
    {
        SwitchableObjectTemplate template = this.Create<SwitchableObjectTemplate>();
        RenderHelper(template, table);
    }
    
    #endregion
    
    #region ADOHelperTemplate
    
    if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL || DataAccessImplementation == DataAccessMethod.StoredProcedures || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures)
    {
        ADOHelperTemplate ADOHelper = this.Create<ADOHelperTemplate>();
        this.CopyPropertiesTo(ADOHelper);
        
        string fileName = System.IO.Path.Combine(this.Location, "Utility\\ADOHelper.cs");
        if (!System.IO.File.Exists(fileName))
        {
            ADOHelper.RenderToFile(fileName, false);
        }
    }

    #endregion
    
    #region FactoryNamesTemplate

    if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures)
    {
        FactoryNamesTemplate factoryNames = this.Create<FactoryNamesTemplate>();
        this.CopyPropertiesTo(factoryNames);

        string fileName = System.IO.Path.Combine(this.Location, "Factory\\FactoryNames.cs");
        if (!System.IO.File.Exists(fileName))
        {
            factoryNames.RenderToFile(fileName, false);
        }
    }

    #endregion

    #region ExistsCommandTemplate

    ExistsCommandTemplate ExistsCommand = this.Create<ExistsCommandTemplate>();
    this.CopyPropertiesTo(ExistsCommand);
    ExistsCommand.RenderToFile(System.IO.Path.Combine(this.Location, "Commands\\ExistsCommand.cs"), true);

    #endregion
}

</script>