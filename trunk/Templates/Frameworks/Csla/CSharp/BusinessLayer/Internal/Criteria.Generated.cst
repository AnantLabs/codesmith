<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X Criteria" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="UseDeferredDeletion" Type="System.Boolean" Default="False" Category="3. Business Project" Description="Changes how the Business Objects are deleted, defaults to immediate deletion" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Collections.Generic;
using System.Data.SqlClient;

using Csla;

#endregion

namespace <%= BusinessProjectName %>
{
    [Serializable]
    public partial class <%= BusinessClassName %> : CriteriaBase, IGeneratedCriteria
    {
        #region Private Read-Only Members
        
        private readonly Dictionary<string, object> _bag = new Dictionary<string, object>();
        
        #endregion
        
        #region Constructors

        public <%= BusinessClassName %>() : base(typeof(<%= ChildBusinessClassName %>)){}

        public <%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>) : base(typeof(<%= ChildBusinessClassName %>))
        {
<%  foreach(Member member in Entity.PrimaryKey.KeyMembers){ %>
            <%= member.PropertyName %> = <%= member.VariableName %>;
<% } %>
        }

<% if(Entity.HasRowVersionMember) { %>
        public <%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>, <%= Entity.RowVersionMember.SystemType %> timestamp) : this(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>)
        {
            Timestamp = timestamp;
        }
<% } %>
        
        #endregion
        
        #region Public Properties
        
        #region Read-Write
<% if(Entity.HasRowVersionMember) { %>

        /// <summary>
        /// Used for optimistic concurrency.
        /// </summary>
        public <%= Entity.RowVersionMember.SystemType %> Timestamp
        {
            get { return GetValue< <%= Entity.RowVersionMember.SystemType %> >( "<%= Entity.RowVersionMember.ColumnName %>"); }
            set { _bag[ "<%= Entity.RowVersionMember.ColumnName %>"] = value; }
        }
<% } %>
<%  foreach(Member member in Entity.MembersNoRowVersion){ %>

        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetValue< <%= member.SystemType %> >("<%= member.ColumnName %>"); }
            set { _bag["<%= member.ColumnName %>"] = value; }
        }
<% } %>

        #endregion
        
        #region Read-Only

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public Dictionary<string, object> StateBag
        {
            get
            {
                return _bag;
            }
        }

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public string TableFullName
        {
            get
            {
                return "[<%= Entity.Table.Owner%>].<%= Entity.Table.Name%>";
            }
        }

        #endregion

        #endregion

        #region Overrides
        
        public override string ToString()
        {
            if (_bag.Count == 0)
                return "No criterion was specified";

            var result = string.Empty;
            foreach (KeyValuePair<string, object> key in _bag)
            {
                result += string.Format("[{0}] = '{1}' AND ", key.Key, key.Value);
            }

            return result.Remove(result.Length - 5, 5);
        }

        #endregion

        #region Private Methods
        
        private T GetValue<T>(string name)
        {
            object value;
            if (_bag.TryGetValue(name, out value))
                return (T) value;
        
            return default(T);
        }
        
        #endregion
    }
}