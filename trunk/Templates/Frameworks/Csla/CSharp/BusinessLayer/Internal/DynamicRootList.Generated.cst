<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X DynamicRootList" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

<%@ Property Name="UseDeferredDeletion" Type="System.Boolean" Default="False" Category="3. Business Project" Description="Changes how the Business Objects are deleted, defaults to immediate deletion" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.8.X CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;

#endregion

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.ClassName %>FactoryName)]
<% } %>
    public partial class <%= BusinessClassName %> : EditableRootListBase< <%= ChildBusinessClassName %> >
    {
        #region Properties
        
        protected override object AddNewCore()
        {
            <%= ChildBusinessClassName %> item = <%= BusinessProjectName %>.<%= ChildBusinessClassName %>.New<%= ChildBusinessClassName %>();
            Add(item);
            return item;
        }
        
        #endregion

        #region Factory Methods 
        
        public static <%= BusinessClassName %> NewList()
        {
            return DataPortal.Create< <%= BusinessClassName %> >();
        }
        
        public static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>()
        {
            return DataPortal.Fetch< <%= ChildBusinessClassName %> >();
        }
        
        public static <%= BusinessClassName %> GetAll()
        {
            return DataPortal.Fetch< <%= BusinessClassName %> >(new <%= ChildBusinessClassName %>Criteria());
        }
        
        <%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { 
    System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>(); 
    foreach(SearchCriteria sc in association.ListSearchCriteria) { 
        string key = string.Format("{0}-{1}-{2}-{3}-{4}", association.Name, association.VariableName, association.ColumnName, association.LocalColumn.Name, association.TableName); 
        if(list.Contains(key)) { continue; } else { list.Add(key); } %>
        
        public static <%= BusinessClassName %> <%= sc.GetListMethodName(association) %>(<%= association.BuildParametersVariable() %>)
        {
            return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria { <%= association.BuildObjectInitializer() %> });
        }
 <% } } %>
        
        private <%= BusinessClassName %>()
        { 
            AllowNew = true;
        }
        
        #endregion
    }
}