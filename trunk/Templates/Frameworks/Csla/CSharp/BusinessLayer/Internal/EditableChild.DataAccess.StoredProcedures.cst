<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA 3.8.X EditableRoot" %>
<%@ Register Name="MapDataReader" Template="..\..\Common\MapDataReader.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildCreate" Template="..\..\Common\ChildCreate.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildFetch" Template="..\..\Common\ChildFetch.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildInsert" Template="..\..\Common\ChildInsert.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildUpdate" Template="..\..\Common\ChildUpdate.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalDelete" Template="..\..\Common\ChildDelete.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ChildPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

#endregion

namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %>
    {
        protected override void Child_Create()
        {
<% RenderHelper(new ChildCreate()); %>
        }

        private void Child_Fetch(<%= BusinessClassName %>Criteria criteria)
        {
<% RenderHelper(new ChildFetch()); %>
        }

        #region Child_Insert

        private void Child_Insert(SqlConnection connection)
        {
<% RenderHelper(new ChildInsert(), true); %>
        }
<% if (Entity.AssociatedManyToOne.Count > 0) {%>
<% if (Entity.AssociatedManyToOne.Distinct().Count > 1) { int index = 0; foreach(Association association in Entity.AssociatedManyToOne.Distinct()) { %>

        private void Child_Insert(<%= association.BuildParametersVariables(true) %>)
        {
            Child_Insert(<%= association.BuildUpdateStatementVariables(Entity.AssociatedManyToOne.Distinct(), index++, true) %>);
        }

<% } }%>

        private void Child_Insert(<%= Entity.AssociatedManyToOne.Distinct().BuildParametersVariables(true) %>)
        {
<% RenderHelper(new ChildInsert()); %>
        }
<% } %>

        #endregion

        #region Child_Update

        private void Child_Update(SqlConnection connection)
        {
<% RenderHelper(new ChildUpdate(), true); %>
        }
<% if (Entity.AssociatedManyToOne.Count > 0) {%>
<% if (Entity.AssociatedManyToOne.Distinct().Count > 1) { int index = 0; foreach(Association association in Entity.AssociatedManyToOne.Distinct()) { %>

        private void Child_Update(<%= association.BuildParametersVariables(true) %>)
        {
            Child_Update(<%= association.BuildUpdateStatementVariables(Entity.AssociatedManyToOne.Distinct(), index++, true) %>);
        }

<% } }%>
 
        private void Child_Update(<%= Entity.AssociatedManyToOne.Distinct().BuildParametersVariables(true) %>)
        {
<% RenderHelper(new ChildUpdate()); %>
        }
<% }%>
        #endregion

        private void Child_DeleteSelf(SqlConnection connection)
        {
            bool cancel = false;
            OnChildSelfDeleting(connection, ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new <%= BusinessClassName %>Criteria (<% if(UseMemberVariables) { %><%= Entity.PrimaryKey.KeyMembers.BuildPrivateMemberVariableArguments() %><% } else { %><%= Entity.PrimaryKey.KeyMembers.BuildPropertyVariableArguments() %><% } %>), connection);
        
            OnChildSelfDeleted();
        }

        protected void DataPortal_Delete(<%= BusinessClassName %>Criteria criteria, SqlConnection connection)
        {
<% RenderHelper(new DataPortalDelete()); %>
        }

        private void Map(SafeDataReader reader)
        {
<% RenderHelper(new MapDataReader()); %>

            MarkAsChild();
            MarkOld();
        }

<% RenderHelper(new PartialMethods()); %>
    }
}