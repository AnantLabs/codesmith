<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="MapDataReader" Template="..\..\Common\MapDataReader.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildCreate" Template="..\..\Common\ChildCreate.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildFetch" Template="..\..\Common\ChildFetch.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildInsert" Template="..\..\Common\ChildInsert.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ChildUpdate" Template="..\..\Common\ChildUpdate.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="DataPortalDelete" Template="..\..\Common\ChildDelete.StoredProcedures.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

namespace <%= BusinessProjectName %>
{
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %>
    {
        /// <summary>
        /// Instantiates a CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        [RunLocal()]
        protected override void Child_Create()
        {
<% RenderHelper(new ChildCreate()); %>
        }

        /// <summary>
        /// Retrieves data from the data base into a CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// using the criteria provided. 
        /// </summary>
        /// <param name="criteria">Object of type <see cref="<%= CriteriaClassName %><%= Entity.GenericProperty %>"/></param>
        /// <returns></returns>
        private void Child_Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
<% RenderHelper(new ChildFetch()); %>
        }

        #region Child_Insert
        /// <summary>
        /// Inserts data into the data base using the information in the current 
        ///    CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_Insert(SqlConnection connection)
        {
<% RenderHelper(new ChildInsert(), true); %>
        }
<% var associations = Entity.Associations.Where(a => a.AssociationType == AssociationType.ManyToOne || a.AssociationType == AssociationType.ManyToZeroOrOne).Distinct();
   if (associations.Count() > 0) {%>
<% if (associations.Count() > 1) { int index = 0; foreach(Association association in associations) { %>

        private void Child_Insert(<%= association.BuildParametersVariables(true) %>)
        {
            Child_Insert(<%= association.BuildUpdateStatementVariables(associations.ToList(), index++, true) %>);
        }

<% } }%>

        private void Child_Insert(<%= associations.ToList().BuildParametersVariables(true) %>)
        {
<% RenderHelper(new ChildInsert()); %>
        }
<% } %>

        #endregion

        #region Child_Update

        /// <summary>
        /// Updates the corresponding record in the data base with the information in the current 
        ///    CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_Update(SqlConnection connection)
        {
<% RenderHelper(new ChildUpdate(), true); %>
        }
<% if (associations.Count() > 0) {%>
<% if (associations.Count() > 1) { int index = 0; foreach(Association association in associations) { %>

        private void Child_Update(<%= association.BuildParametersVariables(true) %>)
        {
            Child_Update(<%= association.BuildUpdateStatementVariables(associations.ToList(), index++, true) %>);
        }

<% } }%>
 
        private void Child_Update(<%= associations.ToList().BuildParametersVariables(true) %>)
        {
<% RenderHelper(new ChildUpdate()); %>
        }
<% }%>
        #endregion

        /// <summary>
        /// Deletes the corresponding record in the data base with the information in the current 
        ///    CSLA editable child business object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_DeleteSelf(SqlConnection connection)
        {
            bool cancel = false;
            OnChildSelfDeleting(connection, ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new <%= CriteriaClassName %> (<% if(UseMemberVariables) { %><%= Entity.GetProperties(PropertyType.Key).BuildPrivateMemberVariableArguments() %><% } else { %><%= Entity.GetProperties(PropertyType.Key).BuildPropertyVariableArguments() %><% } %>), connection);
        
            OnChildSelfDeleted();
        }

        /// <summary>
        /// Deletes data in the data base using the criteria specified in the <%= CriteriaClassName %><%= Entity.GenericProperty %> object.
        /// </summary>
        /// <param name="criteria">Object of type <see cref="<%= CriteriaClassName %><%= Entity.GenericProperty %>"/></param>
        /// <returns></returns>
        protected void DataPortal_Delete(<%= CriteriaClassName %> criteria, SqlConnection connection)
        {
<% RenderHelper(new DataPortalDelete()); %>
        }

        /// <summary>
        /// Maps data columns retrieved from the data base to the respective properties in the current 
        /// <see cref="<%= BusinessClassName %><%= Entity.GenericProperty %> CSLA editable child business object.
        /// </summary>
        /// <param name="criteria">Object of type <see cref="<%=LinqToSQLContextNamespace%>.<%=Entity.Name%> %>"/> containing the data retrieved from the data base.</param>
        /// <returns></returns>
        private void Map(SafeDataReader reader)
        {
<% RenderHelper(new MapDataReader()); %>

            MarkAsChild();
            MarkOld();
        }
    }
}
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>