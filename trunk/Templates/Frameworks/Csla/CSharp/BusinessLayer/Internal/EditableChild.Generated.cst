<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X EditableRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.8.X CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Data;
using Csla.Validation;

#endregion

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.ClassName %>FactoryName)]
<% } %>
    public partial class <%= BusinessClassName %> : BusinessBase< <%= BusinessClassName %> >
    {
        #region Contructor(s)

        private <%= BusinessClassName %>()
        {
            MarkAsChild();
        }
        
<% if(DataAccessImplementation == DataAccessMethod.None || DataAccessImplementation == DataAccessMethod.ParameterizedSQL || DataAccessImplementation == DataAccessMethod.StoredProcedures){ %>
        internal <%= BusinessClassName %>(SafeDataReader reader)
        {
<%if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL || DataAccessImplementation == DataAccessMethod.StoredProcedures){ %>
            Map(reader);
<% } %>
        }

<% } %>
        #endregion

        #region Validation Rules
        
        protected override void AddBusinessRules()
        {
            if(AddBusinessValidationRules())
                return;
            
<%     foreach(Member member in Entity.MembersNoRowVersion){ %>
<% if(member.SystemType == "string" ) { %>
<% if(!member.IsNullable) { %>
            ValidationRules.AddRule(CommonRules.StringRequired, <%= member.PrivateMemberVariableName %>Property);
<% } %>
            ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs(<%= member.PrivateMemberVariableName %>Property, <%= member.Size %>));
<% } } %>
        }
        
        #endregion

        #region Properties

<% if(Entity.HasRowVersionMember) { %>
        /// <summary>
        /// Used for optimistic concurrency.
        /// </summary>
        [NotUndoable]
        private <%= Entity.RowVersionMember.SystemType %> _timestamp = new <%= Entity.RowVersionMember.SystemTypeWithSize %>;
<% } %>

<%  foreach(Member member in Entity.MembersNoRowVersionIncludePrimaryKey){ if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);
        private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue;<%= member.BuildDataObjectField() %>
        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>); }                
<% if(!member.IsReadOnly) { %>
            set
            {
                SetProperty(<%= member.PrivateMemberVariableName %>Property, ref <%= member.PrivateMemberVariableName %>, value);
            }
<% } %>
        }
        
<% } else { %>
        private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);<%= member.BuildDataObjectField() %>
        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetProperty(<%= member.PrivateMemberVariableName %>Property); }                
<% if(!member.IsReadOnly) { %>
            set
            { 
                SetProperty(<%= member.PrivateMemberVariableName %>Property, value); 
            }
<% } %>
        }
        
<% } } %>
<%-- Foreign Keys --%>
<%  foreach(AssociationMember member in Entity.MembersForeignKey){ string columnName = member.ResolveManyToOneNameConflict(Entity); if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= member.BaseSystemType %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.BaseSystemType %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>);
        private <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %> = <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property.DefaultValue;<%= member.BuildDataObjectField() %>
        public <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
        {
            get { return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>); }                
            set
            {
                SetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, ref <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>, value);
            }
        }
        
<% } else { %>
        private static readonly PropertyInfo< <%= member.BaseSystemType %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.BaseSystemType %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>);<%= member.BuildDataObjectField() %>
        public <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
        {
            get { return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property); }                
            set
            { 
                SetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, value); 
            }
        }
        
<% } } %>
<%-- One-To-Zero-Or-One --%>
<% foreach(AssociationMember association in Entity.OneToZeroOrOne) { if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
        private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue;
        public <%= association.ClassName %> <%= association.PropertyName %>
        {
            get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(this.IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.New<%= association.ClassName %>());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>));
                }

<% } %> 
                return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>); 
            }
        }

<% } else { %>
        private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
        public <%= association.ClassName %> <%= association.PropertyName %>
        {
            get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(this.IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.New<%= association.ClassName %>());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>));
                }
<% } %>  
                   return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } } %>
<%-- Many-To-One --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
        private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue;
        public <%= association.ClassName %> <%= association.PropertyName %>
        {
            get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(this.IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.New<%= association.ClassName %>());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>));
                }
                
<% } %> 
                return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>); 
            }
        }

<% } else { %>
        private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
        public <%= association.ClassName %> <%= association.PropertyName %>
        {
            get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
                    if(this.IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.New<%= association.ClassName %>());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>));
                }

<% } %>  
                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association in Entity.OneToMany) { if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
        private <%= association.ClassName %>List <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue;
        public <%= association.ClassName %>List <%= association.PropertyName %>
        {
            get
            { 
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
<% if(!string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name))) { %>
                    if(this.IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.NewList());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>));
                }

<% } else { %>
                    if(this.IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.NewList());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>));
                }

<% } } %> 
                return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>); 
            }
        }

<% } else { %>
        private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
        public <%= association.ClassName %>List <%= association.PropertyName %>
        {
            get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                {
<% if(!string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName))) { %>
                    if(this.IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.NewList());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>));
                }
                
<% } else { %>
                    if(this.IsNew)
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.NewList());
                    else
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>));
                }

<% } } %>   
                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% }} %>
        #endregion

        #region Factory Methods 

        internal static <%= ChildBusinessClassName %> New<%= ChildBusinessClassName %>()
        {
            return DataPortal.CreateChild< <%= ChildBusinessClassName %> >();
        }

        internal static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
        {
            return DataPortal.FetchChild< <%= ChildBusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>));
        }
<%-- One-To-Zero-Or-One --%>
<%if(Entity.HasOneToZeroOrZeroMember && Entity.PrimaryKey.KeyMembers.Count > 1){ %>

        internal static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>(<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroParametersVariable() %>)
        {
            return DataPortal.Fetch< <%= ChildBusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria { <%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroObjectInitializer() %> });
        }
 <% }%>
        
        #endregion
        
<% if(Entity.PrimaryKey.IsCompositeKey) { %>
        #region Protected Overriden Method(s)
        
        // NOTE: This is needed for Composite Keys. 
        private readonly Guid _guidID = Guid.NewGuid();
        protected override object GetIdValue()
        {
            return _guidID;
        }
        
        #endregion
<% } %>        
    }
}