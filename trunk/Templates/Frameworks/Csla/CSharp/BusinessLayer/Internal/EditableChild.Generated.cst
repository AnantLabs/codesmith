<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="Constructor" Template="..\..\Common\Constructor.cst" %>
<%@ Register Name="Exists" Template="..\..\Common\Exists.cst" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirty.cst" %>
<%@ Register Name="Properties" Template="..\..\Common\Properties.cst" %>
<%@ Register Name="ValidationRules" Template="..\..\Common\ValidationRules.cst" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ChildPartialMethods.cst" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;

<% if( DataAccessImplementation == DataAccessMethod.LinqToSQL) {%>
using <%=LinqToSQLContextNamespace%>;
using DAL=<%=LinqToSQLContextNamespace%>;
<% }%>
using Csla;
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
using System.Data.SqlClient;
#endif
<% } else { %>
using Csla.Data;
using System.Data.SqlClient;
<% } %>

<% if(IsLatestCSLA) { %>
using Csla.Rules;
<% } else { %>
using Csla.Validation;
<% } %>

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.Name %>FactoryName)]
<% } %>
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %> : BusinessBase<<%= BusinessClassName %><%= Entity.GenericProperty %>>
    {
<% RenderHelper(new Constructor()); %>

<%/*  Documentation code handled in the ValidationRules.cst template  */
   RenderHelper(new ValidationRules()); %>
<%/*  Documentation code handled in the Properties.cst template  */
   RenderHelper(new Properties()); %>

        #region Synchronous Factory Methods 
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %> 

        /// <summary>
        /// Creates a new object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>.</returns>
        internal static <%= ChildBusinessClassName %><%= Entity.GenericProperty %> New<%= ChildBusinessClassName %>()
        {
            return DataPortal.CreateChild<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>();
        }
<%if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL || DataAccessImplementation == DataAccessMethod.StoredProcedures){ %>

        internal static <%= BusinessClassName %> Get<%= BusinessClassName %>(SafeDataReader reader)
        {
            return DataPortal.FetchChild<<%= BusinessClassName %>>(reader);
        }
<% } %>
<% if(DataAccessImplementation == DataAccessMethod.LinqToSQL) { %>

        internal static <%= BusinessClassName %> Get<%= BusinessClassName %>(DAL.<%= Entity.Name %> dto)
        {
            return DataPortal.FetchChild<<%= BusinessClassName %>(dto);
        }
<% } %>
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        /// <summary>
        /// Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria. 
        /// </summary>
<% foreach(var item in  sc.Properties) { %>
        /// <param name="<%= item.VariableName%>"><%if(item.HasDescription){%><%=item.Description%>.<%}else{%>No additional detail available.<%}%></param>
<%}%>
        /// <returns>A <see cref="<%=BusinessClassName%>"/> object of the specified criteria.</returns>
        internal static <%= ChildBusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>(<%= sc.Properties.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %> {<%= sc.Properties.BuildObjectInitializer() %>};
            <%=sc.Properties.BuildNullableObjectInitializer()%>
        
            return DataPortal.Fetch<% if(DataAccessImplementation != DataAccessMethod.ObjectFactoryNone && DataAccessImplementation != DataAccessMethod.ObjectFactoryParameterizedSQL && DataAccessImplementation != DataAccessMethod.ObjectFactoryStoredProcedures){ %>Child<% } %><<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>(criteria);
        }
<% } %>

<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
        #endregion

        #region Asynchronous Factory Methods

        internal static void New<%= ChildBusinessClassName %>Async(EventHandler<DataPortalResult<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var dp = new DataPortal<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        internal static void <%= sc.MethodName %>Async(<% if(sc.Properties.Count > 0) { %><%= sc.Properties.BuildParametersVariables() %>, <% }%>EventHandler<DataPortalResult<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{ <%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>

            DataPortal.BeginFetch<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(criteria, handler);
        }
<% } %>

        #endregion

<% RenderHelper(new IsDirty()); %>
<% RenderHelper(new PartialMethods()); %>
<% RenderHelper(new Exists()); %>
    }
}