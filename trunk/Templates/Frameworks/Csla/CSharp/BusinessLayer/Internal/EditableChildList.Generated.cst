<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" %>
<%@ Register Name="ListEnhancements" Template="..\..\Common\ListEnhancements.cst" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirtyList.cst" %>
<%@ Register Name="AddNewCore" Template="..\..\Common\ListAddNewCore.cst" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
<% if(IsCSLA45) { %>
using System.Threading.Tasks;
<% } %>

using Csla;
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#if <%= RenderSharedCompilerDirectiveDirective() %>
using Csla.Serialization;
#else
using Csla.Data;
#endif
<% } else { %>
using Csla.Data;
<% } %>

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.Name %>ListFactoryName)]
<% } %>
    public partial class <%= BusinessClassName %> : BusinessListBase<<%= BusinessClassName %>, <%= ChildBusinessClassName %>>
    {
        #region Constructor(s)

        public <%= BusinessClassName %>()
        { 
            AllowNew = true;
            MarkAsChild();
        }
        
        #endregion

        #region Synchronous Factory Methods 
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#if <%= RenderSharedCompilerDirectiveDirective(true) %>
<% } %>

        /// <summary>
        /// Creates a new object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>.</returns>
        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> NewList()
        {
            return DataPortal.CreateChild<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
        }     
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        /// <summary>
        /// Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria. 
        /// </summary>
<% foreach(var item in  sc.Properties) { %>
        /// <param name="<%= item.VariableName%>"><%if(item.HasDescription){%><%=item.Description%>.<%}else{%>No additional detail available.<%}%></param>
<%}%>
        /// <returns>A <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria.</returns>
        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>(<%= sc.Properties.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%=sc.Properties.BuildNullableObjectInitializer()%>
            
            return DataPortal.Fetch<% if(DataAccessImplementation != DataAccessMethod.ObjectFactoryNone && DataAccessImplementation != DataAccessMethod.ObjectFactoryParameterizedSQL && DataAccessImplementation != DataAccessMethod.ObjectFactoryStoredProcedures){ %>Child<% } %><<%= BusinessClassName %><%= Entity.GenericProperty %>>(criteria);
        }
<% } %>

        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> GetByCriteria(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
            return DataPortal.Fetch<<%= BusinessClassName %><%= Entity.GenericProperty %>>(criteria);
        }

        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> GetAll()
        {
            return DataPortal.Fetch<% if(DataAccessImplementation != DataAccessMethod.ObjectFactoryNone && DataAccessImplementation != DataAccessMethod.ObjectFactoryParameterizedSQL && DataAccessImplementation != DataAccessMethod.ObjectFactoryStoredProcedures){ %>Child<% } %><<%= BusinessClassName %><%= Entity.GenericProperty %>>(new <%= CriteriaClassName %><%= Entity.GenericProperty %>());
        }

<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#endif
<% } %>
        #endregion

        #region Asynchronous Factory Methods

<% if(IsCSLA45) { %>
        internal static async Task<<%= BusinessClassName %><%= Entity.GenericProperty %>> NewListAsync()
        {
            return await DataPortal.CreateAsync<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        internal static async Task<<%= BusinessClassName %><%= Entity.GenericProperty %>> <%= sc.MethodName %>Async(<% if(sc.Properties.Count > 0) { %><%= sc.Properties.BuildParametersVariables() %><% } %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>
            
            return await DataPortal.FetchAsync<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(criteria).ContinueWith(t => t.Result.Child);
        }
<% } %>

        internal static async Task<<%= BusinessClassName %><%= Entity.GenericProperty %>> GetByCriteriaAsync(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {  
            return await DataPortal.FetchAsync<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(criteria).ContinueWith(t => t.Result.Child);
        }

        internal static async Task<<%= BusinessClassName %><%= Entity.GenericProperty %>> GetAllAsync()
        {
            return await DataPortal.FetchAsync<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(new <%= CriteriaClassName %><%= Entity.GenericProperty %>()).ContinueWith(t => t.Result.Child);
        }
<% } else { %>
        internal static void NewListAsync(EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        internal static void <%= sc.MethodName %>Async(<% if(sc.Properties.Count > 0) { %><%= sc.Properties.BuildParametersVariables() %>, <% }%>EventHandler<DataPortalResult<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%=sc.Properties.BuildNullableObjectInitializer()%>
            DataPortal.BeginFetch<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(criteria,handler);
        }
<% } %>

        internal static void GetByCriteriaAsync(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {  
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        internal static void GetAllAsync(EventHandler<DataPortalResult<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>> handler)
        {
            DataPortal.BeginFetch<AsyncChildLoader<<%= BusinessClassName %><%= Entity.GenericProperty %>>>(new <%= CriteriaClassName %><%= Entity.GenericProperty %>(),handler);
        }
<% } %>

        #endregion

        #region Method Overrides
        
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#if <%= RenderSharedCompilerDirectiveDirective(true) %>
<% } %>
        protected override <% if(IsCSLA43 || IsCSLA45) { %><%= ChildBusinessClassName %><%= Entity.GenericProperty %><% } else { %>object<% } %> AddNewCore()
        {
<% RenderHelper(new AddNewCore()); %>
        }
<% if(IncludeSilverlightSupport || IncludeWinRTSupport) { %>
#else
        protected override void AddNewCore()
        {
<% RenderHelper(new AddNewCore(), IncludeSilverlightSupport); %>
        }
#endif
<% } %>

<% if(IsCSLA45) { %>
        protected async Task<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>> AddNewCoreAsync()
        {
            return await <%= BusinessProjectName %>.<%= ChildBusinessClassName %><%= Entity.GenericProperty %>.New<%= ChildBusinessClassName %><% if(IsSwitchableObject()){ %>Child<% }%>Async().ContinueWith(t => 
            {
                 <%= ChildBusinessClassName %><%= Entity.GenericProperty %> item = t.Result;
                
                bool cancel = false;
                OnAddNewCore(ref item, ref cancel);
                if (!cancel)
                {
                    // Check to see if someone set the item to null in the OnAddNewCore.
                    if(item != null)
                        Add(item);
                }
                
                return item;
            });
        }
<% } else { %>
        protected void AddNewCoreAsync(EventHandler<DataPortalResult<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            <%= BusinessProjectName %>.<%= ChildBusinessClassName %><%= Entity.GenericProperty %>.New<%= ChildBusinessClassName %><% if(IsSwitchableObject()){ %>Child<% }%>Async((o, e) =>
            {
                <%= ChildBusinessClassName %><%= Entity.GenericProperty %> item = e.Object;
            
                bool cancel = false;
                OnAddNewCore(ref item, ref cancel);
                if (!cancel)
                {
                    if(e.Error == null)
                    {
                        Add(item);
                        handler.Invoke(this, new DataPortalResult<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>(item, null, null));
                    }
                }
            });
        }
<% } %>
        
        #endregion

<%/*  Documentation code handled in the IsDirty.cst template  */
   RenderHelper(new IsDirty()); %>
<%/*  Documentation code handled in the appropriate PartialMethods template  */
   RenderHelper(new PartialMethods()); %>
<%/*  Documentation code handled in the Exists.cst template  */
   RenderHelper(new Exists()); %>
<% RenderHelper(new ListEnhancements(), true); %>
    }
}