<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA EditableChildList" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirtyList.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="AddNewCore" Template="..\..\Common\ListAddNewCore.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Collections.Generic;

using Csla;
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
#endif
<% } else { %>
using Csla.Data;
<% } %>

#endregion

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.ClassName %>ListFactoryName)]
<% } %>
    public partial class <%= BusinessClassName %> : BusinessListBase< <%= BusinessClassName %>, <%= ChildBusinessClassName %> >
    {
        #region Constructor(s)

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>        
        private <%= BusinessClassName %>()
        { 
            AllowNew = true;
            MarkAsChild();
        }
<% if(IncludeSilverlightSupport) { %>
#else
        public <%= BusinessClassName %>()
        { 
            AllowNew = true;
            MarkAsChild();
        }
#endif
<% } %>
        
        #endregion

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        #region Synchronous Factory Methods 
        
        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> NewList()
        {
            return DataPortal.CreateChild< <%= BusinessClassName %><%= Entity.GenericProperty %> >();
        }     
<% foreach(SearchCriteria sc in Entity.SearchCriteria()) { %>

        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariables() %>)
        {
            return DataPortal.FetchChild< <%= BusinessClassName %><%= Entity.GenericProperty %> >(
                new <%= ResolveTargetClassName(ChildBusinessClassName, "Criteria") %><%= Entity.GenericProperty %>{<%= sc.Members.BuildObjectInitializer() %>});
        }
        
<% } %>

        internal static <%= BusinessClassName %><%= Entity.GenericProperty %> GetAll()
        {
            return DataPortal.FetchChild< <%= BusinessClassName %><%= Entity.GenericProperty %> >(new <%= ResolveTargetClassName(ChildBusinessClassName, "Criteria") %><%= Entity.GenericProperty %>());
        }

		#endregion

<% if(IncludeSilverlightSupport) { %>
#endif  

        #region Asynchronous Factory Methods
        
        internal static void New<%= ChildBusinessClassName %>ListAsync(EventHandler<DataPortalResult<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>> handler)
		{
			DataPortal<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>> dp = new DataPortal<<%= ChildBusinessClassName %><%= Entity.GenericProperty %>>();
			dp.CreateCompleted += handler;
			dp.BeginCreate();
		}
        
        //Child objects do not expose asynchronous factory get methods
 
        #endregion
<% } %>   

        #region Method Overrides
        
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        protected override <% if(IsCSLA40) { %><%= ChildBusinessClassName %><%= Entity.GenericProperty %><% } else { %>object<% } %> AddNewCore()
        {
<% RenderHelper(new AddNewCore()); %>
        }
<% if(IncludeSilverlightSupport) { %>
#else

        protected override void AddNewCore()
        {
<% RenderHelper(new AddNewCore(), IncludeSilverlightSupport); %>
        }
#endif
		protected void AddNewCoreAsync(EventHandler<DataPortalResult<object>> handler)
		{
			<%= BusinessProjectName %>.<%= ChildBusinessClassName %><%= Entity.GenericProperty %>.New<%= ChildBusinessClassName %>Async((o, e) =>
			{
				if(e.Error == null)
				{
					Add(e.Object);
					handler.Invoke(this, new DataPortalResult<object>(e.Object, null, null));
				}
			});
		}

<% } %>
        
        #endregion

<% RenderHelper(new IsDirty()); %>

<% RenderHelper(new Exists()); %>

<% RenderHelper(new PartialMethods()); %>
    }
}