<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" %>
<%@ Register Name="ListEnhancements" Template="..\..\Common\ListEnhancements.cst" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirtyList.cst" %>
<%@ Register Name="AddNewCore" Template="..\..\Common\ListAddNewCore.cst" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

using Csla;
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
#endif
<% } else { %>
using Csla.Data;
<% } %>

namespace <%= BusinessProjectName %>
{
    [Serializable]
<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures){ %>
    [Csla.Server.ObjectFactory(FactoryNames.<%= Entity.Name %>ListFactoryName)]
<% } %>
    public partial class <%= BusinessClassName %><%= Entity.GenericProperty %> : BusinessListBase<<%= BusinessClassName %><%= Entity.GenericProperty %>, <%= ChildBusinessClassName %><%= Entity.GenericProperty %>>
    {    
        #region Contructor(s)

        public <%= BusinessClassName %>()
        { 
            AllowNew = true;
        }

        #endregion

        #region Method Overrides
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        protected override <% if(IsLatestCSLA) { %><%= ChildBusinessClassName %><%= Entity.GenericProperty %><% } else { %>object<% } %> AddNewCore()
        {
<% RenderHelper(new AddNewCore()); %>
        }
<% if(IncludeSilverlightSupport) { %>
#else
        protected override void AddNewCore()
        {
<% RenderHelper(new AddNewCore(), IncludeSilverlightSupport); %>
        }
#endif
<% } %>
        
        #endregion

        #region Synchronous Factory Methods 
<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>

        /// <summary>
        /// Creates a new object of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>.</returns>
        public static <%= BusinessClassName %><%= Entity.GenericProperty %> NewList()
        {
            return DataPortal.Create<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
        }      
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        /// <summary>
        /// Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria. 
        /// </summary>
<% foreach(var item in  sc.Properties) { %>
        /// <param name="<%= item.VariableName%>"><%if(item.HasDescription){%><%=item.Description%>.<%}else{%>No additional detail available.<%}%></param>
<%}%>
        /// <returns>A <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> object of the specified criteria.</returns>
        public static <%= BusinessClassName %><%= Entity.GenericProperty %> <%= sc.MethodName %>(<%= sc.Properties.BuildParametersVariables() %>)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>
            
            return DataPortal.Fetch<<%= BusinessClassName %><%= Entity.GenericProperty %>>(criteria);
        }
<% } %>

        public static <%= BusinessClassName %><%= Entity.GenericProperty %> GetAll()
        {
            return DataPortal.Fetch<<%= BusinessClassName %><%= Entity.GenericProperty %>>(new <%= CriteriaClassName %><%= Entity.GenericProperty %>());
        }

<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
        #endregion

        #region Asynchronous Factory Methods
        
        public static void NewListAsync(EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }

<% foreach(SearchCriteria sc in Entity.SearchCriteria) { %>

        public static void <%= sc.MethodName %>Async(<%= sc.Properties.BuildParametersVariables() %>, EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var criteria = new <%= CriteriaClassName %><%= Entity.GenericProperty %>{<%= sc.Properties.BuildObjectInitializer() %>};
            <%= sc.Properties.BuildNullableObjectInitializer()%>
            var dp = new DataPortal<<%= BusinessClassName %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }
<% } %>

        public static void GetAllAsync(EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            var dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(new <%= CriteriaClassName %><%= Entity.GenericProperty %>());
        }

        #endregion

<%/*  Documentation code handled in the IsDirty.cst template  */
   RenderHelper(new IsDirty()); %>
<%/*  Documentation code handled in the appropriate PartialMethods template  */
   RenderHelper(new PartialMethods()); %>
<%/*  Documentation code handled in the Exists.cst template  */
   RenderHelper(new Exists()); %>
<% RenderHelper(new ListEnhancements(), true); %>
    }
}