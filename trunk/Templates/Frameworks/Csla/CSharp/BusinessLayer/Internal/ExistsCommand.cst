<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.QuickStartCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA CommandObject" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
<% if(IncludeSilverlightSupport) { %>

#if SILVERLIGHT
using Csla;
using Csla.Serialization;
#else
using System.Data.SqlClient;

using Csla;
using Csla.Data;
#endif
<% } else { %>
using System.Data.SqlClient;

using Csla;
using Csla.Data;
<% } %>

#endregion

namespace <%= BusinessProjectName %>
{
    [Serializable]
    public class ExistsCommand : CommandBase<% if(IsCSLA40) { %><ExistsCommand><% } %>
    {
        #region Constructor(s)

        private ExistsCommand()
        {
        }
        
        #endregion

        #region Authorization Methods

        public static bool CanExecuteCommand()
        {
            return true;
        }

        #endregion

        #region Synchronous Factory Methods 

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        public static bool Execute<T>(T criteria) where T : IGeneratedCriteria
        {
            if (!CanExecuteCommand())
                throw new System.Security.SecurityException("Not authorized to execute command");

            var cmd = new ExistsCommand();
            cmd.BeforeServer(criteria);
            cmd = DataPortal.Execute(cmd);
            cmd.AfterServer();

            return cmd.Result;
        }
<% if(IncludeSilverlightSupport) { %>
#endif  
<% } %>

        #endregion

<% if(IncludeSilverlightSupport) { %>
        #region Asynchronous Factory Methods

#if SILVERLIGHT
        public static bool Execute<T>(T criteria) where T : IGeneratedCriteria
        {
            if (!CanExecuteCommand())
                throw new System.Security.SecurityException("Not authorized to execute command");

            var cmd = new ExistsCommand();
            cmd.BeforeServer(criteria);

            var waitHandle = new System.Threading.ManualResetEvent(false);
            DataPortal.BeginExecute(cmd, (o, e) =>
                    {
                        if (e.Error != null) 
                            throw e.Error;
                        
                        cmd.Result = e.Object.Result;

                        waitHandle.Set();
                    });
                
            cmd.AfterServer();

            bool result = waitHandle.WaitOne(30000);
            if (result)
                return cmd.Result;
            
            throw new Exception("Exists timed out.");
        }
#endif  
        
        #endregion

<% } %>
        #region Client-side Code

        private IGeneratedCriteria Criteria { get; set; }
        private bool Result { get; set; }

        private void BeforeServer(IGeneratedCriteria criteria)
        {
            Criteria = criteria;
            Result = false;
        }

        private void AfterServer()
        {
        }

        #endregion

        #region Data Access

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>
        protected override void DataPortal_Execute()
        {
            string commandText = string.Format("SELECT COUNT(1) FROM {0} {1}", Criteria.TableFullName, ADOHelper.BuildWhereStatement(Criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(Criteria.StateBag));
                    Result = (int)command.ExecuteScalar() > 0;
                }
            }
        }
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>

        #endregion
    }
}