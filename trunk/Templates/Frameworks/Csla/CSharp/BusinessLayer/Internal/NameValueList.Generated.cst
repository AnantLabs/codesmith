<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA NameValueList" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
using Csla.Serialization;
#endif
<% } %>

#endregion

namespace <%= BusinessProjectName %>
{
    [Serializable]
    public partial class <%= BusinessClassName %> : NameValueListBase< int, string >
    {
        #region Factory Methods 

        private static <%= BusinessClassName %> _list;

<% if(IncludeSilverlightSupport) { %>
#if !SILVERLIGHT
<% } %>

        #region Synchronous Factory Methods         

        public static <%= BusinessClassName %> GetAll()
        {
            if(_list == null)
                _list = DataPortal.Fetch< <%= BusinessClassName %> >();
                
            return _list;
        }
	
        #endregion

<% if(IncludeSilverlightSupport) { %>
#endif
 	#region Asynchronous Factory Methods
        
	public static void GetAllAsync(EventHandler<DataPortalResult<<%= BusinessClassName %><%= Entity.GenericProperty %>>> handler)
        {
            DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>> dp = new DataPortal<<%= BusinessClassName %><%= Entity.GenericProperty %>>();
            dp.FetchCompleted += handler;
            dp.BeginFetch();
        }
        
	#endregion
	
<% } %>
        
        public static void InvalidateCache()
        {
            _list = null;
        }

        private <%= BusinessClassName %>()
        { /* Require use of factory methods */ }
        
        #endregion

<% if(DataAccessImplementation == DataAccessMethod.ObjectFactoryNone || DataAccessImplementation == DataAccessMethod.ObjectFactoryParameterizedSQL || DataAccessImplementation == DataAccessMethod.ObjectFactoryStoredProcedures) { %>
        #region Property overrides

        /// <summary>
        /// Returns true if any children are dirty
        /// </summary>
        public new bool IsDirty
        {
            get
            {
                return false;
            }
        }

        #endregion
<% } %>
    }
}