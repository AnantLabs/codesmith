<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 ReadOnlyChild" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="UseDeferredDeletion" Type="System.Boolean" Default="False" Category="3. Business Project" Description="Changes how the Business Objects are deleted, defaults to immediate deletion" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.6.x CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;
using Csla;

#endregion

namespace <%= BusinessProjectName %>
{
	[Serializable]
	public partial class <%= BusinessClassName %> : ReadOnlyBase< <%= BusinessClassName %> >
	{
		#region Business Methods

<%  foreach(Member member in Entity.MembersNoRowVersionIncludePrimaryKey){ if (UseMemberVariables){ %>
		private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);
		private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue;<%= member.BuildDataObjectField() %>
		public <%= member.SystemType %> <%= member.PropertyName %>
		{
			get { return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>); }				
		}
		
<% } else { %>
		private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);<%= member.BuildDataObjectField() %>
		public <%= member.SystemType %> <%= member.PropertyName %>
		{
			get { return GetProperty(<%= member.PrivateMemberVariableName %>Property); }				
		}
		
<% } } %>
<%-- Foreign Keys --%>
<%  foreach(AssociationMember member in Entity.MembersForeignKey){ string columnName = member.ResolveManyToOneNameConflict(Entity); if (UseMemberVariables){ %>
		private static readonly PropertyInfo< <%= member.BaseSystemType %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.BaseSystemType %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>);
		private <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %> = <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property.DefaultValue;<%= member.BuildDataObjectField() %>
		public <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
		{
			get { return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>); }				
		}
		
<% } else { %>
		private static readonly PropertyInfo< <%= member.BaseSystemType %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.BaseSystemType %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>);<%= member.BuildDataObjectField() %>
		public <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
		{
			get { return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property); }	
		}
		
<% } } %>
<%-- One-To-Zero-Or-One --%>
<% foreach(AssociationMember association in Entity.OneToZeroOrOne) { if (UseMemberVariables){ %>
		private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
		private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue;
		public <%= association.ClassName %> <%= association.PropertyName %>
		{
			get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>));

<% } %> 
                return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>); 
            }
		}

<% } else { %>
		private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
		public <%= association.ClassName %> <%= association.PropertyName %>
		{
			get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>));

<% } %>  
                   return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
		}

<% } } %>
<%-- Many-To-One --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { if (UseMemberVariables){ %>
		private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
		private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue;
		public <%= association.ClassName %> <%= association.PropertyName %>
		{
			get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>));

<% } %> 
                return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>); 
            }
		}

<% } else { %>
		private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
		public <%= association.ClassName %> <%= association.PropertyName %>
		{
			get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>));

<% } %>  
                   return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
		}

<% } } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association in Entity.ToManyUnion) { if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
		private <%= association.ClassName %>List <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue;
		public <%= association.ClassName %>List <%= association.PropertyName %>
		{
			get
            {   
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
<% if(!string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name))) { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>));

<% } else { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>));

<% } } %> 
                return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>); 
            }
		}

<% } else { %>
		private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>);
		public <%= association.ClassName %>List <%= association.PropertyName %>
		{
			get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
<% if(!string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName))) { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>));

<% } else { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>));

<% } } %>   
                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
		}

<% }} %>
		#endregion
				
		#region Factory Methods 
        
		internal static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
			return DataPortal.FetchChild< <%= ChildBusinessClassName %> >(
				new <%= ChildBusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>));
		}
<%-- One-To-Zero-Or-One --%>
<%if(Entity.HasOneToZeroOrZeroMember && Entity.PrimaryKey.KeyMembers.Count > 1){%>

        internal static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>(<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroParametersVariable() %>)
		{
            return DataPortal.Fetch< <%= ChildBusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria { <%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroObjectInitializer() %> });
        }
 <% }%>

		private <%= BusinessClassName %>()
		{ /* Require use of factory methods */}
		
		#endregion
		
<% if(Entity.PrimaryKey.IsCompositeKey) { %>
		#region Protected Overriden Method(s)
		
		// NOTE: This is needed for Composite Keys. 
		private readonly Guid _guidID = Guid.NewGuid();
		protected override object GetIdValue()
        {
            return _guidID;
        }
		
		#endregion
<% } %>
	}
}