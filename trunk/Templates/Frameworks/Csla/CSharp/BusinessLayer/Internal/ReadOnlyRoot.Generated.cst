<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.7.X ReadOnlyRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CSLA 3.7.X CodeSmith Templates.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region using declarations

using System;

using Csla;
using Csla.Data;

#endregion

namespace <%= BusinessProjectName %>
{
	[Serializable]
	public partial class <%= BusinessClassName %> : ReadOnlyBase< <%= BusinessClassName %> >
	{
        #region Contructor(s)

		private <%= BusinessClassName %>()
		{ /* Require use of factory methods */ }
        
        internal <%= BusinessClassName %>(SafeDataReader reader)
        {
<% if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL){ %>
            Fetch(reader);
<% } %>
        }
        
		#endregion
        
        #region Business Methods
                
<%  foreach(Member member in Entity.MembersNoRowVersionIncludePrimaryKey){ if (UseMemberVariables){ %>
		private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);
		private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue;<%= member.BuildDataObjectField() %>
		public <%= member.SystemType %> <%= member.PropertyName %>
		{
			get { return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>); }				
		}
		
<% } else { %>
		private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>);<%= member.BuildDataObjectField() %>
		public <%= member.SystemType %> <%= member.PropertyName %>
		{
			get { return GetProperty(<%= member.PrivateMemberVariableName %>Property); }				
		}
		
<% } } %>
<%-- Foreign Keys --%>
<%  foreach(AssociationMember member in Entity.MembersForeignKey){ string columnName = member.ResolveManyToOneNameConflict(Entity); if (UseMemberVariables){ %>
		private static readonly PropertyInfo< <%= member.BaseSystemType %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.BaseSystemType %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>);
		private <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %> = <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property.DefaultValue;<%= member.BuildDataObjectField() %>
		public <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
		{
			get { return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>); }				
		}
		
<% } else { %>
		private static readonly PropertyInfo< <%= member.BaseSystemType %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.BaseSystemType %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>);<%= member.BuildDataObjectField() %>
		public <%= member.BaseSystemType %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
		{
			get { return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property); }	
		}
		
<% } } %>
		#endregion
				
		#region Factory Methods 
		
		public static <%= BusinessClassName %> Get<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
			return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= BusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>));
		}
<%-- One-To-Zero-Or-One --%>
<%if(Entity.HasOneToZeroOrZeroMember && Entity.PrimaryKey.KeyMembers.Count > 1){%>

        public static <%= BusinessClassName %> Get<%= BusinessClassName %>(<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroParametersVariable() %>)
		{
            return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= BusinessClassName %>Criteria { <%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroObjectInitializer() %> });
        }
 <% }%>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { if(sc.IsUniqueResult && !(sc.Members.Count == Entity.PrimaryKey.KeyMembers.Count && sc.Members[0].Name == Entity.PrimaryKey.KeyMember.Name)) { %>

        public static <%= BusinessClassName %> <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariablesCriteria(false) %>)
		{
            return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= BusinessClassName %>Criteria { <%= sc.Members.BuildCriteriaObjectInitializer(Entity.Table.Name) %> });
        }
 <% } } %>

		#endregion
		
<% if(Entity.PrimaryKey.IsCompositeKey) { %>
		#region Protected Overriden Method(s)
		
		// NOTE: This is needed for Composite Keys. 
		private readonly Guid _guidID = Guid.NewGuid();
		protected override object GetIdValue()
        {
            return _guidID;
        }
		
		#endregion
<% } %>
	}
}