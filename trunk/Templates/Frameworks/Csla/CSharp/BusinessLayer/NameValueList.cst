<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="NameValueList" Template="Internal\NameValueList.cst" %>
<%@ Register Name="NameValueListDataAccess" Template="Internal\NameValueList.DataAccess.cst" %>
<%@ Register Name="NameValueListGenerated" Template="Internal\NameValueList.Generated.cst" %>
<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    PreserveRegionsMergeStrategy strategy = new PreserveRegionsMergeStrategy();
    strategy.RegionNameRegex = "^[ \\t]*[ \\s]*\"?(?i:Preserved Code)\"?";

    string parentFileName = System.IO.Path.Combine(this.Location, String.Format("Entities\\{0}.cs", BusinessClassName));
    string fileName = System.IO.Path.Combine(Location, String.Format("Entities\\{0}.Generated.cs", BusinessClassName));
    RenderToFileHelper<NameValueList>(parentFileName, strategy);
    RenderToFileHelper<NameValueListGenerated>(fileName, parentFileName, true);
 
    fileName = System.IO.Path.Combine(Location, String.Format("Entities\\{0}.DataAccess.cs", BusinessClassName));
    RenderToFileHelper<NameValueListDataAccess>(fileName, parentFileName, true);
    
    if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
    {
        //StoredProcedures
        fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.StoredProcedures.sql", BusinessClassName));
        SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
        this.CopyPropertiesTo(sqlStoredProcedures, true);
        sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
        
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
    }
}

public override bool OnEntityChanging()
{
    if (string.IsNullOrEmpty(BusinessClassName))
    {
        BusinessClassName = string.Concat(Entity.Name, "NameValueList");
        ChildBusinessClassName = Entity.Name;
    }

    if (string.IsNullOrEmpty(CriteriaClassName) || CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase))
        CriteriaClassName = String.Concat(Entity.Name, "Criteria");

    return false;
}

</script>