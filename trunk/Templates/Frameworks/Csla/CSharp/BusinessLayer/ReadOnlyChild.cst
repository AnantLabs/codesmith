<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="QuickStart.EntitiesCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X ReadOnlyChild" %>

<%@ Register Name="ReadOnlyChild" Template="Internal\ReadOnlyChild.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyChildDataAccess" Template="Internal\ReadOnlyChild.DataAccess.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyChildDataAccessParameterized" Template="Internal\ReadOnlyChild.DataAccess.ParameterizedSQL.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyChildDataAccessStoredProcedures" Template="Internal\ReadOnlyChild.DataAccess.StoredProcedures.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>
<%@ Register Name="ReadOnlyChildGenerated" Template="Internal\ReadOnlyChild.Generated.cst" MergeProperties="True" ExcludeProperties="SourceTable, BusinessClassName" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<% Generate(); %>

<script runat="template">

public override void Generate()
{
    RegisterReferences();
    
    foreach(Entity entity in Entities)
    {
        #region ReadOnlyChild
        
        ReadOnlyChild readOnlyChild = this.Create<ReadOnlyChild>();
        this.CopyPropertiesTo(readOnlyChild);
        readOnlyChild.SourceTable = entity.Table;
        
        string parentFileName = System.IO.Path.Combine(this.Location, string.Format("Entities\\{0}.cs", readOnlyChild.BusinessClassName));
        if (!System.IO.File.Exists(parentFileName))
        {
            readOnlyChild.RenderToFile(parentFileName, false);
        }
        
        #region ReadOnlyChild.Generated
        
        string fileName = System.IO.Path.Combine(Location, string.Format("Entities\\{0}.Generated.cs", readOnlyChild.BusinessClassName));
        
        ReadOnlyChildGenerated readOnlyChildGenerated = this.Create<ReadOnlyChildGenerated>();
        this.CopyPropertiesTo(readOnlyChildGenerated);
        readOnlyChildGenerated.SourceTable = entity.Table;
        
        readOnlyChildGenerated.RenderToFile(fileName, parentFileName, true);
        
        #endregion
        
        #region ReadOnlyChild.DataAccess
        
        fileName = System.IO.Path.Combine(Location, string.Format("Entities\\{0}.DataAccess.cs", readOnlyChild.BusinessClassName));
        if(DataAccessImplementation == DataAccessMethod.None)
        {
            ReadOnlyChildDataAccess readOnlyChildDataAccess = this.Create<ReadOnlyChildDataAccess>();
            this.CopyPropertiesTo(readOnlyChildDataAccess);
            readOnlyChildDataAccess.SourceTable = entity.Table;
            
            readOnlyChildDataAccess.RenderToFile(fileName, parentFileName, true);
        }
        else if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
        {
            ReadOnlyChildDataAccessParameterized readOnlyChildDataAccessParameterized = this.Create<ReadOnlyChildDataAccessParameterized>();
            this.CopyPropertiesTo(readOnlyChildDataAccessParameterized);
            readOnlyChildDataAccessParameterized.SourceTable = entity.Table;
            
            readOnlyChildDataAccessParameterized.RenderToFile(fileName, parentFileName, true);
        }
        else if(DataAccessImplementation == DataAccessMethod.StoredProcedures)
        {
            ReadOnlyChildDataAccessStoredProcedures readOnlyChildDataAccessStoredProcedures = this.Create<ReadOnlyChildDataAccessStoredProcedures>();
            this.CopyPropertiesTo(readOnlyChildDataAccessStoredProcedures);
            readOnlyChildDataAccessStoredProcedures.SourceTable = entity.Table;

            readOnlyChildDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, true);

            //StoredProcedures
            fileName = System.IO.Path.Combine(Location, string.Format("Entities\\{0}.StoredProcedures.sql", readOnlyChild.BusinessClassName));
            SqlStoredProcedures sqlStoredProcedures = this.Create<SqlStoredProcedures>();
            this.CopyPropertiesTo(sqlStoredProcedures);
            sqlStoredProcedures.SourceTable = entity.Table;
            sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures.";
            
            sqlStoredProcedures.RenderToFile(fileName, parentFileName, true);
        }
        
        #endregion
        
        #endregion
    }
}

</script>