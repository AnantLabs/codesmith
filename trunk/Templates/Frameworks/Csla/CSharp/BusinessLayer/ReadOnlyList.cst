<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" OutputType="None" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="ReadOnlyList" Template="Internal\ReadOnlyList.cst" %>
<%@ Register Name="ReadOnlyListDataAccess" Template="Internal\ReadOnlyList.DataAccess.cst" %>
<%@ Register Name="ReadOnlyListDataAccessParameterized" Template="Internal\ReadOnlyList.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="ReadOnlyListDataAccessLinqToSQL" Template="Internal\ReadOnlyList.DataAccess.LinqToSQL.cst" %>
<%@ Register Name="ReadOnlyListDataAccessStoredProcedures" Template="Internal\ReadOnlyList.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="ReadOnlyListGenerated" Template="Internal\ReadOnlyList.Generated.cst" %>
<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>

<script runat="template">

public override void Render(System.IO.TextWriter writer)
{
    RegisterReferences();

    string parentFileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.cs", BusinessClassName));
    string fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.Generated.cs", BusinessClassName));
    RenderToFileHelper<ReadOnlyList>(parentFileName, false);
    RenderToFileHelper<ReadOnlyListGenerated>(fileName, parentFileName, true);
 
    fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.DataAccess.cs", BusinessClassName));
    if(DataAccessImplementation == DataAccessMethod.None)
    {
        RenderToFileHelper<ReadOnlyListDataAccess>(fileName, parentFileName, false);
    }
    else if(!Entity.IsView() && (DataAccessImplementation == DataAccessMethod.StoredProcedures || Entity.IsCommand()))
    {
        RenderToFileHelper<ReadOnlyListDataAccessStoredProcedures>(fileName, parentFileName, true);

        if(Entity.IsCommand())
            return;

        fileName = System.IO.Path.Combine(Location, String.Format("Collections\\{0}.StoredProcedures.sql", BusinessClassName));
        RenderProceduresToFileHelper<SqlStoredProcedures>(fileName, parentFileName, true, true, true);
    }
    else if(Entity.IsView() || DataAccessImplementation == DataAccessMethod.ParameterizedSQL)
    {
        RenderToFileHelper<ReadOnlyListDataAccessParameterized>(fileName, parentFileName, true);
    }
    else if(DataAccessImplementation == DataAccessMethod.LinqToSQL)
    {
        RenderToFileHelper<ReadOnlyListDataAccessLinqToSQL>(fileName, parentFileName, true);
    }
}

public override bool OnEntityChanging()
{
    if (String.IsNullOrEmpty(BusinessClassName))
    {
        BusinessClassName = String.Concat(Entity.Name, "InfoList");
        ChildBusinessClassName = String.Concat(Entity.Name, "Info");
    }

    if (String.IsNullOrEmpty(CriteriaClassName) || CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase))
        CriteriaClassName = String.Concat(Entity.Name, "Criteria");

    return false;
}

</script>