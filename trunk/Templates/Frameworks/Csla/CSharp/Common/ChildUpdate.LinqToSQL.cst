<%-- Author: Blake Niemyjski --%>
<%--         Joe McPherson   --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
            //LinqToSQL Modification
            bool cancel = false;
            OnChildUpdating(ref cancel);
            if (cancel) return;

<% if(Entity.CanUpdate) { %>  
            // Create a new connection.
            using (var ctx = ContextManager<DAL.<%=LinqToSQLDataContextName%>>.GetManager(LinqToSQLHelper.ConnectionString, true))
            {
            
            // Get <%= Entity.Name %> data for a single criteria
<%    string PrimaryKeyCriteria = "";    
    string PrimaryKeyFields = "";
     int memberCount = 0 ; 
    foreach (IProperty property in Entity.GetProperties(PropertyType.Key)) 
    {
        PrimaryKeyCriteria += "criteria." + property.Name.ToString() ;
        PrimaryKeyFields += property.Name.ToString() ;
        if ( memberCount < (Entity.GetProperties(PropertyType.Key).Count - 1))
        {
            PrimaryKeyCriteria += ", " ;
            PrimaryKeyFields += ", ";
        }
     memberCount = memberCount + 1 ; 
     } 
%>    
                DAL.<%= Entity.Name %> item = ctx.DataContext.<%= Entity.Name %>.GetByKey(<%=PrimaryKeyFields%>);
    
                if (item == null)
                    throw new ArgumentNullException("<%=PrimaryKeyFields%>", "Selection by <%=PrimaryKeyFields%> did not return a result.");
                else
                {
<%= Entity.GetProperties(PropertyType.UpdateInsert).BuildLinqToSQLCommandParameters(false,true,true,5)%>
                //Map(item);
                }           
    
                try
                {
                    ctx.DataContext.SubmitChanges();
                }
                catch(System.Exception e)
                {
                    throw new DataPortalException("The entity is out of date on the client. " +
                        "Please update the entity and try again. This could also be thrown if the sql statement " +
                        "failed to execute.",e,this);
                }
<%     foreach(IProperty property in Entity.GetProperties(PropertyType.Key))%>
<%    {%>
<%        if(!property.IsType(PropertyType.Identity))%>
<%        {%>
                LoadProperty(_<%= property.VariableName %>Property, this.<%= property.Name %>);
<%        }%>
<%    } %>

                OnChildUpdated();
            }
<% } else { %>
            throw new NotSupportedException("This business object cannot be updated.");
<% } %>
