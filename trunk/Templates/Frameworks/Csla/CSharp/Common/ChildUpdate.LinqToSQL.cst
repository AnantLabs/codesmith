<%-- Author: Blake Niemyjski --%>
<%--         Joe McPherson   --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
			//LinqToSQL Modification
			bool cancel = false;
            OnChildUpdating(ref cancel);
            if (cancel) return;
			
			// Create a new connection.
            using (var ctx = ContextManager<DAL.PetshopDataContext>.GetManager(LinqToSQLHelper.ConnectionString, true))
			{
			
			// Get <%= StringUtil.ToPascalCase(Entity.Table.Name) %> data for a single criteria
<%	string PrimaryKeyCriteria = "";	
	string PrimaryKeyFields = "";
 	int memberCount = 0 ; 
	foreach (Member member in Entity.PrimaryKey.KeyMembers) 
	{
		PrimaryKeyCriteria += "criteria." + member.PropertyName.ToString() ;
		PrimaryKeyFields += member.PropertyName.ToString() ;
		if ( memberCount < (Entity.PrimaryKey.KeyMembers.Count - 1))
		{
			PrimaryKeyCriteria += ", " ;
			PrimaryKeyFields += ", ";
		}
 	memberCount = memberCount + 1 ; 
 	} 
%>	
				DAL.<%= StringUtil.ToPascalCase(Entity.Table.Name) %> item = ctx.DataContext.<%= StringUtil.ToPascalCase(Entity.Table.Name) %>.GetByKey(<%=PrimaryKeyFields%>);
	
				if (item == null)
					throw new ArgumentNullException("<%=PrimaryKeyFields%>", "Selection by <%=PrimaryKeyFields%> did not return a result.");
				else
				{
<%= Entity.MembersUpdateInsert.BuildLinqToSQLCommandParameters(false,true,true,5)%>
				//Map(item);
				}           
	
				try
				{
					ctx.DataContext.SubmitChanges();
				}
				catch(System.Exception e)
				{
					throw new DataPortalException("The entity is out of date on the client. " +
						"Please update the entity and try again. This could also be thrown if the sql statement " +
						"failed to execute.",e,this);
				}
<% 	foreach(Member member in Entity.PrimaryKey.KeyMembers)%>
<%	{%>
<%		if(!member.IsIdentity)%>
<%		{%>
				LoadProperty(_<%= member.VariableName %>Property, this.<%= member.PropertyName %>);
<%		}%>
<%	} %>

            	OnChildUpdated();
			}
