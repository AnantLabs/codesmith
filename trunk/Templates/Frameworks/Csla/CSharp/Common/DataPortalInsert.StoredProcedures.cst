<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>

            bool cancel = false;
            OnInserting(ref cancel);
            if (cancel) return;

<% if(Entity.CanInsert) { %> 
            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(var command = new SqlCommand("<%= GetInsertStoredProcedureName() %>", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    <%= Entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(false, true, false, true) %>
<% if(Entity.ConcurrencyProperty != null) { %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp);
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Value = this.<%= Entity.ConcurrencyProperty.Name %>;
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Direction = ParameterDirection.InputOutput;
<% } %>
                    command.ExecuteNonQuery();

                    using (BypassPropertyChecks)
                    {
<% if(Entity.ConcurrencyProperty != null) { %>
                        <%= Entity.ConcurrencyProperty.Name %> = (<%= Entity.ConcurrencyProperty.SystemType %>)command.Parameters["<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>"].Value;
<% } foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(property.IsType(PropertyType.Identity) || property.IsDbType(DbType.Guid)) { if(UseMemberVariables) { %>
                        <%= property.PrivateMemberVariableName %> = (<%= property.SystemType %>)command.Parameters["<%= property.BuildParameterVariableName() %>"].Value;
<% } else { %>
                        LoadProperty(<%= property.PrivateMemberVariableName %>Property,(<%= property.SystemType %>)command.Parameters["<%= property.BuildParameterVariableName() %>"].Value);
<% } } } %>
                    }
                }
                
<% foreach(IProperty property in Entity.GetProperties(PropertyType.Key)) { if(!property.IsType(PropertyType.Identity)) { if(UseMemberVariables) { %>
                _original<%= property.Name %> = this.<%= property.Name %>;
<% } else { %>
                LoadProperty(_original<%= property.Name %>Property, this.<%= property.Name %>);
<% } } } %>
<% if(Entity.Associations.Count(a => a.AssociationType == AssociationType.OneToMany) > 0 || Entity.Associations.Count(a => a.AssociationType == AssociationType.ManyToOne) > 0 || Entity.Associations.Count(a => a.AssociationType == AssociationType.OneToZeroOrOne) > 0){ %>

                FieldManager.UpdateChildren(this, connection);
<% } %>
            }

            OnInserted();
<% } else { %>
            throw new NotSupportedException("This business object cannot be inserted.");
<% } %>

