<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
            bool cancel = false;
            OnUpdating(ref cancel);
            if (cancel) return;

<% if(!Entity.HasIdentityMember) { %>
            if(<%= Entity.PrimaryKey.KeyMembers.BuildIdentityKeyEqualityStatements()%>)
            {
                // Insert new child.
                <%= BusinessClassName %> item = new <%= BusinessClassName %> {<%= Entity.MembersNoRowVersion.BuildObjectInitializer(false, true) %>};
                item = item.Save();

                // Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
<% foreach(Association association in Entity.AssociatedOneToMany) { %>
                foreach(<%= association.ClassName %> itemToUpdate in <%= association.PropertyName %>)
                {
<%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate", "") %>
                }
<% } %>

                // Create a new connection.
                using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
                {
                    connection.Open();
                    FieldManager.UpdateChildren(this, connection);
                }

                // Delete the old.
                DataPortal_Delete(new <%= BusinessClassName %>Criteria {<%= Entity.PrimaryKey.KeyMembers.BuildObjectInitializer(false, false, true) %>});

                // Mark the original as the new one.
<% foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(!member.IsIdentity) { %>
                Original<%= member.PropertyName %> = <%= member.PropertyName %>;
<% } }%>

                OnUpdated();

                return;
            }

<% } %>
            const string commandText = "UPDATE [<%= Entity.Table.Owner %>].[<%= Entity.Table.Name %>] <%= Entity.MembersUpdateInsert.BuildSetStatements() %> <%= Entity.PrimaryKey.KeyMembers.BuildWhereStatements(true) %><% if(Entity.HasRowVersionMember) { %> AND [<%= Entity.RowVersionMember.ColumnName %>] = <%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %><% } %><%= Entity.BuildUpdateSelectStatement() %>";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    <%= Entity.MembersNoRowVersion.BuildCommandParameters(false, false, false, false, true) %>
<% if(Entity.HasRowVersionMember) { %>
					command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>", SqlDbType.Timestamp);
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Value = <%= Entity.RowVersionMember.PropertyName %>;
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Direction = ParameterDirection.InputOutput;
<% } %>

<% if(Entity.HasRowVersionMember || Entity.HasIdentityMember) { %>
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        if(reader.RecordsAffected == 0)
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

                        if(reader.Read())
                        {
                            using (BypassPropertyChecks)
                            {
<% if(Entity.HasRowVersionMember) { %>
                                <%= Entity.RowVersionMember.PropertyName %> = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>");
<% } foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(member.IsIdentity) { if(UseMemberVariables) { %>
                                <%= member.PrivateMemberVariableName %> = <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>");<% } else { %>ADOHelper.GetBytes(reader);<% } %>
<% } else { %>
                                LoadProperty(<%= member.PrivateMemberVariableName %>Property, <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>"));<% } else { %>ADOHelper.GetBytes(reader," <%= member.ColumnName %>"));<% } %>
<% } } } %>
                            }
                        }
                    }
<% } else { %>
                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
<% } %>

<% foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(!member.IsIdentity) { if(UseMemberVariables) { %>
                    _original<%= member.PropertyName %> = this.<%= member.PropertyName %>;
<% } else { %>
                    LoadProperty(_original<%= member.PropertyName %>Property, this.<%= member.PropertyName %>);
<% } } } %>
                }
<% if(Entity.AssociatedToManyUnion.Count > 0 || Entity.AssociatedManyToOne.Count > 0){ %>

                FieldManager.UpdateChildren(this, connection);
<% } %>
            }

            OnUpdated();
