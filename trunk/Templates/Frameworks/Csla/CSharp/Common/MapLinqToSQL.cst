<%-- Author: Blake Niemyjski --%>
<%--         Joe McPherson   --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

            //LinqToSQL Modification
            bool cancel = false;
            OnMapping(ref cancel);
            if (cancel) return;

            using(BypassPropertyChecks)
            {
<%     if(Entity.ConcurrencyProperty != null) 
    { %>
                <%= Entity.ConcurrencyProperty.Name %> = LinqToSQLHelper.GetBytes(DataSource, "<%= Entity.ConcurrencyProperty.KeyName %>");
<%     } %>
<%     foreach(IProperty property in Entity.GetProperties(PropertyType.NoConcurrency)) 
    { 
        if(UseMemberVariables) 
        { %>
<%             if(property.IsNullable && property.SystemType != "System.String" && property.SystemType != "System.Byte[]") 
            {%>
                <%= property.PrivateMemberVariableName %> = DataSource.IsDBNull("<%= property.KeyName %>") ? (<%= property.SystemType %>)null : <%if(!property.HasByteArrayColumn()) { %>DataSource.<%= property.Name %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= property.KeyName %>);<% } %>
<%                if (property.IsType(PropertyType.Key) && !property.IsType(PropertyType.Identity)) 
                { %>
                _original<%= property.Name %> = DataSource.IsDBNull("<%= property.KeyName %>") ? (<%= property.SystemType %>)null : <%if(!property.HasByteArrayColumn()) { %>DataSource.<%= property.Name %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= property.KeyName %>);<% } %>
<%                 }
            } 
            else 
            {%>
                <%= property.PrivateMemberVariableName %> = <%if(!property.HasByteArrayColumn()) { %>DataSource.<%= property.Name %><% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= property.KeyName %><% } %>;
<%                if (property.IsType(PropertyType.Key) && !property.IsType(PropertyType.Identity)) 
                { %>
                _original<%= property.Name %> = <%if(!property.HasByteArrayColumn()) { %>DataSource.<%= property.Name %><% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= property.KeyName %><% } %>;
<%                 } 
            } 
        } 
        else 
        { %>
                LoadProperty(<%= property.PrivateMemberVariableName %>Property, <%if(!property.HasByteArrayColumn()) { %>DataSource.<%= property.Name %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= property.KeyName %>));<% } %>
<%            if (property.IsType(PropertyType.Key) && !property.IsType(PropertyType.Identity)) 
            { %>
                LoadProperty(_original<%= property.Name %>Property, <%if(!property.HasByteArrayColumn()) { %>DataSource.<%= property.Name %>);<% } else { %>LinqToSQLHelper.GetByteArray(DataSource.<%= property.KeyName %>));<% } %>
<%             } 
        } 
    } %>
            }

            OnMapped();
