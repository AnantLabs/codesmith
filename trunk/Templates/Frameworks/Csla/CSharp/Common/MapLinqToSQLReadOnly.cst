<%-- Author: Blake Niemyjski --%>
<%--         Joe McPherson   --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>

        #region Map

        private void Map(DAL.<%=Entity.Name%> dto)
        {
            bool cancel = false;
            OnMapping(ref cancel);
            if (cancel) return;

<%     if(Entity.ConcurrencyProperty != null) 
    { %>
            <%= Entity.ConcurrencyProperty.Name %> = LinqToSQLHelper.GetBytes(dto, "<%= Entity.ConcurrencyProperty.KeyName %>");
<%     } %>
<%     foreach(IProperty property in Entity.GetProperties(PropertyType.NoConcurrency)) 
    { 
        if(UseMemberVariables) 
        { %>
<%             if( property.IsNullable && property.SystemType != "System.String" && property.SystemType != "System.Byte[]") 
            {%>
            <%= property.PrivateMemberVariableName %> = dto.IsDBNull("<%= property.KeyName %>") ? (<%= property.SystemType %>)null : <%if(!property.HasByteArrayColumn()) { %>dto.<%= property.KeyName %>;<% } else { %>LinqToSQLHelper.GetByteArray(dto.<%= property.Name %>);<% } %>
<%             } 
            else 
            {%>
            <%= property.PrivateMemberVariableName %> = <%if(!property.HasByteArrayColumn()) { %>dto.<%= property.KeyName %>;<% } else { %>LinqToSQLHelper.GetByteArray(dto.<%= property.Name %>);<% } %>
<%             } 
        } 
        else 
        { %>
            LoadProperty(<%= property.PrivateMemberVariableName %>Property, <%if(!property.HasByteArrayColumn()) { %>dto.<%= property.KeyName %>);<% } else { %>LinqToSQLHelper.GetByteArray(dto.<%= property.Name %>));<% } %>
<%         }
    } %>

            OnMapped();
        }
        
        private void Child_Fetch(DAL.<%=Entity.Name%> dto)
        {
            Map(dto);
        }

        #endregion
