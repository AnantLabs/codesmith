<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
        #region Properties

<%  foreach(Member member in Entity.MembersNoRowVersion){ if (UseMemberVariables){ %>
        private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>, string.Empty<% if(member.IsNullable) { %>, (<%= member.SystemType %>)null<% } %><%if (IsCSLA40) { %>, RelationshipTypes.PrivateField<% }%>);
        private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue;<%= member.BuildDataObjectField(IncludeSilverlightSupport) %>
<% if(member.HasDescription) { %>
        /// <summary>
        /// <%= member.Description %>
        /// </summary>
<% } %>
        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>); }
        }

<% } else { %>
        private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>, string.Empty<% if(member.IsNullable) { %>, (<%= member.SystemType %>)null<% } %>);<%= member.BuildDataObjectField(IncludeSilverlightSupport) %>
<% if(member.HasDescription) { %>
        /// <summary>
        /// <%= member.Description %>
        /// </summary>
<% } %>
        public <%= member.SystemType %> <%= member.PropertyName %>
        {
            get { return GetProperty(<%= member.PrivateMemberVariableName %>Property); }
        }

<% } } %>
<%-- One-To-Zero-Or-One --%>
<% foreach(Association association in Entity.AssociatedOneToZeroOrOne) { 
    // For now, don't generate properties based on tables generated as generics.
    if(association.GenericProperty == string.Empty) {
    string associationClassName = association.ClassName;
    if(IsReadOnlyBusinessObject( association, "Info")) {
        associationClassName = association.ClassName + "Info";
    } %>
        //AssociatedOneToZeroOrOne
        private static readonly PropertyInfo< <%= associationClassName %><%= association.GenericProperty %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= associationClassName %><%= association.GenericProperty %> >(p => p.<%= association.PropertyName %>, "<%= association.PropertyName %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %><%= association.GenericProperty %> <%= association.PropertyName %>
        {
            get
            {
                bool cancel = false;
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, ref cancel);

                if (!cancel)
                {
<% if(UseLazyLoading) { %>
                    if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    {
                        var criteria = new <%= BusinessProjectName %>.<%= association.ClassName %><%= association.GenericProperty %>Criteria {<%= association.BuildObjectInitializer(true) %>};
                        <%= association.BuildNullableObjectInitializer(true)%>

<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
                        MarkBusy();
                        if(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria))
                            <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>, (o, e) =>
                                {
                                    if (e.Error != null)
                                        throw e.Error; 
    
                                    this.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object);
    
                                    MarkIdle();
                                    OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property);
                                });

#else
<% } %>
                        if(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria))
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
                    }
<% } %>
                }

                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } } %>
<%-- Many-To-One --%>
<% foreach(Association association in Entity.AssociatedManyToOne) {
    // For now, don't generate properties based on tables generated as generics.
    if(association.GenericProperty == string.Empty) {
    string associationClassName = association.ClassName;
    if(IsReadOnlyBusinessObject(association, "Info")) {
        associationClassName = association.ClassName + "Info";
    } %>
        //AssociatedManyToOne
        private static readonly PropertyInfo< <%= associationClassName %><%= association.GenericProperty %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= associationClassName %><%= association.GenericProperty %> >(p => p.<%= association.PropertyName %>, "<%= association.PropertyName %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %><%= association.GenericProperty %> <%= association.PropertyName %>
        {
            get
            {
                bool cancel = false;
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, ref cancel);

                if (!cancel)
                {
<% if(UseLazyLoading) { %>
<% string result = association.BuildNullCheckStatement(true, true, false, true, false);
if(!result.Equals("(true)", StringComparison.CurrentCultureIgnoreCase) && !result.Equals("(false)", StringComparison.CurrentCultureIgnoreCase)) {%>
                    if<%= association.BuildNullCheckStatement(true, true, false, true, false) %>
                        return null;

<% }%>
                    if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    {
                        var criteria = new <%= BusinessProjectName %>.<%= association.ClassName %><%= association.GenericProperty %>Criteria {<%= association.BuildObjectInitializer(true) %>};
                        <%= association.BuildNullableObjectInitializer(true)%>
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
                        MarkBusy();
                        if(<%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria))
                            <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>, (o, e) =>
                                {
                                    if (e.Error != null)
                                        throw e.Error; 

                                    this.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object<% if(IsChildBusinessObject(association)) { %>.Child<% } %>);

                                    MarkIdle();
                                    OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property);
                                });
#else
<% } %>
                        if(<%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.Exists(criteria))
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
                    }
<% } %>
                }

                return GetProperty(<%= association.PrivateMemberVariableName %>Property); 
            }
        }

<% } } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(Association association in Entity.AssociatedOneToMany) { 
    // For now, don't generate properties based on tables generated as generics.
    if(association.GenericProperty == string.Empty) {
    string associationClassName = association.ClassName;
    if(IsReadOnlyBusinessObject(association, "InfoList")) {
        associationClassName = association.ClassName + "Info";
    }
    %>
        //AssociatedOneToMany
        private static readonly PropertyInfo< <%= associationClassName %>List<%= association.GenericProperty %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= associationClassName %>List<%= association.GenericProperty %>>(p => p.<%= association.PropertyName %>, "<%= association.PropertyName %>");
<% if(association.HasDescription) { %>
        /// <summary>
        /// <%= association.Description %>
        /// </summary>
<% } %>
        public <%= associationClassName %>List<%= association.GenericProperty %> <%= association.PropertyName %>
        {
            get
            {
                bool cancel = false;
                OnChildLoading(<%= association.PrivateMemberVariableName %>Property, ref cancel);
    
                if (!cancel)
                {
<% if(UseLazyLoading) { %>
                    if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    {
<% if(IncludeSilverlightSupport) { %>
#if SILVERLIGHT
                        MarkBusy();
<% if(IsNameValueListBusinessObject(association, "NameValueList")) { %>
                        <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.GetAllAsync((o, e) =>
                                {
                                    if (e.Error != null)
                                        throw e.Error; 
    
                                    this.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object);
    
                                    MarkIdle();
                                    OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property);
                                });
<% } else { %>
                        var criteria = new <%= BusinessProjectName %>.<%= association.ClassName %><%= association.GenericProperty %>Criteria {<%= association.BuildObjectInitializer(true) %>};
                        <%= association.BuildNullableObjectInitializer(true)%>

                        if(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria))
                            <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>Async(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>, (o, e) =>
                                {
                                    if (e.Error != null)
                                        throw e.Error; 
    
                                    this.LoadProperty(<%= association.PrivateMemberVariableName %>Property, e.Object);

                                    MarkIdle();
                                    OnPropertyChanged(<%= association.PrivateMemberVariableName %>Property);
                                });
<% } %>
#else
<% } %>
<% if(IsNameValueListBusinessObject(association, "NameValueList")) { %>
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.GetAll());
<% } else { %>
                        var criteria = new <%= BusinessProjectName %>.<%= association.ClassName %><%= association.GenericProperty %>Criteria {<%= association.BuildObjectInitializer(true) %>};
                        <%= association.BuildNullableObjectInitializer(true)%>
    
                        if(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %>List<%= association.GenericProperty %>.Exists(criteria))
                            LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>));
<% } %>
<% if(IncludeSilverlightSupport) { %>
#endif
<% } %>
                    }
<% } %>
                }

                return GetProperty(<%= association.PrivateMemberVariableName %>Property);
            }
        }

<% } } %>

        #endregion
