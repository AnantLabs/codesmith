<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA DataAccessLayer" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\DataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;
using Csla.Server;

using <%= BusinessProjectName %>;

#endregion

namespace <%= DataProjectName %>
{
    public partial class <%= Entity.ClassName %>Factory : ObjectFactory
    {
<% if(!IsReadOnlyBusinessObject) { %>
        #region Create

        /// <summary>
        /// Creates new <%= Entity.ClassName %> with default values.
        /// </summary>
        /// <returns>new <%= Entity.ClassName %>.</returns>
        [RunLocal]
        public <%= Entity.ClassName %> Create()
        {
            var item = (<%= Entity.ClassName %>)Activator.CreateInstance(typeof(<%= Entity.ClassName %>), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            using (BypassPropertyChecks(item))
            {
                // Default values.
<% foreach(Member member in Entity.PrimaryKey.KeyMembers) {
if(member.SystemType == "System.Guid") { %>
                item.<%= member.PropertyName %> = Guid.NewGuid();
<%} } foreach(Association association in Entity.AssociatedForeignKeys) { foreach(AssociationMember member in association) {
if(member.AssociatedColumn.SystemType == "System.String" && !member.AssociatedColumn.IsIdentity && member.AssociatedColumn.IsForeignKey) { %>
                item.<%= member.AssociatedColumn.PropertyName %> = "BN";
<%} } } %>
            }

            CheckRules(item);
            MarkNew(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            OnCreated();

            return item;
        }

        /// <summary>
        /// Creates new <%= Entity.ClassName %> with default values.
        /// </summary>
        /// <returns>new <%= Entity.ClassName %>.</returns>
        [RunLocal]
        private <%= Entity.ClassName %> Create(<%= Entity.ClassName %>Criteria criteria)
        {
            var item = (<%= Entity.ClassName %>)Activator.CreateInstance(typeof(<%= Entity.ClassName %>), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            var resource = Fetch(criteria);
            using (BypassPropertyChecks(item))
            {
<% foreach(Member member in Entity.MembersNoKeysOrRowVersion){ %>
                item.<%= member.PropertyName %> = resource.<%= member.PropertyName %>;
<% } %>
            }

            CheckRules(item);
            MarkNew(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>

            OnCreated();

            return item;
        }

        #endregion
<% } %>

        #region Fetch

        /// <summary>
        /// Fetch <%= Entity.ClassName %>.
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns></returns>
        public <%= Entity.ClassName %> Fetch(<%= Entity.ClassName %>Criteria criteria)
        {
            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return null;

            <%= Entity.ClassName %> item;
            string commandText = string.Format("SELECT <%= Entity.Members.BuildDataBaseColumns() %> FROM [<%= Entity.Table.Owner %>].[<%= Entity.Table.Name %>] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if (reader.Read())
                            item = Map(reader);
                        else
                            throw new Exception(String.Format("The record was not found in '<%= Entity.Table.Name %>' using the following criteria: {0}.", criteria));
                    }
                }
            }

<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            OnFetched();
            return item;
        }

        #endregion

<% if(!IsReadOnlyBusinessObject) { %>
        #region Insert

        private void DoInsert(ref <%= Entity.ClassName %> item, bool stopProccessingChildren)
        {
            // Don't update if the item isn't dirty.
            if (!item.IsDirty) return;

            bool cancel = false;
            OnInserting(ref cancel);
            if (cancel) return;

            const string commandText = "INSERT INTO [<%= Entity.Table.Owner %>].[<%= Entity.Table.Name %>] (<%= Entity.MembersUpdateInsert.BuildDataBaseColumns() %>) VALUES (<%= Entity.MembersUpdateInsert.BuildDataBaseParameters() %>)<%= Entity.BuildInsertSelectStatement() %>";
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using(SqlCommand command = new SqlCommand(commandText, connection))
                {
                    <%= Entity.MembersUpdateInsert.BuildCommandParameters(true, true, false, true) %>
<% if(Entity.HasRowVersionMember) { %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>", SqlDbType.Timestamp);
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Value = item.<%= Entity.RowVersionMember.PropertyName %>;
                    command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Direction = ParameterDirection.InputOutput;
<% } %>

                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
<% if(Entity.HasRowVersionMember) { %>
                            item.<%= Entity.RowVersionMember.PropertyName %> = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>");
<% } if(Entity.HasIdentityMember) { foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(member.IsIdentity || member.DataType == DbType.Guid.ToString()) { %>
                            item.<%= member.PropertyName %> = <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>");<% } %>
<% } } } %>
                        }
                    }
                }
            }

<% foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(!member.IsIdentity) {%>
            item.Original<%= member.PropertyName %> = item.<%= member.PropertyName %>;
<% } }  %>

            MarkOld(item);
            CheckRules(item);
            
            if(!stopProccessingChildren)
            {
            // Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% foreach(Association association in Entity.AssociatedOneToZeroOrOne) { %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
<%-- Many-To-One --%>
<% foreach(Association association in Entity.AssociatedManyToOne) { %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(Association association in Entity.AssociatedOneToMany) { %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
            }

            OnInserted();
        }

        #endregion

        #region Update

        [Transactional(TransactionalTypes.TransactionScope)]
        public <%= Entity.ClassName %> Update(<%= Entity.ClassName %> item)
        {
            return Update(item, false);
        }

        public <%= Entity.ClassName %> Update(<%= Entity.ClassName %> item, bool stopProccessingChildren)
        {
            if(item.IsDeleted)
            {
                DoDelete(ref item);
                MarkNew(item);
            }
            else if(item.IsNew)
            {
                DoInsert(ref item, stopProccessingChildren);
            }
            else
            {
                DoUpdate(ref item, stopProccessingChildren);
            }

            return item;
        }

        private void DoUpdate(ref <%= Entity.ClassName %> item, bool stopProccessingChildren)
        {
            bool cancel = false;
            OnUpdating(ref cancel);
            if (cancel) return;

            // Don't update if the item isn't dirty.
            if (item.IsDirty)
            {
<% if(!Entity.HasIdentityMember) { %>
                if(<%= Entity.PrimaryKey.KeyMembers.BuildIdentityKeyEqualityStatements("item.")%>)
                {
                    // Insert new child.
                    var temp = (<%= Entity.ClassName %>)Activator.CreateInstance(typeof(<%= Entity.ClassName %>), true);
<% foreach(Member member in Entity.MembersNoRowVersion) { %>
                    temp.<%= member.PropertyName %> = item.<%= member.PropertyName %>;
<% } %>
                    temp = temp.Save();
    
                    // Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
<% foreach(Association association in Entity.AssociatedOneToMany) { %>
                    foreach(<%= association.ClassName %> itemToUpdate in item.<%= association.PropertyName %>)
                    {
<%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate", "item.") %>
                    }
<% } %>

                    // Update Children
<%-- One-To-Zero-Or-One --%>
<% foreach(Association association in Entity.AssociatedOneToZeroOrOne) { %>
                    Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
<%-- Many-To-One --%>
<% foreach(Association association in Entity.AssociatedManyToOne) { %>
                    Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(Association association in Entity.AssociatedOneToMany) { %>
                    Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
    
                    // Delete the old.
					var criteria = new <%= ResolveTargetClassName(BusinessClassName, "Criteria") %> {<%= Entity.PrimaryKey.KeyMembers.BuildObjectInitializer(true, false, true) %>};
					<%= Entity.PrimaryKey.KeyMembers.BuildNullableObjectInitializer(true, false, true)%>
                    Delete(criteria);
    
                    // Mark the original as the new one.
<% foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(!member.IsIdentity) { %>
                    item.Original<%= member.PropertyName %> = item.<%= member.PropertyName %>;
<% } }%>

                    MarkOld(item);
                    CheckRules(item);
                    OnUpdated();

                    return;
                }

<% } %>
                const string commandText = "UPDATE [<%= Entity.Table.Owner %>].[<%= Entity.Table.Name %>] <%= Entity.MembersUpdateInsert.BuildSetStatements() %> <%= Entity.PrimaryKey.KeyMembers.BuildWhereStatements() %><% if(Entity.HasRowVersionMember) { %> AND [<%= Entity.RowVersionMember.ColumnName %>] = <%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %><% } %><%= Entity.BuildUpdateSelectStatement() %>";
                using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
                {
                    connection.Open();
                    using(SqlCommand command = new SqlCommand(commandText, connection))
                    {
                        <%= Entity.MembersNoRowVersion.BuildCommandParameters(true, false, false, false, true) %>
<% if(Entity.HasRowVersionMember) { %>
                        command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>", SqlDbType.Timestamp);
                        command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Value = item.<%= Entity.RowVersionMember.PropertyName %>;
                        command.Parameters["<%= ParameterPrefix  %><%= Entity.RowVersionMember.ColumnName %>"].Direction = ParameterDirection.InputOutput;
<% } %>

<% if(Entity.HasRowVersionMember || Entity.HasIdentityMember) { %>
                        using(var reader = new SafeDataReader(command.ExecuteReader()))
                        {
                            //RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                            if(reader.RecordsAffected == 0)
                                throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
    
                            if(reader.Read())
                            {
<% if(Entity.HasRowVersionMember) { %>
                                item.<%= Entity.RowVersionMember.PropertyName %> = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>");
<% } foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(member.IsIdentity || member.DataType == DbType.Guid.ToString()) { %>
                                item.<%= member.PropertyName %> = <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>");<% } else { %>ADOHelper.GetBytes(reader);<% } %>
<% }  } %>
                            }
                        }
<% } else { %>
                        //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        int result = command.ExecuteNonQuery();
                        if (result == 0)
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
<% } %>
                    }
                }
            }

<% foreach(Member member in Entity.PrimaryKey.KeyMembers) { if(!member.IsIdentity) { %>
            item.Original<%= member.PropertyName %> = item.<%= member.PropertyName %>;
<% } }%>

            MarkOld(item);
            CheckRules(item);

            if(!stopProccessingChildren)
            {
                // Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% foreach(Association association in Entity.AssociatedOneToZeroOrOne) { %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
<%-- Many-To-One --%>
<% foreach(Association association in Entity.AssociatedManyToOne) { %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(Association association in Entity.AssociatedOneToMany) { %>
                Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref item);
<% } %>
            }

            OnUpdated();
        }
        #endregion

        #region Delete

        [Transactional(TransactionalTypes.TransactionScope)]
        public void Delete(<%= Entity.ClassName %>Criteria criteria)
        {
            // Note: this call to delete is for immediate deletion and doesn't keep track of any entity state.
            DoDelete(criteria);
        }

        protected void DoDelete(ref <%= Entity.ClassName %> item)
        {
            // If we're not dirty then don't update the database.
            if (!item.IsDirty) return;

            // If we're new then don't call delete.
            if (item.IsNew) return;

			var criteria = new <%= ResolveTargetClassName(ChildBusinessClassName, "Criteria") %>{<%= Entity.PrimaryKey.KeyMembers.BuildObjectInitializer(true) %>};
			<%= Entity.PrimaryKey.KeyMembers.BuildNullableObjectInitializer(true)%>
            DoDelete(criteria);

            MarkNew(item);
        }

        /// <summary>
        /// This call to delete is for immediate deletion and doesn't keep track of any entity state.
        /// </summary>
        /// <param name="criteria">The Criteria.</param>
        private void DoDelete(<%= Entity.ClassName %>Criteria criteria)
        {
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            string commandText = string.Format("DELETE FROM [<%= Entity.Table.Owner %>].[<%= Entity.Table.Name %>] {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
        }

        #endregion
<% } %>

        #region Helper Methods

        public <%= Entity.ClassName %> Map(SafeDataReader reader)
        {
            var item = (<%= Entity.ClassName %>)Activator.CreateInstance(typeof(<%= Entity.ClassName %>), true);
            using (BypassPropertyChecks(item))
            {
<% if(Entity.HasRowVersionMember) { %>
                item.<%= Entity.RowVersionMember.ColumnName %> = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>");
<% } %>
<% foreach(Member member in Entity.MembersNoRowVersion) { %>
<% if( member.IsNullable && member.SystemType != "System.String" && member.SystemType != "System.Byte[]") {%>
                item.<%= member.PropertyName %> = reader.IsDBNull("<%= member.ColumnName %>") ? (<%= member.SystemType %>)null : <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>");<% } %>
<%  if(!member.IsIdentity && member.IsPrimaryKey) { %>
                item.Original<%= member.PropertyName %> = reader.IsDBNull("<%= member.ColumnName %>") ? (<%= member.SystemType %>)null : <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>");<% } %>
<% } } else {%>
                item.<%= member.PropertyName %> = <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>");<% } %>
<%if (member.IsPrimaryKey && !member.IsIdentity) { %>
                item.Original<%= member.PropertyName %> = <%if(!member.HasByteArrayColumn()) { %>reader.<%= member.GetReaderMethod() %>("<%= member.ColumnName %>");<% } else { %>ADOHelper.GetBytes(reader, "<%= member.ColumnName %>");<% } %>
<% } } }%>
            }
            
            MarkOld(item);

            return item;
        }

<%-- One-To-Zero-Or-One --%>
<% foreach(Association association in Entity.AssociatedOneToZeroOrOne) { %>
        //AssociatedOneToZeroOrOne
        private static void Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref <%= Entity.ClassName %> item)
        {
<%= association.SearchCriteria.BuildUpdateStatements("item." + association.PropertyName) %>

            new <%= association.ClassName %>Factory().Update(item.<%= association.PropertyName %>, true);
        }
<% } %>
<%-- Many-To-One --%>
<% foreach(Association association in Entity.AssociatedManyToOne) { %>
        //AssociatedManyToOne
        private static void Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref <%= Entity.ClassName %> item)
        {
<%= association.SearchCriteria.BuildUpdateStatements("item." + association.PropertyName) %>

            new <%= association.ClassName %>Factory().Update(item.<%= association.PropertyName %>, true);
        }
<% } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(Association association in Entity.AssociatedOneToMany) { %>
        //AssociatedOneToMany
        private static void Update_<%= association.ClassName %>_<%= association.PropertyName %>_<%= association.MembersToString %>(ref <%= Entity.ClassName %> item)
        {
            foreach(<%= association.ClassName %> itemToUpdate in item.<%= association.PropertyName %>)
            {
<%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate") %>

                new <%= association.ClassName %>Factory().Update(itemToUpdate, true);
            }
        }
<% } %>

        #endregion

<% RenderHelper(new PartialMethods()); %>
    }
}