<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA DataAccessLayer" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;
using Csla.Server;

using <%= BusinessProjectName %>;

#endregion

namespace <%= DataProjectName %>
{
    public partial class <%= Entity.ClassName %>ListFactory : ObjectFactory
    {
<% if(!IsReadOnlyBusinessObject) { %>
        #region Create

        /// <summary>
        /// Creates new <%= Entity.ClassName %>List with default values.
        /// </summary>
        /// <returns>new <%= Entity.ClassName %>List.</returns>
        [RunLocal]
        public <%= Entity.ClassName %>List Create()
        {
            var item = (<%= Entity.ClassName %>List)Activator.CreateInstance(typeof(<%= Entity.ClassName %>List), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            CheckRules(item);
            MarkNew(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>

            OnCreated();

            return item;
        }

        #endregion
<% } %>

        #region Fetch

        /// <summary>
        /// Fetch <%= Entity.ClassName %>List.
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns></returns>
        public <%= Entity.ClassName %>List Fetch(<%= Entity.ClassName %>Criteria criteria)
        {
            <%= Entity.ClassName %>List item = (<%= Entity.ClassName %>List)Activator.CreateInstance(typeof(<%= Entity.ClassName %>List), true);

            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return item;

            // Fetch Child objects.
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("<%= GetSelectStoredProcedureName() %>", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    <%= Entity.Members.BuildHasValueCommandParameters() %>
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                        {
<% if(IsReadOnlyBusinessObject) { %>
                            SetIsReadOnly(item, false);
<%}%>
                            do
                            {
                                item.Add(new <%= ChildBusinessClassName %>Factory().Map(reader));
                            } while(reader.Read());
<% if(IsReadOnlyBusinessObject) { %>
                            SetIsReadOnly(item, true);
<%}%>
                        }
                        else
                            throw new Exception(string.Format("The record was not found in '<%= Entity.Table.Name %>' using the following criteria: {0}.", criteria));
                    }
                }
            }

            MarkOld(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            OnFetched();
            return item;
        }

        #endregion

<% RenderHelper(new PartialMethods()); %>
    }
}