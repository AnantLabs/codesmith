<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Server;
using Csla.Data;

using <%= BusinessProjectName %>;

#endregion

namespace <%= DataProjectName %>
{
    public partial class <%= Entity.ClassName %>ListFactory : ObjectFactory
    {
<% if(!IsReadOnlyBusinessObject) { %>
        #region Create

        /// <summary>
        /// Creates new <%= Entity.ClassName %>List with default values.
        /// </summary>
        /// <returns>new <%= Entity.ClassName %>List.</returns>
        [RunLocal]
        public <%= Entity.ClassName %>List Create()
        {
            var item = (<%= Entity.ClassName %>List)Activator.CreateInstance(typeof(<%= Entity.ClassName %>List), true);
            using (BypassPropertyChecks(item))
            {
                // Default values.

                CheckRules(item);
                MarkNew(item);
<% if(IsChildBusinessObject) { %>
                MarkAsChild(item);
<%}%>
            }
            return item;
        }

        /// <summary>
        /// Creates new <%= Entity.ClassName %>List with default values.
        /// </summary>
        /// <returns>new <%= Entity.ClassName %>List.</returns>
        [RunLocal]
        private <%= Entity.ClassName %>List Create(<%= Entity.ClassName %>Criteria criteria)
        {
            //var resource  = <%= Entity.ClassName %>List.Get<%= Entity.ClassName %>List(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>);
            var item = (<%= Entity.ClassName %>List)Activator.CreateInstance(typeof(<%= Entity.ClassName %>List), true);
            using (BypassPropertyChecks(item))
            {
<% foreach(Member member in Entity.MembersNoRowVersion){ %>
                //item.<%= member.PropertyName %> = resource.<%= member.PropertyName %>;
<% } %>
            }
    
            MarkNew(resource);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            return item;
        }

        #endregion

<% } %>
        #region Fetch

        /// <summary>
        /// Fetch <%= Entity.ClassName %>List.
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns></returns>
        public <%= Entity.ClassName %>List Fetch(<%= Entity.ClassName %>Criteria criteria)
        {
            <%= Entity.ClassName %>List item;
            
            MarkOld(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            return item;
        }

        #endregion
    }
}