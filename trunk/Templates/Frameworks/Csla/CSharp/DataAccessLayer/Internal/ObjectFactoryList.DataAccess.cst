<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="Generator.CSLA.DataCodeTemplate" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.CSharpExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using <%= VersionInfo %>.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.cs'.
//
//     Template: <%= CodeTemplateInfo.FileName %>
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;

using Csla;
using Csla.Data;
using Csla.Server;

using <%= BusinessProjectName %>;

namespace <%= DataProjectName %>
{
    public partial class <%= BusinessClassName %>ListFactory : ObjectFactory
    {
<% if(!IsReadOnlyBusinessObject) { %>
        #region Create

        /// <summary>
        /// Creates new <%= BusinessClassName %>List with default values.
        /// </summary>
        /// <returns>new <%= BusinessClassName %>List.</returns>
        [RunLocal]
        public <%= BusinessClassName %>List Create()
        {
            var item = (<%= BusinessClassName %>List)Activator.CreateInstance(typeof(<%= BusinessClassName %>List), true);

            bool cancel = false;
            OnCreating(ref cancel);
            if (cancel) return item;

            using (BypassPropertyChecks(item))
            {
                // Default values.

                CheckRules(item);
                MarkNew(item);
<% if(IsChildBusinessObject) { %>
                MarkAsChild(item);
<%}%>
            }

            OnCreated();

            return item;
        }

        #endregion

<% } %>
        #region Fetch

        /// <summary>
        /// Fetch <%= BusinessClassName %>List.
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns></returns>
        public <%= BusinessClassName %>List Fetch(<%= CriteriaClassName %><%= Entity.GenericProperty %> criteria)
        {
            <%= BusinessClassName %>List item = (<%= BusinessClassName %>List)Activator.CreateInstance(typeof(<%= BusinessClassName %>List), true);

            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return item;
            
            MarkOld(item);
<% if(IsChildBusinessObject) { %>
            MarkAsChild(item);
<%}%>
            OnFetched();

            return item;
        }

        #endregion
    }
}