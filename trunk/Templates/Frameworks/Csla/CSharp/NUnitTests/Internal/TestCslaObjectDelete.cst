<%-- Author: Will Comeaux --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="QuickStart.TestCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="Test CSLA Object Delete" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
<%@ Property Name="MainTemplateName" Type="System.String" Default="" Category="1. Main Template Name" Description="The name of the main template." %>
        #region Synchronous Delete <%= BusinessClassName %> Tests
        
        /// <summary>
        /// Tests the ability to delete
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>Delete()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestNameValueList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
            //Delete factory method should not exist for this object.
            Console.WriteLine("Ensuring delete method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Delete"));
<% break; %>

<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            using(System.Transactions.TransactionScope transactionScope = new System.Transactions.TransactionScope())
            {
                int idToUse = 1;
                Console.WriteLine("Getting test object suitable for deletion");
                Assert.True(<%= BusinessClassName %>.Exists(new <%= ResolveTargetClassName(BusinessClassName, "Criteria") %>(idToUse)));
                <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>(idToUse);
                Console.WriteLine("Verifying test object IsValid");
                Assert.True(testObject.IsValid);
                Console.WriteLine("Deleting test object");
                testObject.Delete();
                Assert.False(<%= BusinessClassName %>.Exists(new <%= ResolveTargetClassName(BusinessClassName, "Criteria") %>(testObject.<%= Entity.PrimaryKey.KeyMember %>)));
            }
<% } else {%>
            //Non-integer foreign key detected. Unable to generate DELETE test.
<% }%>            
<% break; %>
<% default: %>
            //Unable to determine type of DELETE test to generate.
<% break; %>
<% } %>
        }

        #endregion

<% if(IncludeSilverlightSupport) { %>
        
        #region Asynchronous Delete <%= BusinessClassName %> Tests
        
        /// <summary>
        /// Tests the ability to delete
        /// </summary>
        [Test]
        public void Test<%= BusinessClassName %>DeleteA()
        {
<% switch(MainTemplateName) %>
<% { %>
<% case "TestNameValueList.Generated.cst": %>
<% case "TestReadOnlyChild.Generated.cst": %>
<% case "TestReadOnlyChildList.Generated.cst": %>
<% case "TestReadOnlyRoot.Generated.cst": %>
<% case "TestReadOnlyRootList.Generated.cst": %>
<% case "TestEditableChild.Generated.cst": %>
<% case "TestEditableChildList.Generated.cst": %>
<% case "TestEditableRootList.Generated.cst": %>
<% case "TestDynamicRootList.Generated.cst": %>
            //Delete factory method should not exist for this object.
            Console.WriteLine("Ensuring delete method is not available on this object");
            Assert.IsNull(typeof (<%= BusinessClassName %>).GetMethod("Delete"));
<% break; %>

<% case "TestDynamicRoot.Generated.cst": %>
<% case "TestEditableRoot.Generated.cst": %>
<% case "TestSwitchable.Generated.cst": %>
<% if(Entity.PrimaryKey.KeyMember.DataType == "Int32") {%>
            using(System.Transactions.TransactionScope transactionScope = new System.Transactions.TransactionScope())
            {
                int idToUse = 1;
                Console.WriteLine("Getting test object suitable for deletion");
                Assert.True(<%= BusinessClassName %>.Exists(new <%= ResolveTargetClassName(BusinessClassName, "Criteria") %>(idToUse)));
                <%= BusinessClassName %> testObject = <%= BusinessClassName %>.Get<%= BusinessClassName %>(idToUse);
                Console.WriteLine("Verifying test object IsValid");
                Assert.True(testObject.IsValid);
                Console.WriteLine("Deleting test object");
                testObject.Delete();
                Assert.False(<%= BusinessClassName %>.Exists(new <%= ResolveTargetClassName(BusinessClassName, "Criteria") %>(testObject.<%= Entity.PrimaryKey.KeyMember %>)));
            }
<% } else {%>
            //Non-integer foreign key detected. Unable to generate DELETE test.
<% }%>            
<% break; %>
<% default: %>
            //Unable to determine type of DELETE test to generate.
<% break; %>
<% } %>
        }

        #endregion

<% } %>