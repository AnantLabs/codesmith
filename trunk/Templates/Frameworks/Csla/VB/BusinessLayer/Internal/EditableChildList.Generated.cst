<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 EditableChildList" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports Csla 3.6.x CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= BusinessClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
#Region using declarations

Imports System
Imports System.Collections.Generic
Imports Csla

#End Region

Namespace <%= BusinessProjectName %>
{
	<Serializable()> _
	Public Partial Class <%= BusinessClassName %> : BusinessListBase< <%= BusinessClassName %>, <%= ChildBusinessClassName %> >
	{
		#Region Factory Methods 
		
		Friend static <%= BusinessClassName %> NewList()
		{
			Return DataPortal.CreateChild< <%= BusinessClassName %> >()
		}
		
		Friend static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
			Return DataPortal.FetchChild< <%= ChildBusinessClassName %> >(
				new <%= ChildBusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
		}
        
        Friend static <%= BusinessClassName %> GetAll()
        {
            Return DataPortal.FetchChild< <%= BusinessClassName %> >(new <%= ChildBusinessClassName %>Criteria())
        }
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { foreach(SearchCriteria sc in association.ListSearchCriteria) { %>
        
        Friend static <%= BusinessClassName %> <%= sc.GetListMethodName(association) %>(<%= association.BuildParametersVariable() %>)
		{
            Return DataPortal.FetchChild< <%= BusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria { <%= association.BuildObjectInitializer() %> })
        }
 <% } } %>

		Private Sub New()
		{
			AllowNew = true
            MarkAsChild()
		}
		
		#End Region

		#Region "Business Methods"
		
		protected override object AddNewCore()
		{
			<%= ChildBusinessClassName %> item = <%= BusinessProjectName %>.<%= ChildBusinessClassName %>.New<%= ChildBusinessClassName %>()
			Add(item)
			Return item
		}
		
		#End Region
	}
}