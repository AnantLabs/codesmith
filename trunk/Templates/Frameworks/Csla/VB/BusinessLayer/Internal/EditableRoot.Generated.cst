<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 EditableRoot" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="UseDeferredDeletion" Type="System.Boolean" Default="False" Category="3. Business Project" Description="Changes how the Business Objects are deleted, defaults to immediate deletion" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CSLA 3.6.x CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.cs'.
'
'     Template path: <%= CodeTemplateInfo.FileName %>
'     Template website: http:'code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
#region using declarations

using System

using Csla
using Csla.Data
using Csla.Validation

#endregion

namespace <%= BusinessProjectName %>
{
	[Serializable]
	Public Partial Class <%= BusinessClassName %> : BusinessBase< <%= BusinessClassName %> >
	{
        #region Contructor(s)

		Private <%= BusinessClassName %>()
		{ /* Require use of factory methods */ }
        
        Friend <%= BusinessClassName %>(SafeDataReader reader)
        {
<% if(DataAccessImplementation == DataAccessMethod.ParameterizedSQL){ %>
            Fetch(reader)
<% } %>
        }
        
		#endregion
        
		#region Validation Rules
		
		Protected Overrides Sub AddBusinessRules()
		{
            if(AddBusinessValidationRules())
                Return
                
<% 	foreach(Member member in Entity.MembersNoRowVersion){ %>
<% if(member.SystemType == "string" ) { %>
<% if(!member.IsNullable) { %>
			ValidationRules.AddRule(CommonRules.StringRequired, "<%= member.PropertyName %>")
<% } %>
			ValidationRules.AddRule(CommonRules.StringMaxLength, new CommonRules.MaxLengthRuleArgs("<%= member.PropertyName %>", <%= member.Size %>))
<% } } %>
		}
		
		#endregion
		
		#region Business Methods

<% if(Entity.HasRowVersionMember) { %>
		''' <summary>
        ''' Used for optimistic concurrency.
        ''' </summary>
        [NotUndoable]
        Private <%= Entity.RowVersionMember.SystemType %> _timestamp = new <%= Entity.RowVersionMember.SystemType(true) %>
<% } %>

<%  foreach(Member member in Entity.MembersNoRowVersionIncludePrimaryKey){ if (UseMemberVariables){ %>
		Private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>)
		Private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue<%= member.BuildDataObjectField() %>
		Public <%= member.SystemType %> <%= member.PropertyName %>
		{
			Get { Return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>) }				
<% if(!member.IsReadOnly) { %>
            set
            { 
                OnPropertyChanging("<%= member.PropertyName %>")
                SetProperty(<%= member.PrivateMemberVariableName %>Property, ref <%= member.PrivateMemberVariableName %>, value)
                OnPropertyChanged("<%= member.PropertyName %>")
            }
<% } %>
		}
		
<% } else { %>
		Private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>)<%= member.BuildDataObjectField() %>
		Public <%= member.SystemType %> <%= member.PropertyName %>
		{
			Get { Return GetProperty(<%= member.PrivateMemberVariableName %>Property) }				
<% if(!member.IsReadOnly) { %>
            set
            {
                OnPropertyChanging("<%= member.PropertyName %>")
                SetProperty(<%= member.PrivateMemberVariableName %>Property, value)
                OnPropertyChanged("<%= member.PropertyName %>")
            }
<% } %>
		}
		
<% } } %>
<%-- Foreign Keys --%>
<%  foreach(AssociationMember member in Entity.MembersForeignKey){ string columnName = member.ResolveManyToOneNameConflict(Entity) if (UseMemberVariables){ %>
		Private static readonly PropertyInfo< <%= member.SystemType(false) %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.SystemType(false) %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>)
		Private <%= member.SystemType(false) %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %> = <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property.DefaultValue<%= member.BuildDataObjectField() %>
		Public <%= member.SystemType(false) %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
		{
			Get { Return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>) }				
            set
            {
                OnPropertyChanging("<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>")
                SetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, ref <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>, value)
                OnPropertyChanged("<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>")
            }
		}
		
<% } else { %>
		Private static readonly PropertyInfo< <%= member.SystemType(false) %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.SystemType(false) %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>)<%= member.BuildDataObjectField() %>
		Public <%= member.SystemType(false) %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
		{
			Get { Return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property) }				
            set
            { 
                OnPropertyChanging("<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>")
                SetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, value) 
                OnPropertyChanged("<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>")
            }
		}
		
<% } } %>
<%-- One-To-Zero-Or-One --%>
<% foreach(AssociationMember association in Entity.OneToZeroOrOne) { if (UseMemberVariables){ %>
		Private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
		Public <%= association.ClassName %> <%= association.PropertyName %>
		{
			Get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>))

<% } %> 
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
            }
		}

<% } else { %>
		Private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Public <%= association.ClassName %> <%= association.PropertyName %>
		{
			Get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>))

<% } %>  
                   Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            }
		}

<% } } %>
<%-- Many-To-One --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { if (UseMemberVariables){ %>
		Private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
		Public <%= association.ClassName %> <%= association.PropertyName %>
		{
			Get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>))

<% } %> 
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
            }
		}

<% } else { %>
		Private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Public <%= association.ClassName %> <%= association.PropertyName %>
		{
			Get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>))

<% } %>  
                   Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            }
		}

<% } } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association in Entity.ToManyUnion) { if (UseMemberVariables){ %>
        Private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Private <%= association.ClassName %>List <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
		Public <%= association.ClassName %>List <%= association.PropertyName %>
		{
			Get
            { 
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
<% if(!string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name))) { %>
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% } else { %>
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% } } %> 
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
            }
		}

<% } else { %>
		Private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>, <% if(UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Public <%= association.ClassName %>List <%= association.PropertyName %>
		{
			Get
            {
<% if(UseLazyLoading) { %>
                if(!FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
<% if(!string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName))) { %>
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% } else { %>
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% } } %>   
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            }
		}

<% }} %>
		#endregion
		
		#region Factory Methods 
		
		Public Shared Function <%= BusinessClassName %> New<%= BusinessClassName %>()
		{
			Return DataPortal.Create< <%= BusinessClassName %> >()
		}
		
		Public Shared Function <%= BusinessClassName %> Get<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
			Return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= BusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
		}
<%-- One-To-Zero-Or-One --%>
<%if(Entity.HasOneToZeroOrZeroMember && Entity.PrimaryKey.KeyMembers.Count > 1){%>

        Public Shared Function <%= BusinessClassName %> Get<%= BusinessClassName %>(<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroParametersVariable() %>)
		{
            Return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= BusinessClassName %>Criteria { <%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroObjectInitializer() %> })
        }
 <% }%>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(SearchCriteria sc in Entity.SearchCriteria) { if(sc.IsUniqueResult && !(sc.Members.Count == Entity.PrimaryKey.KeyMembers.Count && sc.Members[0].Name == Entity.PrimaryKey.KeyMember.Name)) { %>

        Public Shared Function <%= BusinessClassName %> <%= sc.MethodName %>(<%= sc.Members.BuildParametersVariablesCriteria(false) %>)
		{
            Return DataPortal.Fetch< <%= BusinessClassName %> >(
                new <%= BusinessClassName %>Criteria { <%= sc.Members.BuildCriteriaObjectInitializer(Entity.Table.Name) %> })
        }
 <% } } %>

<% if(UseDeferredDeletion){ %>		
		'Public Shared Function void Delete<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		'{
        '        DataPortal.Delete(new <%= BusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
		'}
<% if(!(Entity.GetUniqueSearchCriteriaMembers().Count == Entity.PrimaryKey.KeyMembers.Count && Entity.GetUniqueSearchCriteriaMembers()[0].Name == Entity.PrimaryKey.KeyMember.Name)){ %>

        'Public Shared Function void Delete<%= BusinessClassName %>(<%= Entity.GetUniqueSearchCriteriaMembers().BuildParametersVariables() %>)
		'{
        '        DataPortal.Delete(new <%= BusinessClassName %>Criteria{<%= Entity.GetUniqueSearchCriteriaMembers().BuildCriteriaObjectInitializer(Entity.Table.Name) %>})
		'}
<% } } else { %>	
        Public Shared Function void Delete<%= BusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
                DataPortal.Delete(new <%= BusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
		}
<% if(!(Entity.GetUniqueSearchCriteriaMembers().Count == Entity.PrimaryKey.KeyMembers.Count && Entity.GetUniqueSearchCriteriaMembers()[0].Name == Entity.PrimaryKey.KeyMember.Name)){ %>	
        
        Public Shared Function void Delete<%= BusinessClassName %>(<%= Entity.GetUniqueSearchCriteriaMembers().BuildParametersVariablesCriteria() %>)
		{
                DataPortal.Delete(new <%= BusinessClassName %>Criteria{<%= Entity.GetUniqueSearchCriteriaMembers().BuildCriteriaObjectInitializer(Entity.Table.Name) %>})
		}
<% } } %>	

        #endregion
        
<% if(Entity.PrimaryKey.IsCompositeKey) { %>
		#region Protected Overriden Method(s)
		
		' NOTE: This is needed for Composite Keys. 
		Private readonly Guid _guidID = Guid.NewGuid()
		protected override object GetIdValue()
        {
            Return _guidID
        }
		
		#endregion
<% } %>
	}
}