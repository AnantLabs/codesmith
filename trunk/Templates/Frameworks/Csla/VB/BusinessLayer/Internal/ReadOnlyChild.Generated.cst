<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 ReadOnlyChild" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="UseDeferredDeletion" Type="System.Boolean" Default="False" Category="3. Business Project" Description="Changes how the Business Objects are deleted, defaults to immediate deletion" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports Csla 3.6.x CodeSmith Templates.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= Entity.ClassName %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
#Region using declarations

Imports System
Imports Csla

#End Region

Namespace <%= BusinessProjectName %>
{
	<Serializable()> _
	Public Partial Class <%= BusinessClassName %> : ReadOnlyBase< <%= BusinessClassName %> >
	{
		#Region "Business Methods"

<%  foreach(Member member in Entity.MembersNoRowVersionIncludePrimaryKey){ If (UseMemberVariables){ %>
		Private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>)
		Private <%= member.SystemType %> <%= member.PrivateMemberVariableName %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue<%= member.BuildDataObjectField() %>
		Public <%= member.SystemType %> <%= member.PropertyName %>
		{
			Get { Return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>) }				
		}
		
<% } else { %>
		Private static readonly PropertyInfo< <%= member.SystemType %> > <%= member.PrivateMemberVariableName %>Property = RegisterProperty< <%= member.SystemType %> >(p => p.<%= member.PropertyName %>)<%= member.BuildDataObjectField() %>
		Public <%= member.SystemType %> <%= member.PropertyName %>
		{
			Get { Return GetProperty(<%= member.PrivateMemberVariableName %>Property) }				
		}
		
<% } } %>
<%-- Foreign Keys --%>
<%  foreach(AssociationMember member in Entity.MembersForeignKey){ string columnName = member.ResolveManyToOneNameConflict(Entity) If (UseMemberVariables){ %>
		Private static readonly PropertyInfo< <%= member.SystemType(false) %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.SystemType(false) %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>)
		Private <%= member.SystemType(false) %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %> = <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property.DefaultValue<%= member.BuildDataObjectField() %>
		Public <%= member.SystemType(false) %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
		{
			Get { Return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property, <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>) }				
		}
		
<% } else { %>
		Private static readonly PropertyInfo< <%= member.SystemType(false) %> > <%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property = RegisterProperty< <%= member.SystemType(false) %> >(p => p.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>)<%= member.BuildDataObjectField() %>
		Public <%= member.SystemType(false) %> <%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %>
		{
			Get { Return GetProperty(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PrivateMemberVariableName(columnName) %>Property) }	
		}
		
<% } } %>
<%-- One-To-Zero-Or-One --%>
<% foreach(AssociationMember association in Entity.OneToZeroOrOne) { If (UseMemberVariables){ %>
		Private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% If (UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
		Public <%= association.ClassName %> <%= association.PropertyName %>
		{
			Get
            {
<% If (UseLazyLoading) { %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>))

<% } %> 
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
            }
		}

<% } else { %>
		Private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% If (UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Public <%= association.ClassName %> <%= association.PropertyName %>
		{
			Get
            {
<% If (UseLazyLoading) { %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    SetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= association.LocalColumn.PropertyName %>))

<% } %>  
                   Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            }
		}

<% } } %>
<%-- Many-To-One --%>
<% foreach(AssociationMember association in Entity.ManyToOne) { If (UseMemberVariables){ %>
		Private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% If (UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Private <%= association.ClassName %> <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
		Public <%= association.ClassName %> <%= association.PropertyName %>
		{
			Get
            {
<% If (UseLazyLoading) { %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>))

<% } %> 
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
            }
		}

<% } else { %>
		Private static readonly PropertyInfo< <%= association.ClassName %> > <%= association.PrivateMemberVariableName %>Property = RegisterProperty< <%= association.ClassName %> >(p => p.<%= association.PropertyName %>, <% If (UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Public <%= association.ClassName %> <%= association.PropertyName %>
		{
			Get
            {
<% If (UseLazyLoading) { %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>.Get<%= association.ClassName %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.ResolveManyToOneNameConflict(Entity)) %>))

<% } %>  
                   Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            }
		}

<% } } %>
<%-- One-To-Many & Many-To-Many --%>
<% foreach(AssociationMember association in Entity.ToManyUnion) { If (UseMemberVariables){ %>
        Private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>, <% If (UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Private <%= association.ClassName %>List <%= association.PrivateMemberVariableName %> = <%= association.PrivateMemberVariableName %>Property.DefaultValue
		Public <%= association.ClassName %>List <%= association.PropertyName %>
		{
			Get
            {   
<% If (UseLazyLoading) { %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
<% If Not (string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name))) { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.LocalColumn.Name) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% } else { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% } } %> 
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.PrivateMemberVariableName %>) 
            }
		}

<% } else { %>
		Private static readonly PropertyInfo< <%= association.ClassName %>List > <%= association.PrivateMemberVariableName %>Property = RegisterProperty<<%= association.ClassName %>List>(p => p.<%= association.PropertyName %>, <% If (UseLazyLoading) { %>Csla.RelationshipTypes.LazyLoad<% } else { %>Csla.RelationshipTypes.Child<% } %>)
		Public <%= association.ClassName %>List <%= association.PropertyName %>
		{
			Get
            {
<% If (UseLazyLoading) { %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
<% If Not (string.IsNullOrEmpty(association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName))) { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.<%= association.AssociationEntity().FindOneToManyOrManyToManyListSearchCriteria(association.ColumnName) %>(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% } else { %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= association.ClassName %>List.Get<%= association.ClassName %>List(<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(association.LocalColumn.ColumnName) %>))

<% } } %>   
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            }
		}

<% }} %>
		#End Region
				
		#Region Factory Methods 
        
		Friend static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
		{
			Return DataPortal.FetchChild< <%= ChildBusinessClassName %> >(
				new <%= ChildBusinessClassName %>Criteria(<%= Entity.PrimaryKey.KeyMembers.BuildVariableArguments() %>))
		}
<%-- One-To-Zero-Or-One --%>
<%If (Entity.HasOneToZeroOrZeroMember && Entity.PrimaryKey.KeyMembers.Count > 1){%>

        Friend static <%= ChildBusinessClassName %> Get<%= ChildBusinessClassName %>(<%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroParametersVariable() %>)
		{
            Return DataPortal.Fetch< <%= ChildBusinessClassName %> >(
                new <%= ChildBusinessClassName %>Criteria { <%= Entity.OneToZeroOrZeroMember.BuildOneToZeroOrZeroObjectInitializer() %> })
        }
 <% }%>

		Private Sub New()
		{ /* Require use of factory methods */}
		
		#End Region
		
<% If (Entity.PrimaryKey.IsCompositeKey) { %>
		#Region "Protected Overriden Method(s)"
		
		' NOTE: This is needed for Composite Keys. 
		Private readonly Guid _guidID = Guid.NewGuid()
		protected override object GetIdValue()
        {
            Return _guidID
        }
		
		#End Region
<% } %>
	}
}