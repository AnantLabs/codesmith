<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.DataAccessCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.7.X DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Imports CSLA 3.7.X CodeSmith Templates.
'	   Changes to this template will not be lost.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
<% RegisterReferences() %>
Option Explicit On
Option Strict On

#Region "Using Declarations"

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections.Generic

Imports Csla
Imports Csla.Data

#End Region

Namespace Base

    <Serializable> _
    Public Class <%= DataClassName %>
        Inherits BusinessBase(Of <%= DataClassName %>)
    
        #Region "Instance"
    
        Public Shared ReadOnly Property Instance() As <%= DataClassName %>
            Get
                Return Nested.Current
            End Get
        End Property
    
        Private Class Nested
            Shared Sub New()
                Current = New <%= DataClassName %>()
            End Sub
    
            ''' <summary>
            ''' Current singleton instance.
            ''' </summary>
            Friend Shared ReadOnly Current As <%= DataClassName %>
        End Class
    
        #End Region
    
        #Region "Methods"
    
        Private _connectionString As String = String.Empty
    
        ''' <summary>
        ''' Returns the Connection String.
        ''' </summary>
        Public Overridable ReadOnly Property ConnectionString() As String
            Get
                If String.IsNullOrEmpty(_connectionString) Then
                    _connectionString = System.Configuration.ConfigurationManager.ConnectionStrings("<%= SourceTables(0).Database.Name %>ConnectionString").ConnectionString
                End If
    
                Return _connectionString
            End Get
        End Property
    
        Private _sqlConnection As SqlConnection
    
        ''' <summary>
        ''' Returns an opened SQLConnection.
        ''' </summary>
        ''' <returns>Returns an opened SQLConnection.</returns>
        Public Overridable Function GetSqlConnection() As SqlConnection
            If _sqlConnection Is Nothing Then
                _sqlConnection = New SqlConnection(ConnectionString)
                _sqlConnection.Open()
            End If
    
            Return _sqlConnection
        End Function
    
        ''' <summary>
        ''' Returns an array of SqlParameters
        ''' </summary>
        Public Overridable Function SqlParameters(bag As Dictionary(Of String, Object)) As SqlParameter()
            Dim parameters As New List(Of SqlParameter)(bag.Keys.Count)
    
            For Each pair As KeyValuePair(Of String, Object) In bag
                parameters.Add(New SqlParameter(String.Format("@p_{0}", pair.Key), pair.Value))
            Next
    
            Return parameters.ToArray()
        End Function
    
        ''' <summary>
        ''' Returns a where clause for the current Criteria object.
        ''' </summary>
        ''' <returns>Returns a where clause for the current Criteria object.</returns>
        Public Overridable Function BuildWhereStatement(bag As Dictionary(Of String, Object)) As String
            If bag.Count = 0 Then
                Return String.Empty
            End If
    
            Dim columnNames As String = String.Empty
    
            For Each columnName As String In bag.Keys
                columnNames += String.Format("[{0}] = @p_{0} AND ", columnName)
            Next
    
            Return String.Format("WHERE {0}", columnNames.Remove(columnNames.Length - 5, 5))
        End Function
    
        #End Region
    
        #Region "Data Access"
        
    <% For Each entity As Entity In Entities %>
        #Region "<%= entity.ClassName %>"
        
        #Region "Insert"
        
        Public Overridable Function <%= entity.ClassName %>Insert(<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertParametersVariables(entity.MembersForeignKey) %>) As SafeDataReader
            Const commandText As String = "INSERT INTO [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] (<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertDataBaseColumns(entity.MembersForeignKey) %>) VALUES (<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertDataBaseParameters(entity.MembersForeignKey) %>)<%= entity.BuildInsertSelectStatement() %>"
            Using command As New SqlCommand(commandText, GetSqlConnection())
                <%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertCommandParameters(entity.MembersForeignKey) %>
                
                Return New SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
    
        #Region "Update"
    
    <% If (entity.Table.ForeignKeyColumns.Count = 0) Then %>
        Public Overridable Function <%= entity.ClassName %>Update(<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildParametersVariables() %><% If (entity.HasRowVersionMember) Then %>, <%= entity.RowVersionMember.SystemType %> timestamp<% End If %>) As SafeDataReader
    <% Else %>
        Public Overridable Function <%= entity.ClassName %>Update(<%= entity.MembersNoRowVersionIncludePrimaryKey.BuildParametersVariables(entity.MembersForeignKey) %><% If (entity.HasRowVersionMember) Then %>, <%= entity.RowVersionMember.SystemType %> timestamp<% End If %>) As SafeDataReader
    <% End If %>
    <% If (entity.Table.ForeignKeyColumns.Count = 0) Then %>
            Const commandText As String = "UPDATE [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] <%= entity.MembersNoKeysOrRowVersion.BuildSetStatements() %> <%= entity.PrimaryKey.KeyMembers.BuildWhereStatements() %><% If (entity.HasRowVersionMember) Then %> AND [<%= entity.RowVersionMember.ColumnName %>] = @p_<%= entity.RowVersionMember.ColumnName %><% End If %><%= entity.BuildUpdateSelectStatement() %>"
    <% Else %>
            Const commandText As String = "UPDATE [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] <%= entity.MembersNoRowVersion.BuildSetStatements() %> <%= entity.PrimaryKey.KeyMembers.BuildWhereStatements() %><% If (entity.HasRowVersionMember) Then %> AND [<%= entity.RowVersionMember.ColumnName %>] = @p_<%= entity.RowVersionMember.ColumnName %><% End If %><%= entity.BuildUpdateSelectStatement() %>"
    <% End If %>
            Using command As New SqlCommand(commandText, GetSqlConnection())
    <% If (entity.Table.ForeignKeyColumns.Count = 0) Then %>
                <%= entity.MembersNoRowVersionIncludePrimaryKey.BuildCommandParameters() %>
    <% Else %>
                <%= entity.MembersNoRowVersionIncludePrimaryKey.BuildCommandParameters(entity.MembersForeignKey) %>
    <% End If %>
    <% If (entity.HasRowVersionMember) Then %>
                command.Parameters.AddWithValue("@p_<%= entity.RowVersionMember.ColumnName %>", timestamp)
    <% End If %>
    
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                Return reader
            End Using
        End Function
        
        #End Region
        
        #Region "Fetch"
        
        Public Overridable Function <%= entity.ClassName %>Fetch(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
    <% If (entity.Table.ForeignKeyColumns.Count = 0) Then%>
            Dim commandText As String = String.Format("SELECT <%= entity.MembersPrimaryKeyUnion.BuildDataBaseColumns() %> FROM [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] {0}", BuildWhereStatement(bag))
    <% Else %>
            Dim commandText As String = String.Format("SELECT <%= entity.MembersManyUnion.BuildDataBaseColumns() %> FROM [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] {0}", BuildWhereStatement(bag))
    <% End If%>
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Return new SafeDataReader(command.ExecuteReader())
            End Using
        End Function
        
        #End Region
        
        #Region "Delete"
        
        Public Overridable Function <%= entity.ClassName %>Delete(ByVal bag As Dictionary(Of String, Object)) As SafeDataReader
            Dim commandText As String = String.Format("DELETE FROM [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] {0}", BuildWhereStatement(bag))
            Using command As New SqlCommand(commandText, GetSqlConnection())
                command.Parameters.AddRange(SqlParameters(bag))
                
                Dim reader As New SafeDataReader(command.ExecuteReader())
    
                'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements 0 if no rows were affected, or the statement failed. 
                If reader.RecordsAffected = 0 Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
                
                Return reader
            End Using
        End Function
        
        #End Region
        
        #End Region
                
    <% Next %>
        #End Region
        
    End Class

End NameSpace