<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" OutputType="None" Inherits="Generator.CSLA.EntitiesCodeTemplate" %>
<%@ Register Name="CommandObjectTemplate" Template="CommandObject.cst" %>
<%@ Register Name="CriteriaTemplate" Template="Criteria.cst" %>
<%@ Register Name="DynamicListBaseTemplate" Template="DynamicListBase.cst" %>
<%@ Register Name="DynamicRootTemplate" Template="DynamicRoot.cst" %>
<%@ Register Name="DynamicRootListTemplate" Template="DynamicRootList.cst" %>
<%@ Register Name="EditableChildTemplate" Template="EditableChild.cst" %>
<%@ Register Name="EditableChildListTemplate" Template="EditableChildList.cst" %>
<%@ Register Name="EditableRootTemplate" Template="EditableRoot.cst" %>
<%@ Register Name="EditableRootListTemplate" Template="EditableRootList.cst" %>
<%@ Register Name="NameValueListTemplate" Template="NameValueList.cst" %>
<%@ Register Name="ReadOnlyChildTemplate" Template="ReadOnlyChild.cst" %>
<%@ Register Name="ReadOnlyChildListTemplate" Template="ReadOnlyChildList.cst" %>
<%@ Register Name="ReadOnlyListTemplate" Template="ReadOnlyList.cst" %>
<%@ Register Name="ReadOnlyRootTemplate" Template="ReadOnlyRoot.cst" %>
<%@ Register Name="SwitchableObjectTemplate" Template="SwitchableObject.cst" %>
<%@ Register Name="ADOHelperTemplate" Template="Internal\ADOHelper.cst" %>
<%@ Register Name="FactoryNamesTemplate" Template="Internal\FactoryNames.cst" %>
<%@ Register Name="ExistsCommandTemplate" Template="Internal\ExistsCommand.cst" %>
<%@ Register Name="AsyncChildLoaderTemplate" Template="Internal\AsyncChildLoader.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SchemaExplorer" %>

<% Generate() %>

<script runat="template">

Public Overrides Sub Generate()
    ' CommandObjectTemplate
    
    If Not Me.CommandObjectEntities Is Nothing Then
        For Each entity As IEntity In Me.CommandObjectEntities
            Dim template As CommandObjectTemplate = Me.Create(Of CommandObjectTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    ' CriteriaTemplate
    
    If Not Me.CriteriaEntities Is Nothing Then
        For Each entity As IEntity In Me.CriteriaEntities
            Dim template As CriteriaTemplate = Me.Create(Of CriteriaTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' DynamicRootTemplate
    
    If Not Me.DynamicRootEntities Is Nothing Then
        For Each entity As IEntity In Me.DynamicRootEntities
            Dim template As DynamicRootTemplate = Me.Create(Of DynamicRootTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' DynamicRootListTemplate
    
    If Not Me.DynamicRootListEntities Is Nothing Then
        For Each entity As IEntity In Me.DynamicRootListEntities
            Dim template As DynamicRootListTemplate = Me.Create(Of DynamicRootListTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' EditableChildTemplate
    
    If Not Me.EditableChildEntities Is Nothing Then
        For Each entity As IEntity In Me.EditableChildEntities
            Dim template As EditableChildTemplate = Me.Create(Of EditableChildTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' EditableChildListTemplate
    
    If Not Me.EditableChildListEntities Is Nothing Then
        For Each entity As IEntity In Me.EditableChildListEntities
            Dim template As EditableChildListTemplate = Me.Create(Of EditableChildListTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' EditableRootTemplate
    
    If Not Me.EditableRootEntities Is Nothing Then
        For Each entity As IEntity In Me.EditableRootEntities
            Dim template As EditableRootTemplate = Me.Create(Of EditableRootTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' EditableRootListTemplate
    
    If Not Me.EditableRootListEntities Is Nothing Then
        For Each entity As IEntity In Me.EditableRootListEntities
            Dim template As EditableRootListTemplate = Me.Create(Of EditableRootListTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    ' DynamicListBase
    
    If Not Me.DynamicListBaseEntities Is Nothing Then
        For Each entity As IEntity In Me.DynamicListBaseEntities
            Dim template As DynamicListBaseTemplate = Me.Create(Of DynamicListBaseTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    ' NameValueListTemplate
    
    If Not Me.NameValueListEntities Is Nothing Then
        For Each entity As IEntity In Me.NameValueListEntities
            Dim template As NameValueListTemplate = Me.Create(Of NameValueListTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' ReadOnlyChildTemplate
    
    If Not Me.ReadOnlyChildEntities Is Nothing Then
        For Each entity As IEntity In Me.ReadOnlyChildEntities
            Dim template As ReadOnlyChildTemplate = Me.Create(Of ReadOnlyChildTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' ReadOnlyChildListTemplate
    
    If Not Me.ReadOnlyChildListEntities Is Nothing Then
        For Each entity As IEntity In Me.ReadOnlyChildListEntities
            Dim template As ReadOnlyChildListTemplate = Me.Create(Of ReadOnlyChildListTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' ReadOnlyListTemplate
    
    If Not Me.ReadOnlyListEntities Is Nothing Then
        For Each entity As IEntity In Me.ReadOnlyListEntities
            Dim template As ReadOnlyListTemplate = Me.Create(Of ReadOnlyListTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' ReadOnlyRootTemplate
    
    If Not Me.ReadOnlyRootEntities Is Nothing Then
        For Each entity As IEntity In Me.ReadOnlyRootEntities
            Dim template As ReadOnlyRootTemplate = Me.Create(Of ReadOnlyRootTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    
    ' SwitchableObjectTemplate
    
    If Not Me.SwitchableObjectEntities Is Nothing Then
        For Each entity As IEntity In Me.SwitchableObjectEntities
            Dim template As SwitchableObjectTemplate = Me.Create(Of SwitchableObjectTemplate)()
            RenderHelper(template, entity)
        Next
    End If
    
    Dim strategy As New PreserveRegionsMergeStrategy()
    strategy.Language = "VB"
    strategy.RegionNameRegex = "^[ \t]*[ \s]*""?(?i:Preserved Code)""?"
    
    ' ADOHelperTemplate
    
    If DataAccessImplementation = DataAccessMethod.ParameterizedSQL OrElse DataAccessImplementation = DataAccessMethod.StoredProcedures OrElse DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL OrElse DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures Then
        Dim ADOHelper As ADOHelperTemplate = Me.Create(Of ADOHelperTemplate)()
        Me.CopyPropertiesTo(ADOHelper, True)
        ADOHelper.RenderToFile(System.IO.Path.Combine(Me.Location, "Utility\ADOHelper.vb"), strategy)
    End If
    
    
    ' FactoryNamesTemplate
    
    If DataAccessImplementation = DataAccessMethod.ObjectFactoryNone OrElse DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL OrElse DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures Then
        Dim factoryNames As FactoryNamesTemplate = Me.Create(Of FactoryNamesTemplate)()
        Me.CopyPropertiesTo(factoryNames, True)
    
        factoryNames.RenderToFile(System.IO.Path.Combine(Me.Location, "Factory\FactoryNames.vb"), strategy)
    End If
    
    ' ExistsCommandTemplate
    
    Dim ExistsCommand As ExistsCommandTemplate = Me.Create(Of ExistsCommandTemplate)()
    Me.CopyPropertiesTo(ExistsCommand, True)
    ExistsCommand.RenderToFile(System.IO.Path.Combine(Me.Location, "Commands\ExistsCommand.vb"), True)
    
    ' AsyncChildLoaderTemplate
    Dim AsyncChildLoader As AsyncChildLoaderTemplate = Me.Create(Of AsyncChildLoaderTemplate)()
    Me.CopyPropertiesTo(AsyncChildLoader, True)
    AsyncChildLoader.RenderToFile(System.IO.Path.Combine(Me.Location, "Utility\AsyncChildLoader.vb"), True)
End Sub

</script>