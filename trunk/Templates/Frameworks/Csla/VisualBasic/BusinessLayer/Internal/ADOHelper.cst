<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.QuickStartCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.6.1 DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CSLA 3.8.x CodeSmith Templates.
'     Changes to this template will not be lost.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
<% RegisterReferences() %>
#Region "Using declarations"

Imports System
Imports System.Data
Imports System.Collections.Generic
Imports System.Data.SqlClient
Imports System.IO

Imports Csla
Imports Csla.Data

#End Region

Public Class ADOHelper
    Private Sub New()
    End Sub

     Private Shared _connectionString As String = String.Empty

    ''' <summary>
    ''' Returns the Connection String.
    ''' </summary>
    Public Shared ReadOnly Property ConnectionString() As String
        Get
            If String.IsNullOrEmpty(_connectionString) Then
                _connectionString = System.Configuration.ConfigurationManager.ConnectionStrings("PetShopConnectionString").ConnectionString
            End If

            Return _connectionString
        End Get
    End Property

    ''' <summary>
    ''' Returns an array of SqlParameters
    ''' </summary>
    Public Shared Function SqlParameters(ByVal bag As Dictionary(Of String, Object)) As SqlParameter()
        Dim parameters As New List(Of SqlParameter)(bag.Keys.Count)

        For Each pair As KeyValuePair(Of String, Object) In bag
            parameters.Add(New SqlParameter(String.Format("@p_{0}", pair.Key), pair.Value))
        Next

        Return parameters.ToArray()
    End Function

    ''' <summary>
    ''' Returns a where clause for the current Criteria object.
    ''' </summary>
    ''' <returns>Returns a where clause for the current Criteria object.</returns>
    Public Shared Function BuildWhereStatement(ByVal bag As Dictionary(Of String, Object)) As String
        If bag.Count = 0 Then
            Return String.Empty
        End If

        Dim columnNames As String = String.Empty
        For Each columnName As String In bag.Keys
            columnNames += String.Format("[{0}] = @p_{0} AND ", columnName)
        Next

        Return String.Format("WHERE {0}", columnNames.Remove(columnNames.Length - 5, 5))
    End Function

    ''' <summary>
    ''' Returns the Bytes stored in a binary column.
    ''' </summary>
    ''' <param name="reader">The reader.</param>
    ''' <param name="columnName">The column name.</param>
    ''' <returns>Bytes Stored in a column.</returns>
    Public Shared Function GetBytes(ByVal reader As SafeDataReader, ByVal columnName As String) As Byte()
        Dim buffer As Byte() = New Byte(1024) {}
        Dim fieldOffset As Long = 0

        Using stream = New MemoryStream()
            Dim bytesRead As Long

            While bytesRead = reader.GetBytes(columnName, fieldOffset, buffer, 0, buffer.Length)
                Dim actualRead As Byte() = New Byte(CInt(bytesRead)) {}
                Array.Copy(buffer, 0, actualRead, 0, bytesRead)
                stream.Write(actualRead, 0, actualRead.Length)
                fieldOffset += bytesRead
            End While

            Return stream.ToArray()
        End Using
    End Function

    Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, ByVal value As T) As T
        target = value
        Return value
    End Function
End Class