<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.CSLA" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= Entity.Name %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Collections.Generic
Imports System.Runtime.InteropServices

<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
<% End If %>
Imports System.Data.SqlClient
<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>

Imports Csla
<% If(IncludeSilverlightSupport) Then %>
Imports Csla.Core
#If SILVERLIGHT Then
Imports Csla.Serialization
#End If
Imports Csla.Serialization.Mobile
<% End If %>

Namespace <%= BusinessProjectName %>
    <Serializable(), ClassInterface(ClassInterfaceType.None)> _
    Public Partial Class <%= BusinessClassName %><%= Entity.GenericProperty %>
        Inherits CriteriaBase<% If (IsLatestCSLA) Then %>(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)<% End If %>
        Implements IGeneratedCriteria
    
#Region "Private Read-Only Properties"
        
        Private ReadOnly _bag As New Dictionary(Of String, Object)()
        
#End Region
    
#Region "Constructors"
    
        Public Sub New()
        <% If Not(IsLatestCSLA) Then %>MyBase.New(GetType(<%= BusinessProjectName %>.<%= ChildBusinessClassName %><%= Entity.GenericProperty %>))<% End If %>
        End Sub
<% If(Entity.HasKey) Then %>

        Public Sub New(<%= Entity.GetProperties(PropertyType.Key).BuildParametersVariables() %>) 
            <% If Not(IsLatestCSLA) Then %>MyBase.New(GetType(<%= BusinessProjectName %>.<%= ChildBusinessClassName %><%= Entity.GenericProperty %>))<% End If %>
            
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key) %>
            Me.<%= prop.Name %> = <%= prop.VariableName %>
    <% Next %>
        End Sub
<% End If %>

#End Region

#Region "Public Properties"

#Region "Read-Write"
<% If Not Entity.IsCommand() Then %>    
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.NoConcurrency) %>
        
        Public Property <%= prop.Name %>() As <%= prop.SystemType %>
            Get
                Return GetValue(Of <%= prop.SystemType %>)("<%= prop.KeyName %>")
            End Get
            Set
                _bag("<%= prop.KeyName %>") = value
            End Set
        End Property
    <% Next %>
<% Else %>    
    <% For Each prop As IProperty In Entity.GetCommandParameters() %>
        
        Public Property <%= prop.Name %>() As <%= prop.SystemType %>
            Get
                Return GetValue(Of <%= prop.SystemType %>)("<%= prop.KeyName %>")
            End Get
            Set
                _bag("<%= prop.KeyName %>") = value
            End Set
        End Property
    <% Next %>
<% End If %>

#End Region
        
#Region "Read-Only"
    <% If((DataAccessImplementation = DataAccessMethod.StoredProcedures Or DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures)) And Not Entity.IsCommand() Then
        For Each prop As IProperty In Entity.GetProperties(PropertyType.NoConcurrency)
            If(prop.IsNullable) Then
    %>
    
        Public ReadOnly Property <%= prop.Name %>HasValue As Boolean
            Get
                Return _bag.ContainsKey("<%= prop.KeyName %>")
            End Get
        End Property
    <%      End If
        Next
    End If
    %>
    
        ''' <summary>
        ''' Returns a list of all the modified properties and values.
        ''' </summary>
        Public ReadOnly Property StateBag() As Dictionary(Of String, Object) Implements IGeneratedCriteria.StateBag
            Get
                Return _bag
            End Get
        End Property
    
        ''' <summary>
        ''' Returns a list of all the modified properties and values.
        ''' </summary>
        Public ReadOnly Property TableFullName() As String Implements IGeneratedCriteria.TableFullName
            Get
                Return "[<%= Entity.SchemaName%>].[<%= Entity.EntityKeyName%>]"
            End Get
        End Property
    
#End Region
    
#End Region
    
#Region "Overrides"
    
        Public Overrides Function ToString() As String
            Dim result As String = String.Empty
            Dim cancel As Boolean = False
            
            OnToString(result, cancel)
            If(cancel AndAlso Not String.IsNullOrEmpty(result)) Then
                Return result
            End If
        
            If _bag.Count = 0 Then
                Return "No criterion was specified."
            End If
    
            For Each key As KeyValuePair(Of String, Object) In _bag
                result += String.Format("[{0}] = '{1}' AND ", key.Key, key.Value)
            Next
    
            Return result.Remove(result.Length - 5, 5)
        End Function
    
#End Region
    
#Region "Private Methods"
        
        Private Function GetValue(Of T)(name As String) As T
            Dim value As New Object
            If _bag.TryGetValue(name, value) Then
                Return DirectCast(value, T)
            End If
        
            Return Nothing
        End Function
        
#End Region
        
#Region "Partial Methods"

        Partial Private Sub OnToString(ByRef result As String, ByRef cancel As Boolean)
        End Sub

#End Region

<% If(IncludeSilverlightSupport) Then %>
#Region "Serialization"

        Protected Overrides Sub OnGetState(ByVal info As SerializationInfo, ByVal mode As StateMode)
            MyBase.OnGetState(info, mode)
            
<% For Each prop As IProperty In Entity.GetProperties(PropertyType.NoConcurrency) %>
            If _bag.ContainsKey("<%= prop.KeyName %>") Then
                info.AddValue("<%= prop.KeyName %>", GetValue(Of <%= prop.SystemType %>)("<%= prop.KeyName %>"))
            End If
<% Next %>
        End Sub
        
        Protected Overrides Sub OnSetState(ByVal info As SerializationInfo, ByVal mode As StateMode)
            MyBase.OnSetState(info, mode)
            
<% For Each prop As IProperty In Entity.GetProperties(PropertyType.NoConcurrency) %>
            If info.Values.ContainsKey("<%= prop.KeyName %>") Then
                _bag("<%= prop.KeyName %>") = info.GetValue(Of <%= prop.SystemType %>)("<%= prop.KeyName %>")
            End If
<% Next %>
        End Sub

#End Region

<% End If %>
    End Class
End Namespace