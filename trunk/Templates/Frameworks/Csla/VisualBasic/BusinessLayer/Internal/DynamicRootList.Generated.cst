<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Register Name="Exists" Template="..\..\Common\ExistsList.cst" %>
<%@ Register Name="ListEnhancements" Template="..\..\Common\ListEnhancements.cst" %>
<%@ Register Name="IsDirty" Template="..\..\Common\IsDirtyList.cst" %>
<%@ Register Name="AddNewCore" Template="..\..\Common\ListSimpleAddNewCore.cst" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.CSLA" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class '<%= Entity.Name %>.vb.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Linq

Imports Csla
<% If(IncludeSilverlightSupport) Then %>
#If SILVERLIGHT Then
Imports Csla.Serialization
#Else
Imports Csla.Data
#End If
<% Else %>
Imports Csla.Data
<% End If %>

Namespace <%= BusinessProjectName %>
    <Serializable()> _
    <% If(DataAccessImplementation = DataAccessMethod.ObjectFactoryNone Or DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL Or DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures) %>
    <Csla.Server.ObjectFactory(FactoryNames.<%= Entity.Name %>ListFactoryName)> _
    <% End If %>
    Public Partial Class <%= BusinessClassName %><%= Entity.GenericProperty %>
        Inherits <% If(IsCSLA43 OrElse IsCSLA45) Then %>DynamicBindingListBase<% Else %>EditableRootListBase<% End If %>(Of <%= ChildBusinessClassName %><%= Entity.GenericProperty %>)
    
#Region "Constructor(s)"

        public Sub New()
            AllowNew = True
        End Sub

#End Region

#Region "Synchronous Factory Methods"
<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
<% End If %>

        ''' <summary>
        ''' Creates a new list collection of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>. 
        ''' </summary>
        ''' <returns>Returns a newly instantiated collection of type <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/>.</returns>
        Public Shared Function NewList() As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Return DataPortal.Create(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
        End Function
    <% For Each sc As SearchCriteria In  Entity.SearchCriteria %>

        ''' <summary>
        ''' Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> collection of <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> items with the specified criteria. 
        ''' </summary>
<% For Each item As IProperty In sc.Properties %>
        ''' <param name="<%= item.VariableName%>"><%If(item.HasDescription) Then%><%=item.Description%>.<% Else %>No additional detail available.<% End If %></param>
<% Next %>
        ''' <returns>Collection of all <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> items.</returns>    
        Public Shared Function <%= sc.MethodName %>(<%= sc.Properties.BuildParametersVariables() %>) As <%= BusinessClassName %><%= Entity.GenericProperty %> 
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
            <%= sc.Properties.BuildObjectInitializer() %>

            Return DataPortal.Fetch(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)(criteria)
        End Function
    <% Next %>

        Public Shared Function GetByCriteria(ByVal criteria As <%= CriteriaClassName %><%= Entity.GenericProperty %>) As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Return DataPortal.Fetch(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)(criteria)
        End Function

        ''' <summary>
        ''' Returns a <see cref="<%=BusinessClassName%><%= Entity.GenericProperty %>"/> collection of all <see cref="<%=ChildBusinessClassName%><%= Entity.GenericProperty %>"/> items. 
        ''' </summary>
        ''' <returns>Collection of all <%=ChildBusinessClassName%><%= Entity.GenericProperty %> items.</returns>    
        Public Shared Function GetAll() As <%= BusinessClassName %><%= Entity.GenericProperty %>
            Return DataPortal.Fetch(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)(New <%= CriteriaClassName %><%= Entity.GenericProperty %>())
        End Function

<% If(IncludeSilverlightSupport) Then %>
#End If
<% End If %>
#End Region

#Region "Asynchronous Factory Methods"

        Public Shared Sub NewListAsync(ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    <% For Each sc As SearchCriteria In Entity.SearchCriteria %>
    
        Public Shared Sub <%= sc.MethodName %>Async(<% If(sc.Properties.Count > 0) Then %><%= sc.Properties.BuildParametersVariables() %>, <% End If %>ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New <%= CriteriaClassName %><%= Entity.GenericProperty %>()
    <%For Each prop As IProperty In sc.Properties %>
            criteria.<%= prop.Name %> = <%= prop.VariableName %>
    <% Next %>
    
            dp.BeginFetch(criteria)
        End Sub
    <% Next %> 

        Public Shared Sub GetByCriteriaAsync(ByVal criteria As <%= CriteriaClassName %><%= Entity.GenericProperty %>, ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Public Shared Sub GetAllAsync(ByVal handler As EventHandler(Of DataPortalResult(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)))
            Dim dp As New DataPortal(Of <%= BusinessClassName %><%= Entity.GenericProperty %>)()
            AddHandler dp.FetchCompleted, handler
            dp.BeginFetch(New <%= CriteriaClassName %><%= Entity.GenericProperty %>())
        End Sub 

#end Region

#Region "Method Overrides"
<% If(IncludeSilverlightSupport) Then %>
#If Not SILVERLIGHT Then
<% End If %>

        Protected Overrides Function AddNewCore() As Object
    <% RenderHelper(new AddNewCore()) %>
        End Function

<% If(IncludeSilverlightSupport) Then %>
#Else

        Protected Overrides Sub AddNewCore() 
    <% RenderHelper(new AddNewCore(), IncludeSilverlightSupport) %>
        End Sub

#End If 
<% End If %>
#End Region

    <% RenderHelper(New IsDirty()) %>
    <% RenderHelper(New PartialMethods()) %>
    <% RenderHelper(New Exists()) %>
    <% RenderHelper(New ListEnhancements()) %>
    End Class
End Namespace