<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" OutputType="None" Inherits="CodeSmith.QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA NameValueList" %>

<%@ Register Name="NameValueList" Template="Internal\NameValueList.cst" %>
<%@ Register Name="NameValueListDataAccess" Template="Internal\NameValueList.DataAccess.cst" %>
<%@ Register Name="NameValueListGenerated" Template="Internal\NameValueList.Generated.cst" %>

<%@ Register Name="SqlStoredProcedures" Template="..\DataAccessLayer\Internal\SQLStoredProcedures.cst" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.QuickStart" %>
<%@ Import Namespace="SchemaExplorer" %>

<script runat="template">

Public Overloads Overrides Sub Render(writer As System.IO.TextWriter)

    RegisterReferences()

    Dim strategy As New PreserveRegionsMergeStrategy()
    strategy.Language = "VB"
    strategy.RegionNameRegex = "^[ \t]*[ \s]*""?(?i:Preserved Code)""?"

    'NameValueList
    Dim nameValueList As NameValueList = Me.Create(Of NameValueList)()
    Me.CopyPropertiesTo(nameValueList)

    Dim parentFileName As String = System.IO.Path.Combine(Me.Location, String.Format("Collections\{0}.vb", nameValueList.BusinessClassName))
    nameValueList.RenderToFile(parentFileName, strategy)

    'NameValueList.Generated
    Dim fileName As String = System.IO.Path.Combine(Location, String.Format("Collections\{0}.Generated.vb", nameValueList.BusinessClassName))

    Dim nameValueListGenerated As NameValueListGenerated = Me.Create(Of NameValueListGenerated)()
    Me.CopyPropertiesTo(nameValueListGenerated)

    nameValueListGenerated.RenderToFile(fileName, parentFileName, True)

    'NameValueList.DataAccess
    fileName = System.IO.Path.Combine(Location, String.Format("Collections\{0}.DataAccess.vb", nameValueList.BusinessClassName))

    Dim nameValueListDataAccess As NameValueListDataAccess = Me.Create(Of NameValueListDataAccess)()
    Me.CopyPropertiesTo(nameValueListDataAccess)

    nameValueListDataAccess.RenderToFile(fileName, parentFileName, True)
    If DataAccessImplementation = DataAccessMethod.StoredProcedures Then
    'StoredProcedures
    fileName = System.IO.Path.Combine(Location, String.Format("Collections\{0}.StoredProcedures.sql", nameValueList.BusinessClassName))
    Dim sqlStoredProcedures As SqlStoredProcedures = Me.Create(Of SqlStoredProcedures)()
    Me.CopyPropertiesTo(sqlStoredProcedures)
    sqlStoredProcedures.DataProjectName = "Not needed for sql stored procedures."

    sqlStoredProcedures.RenderToFile(fileName, parentFileName, True)
    End If
End Sub

Public Overrides Function OnTableChanging() As Boolean
	If String.IsNullOrEmpty(BusinessClassName) Then
		BusinessClassName = String.Concat(Entity.ClassName, "NameValueList")
		ChildBusinessClassName = Entity.ClassName
	End If

	If String.IsNullOrEmpty(CriteriaClassName) OrElse CriteriaClassName.Equals("Criteria", StringComparison.InvariantCultureIgnoreCase) Then
		CriteriaClassName = [String].Concat(Entity.ClassName, "Criteria")
	End If

	Return False
End Function

</script>