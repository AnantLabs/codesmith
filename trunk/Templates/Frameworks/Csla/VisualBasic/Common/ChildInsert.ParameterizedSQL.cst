<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>
        Dim cancel As Boolean = False
        OnChildInserting(connection, cancel)
        If (cancel) Then
            Return
        End If

        If connection.State <> ConnectionState.Open Then connection.Open()
        Const commandText As String = "INSERT INTO [<%= entity.Table.Owner %>].[<%= entity.Table.Name %>] (<%= entity.MembersUpdateInsert.BuildDataBaseColumns() %>) VALUES (<%= entity.MembersUpdateInsert.BuildDataBaseParameters() %>)<%= entity.BuildInsertSelectStatement() %>"
        Using command As New SqlCommand(commandText, connection)
            <%= entity.MembersUpdateInsert.BuildCommandParameters(False, False, Not RenderOptionalContent) %>

<% If (entity.HasRowVersionMember Or entity.HasIdentityMember) Then %>
            Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                If reader.Read() Then
<% If (Entity.HasRowVersionMember) Then %>
                    <%= Entity.RowVersionMember.PropertyName %> = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
<% End If %>
<% If (Entity.PrimaryKey.IsIdentity) Then %>
<% for each [member] As Member in Entity.PrimaryKey.KeyMembers
If(UseMemberVariables) Then %>
                    <%= [member].PrivateMemberVariableName %> = <%If Not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>ADOHelper.GetBytes(reader)<% End If %>
<% else %>
                    LoadProperty(<%= [member].PrivateMemberVariableName %>Property, <% If NOT [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>"))<% else %>ADOHelper.GetBytes(reader," <%= [member].ColumnName %>"))<% End If %>
<%  End If
Next %>
<% End If %>
                End If
            End Using
<%Else %>
            'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
            Dim result As Integer = command.ExecuteNonQuery()
            If (result = 0) Then
                throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
            End If
<% End If %>

<% For Each member As Member In Entity.PrimaryKey.KeyMembers
    If Not (member.IsIdentity OrElse member.DataType = DbType.Guid.ToString()) Then
        If(UseMemberVariables) Then %>
            _original<%= member.PropertyName %> = Me.<%= member.PropertyName %>
<%      Else %>
            LoadProperty(_original<%= member.PropertyName %>Property, Me.<%= member.PropertyName %>)
<%      End If
    End If
Next %>
        End Using

        OnChildInserted()
