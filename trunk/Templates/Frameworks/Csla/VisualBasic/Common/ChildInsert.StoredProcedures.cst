<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
            Dim cancel As Boolean = False
<% Dim associations As System.Collections.Generic.List(Of Association) = Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne).Distinct().ToList()
   If Not RenderOptionalContent AndAlso associations.Count() > 0 Then %>
            OnChildInserting(<%= associations.BuildArgumentVariables(true) %>, cancel)
<% Else %>
            OnChildInserting(connection, cancel)
<% End If %>
            If (cancel) Then
                Return
            End If

<% If(Entity.CanInsert) Then %> 
            If Not (connection.State = ConnectionState.Open) Then connection.Open()
            Using command As New SqlCommand("<%= GetInsertStoredProcedureName() %>", connection)
                command.CommandType = CommandType.StoredProcedure
                <%= entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(False, False, Not RenderOptionalContent, True) %>
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp)
                command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value = Me.<%= Entity.ConcurrencyProperty.Name %>
                command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
                command.ExecuteNonQuery()
    
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                <%= Entity.ConcurrencyProperty.Name %> = DirectCast(command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value, <%= Entity.ConcurrencyProperty.SystemType %>)
    <% End If %>
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If(prop.IsType(PropertyType.Identity) OrElse prop.IsDbType(DbType.Guid)) Then %>
    
                ' Update identity or guid primary key value.
            <% If(UseMemberVariables) Then %>
                <%= prop.PrivateMemberVariableName %> = DirectCast(command.Parameters("<%= prop.BuildParameterVariableName() %>").Value, <%= prop.SystemType %>)
            <% Else %>
                LoadProperty(<%= prop.PrivateMemberVariableName %>Property, DirectCast(command.Parameters("<%= prop.BuildParameterVariableName() %>").Value, <%= prop.SystemType %>))
            <% End If
        Else %> 
    
                ' Update the original non-identity primary key value.
            <% If(UseMemberVariables) Then %>
                _original<%= prop.Name %> = Me.<%= prop.Name %>
            <% Else %>
                LoadProperty(_original<%= prop.Name %>Property, Me.<%= prop.Name %>)
            <% End If %>
    <%  End If
    Next %>
    
            End Using
    <% If Not RenderOptionalContent Then
        For Each prop As IProperty In Entity.Properties
                If prop.IsType(PropertyType.Foreign) AndAlso Not prop.IsType(PropertyType.Key) Then
            If String.IsNullOrEmpty(prop.ResolveAssociationPropertyClassName()) Then
                Continue For
            End If  %>
    
            ' Update foreign keys values. This code will update the values passed In from the parent only if no errors occurred after executing the query.
    <% Dim localParameterName As String = prop.ResolveAssociationPropertyVariable()
    Dim localParameterNameWithChildProperty As String = prop.ResolveAssociationPropertyVariableWithChildProperty() %>
            '   BLAKE: Parent objects In VB require a different syntax check [Please Use IsNothing(ParentObjectParameter)]            
            If(Not IsNothing(<%= localParameterName %>) AndAlso Not <%= localParameterNameWithChildProperty %> = Me.<%= prop.Name %>) Then
    <% If(UseMemberVariables) Then %>
                <%= prop.PrivateMemberVariableName %> = <%= localParameterNameWithChildProperty %>
    <% Else %>
                LoadProperty(<%= prop.PrivateMemberVariableName %>Property, <%= localParameterNameWithChildProperty %>)
    <% End If %>
            End If
                <% End If
        Next
    End If %>
    
    <% If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.ManyToMany).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.OneToOne).Count() > 0) Then
        If (Not RenderOptionalContent) Then
        Dim childCount As Integer = 0
        For Each a As Association In Entity.Associations.Where(Function(assoc) assoc.AssociationType = AssociationType.OneToMany OrElse assoc.AssociationType = AssociationType.OneToOne OrElse assoc.AssociationType = AssociationType.OneToZeroOrOne OrElse assoc.AssociationType = AssociationType.ZeroOrOneToMany)
            If IsChildBusinessObject(a) Then
                childCount += 1
            End If
        Next
    
        If childCount > 0 Then %>
            FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>)
        <% Else %>
            ' A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            ' TODO: Please override OnChildInserted() and insert this child manually.
            'FieldManager.UpdateChildren(<%= Entity.BuildUpdateChildrenParametersVariables(true) %>)
        <% End If 
        Else %>
            FieldManager.UpdateChildren(Me, connection)
    <% End If
    End If %>
    
            OnChildInserted()
<% Else %>
            Throw New NotSupportedException("This business object cannot be inserted.")
<% End If %>