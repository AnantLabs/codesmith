<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
            Dim cancel As Boolean = False
            OnInserting(cancel)
            If (cancel) Then
                Return
            End If

<% If(Entity.CanInsert) Then %> 
            Const commandText As String = "INSERT INTO <%= Entity.EntityKeyName %> (<%= entity.GetProperties(PropertyType.UpdateInsert).BuildDataBaseColumns() %>) VALUES (<%= entity.GetProperties(PropertyType.UpdateInsert).BuildDataBaseParameters() %>)<%= entity.BuildInsertSelectStatement() %>"
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand(commandText, connection)
                    <%= entity.GetProperties(PropertyType.UpdateInsert).BuildCommandParameters(False, True) %>
    
    <% If (entity.ConcurrencyProperty IsNot Nothing OrElse entity.IdentityProperty IsNot Nothing) Then %>
                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        If reader.Read() Then
                            Using(BypassPropertyChecks)
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                                <%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>")
    <% End If %>
    <% for each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If (prop.IsType(PropertyType.Identity) OrElse prop.IsDbType(DbType.Guid)) Then
            If(UseMemberVariables) Then %>
                                <%= prop.PrivateMemberVariableName %> = <%If Not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader)<% End If %>
            <% Else %>
                                LoadProperty(<%= prop.PrivateMemberVariableName %>Property, <% If NOT prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>"))<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>"))<% End If %>
            <% End If
        End If
    Next %>
                End Using
                        End If
                    End Using
    <% Else %>
                    'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    Dim result As Integer = command.ExecuteNonQuery()
                    If (result = 0) Then
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
    <% End If %>
                End Using
    
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If Not (prop.IsType(PropertyType.Identity)) Then
            If(UseMemberVariables) Then %>
                _original<%= prop.Name %> = Me.<%= prop.Name %>
        <% Else %>
                LoadProperty(_original<%= prop.Name %>Property, Me.<%= prop.Name %>)
        <% End If
        End If
    Next %>
    
    <% If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne).Count() > 0) Then %>
    
                FieldManager.UpdateChildren(Me, connection)
    <% End If %>
            End Using
    
            OnInserted()
<% Else %>
            Throw New NotSupportedException("This business object cannot be inserted.")
<% End If %>
