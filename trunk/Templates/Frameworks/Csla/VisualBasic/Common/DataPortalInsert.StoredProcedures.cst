<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>
            Dim cancel As Boolean = False
            OnInserting(cancel)
            If (cancel) Then
                Return
            End If

<% If(Entity.CanInsert) Then %> 
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("<%= GetInsertStoredProcedureName() %>", connection)
                    command.CommandType = CommandType.StoredProcedure
                    <%= entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(False, True, False, True) %>
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp)
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value = Me.<%= Entity.ConcurrencyProperty.Name %>
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
                    command.ExecuteNonQuery()
    
                    Using (BypassPropertyChecks)
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                        <%= Entity.ConcurrencyProperty.Name %> = DirectCast(command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value, <%= Entity.ConcurrencyProperty.SystemType %>)
    <% End If %>
    <% for each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If(prop.IsType(PropertyType.Identity) OrElse prop.IsDbType(DbType.Guid)) Then
            If(UseMemberVariables) Then %>
                        <%= prop.PrivateMemberVariableName %> =  DirectCast(command.Parameters("<%= prop.BuildParameterVariableName() %>").Value,<%= prop.SystemType %>)
            <% Else %>
                        LoadProperty(<%= prop.PrivateMemberVariableName %>Property, DirectCast(command.Parameters("<%= prop.BuildParameterVariableName() %>").Value,<%= prop.SystemType %>))
            <% End If
        End If
    Next %>
                    End Using
                End Using
                
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If Not (prop.IsType(PropertyType.Identity)) Then
            If(UseMemberVariables) Then %>
                _original<%= prop.Name %> = Me.<%= prop.Name %>
        <% Else %>
                LoadProperty(_original<%= prop.Name %>Property, Me.<%= prop.Name %>)
        <% End If
        End If
    Next %>
    <% If (Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.ManyToMany).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne).Count() > 0 OrElse Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToZeroOrOne OrElse a.AssociationType = AssociationType.OneToOne).Count() > 0) Then %>
    
                FieldManager.UpdateChildren(Me, connection)
    <% End If %>
            End Using
    
            OnInserted()
<% Else %>
            Throw New NotSupportedException("This business object cannot be inserted.")
<% End If %>

