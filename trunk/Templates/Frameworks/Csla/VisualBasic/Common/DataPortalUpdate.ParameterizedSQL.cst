<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="Generator.CSLA.EntityCodeTemplate" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="System.Linq" %>

            Dim cancel As Boolean = False
            OnUpdating(cancel)
            If (cancel) Then
                Return
            End If
    
<% If(Entity.CanUpdate) Then %>  
    <% If Entity.IdentityProperty Is Nothing AndAlso Entity.HasKey %>
            If <%= Entity.GetProperties(PropertyType.Key).BuildIdentityKeyEqualityStatements()%> Then
                ' Insert new child.
                Dim item As New <%= BusinessClassName %>()
                <%= Entity.GetProperties(PropertyType.NoConcurrency).BuildObjectInitializer(false, true, false, "item.") %>
                item = item.Save()
    
                ' Mark editable child lists as dirty. This code may need to be updated to one-to-one relationships.
    <% For Each association As IAssociation In Entity.Associations.Where(Function(a) a.AssociationType = AssociationType.OneToMany OrElse a.AssociationType = AssociationType.ZeroOrOneToMany OrElse a.AssociationType = AssociationType.ManyToMany)
            If(BusinessObjectExists(association, "List") = False AndAlso IsReadOnlyBusinessObject(association, "InfoList")) Then
                Continue For
            End If %>
    
                For Each itemToUpdate As <%= association.TypeName %> In <%= association.Name %>
    <%= association.SearchCriteria.BuildUpdateStatements("itemToUpdate", "") %>
                Next
    <% Next %>
    
                ' Create a new connection.
                Using connection As New SqlConnection(ADOHelper.ConnectionString)
                    connection.Open()
                    FieldManager.UpdateChildren(Me, connection)
                End Using
    
                ' Delete the old.
                Dim criteria As New <%= CriteriaClassName %>()
                <%= Entity.GetProperties(PropertyType.Key).BuildObjectInitializer(false, false, true) %>
                DataPortal_Delete(criteria)
    
                ' Mark the original as the new one.
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
    If Not(prop.IsType(PropertyType.Identity)) Then %>
                Original<%= prop.Name %> = <%= prop.Name %>
    <% End If
    Next
    %>
                OnUpdated()
    
                Return
            End If
    
    <% End If %>
            Const commandText As String = "UPDATE [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] <%= entity.GetProperties(PropertyType.UpdateInsert).BuildSetStatements() %> <%= entity.Key.Properties.BuildWhereStatements(True) %><% If entity.ConcurrencyProperty IsNot Nothing Then %> AND [<%= entity.ConcurrencyProperty.KeyName %>] = <%= ParameterPrefix  %><%= entity.ConcurrencyProperty.KeyName %><% End If %><%= entity.BuildUpdateSelectStatement() %>"
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand(commandText, connection)
                    <%= entity.GetProperties(PropertyType.NoConcurrency).BuildCommandParameters(False, False, False, False, True) %>
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                    command.Parameters.AddWithValue("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>", SqlDbType.Timestamp)
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Value = Me.<%= Entity.ConcurrencyProperty.Name %>
                    command.Parameters("<%= ParameterPrefix  %><%= Entity.ConcurrencyProperty.KeyName %>").Direction = ParameterDirection.InputOutput
    <% End If %>
    
    <% If (entity.ConcurrencyProperty IsNot Nothing OrElse entity.IdentityProperty IsNot Nothing) Then %>
                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        If reader.RecordsAffected = 0 Then
                            Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                        End If
    
                        If reader.Read() Then
                            Using (BypassPropertyChecks)
    <% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
                                <%= Entity.ConcurrencyProperty.Name %> = ADOHelper.GetBytes(reader, "<%= Entity.ConcurrencyProperty.KeyName %>")
    <% End If %>
    <%For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If(Not prop.IsType(PropertyType.Identity) AndAlso prop.IsNullable) Then %> 
                                ' Update non-identity nullable primary key value.
            <% If(UseMemberVariables) Then %>
                                <%= prop.PrivateMemberVariableName %> = <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>
    <%      Else %>
                                LoadProperty(<%= prop.PrivateMemberVariableName %>Property, <%If not prop.HasByteArrayColumn() Then %>reader.<%= prop.GetReaderMethod() %>("<%= prop.KeyName %>")<% else %>ADOHelper.GetBytes(reader, "<%= prop.KeyName %>")<% End If %>)
    <%      End If
        End If
    Next %>
                            End Using
                        End If
                    End Using
    <%Else %>
                'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                Dim result As Integer = command.ExecuteNonQuery()
                If (result = 0) Then
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    <% End If %>
                End Using
    <% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
        If (Not prop.IsType(PropertyType.Identity) OrElse prop.IsDbType(DbType.Guid)) Then
            If(UseMemberVariables) Then %>
                _original<%= prop.Name %> = Me.<%= prop.Name %>
    <%      Else %>
                LoadProperty(_original<%= prop.Name %>Property, Me.<%= prop.Name %>)
    <%      End If
        End If
    Next %>
    
    <% If (Entity.Associations.Count() > 0) Then %>
    
                FieldManager.UpdateChildren(Me, connection)
    <% End If %>
            End Using
    
            OnUpdated()
<% Else %>
            Throw New NotSupportedException("This business object cannot be updated.")
<% End If %>
