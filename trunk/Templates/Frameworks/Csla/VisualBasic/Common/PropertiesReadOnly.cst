<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.EntityCodeTemplate" Debug="False" CompilerVersion="v3.5" Encoding="UTF-8" Description="CSLA Map" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\Common" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="QuickStart" %>

#Region "Properties"
    
    <%  For Each member As Member in Entity.MembersNoRowVersion
    If UseMemberVariables Then %>
        Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= member.SystemType %>)<%End If%>)
        Private <%= member.PrivateMemberVariableName %> As <%= member.SystemType %> = <%= member.PrivateMemberVariableName %>Property.DefaultValue
    <% If(member.HasDescription) Then %>
        ''' <summary>
        ''' <%= member.Description %>
        ''' </summary>
    <% End If %>
    <%If IncludeSilverlightSupport Then %>
    #If Not SILVERLIGHT Then
    <% End If %>
        <%If member.IsPrimaryKey Then %><%= member.BuildDataObjectField(IncludeSilverlightSupport) %><% End If %>
        Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
    <%If IncludeSilverlightSupport Then %>
    #Else
        Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
    #End If
    <% End If %>
            Get 
                Return GetProperty(<%= member.PrivateMemberVariableName %>Property, <%= member.PrivateMemberVariableName %>) 
            End Get
    <% else %>
        Private Shared ReadOnly <%= member.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= member.SystemType %>) = RegisterProperty(Of <%= member.SystemType %>)(Function(p As <%= BusinessClassName %>) p.<%= member.PropertyName %>, String.Empty<% If(member.IsNullable And member.SystemType = "System.String") Then %>, vbNullString<% Else If(member.CanGenerateNullDefault()) Then %>, CType(Nothing, <%= member.SystemType %>)<%End If%>)
    <% If(member.HasDescription) Then %>
        ''' <summary>
        ''' <%= member.Description %>
        ''' </summary>
    <% End If %>
    <%If IncludeSilverlightSupport Then %>
    #If Not SILVERLIGHT Then
    <% End If %>
        <%If member.IsPrimaryKey Then %><%= member.BuildDataObjectField(IncludeSilverlightSupport) %><% End If %>
        Public Property <%= member.PropertyName %>() As <%= member.SystemType %>
    <%If IncludeSilverlightSupport Then %>
    #Else
        Public ReadOnly Property <%= member.PropertyName %>() As <%= member.SystemType %>
    #End If
    <% End If %>
            Get 
                Return GetProperty(<%= member.PrivateMemberVariableName %>Property)
            End Get
    <% End If %>
            Friend Set
               LoadProperty(<%= member.PrivateMemberVariableName %>Property, value)
            End Set
        End Property
        
    <% Next %>
    <%-- One-To-Zero-Or-One --%>
    <% For Each association As Association in Entity.AssociatedOneToZeroOrOne 
    Dim associationClassName As String = association.ClassName
    If(IsReadOnlyBusinessObject( association, "Info")) Then
        associationClassName += "Info"
    End If %>
        'AssociatedOneToZeroOrOne
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>) = RegisterProperty(Of <%= associationClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, "<%= association.PropertyName %>")
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
        Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>
            Get
    <% If(IncludeSilverlightSupport) Then %>
    #If Not SILVERLIGHT Then
    <% End If %>
    <% If UseLazyLoading Then %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria()
                    <%= association.BuildObjectInitializer(true) %>
    
                    If(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                    End If
                End If
                
    <% End If %>  
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
    <% If(IncludeSilverlightSupport) Then %>
    #End If
    <% End If %>
            End Get
        End Property

    <% Next %>
    <%-- Many-To-One --%>
    <% For Each association  As Association in Entity.AssociatedManyToOne 
    Dim associationClassName As String = association.ClassName
    If(IsReadOnlyBusinessObject( association, "Info")) Then
        associationClassName += "Info"
    End If %>
        'AssociatedManyToOne
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>) = RegisterProperty(Of <%= associationClassName %>)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, "<%= association.PropertyName %>")
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
        Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>
            Get
    <% If(IncludeSilverlightSupport) Then %>
    #If Not SILVERLIGHT Then
    <% End If %>
    <% If UseLazyLoading Then %>
				If<%= association.BuildNullCheckStatement(true, true, false, true, false) %> Then
					Return Nothing
				End If
    
                If Not(FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property))
                    Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria()
                    <%= association.BuildObjectInitializer(true) %>
    
                    If(<%= BusinessProjectName %>.<%= associationClassName %>.Exists(criteria)) Then
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %><%= association.GenericProperty %>.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                    End If
    <% If(IncludeSilverlightSupport) Then %>
    #End If
    <% End If %>
                End If
                
    <% End If %>  
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            End Get
        End Property
        
    <% Next  %>
    <%-- One-To-Many & Many-To-Many --%>
    <% For Each association As Association in Entity.AssociatedOneToMany 
        Dim associationClassName As String = association.ClassName
        If(IsReadOnlyBusinessObject( association, "InfoList")) Then
            associationClassName += "Info"
        End If %>
        'AssociatedOneToMany
        Private Shared ReadOnly <%= association.PrivateMemberVariableName %>Property As PropertyInfo(Of <%= associationClassName %>List) = RegisterProperty(Of <%= associationClassName %>List)(Function(p As <%= BusinessClassName %>) p.<%= association.PropertyName %>, "<%= association.PropertyName %>")
    <% If(association.HasDescription) Then %>
        ''' <summary>
        ''' <%= association.Description %>
        ''' </summary>
    <% End If %>
        Public ReadOnly Property <%= association.PropertyName %>() As <%= associationClassName %>List 
            Get
    <% If(IncludeSilverlightSupport) Then %>
    #If Not SILVERLIGHT Then
    <% End If %>
    <% If(UseLazyLoading) Then %>
                If Not (FieldManager.FieldExists(<%= association.PrivateMemberVariableName %>Property)) Then
    <% If(IsNameValueListBusinessObject(association, "NameValueList")) Then %>
                    LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.GetAll())
    <% Else %>
                    Dim criteria As New <%= BusinessProjectName %>.<%= association.ClassName %>Criteria()
                    <%= association.BuildObjectInitializer(true) %>
    
                    If(<%= association.BuildNullCheckStatement(true, false, false, false) %><%= BusinessProjectName %>.<%= associationClassName %>List.Exists(criteria)) Then
                        LoadProperty(<%= association.PrivateMemberVariableName %>Property, <%= BusinessProjectName %>.<%= associationClassName %>List.<%= association.SearchCriteria.MethodName%>(<%= association.SearchCriteria.Members.BuildPropertyVariableArguments() %>))
                    End If
    <%End If%>
    <% If(IncludeSilverlightSupport) Then %>
    #End If
    <% End If %>
                End If
                
    <% End If%>
                Return GetProperty(<%= association.PrivateMemberVariableName %>Property) 
            End Get
        End Property
        
    <% Next %>
#End Region
