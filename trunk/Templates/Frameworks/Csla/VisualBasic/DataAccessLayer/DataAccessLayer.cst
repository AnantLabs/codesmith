<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" OutputType="None" Inherits="Generator.CSLA.EntitiesCodeTemplate" %>
<%@ Register Name="ObjectFactory" Template="Internal\ObjectFactory.cst" %>
<%@ Register Name="ObjectFactoryDataAccess" Template="Internal\ObjectFactory.DataAccess.cst" %>
<%@ Register Name="ObjectFactoryDataAccessParameterized" Template="Internal\ObjectFactory.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="ObjectFactoryDataAccessStoredProcedures" Template="Internal\ObjectFactory.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="ObjectFactoryList" Template="Internal\ObjectFactoryList.cst" %>
<%@ Register Name="ObjectFactoryListDataAccess" Template="Internal\ObjectFactoryList.DataAccess.cst" %>
<%@ Register Name="ObjectFactoryListDataAccessParameterized" Template="Internal\ObjectFactoryList.DataAccess.ParameterizedSQL.cst" %>
<%@ Register Name="ObjectFactoryListDataAccessStoredProcedures" Template="Internal\ObjectFactoryList.DataAccess.StoredProcedures.cst" %>
<%@ Register Name="ADOHelperTemplate" Template="Internal\ADOHelper.cst" %>
<%@ Register Name="SqlStoredProcedures" Template="Internal\SQLStoredProcedures.cst" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<% Generate() %>

<script runat="template">

Public Overloads Overrides Sub Generate()
    RegisterReferences()

    'Entities
    For Each entity As IEntity In DynamicRootEntities
        RenderObjectFactoryTemplates(entity, False, False)
    Next

    For Each entity As IEntity In EditableChildEntities
        RenderObjectFactoryTemplates(entity, False, True)
    Next

    For Each entity As IEntity In EditableRootEntities
        RenderObjectFactoryTemplates(entity, False, False)
    Next

    For Each entity As IEntity In ReadOnlyChildEntities
        RenderObjectFactoryTemplates(entity, True, True)
    Next

    For Each entity As IEntity In ReadOnlyRootEntities
        RenderObjectFactoryTemplates(entity, True, False)
    Next

    For Each entity As IEntity In SwitchableObjectEntities
        RenderObjectFactoryTemplates(entity, False, False)
    Next

    'Lists
    For Each entity As IEntity In DynamicListBaseEntities
        RenderObjectFactoryListTemplates(entity, False, False)
    Next
    
    For Each entity As IEntity In DynamicRootListEntities
        RenderObjectFactoryListTemplates(entity, False, False)
    Next

    For Each entity As IEntity In EditableRootListEntities
        RenderObjectFactoryListTemplates(entity, False, False)
    Next

    For Each entity As IEntity In EditableChildListEntities
        RenderObjectFactoryListTemplates(entity, False, True)
    Next

    For Each entity As IEntity In ReadOnlyListEntities
        RenderObjectFactoryListTemplates(entity, True, False)
    Next

    For Each entity As IEntity In ReadOnlyChildListEntities
        RenderObjectFactoryListTemplates(entity, True, True)
    Next
End Sub

Public Sub RenderObjectFactoryTemplates(entity As IEntity, IsReadOnly As Boolean, IsChild As Boolean)
    Dim strategy As New PreserveRegionsMergeStrategy()
    strategy.Language = "VB"
    strategy.RegionNameRegex = "^[ \t]*[ \s]*""?(?i:Preserved)""?"
    
    'ObjectFactory
    Dim objectFactory As ObjectFactory = Me.Create(Of ObjectFactory)()
    Me.CopyPropertiesTo(objectFactory, True)
    objectFactory.Entity = entity
    
    If(IsReadOnly) Then
        objectFactory.BusinessClassName = entity.Name + "InfoFactory"
    Else
        objectFactory.BusinessClassName = entity.Name + "Factory"
    End If
    
    objectFactory.IsReadOnlyBusinessObject = IsReadOnly
    objectFactory.IsChildBusinessObject = IsChild

    Dim parentFileName As String = System.IO.Path.Combine(Me.Location, String.Format("Entities\{0}.vb", objectFactory.BusinessClassName))
    If Not System.IO.File.Exists(parentFileName) Then
        objectFactory.RenderToFile(parentFileName, False)
    End If

    Dim fileName As String = System.IO.Path.Combine(Location, String.Format("Entities\{0}.DataAccess.vb", objectFactory.BusinessClassName))
    If DataAccessImplementation = DataAccessMethod.ObjectFactoryNone Then
        Dim objectFactoryDataAccess As ObjectFactoryDataAccess = Me.Create(Of ObjectFactoryDataAccess)()
        Me.CopyPropertiesTo(objectFactoryDataAccess, True)
        objectFactoryDataAccess.Entity = entity
        objectFactoryDataAccess.IsReadOnlyBusinessObject = IsReadOnly
        objectFactoryDataAccess.IsChildBusinessObject = IsChild

        objectFactoryDataAccess.RenderToFile(fileName, parentFileName, True)
    ElseIf DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL Then
        Dim objectFactoryDataAccessParameterized As ObjectFactoryDataAccessParameterized = Me.Create(Of ObjectFactoryDataAccessParameterized)()
        Me.CopyPropertiesTo(objectFactoryDataAccessParameterized, True)
        objectFactoryDataAccessParameterized.Entity = entity
        objectFactoryDataAccessParameterized.IsReadOnlyBusinessObject = IsReadOnly
        objectFactoryDataAccessParameterized.IsChildBusinessObject = IsChild

        objectFactoryDataAccessParameterized.RenderToFile(fileName, parentFileName, True)

        Dim ADOHelper As ADOHelperTemplate = Me.Create(Of ADOHelperTemplate)()
        Me.CopyPropertiesTo(ADOHelper, True)
        ADOHelper.RenderToFile(System.IO.Path.Combine(Me.Location, "Utility\ADOHelper.vb"), strategy)
    ElseIf DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures Then
        'ObjectFactoryDataAccessStoredProcedures
        Dim objectFactoryDataAccessStoredProcedures As ObjectFactoryDataAccessStoredProcedures = Me.Create(Of ObjectFactoryDataAccessStoredProcedures)()
        Me.CopyPropertiesTo(objectFactoryDataAccessStoredProcedures, True)
        objectFactoryDataAccessStoredProcedures.Entity = entity
        objectFactoryDataAccessStoredProcedures.IsReadOnlyBusinessObject = IsReadOnly
        objectFactoryDataAccessStoredProcedures.IsChildBusinessObject = IsChild

        objectFactoryDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, True)

        If Not (entity.IsCommand()) Then
            'SqlStoredProcedures
            Dim sqlStoredProcedures As SqlStoredProcedures = Me.Create(Of SqlStoredProcedures)()
            Me.CopyPropertiesTo(sqlStoredProcedures, True)
            sqlStoredProcedures.Entity = entity

            fileName = System.IO.Path.Combine(Location, String.Format("Entities\{0}.StoredProcedures.sql", objectFactory.BusinessClassName))
            sqlStoredProcedures.RenderToFile(fileName, parentFileName, True)
        End If

        'ADOHelperTemplate
        Dim ADOHelper As ADOHelperTemplate = Me.Create(Of ADOHelperTemplate)()
        Me.CopyPropertiesTo(ADOHelper, True)
        ADOHelper.RenderToFile(System.IO.Path.Combine(Me.Location, "Utility\ADOHelper.vb"), strategy)
    End If
End Sub

Public Sub RenderObjectFactoryListTemplates(entity As IEntity, IsReadOnly As Boolean, IsChild As Boolean)
    Dim strategy As New PreserveRegionsMergeStrategy()
    strategy.Language = "VB"
    strategy.RegionNameRegex = "^[ \t]*[ \s]*""?(?i:Preserved)""?"
    
    'ObjectFactory
    Dim objectFactory As ObjectFactoryList = Me.Create(Of ObjectFactoryList)()
    Me.CopyPropertiesTo(objectFactory, True)
    objectFactory.Entity = entity
    
    If(IsReadOnly) Then
        objectFactory.BusinessClassName = entity.Name + "InfoListFactory"
    Else
        objectFactory.BusinessClassName = entity.Name + "ListFactory"
    End If
    
    objectFactory.IsReadOnlyBusinessObject = IsReadOnly
    objectFactory.IsChildBusinessObject = IsChild

    Dim parentFileName As String = System.IO.Path.Combine(Me.Location, String.Format("Collections\{0}.vb", objectFactory.BusinessClassName))
    If Not System.IO.File.Exists(parentFileName) Then
        objectFactory.RenderToFile(parentFileName, False)
    End If

    Dim fileName As String = System.IO.Path.Combine(Location, String.Format("Collections\{0}.DataAccess.vb", objectFactory.BusinessClassName))
    If DataAccessImplementation = DataAccessMethod.ObjectFactoryNone Then
        Dim objectFactoryDataAccess As ObjectFactoryListDataAccess = Me.Create(Of ObjectFactoryListDataAccess)()
        Me.CopyPropertiesTo(objectFactoryDataAccess, True)
        objectFactoryDataAccess.Entity = entity
        objectFactoryDataAccess.IsReadOnlyBusinessObject = IsReadOnly
        objectFactoryDataAccess.IsChildBusinessObject = IsChild

        objectFactoryDataAccess.RenderToFile(fileName, parentFileName, True)
    ElseIf DataAccessImplementation = DataAccessMethod.ObjectFactoryParameterizedSQL Then
        Dim objectFactoryDataAccessParameterized As ObjectFactoryListDataAccessParameterized = Me.Create(Of ObjectFactoryListDataAccessParameterized)()
        Me.CopyPropertiesTo(objectFactoryDataAccessParameterized, True)
        objectFactoryDataAccessParameterized.Entity = entity
        objectFactoryDataAccessParameterized.IsReadOnlyBusinessObject = IsReadOnly
        objectFactoryDataAccessParameterized.IsChildBusinessObject = IsChild

        objectFactoryDataAccessParameterized.RenderToFile(fileName, parentFileName, True)

        Dim ADOHelper As ADOHelperTemplate = Me.Create(Of ADOHelperTemplate)()
        Me.CopyPropertiesTo(ADOHelper, True)
        ADOHelper.RenderToFile(System.IO.Path.Combine(Me.Location, "Utility\ADOHelper.vb"), strategy)
    ElseIf DataAccessImplementation = DataAccessMethod.ObjectFactoryStoredProcedures Then
        'ObjectFactoryDataAccessStoredProcedures
        Dim objectFactoryDataAccessStoredProcedures As ObjectFactoryListDataAccessStoredProcedures = Me.Create(Of ObjectFactoryListDataAccessStoredProcedures)()
        Me.CopyPropertiesTo(objectFactoryDataAccessStoredProcedures, True)
        objectFactoryDataAccessStoredProcedures.Entity = entity
        objectFactoryDataAccessStoredProcedures.IsReadOnlyBusinessObject = IsReadOnly
        objectFactoryDataAccessStoredProcedures.IsChildBusinessObject = IsChild

        objectFactoryDataAccessStoredProcedures.RenderToFile(fileName, parentFileName, True)

        'SqlStoredProcedures
        Dim sqlStoredProcedures As SqlStoredProcedures = Me.Create(Of SqlStoredProcedures)()
        Me.CopyPropertiesTo(sqlStoredProcedures, True)
        sqlStoredProcedures.Entity = entity

        fileName = System.IO.Path.Combine(Location, String.Format("Collections\{0}.StoredProcedures.sql", objectFactory.BusinessClassName))
        sqlStoredProcedures.RenderToFile(fileName, parentFileName, True)

        'ADOHelperTemplate
        Dim ADOHelper As ADOHelperTemplate = Me.Create(Of ADOHelperTemplate)()
        Me.CopyPropertiesTo(ADOHelper, True)
        ADOHelper.RenderToFile(System.IO.Path.Combine(Me.Location, "Utility\ADOHelper.vb"), strategy)
    End If
End Sub

</script>