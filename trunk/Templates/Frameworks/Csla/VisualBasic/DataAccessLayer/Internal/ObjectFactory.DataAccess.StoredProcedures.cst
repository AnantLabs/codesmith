<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated Using CSLA 3.8.x CodeSmith Templates.
'     Changes to this template will not be lost.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http:'code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
<% RegisterReferences() %>
#Region "Using declarations"

Imports System
Imports System.Data
Imports System.Data.SqlClient

Imports Csla
Imports Csla.Data
Imports Csla.Server

Imports <%= BusinessProjectName %>

#End Region

Public Partial Class <%= Entity.ClassName %>Factory
    Inherits ObjectFactory
<% If Not(IsReadOnlyBusinessObject) Then %>

    #Region "Create"

    ''' <summary>
    ''' Creates New <%= Entity.ClassName %> with default values.
    ''' </summary>
    ''' <Returns>New <%= Entity.ClassName %>.</Returns>
    <RunLocal()> _
    Public Function Create() As <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %> = Activator.CreateInstance(GetType(<%= Entity.ClassName %>), true)
        Using BypassPropertyChecks(item)
            ' Default values.

            CheckRules(item)
            MarkNew(item)
<% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
<% End If%>
        End Using

        Return item
    End Function

    ''' <summary>
    ''' Creates New <%= Entity.ClassName %> with default values.
    ''' </summary>
    ''' <Returns>New <%= Entity.ClassName %>.</Returns>
    <RunLocal()> _
    Private Function Create(ByVal criteria As <%= Entity.ClassName %>Criteria) As  <%= Entity.ClassName %>
        Dim resource As <%= Entity.ClassName %> = Fetch(criteria)
        Dim item As <%= Entity.ClassName %> = Activator.CreateInstance(GetType(<%= Entity.ClassName %>), true)
        Using BypassPropertyChecks(item)
<% For Each member As Member in Entity.MembersNoKeysOrRowVersion %>
            item.<%= member.PropertyName %> = resource.<%= member.PropertyName %>
<% Next %>
<% For Each member As AssociationMember in Entity.MembersForeignKey
    Dim columnName As String = member.ResolveManyToOneNameConflict(Entity) %>
            item.<%= CodeSmith.SchemaHelper.Util.NamingConventions.PropertyName(columnName) %> = resource.<%= member.LocalColumn.PropertyName %>
<% Next %>
        End Using

        MarkNew(resource)
<% If(IsChildBusinessObject) Then %>
        MarkAsChild(item)
<% End If%>
        Return item
    End Function

    #End Region
<% End If %>

    #Region "Fetch

    ''' <summary>
    ''' Fetch <%= Entity.ClassName %>.
    ''' </summary>
    ''' <param name="criteria">The criteria.</param>
    ''' <Returns></Returns>
    Public Function Fetch(ByVal criteria As <%= Entity.ClassName %>Criteria) As <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %>
        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand("<%= GetSelectStoredProcedureName() %>", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddRange(ADOHelper.WhereSqlParameters(criteria.StateBag))
                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    If reader.Read() Then
                        item = Map(reader)
                    Else
                        Throw New Exception(String.Format("The record was not found in '<%= entity.Table.Name %>' using the following criteria: {0}.", criteria))
                    End If
                End Using
            End Using
        End Using

        MarkOld(item)
<% If(IsChildBusinessObject) Then %>
        MarkAsChild(item)
<% End If %>
        Return item
    End Function

    #End Region

<% If Not(IsReadOnlyBusinessObject) Then %>
    #Region "Insert"

    Private Sub DoInsert(ByVal item As <%= Entity.ClassName %><% If(Entity.ManyToOne.Count > 0) Then %>, <%= Entity.ManyToOne.BuildChildInsertParametersVariables() %><% End If %>)
        ' Don't update If the item isn't dirty.
        If Not (item.IsDirty) Then
            Return
        End If

        Using BypassPropertyChecks(item)
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("<%= GetInsertStoredProcedureName() %>", connection)
                    command.CommandType = CommandType.StoredProcedure
<% If(Entity.ManyToOne.Count > 0) Then %>
                    <%= entity.MembersNoRowVersionNoForeignKeyIncludePrimaryKey.BuildInsertCommandParameters(Entity.MembersForeignKey, true) %>
<% Else %>
                    <%= entity.MembersNoRowVersionIncludePrimaryKey.BuildInsertCommandParameters(Entity.MembersForeignKey, true) %>
<% End If %>
                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        If reader.Read() Then
<% If (Entity.HasRowVersionMember) Then %>
                            '_timestamp = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
<% End If %>

<% If (Entity.PrimaryKey.IsIdentity) Then %>
<% for each [member] As Member in Entity.PrimaryKey.KeyMembers %>
                            'item.<%= [member].PropertyName %> = <%If Not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>ADOHelper.GetBytes(reader)<% End If %>
<% Next %>
<% End If %>
                        End If
                    End Using
                End Using
            End Using

            ' Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% For Each association As AssociationMember in Entity.OneToZeroOrOne %>
            'New <%= association.ClassName %>Factory().Update(item.<%= association.PropertyName %>, item)
<% Next %>
<%-- Many-To-One --%>
<% For Each association As AssociationMember in Entity.ManyToOne %>
            'New <%= association.ClassName %>Factory().Update(item.<%= association.PropertyName %>, item)
<% Next %>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As AssociationMember in Entity.OneToMany %>
            'New <%= association.ClassName %>Factory().Update(item.<%= association.PropertyName %>, item)
<% Next %>
        End Using

        MarkOld(item)
    End Sub

    #End Region

    #Region "Update"

    <Transactional(TransactionalTypes.TransactionScope)> _
    Public Function Update(ByVal item As <%= Entity.ClassName %><% If(Entity.ManyToOne.Count > 0) Then %>, <%= Entity.ManyToOne.BuildChildInsertParametersVariables() %><% End If %>) As <%= Entity.ClassName %> 
        If(item.IsDeleted) Then
            DoDelete(item)
        Else If(item.IsNew) Then
            DoInsert(item<% If(Entity.ManyToOne.Count > 0) Then %>, <%= Entity.ManyToOne.BuildVariableArguments() %><% End If %>)
        Else
           DoUpdate(item)
        End If

        Return item
    End Function

    Private Sub DoUpdate(ByVal item As <%= Entity.ClassName %>)
        ' Don't update If the item isn't dirty.
        If Not (item.IsDirty) Then
            Return
        End If

        Using BypassPropertyChecks(item)
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("<%= GetUpdateStoredProcedureName() %>", connection)
                    command.CommandType = CommandType.StoredProcedure
<% If (entity.Table.ForeignKeyColumns.Count = 0) Then %>
                    <%= entity.MembersNoRowVersionIncludePrimaryKey.BuildCommandParameters(true) %>
<% Else %>
                    <%= entity.MembersNoRowVersionIncludePrimaryKey.BuildCommandParameters(entity.MembersForeignKey, true) %>
<% End If %>
<% If (entity.HasRowVersionMember) Then %>
                    command.Parameters.AddWithValue("@p_<%= entity.RowVersionMember.ColumnName %>", _timestamp)
<% End If %>

                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        If reader.RecordsAffected = 0 Then
                            Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                        End If
<% If (Entity.HasRowVersionMember) Then %>

                        If reader.Read() then
                            _timestamp = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
                        End If
<% End If %>
                    End Using
                End Using
            End Using

            ' Update Child Items.
<%-- One-To-Zero-Or-One --%>
<% For Each association As AssociationMember in Entity.OneToZeroOrOne %>
            'New <%= association.ClassName %>Factory().Update(item.<%= association.PropertyName %>, item)
<% Next  %>
<%-- Many-To-One --%>
<% For Each association As AssociationMember in Entity.ManyToOne %>
            'New <%= association.ClassName %>Factory().Update(item.<%= association.PropertyName %>, item)
<% Next %>
<%-- One-To-Many & Many-To-Many --%>
<% For Each association As AssociationMember in Entity.OneToMany%>
            'New <%= association.ClassName %>Factory().Update(item.<%= association.PropertyName %>, item)
<% Next  %>

            MarkOld(item)
        End Using
    End Sub

    #End Region

    #Region "Delete"

    <Transactional(TransactionalTypes.TransactionScope)> _
    Public Function Delete(ByVal criteria As <%= Entity.ClassName %>Criteria)
        DoDelete(criteria)
    End Function

    Protected Sub DoDelete(ByVal item As <%= Entity.ClassName %>)
        ' If we're not dirty then don't update the database.
        If Not (item.IsDirty) Then
            Return
        End If

        ' If we're New then don't call delete.
        If (item.IsNew) Then
            Return
        End If

        Dim criteria As New <%= BusinessClassName %>Criteria()
<% For Each member As MemberBase In Entity.GetUniqueSearchCriteriaMembers() %>
        criteria.<%= member.BuildCriteriaObjectInitializer(Entity.Table.Name, true) %>
<% Next %>
        DoDelete(criteria)

        MarkNew(item)
    End Sub

    Private Sub DoDelete(ByVal criteria As <%= Entity.ClassName %>Criteria)
        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand("<%= GetDeleteStoredProcedureName() %>", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddRange(ADOHelper.WhereSqlParameters(criteria.StateBag))
                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    'RecordsAffected: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    If reader.RecordsAffected = 0 Then
                        Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
                End Using
            End Using
        End Using
    End Sub

    #End Region
<% End If %>

    #Region "Helper Methods"

    Private Function Map(ByVal reader As SafeDataReader) As <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %> = Activator.CreateInstance(GetType(<%= Entity.ClassName %>), true)
        Using BypassPropertyChecks(item)
<% If Entity.HasRowVersionMember Then %>
            '_timestamp = ADOHelper.GetBytes(reader, "<%= Entity.RowVersionMember.ColumnName %>")
<% End If %>
<% for each [member] as Member in Entity.MembersNoRowVersionIncludePrimaryKey %>
            item.<%= [member].PropertyName %> = <%If not [member].HasByteArrayColumn() Then %>reader.<%= [member].GetReaderMethod() %>("<%= [member].ColumnName %>")<% else %>ADOHelper.GetBytes(reader)<% End If %>
<% Next %>
<%-- Many-To-One --%>
<% for each association As AssociationMember in Entity.ManyToOne %>
            item.<%= association.Entity.ResolveCriteriaPropertyName(association.ColumnName) %> = <%If Not association.HasByteArrayColumn() Then %>reader.<%= association.GetReaderMethod() %>("<%= association.ColumnName %>")<% else %>ADOHelper.GetBytes(reader)<% End If %>
<%Next  %>
<%-- One-To-Many & Many-To-Many --%>
<% for each association2 As AssociationMember in Entity.ToManyUnion %>
            item.<%= association2.PropertyName %> = New <%= association2.ClassName %>List.NewList()
<%Next %> 
        End Using

        Return item
    End Function

    #End Region
End Class