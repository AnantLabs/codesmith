<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X DataAccessLayer" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this template will not be lost.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
<% RegisterReferences() %>
#Region "Using declarations"

Imports System

Imports Csla
Imports Csla.Data
Imports Csla.Server

Imports <%= BusinessProjectName %>

#End Region

Public Function Partial class <%= Entity.ClassName %>Factory
    Inherits ObjectFactory
<% If Not(IsReadOnlyBusinessObject) Then %>
    #Region "Create"

    ''' <summary>
    ''' Creates new <%= Entity.ClassName %> with default values.
    ''' </summary>
    ''' <Returns>new <%= Entity.ClassName %>.</Returns>
    <RunLocal()> _
    Public Function Create() As <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %> = (<%= Entity.ClassName %>)Activator.CreateInstance(typeof(<%= Entity.ClassName %>), True)

        Dim cancel As Boolean = False
        OnCreating(cancel)
        If (cancel) Then
            Return
        End If

        Using BypassPropertyChecks(item)
            ' Default values.

            CheckRules(item)
            MarkNew(item)
<% If(IsChildBusinessObject) Then %>
            MarkAsChild(item)
<% End If %>
        End Using

        OnCreated()

        Return item
    End Function

    ''' <summary>
    ''' Creates new <%= Entity.ClassName %> with default values.
    ''' </summary>
    ''' <Returns>new <%= Entity.ClassName %>.</Returns>
    <RunLocal()> _
    Private Create(ByVal criteria As <%= Entity.ClassName %>Criteria) As <%= Entity.ClassName %>
        'Dim resource As <%= Entity.ClassName %> = <%= Entity.ClassName %>.Get<%= Entity.ClassName %>(<%= Entity.PrimaryKey.KeyMembers.BuildParametersVariables() %>)
        Dim item As <%= Entity.ClassName %> = (<%= Entity.ClassName %>)Activator.CreateInstance(typeof(<%= Entity.ClassName %>), True)

        Dim cancel As Boolean = False
        OnCreating(cancel)
        If (cancel) Then
            Return
        End If

        Using BypassPropertyChecks(item)
<% For Each member As Member in Entity.MembersNoRowVersion %>
            'item.<%= member.PropertyName %> = resource.<%= member.PropertyName %>
<% Next %>
        End Using

        CheckRules(item)
        MarkNew(resource)
<% If(IsChildBusinessObject) Then %>
        MarkAsChild(item)
<% End If %>

        OnCreated()

        Return item
    End Function

    #End Region

<% End If %>
    #Region "Fetch"

    ''' <summary>
    ''' Fetch <%= Entity.ClassName %>.
    ''' </summary>
    ''' <param name="criteria">The criteria.</param>
    ''' <Returns></Returns>
    Public Function Fetch(ByVal criteria As <%= Entity.ClassName %>Criteria) As <%= Entity.ClassName %>
        Dim item As <%= Entity.ClassName %> = Nothing
        
        Dim cancel As Boolean = False
        OnFetching(criteria, cancel)
        If (cancel) Then
            Return item
        End If

        MarkOld(item)
<% If(IsChildBusinessObject) Then %>
        MarkAsChild(item)
<% End If %>

        OnFetched()

        Return item
    End Function

    #End Region
<% If Not(IsReadOnlyBusinessObject) Then %>

    #Region "Update"

    <Transactional(TransactionalTypes.TransactionScope)> _
    Public Function Update(ByVal item As <%= Entity.ClassName %>, ByVal stopProccessingChildren as Boolean) As <%= Entity.ClassName %>
        Return Update(item, false)
    End Function

    Public Function Update(ByVal item As <%= Entity.ClassName %>) As <%= Entity.ClassName %>
        If(item.IsDeleted) Then
            'DoDelete(item)
            MarkNew(item)
        Else If(item.IsNew) Then
            'DoInsert(item, stopProccessingChildren)
        Else
            'DoUpdate(item, stopProccessingChildren)
        End If

        Return item
    End Function

    #End Region

    #Region "Delete"

    <Transactional(TransactionalTypes.TransactionScope)> _
    Public Sub Delete(ByVal criteria As <%= Entity.ClassName %>Criteria)
        ' Delete data here.
    End Sub

    #End Region
<% End If %>
End Class