<%@ CodeTemplate Language="VB" TargetLanguage="VB" Inherits="QuickStart.DataCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="CSLA 3.8.X DataAccessLayer" %>
<%@ Register Name="PartialMethods" Template="..\..\Common\ListDataPortalPartialMethods.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.Extensions" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="QuickStart" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using <%= VersionInfo %>.
'     Changes to this template will not be lost.
'
'     Template: <%= CodeTemplateInfo.FileName %>
'     Template website: http:'code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
<% RegisterReferences() %>
#Region "Using declarations"

Imports System
Imports System.Data
Imports System.Data.SqlClient

Imports Csla
Imports Csla.Data
Imports Csla.Server

Imports <%= BusinessProjectName %>

#End Region

Public Partial Class <%= Entity.ClassName %>ListFactory
    Inherits ObjectFactory
<% If Not(IsReadOnlyBusinessObject) Then %>

    #Region "Create"

    ''' <summary>
    ''' Creates New <%= Entity.ClassName %>List with default values.
    ''' </summary>
    ''' <Returns>New <%= Entity.ClassName %>List.</Returns>
    <RunLocal()> _
    Public Function Create() As <%= Entity.ClassName %>List
        Dim item As <%= Entity.ClassName %>List = Activator.CreateInstance(GetType(<%= Entity.ClassName %>List), True)

        Dim cancel As Boolean = False
        OnCreating(cancel)
        If (cancel) Then
            Return item
        End If

        CheckRules(item)
        MarkNew(item)
<% If(IsChildBusinessObject) Then %>
        MarkAsChild(item)
<% End If%>

        OnCreated()

        Return item
    End Function

    #End Region
<% End If %>

    #Region "Fetch

    ''' <summary>
    ''' Fetch <%= Entity.ClassName %>List.
    ''' </summary>
    ''' <param name="criteria">The criteria.</param>
    ''' <Returns></Returns>
    Public Function Fetch(ByVal criteria As <%= Entity.ClassName %>Criteria) As <%= Entity.ClassName %>List
        Dim item As <%= Entity.ClassName %>List = Activator.CreateInstance(GetType(<%= Entity.ClassName %>List), True)

        Dim cancel As Boolean = False
        OnFetching(criteria, cancel)
        If (cancel) Then
            Return item
        End If

        ' Fetch Child objects.
        Using connection As New SqlConnection(ADOHelper.ConnectionString)
            connection.Open()
            Using command As New SqlCommand("<%= GetSelectStoredProcedureName() %>", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
                Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                    If reader.Read() Then
<% If(IsReadOnlyBusinessObject) Then %>
                        SetIsReadOnly(item, False)
<% End If %>
                        Do
                            item.Add(new <%= ChildBusinessClassName %>Factory().Map(reader))
                        Loop While reader.Read()
<% If(IsReadOnlyBusinessObject) Then %>
                        SetIsReadOnly(item, True)
<% End If %>
                    Else
                        Throw New Exception(String.Format("The record was not found in '<%= entity.Table.Name %>' using the following criteria: {0}.", criteria))
                    End If
                End Using
            End Using
        End Using

        MarkOld(item)
<% If(IsChildBusinessObject) Then %>
        MarkAsChild(item)
<% End If %>

        OnFetched()

        Return item
    End Function

    #End Region

<% RenderHelper(New PartialMethods()) %>
End Class