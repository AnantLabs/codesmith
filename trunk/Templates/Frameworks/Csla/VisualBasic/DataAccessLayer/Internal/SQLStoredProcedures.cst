<%--------------------------------------------------------------------------------------------------------------
* Author: Eric J. Smith
* Modified By: Blake Niemyjski
* Description: This template will generate standard CRUD stored procedures for a given database table.
--------------------------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Language="VB"  TargetLanguage="T-SQL"  Inherits="Generator.CSLA.DataCodeTemplate" %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.VisualBasicExtensions" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.CSLA" Path="..\..\..\Common" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.CSLA" %>
<%
' this template requires a primary key on the source table
If Not Entity.HasKey Then
    Throw New ApplicationException("Entity does not contain a key.")
End If

' generate drop statements
Response.WriteLine("--region Drop Existing Procedures")
Response.WriteLine("")

If (IncludeInsert) Then
    GenerateDropStatement(GetInsertStoredProcedureShortName())
End If

If (IncludeUpdate) Then
    GenerateDropStatement(GetUpdateStoredProcedureShortName())
End If

If (IncludeDelete) Then
    GenerateDropStatement(GetDeleteStoredProcedureShortName())
End If

GenerateDropStatement(GetSelectStoredProcedureShortName())

Response.WriteLine("--endregion")
Response.WriteLine("")
Response.WriteLine("GO")
Response.WriteLine("")
%>
<% If (IncludeInsert) Then %>
<%------------------------------------------------------------------------------------------
*
* Insert Procedure
*
------------------------------------------------------------------------------------------%>
<% GenerateProcedureHeader(GetInsertStoredProcedureName()) %>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetInsertStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetInsertStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetInsertStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customized. Please review and remove the prop if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

<%   ' Check to see If the primary key is a single prop primary key and also If it's either an
     ' identity prop or a GUID.  If so, we will not include the primary key prop In the
     ' list of input parameters.

    If (HasGuidOrIdentityColumn(Entity.Key)) Then
%>

CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
<% GenerateParameter(Entity.ConcurrencyProperty, 1, true, false, true, true) %>,
<% End If %>
<% GenerateParameters(Entity.GetProperties(PropertyType.NoKey), 1, true, false) %>
<%-- Loop through all primary keys. --%>
<% If(Entity.HasKey) Then %>
<% For Each prop As Object In Entity.GetProperties(PropertyType.Key).AsIndexedEnumerable()
    GenerateParameter(prop.Value, 1, False, prop.IsLast, IsGuidOrIdentityColumn(prop.Value) AndAlso Not prop.Value.IsType(PropertyType.Foreign), False, False)
Next 
End If %>

AS

<%-- Loop through all primary keys. If the primary key is a GUID, then assign a new GUID using NEWID(). --%>
<% If(Entity.HasKey) Then %>
<% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
 If (prop.IsDbType(DbType.Guid) AndAlso Not prop.IsType(PropertyType.Foreign)) Then %>
SET <%= ParameterPrefix %><%= prop.KeyName %> = NEWID()

<% End If
Next 
End If%>
INSERT INTO [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] (
<% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
    If (prop.IsDbType(DbType.Guid) Or Not IsIdentityColumn(prop)) Then %>
    [<%= prop.KeyName %>],
    <% End If 
Next %>
    <% GenerateColumns(Entity.GetProperties(PropertyType.NoKey), 1, false) %>

) VALUES (
<% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
    If (prop.IsDbType(DbType.Guid) Or Not IsIdentityColumn(prop)) Then %>
    <%= ParameterPrefix %><%= prop.KeyName %>,
    <% End If 
Next %>
    <% GenerateVariables(Entity.GetProperties(PropertyType.NoKey), 1, false) %>
)

<%-- If the primary key is an identity prop, then capture the newly assigned identity using SCOPE_IDENTITY(). --%>
<% For Each prop As IProperty In Entity.GetProperties(PropertyType.Key)
    If (IsIdentityColumn(prop)) Then %>
SET <%= ParameterPrefix %><%= prop.KeyName %> = SCOPE_IDENTITY()
<% End If
Next %>

<% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
SET <%= ParameterPrefix %><%= Entity.ConcurrencyProperty.KeyName %> = (SELECT [<%= Entity.ConcurrencyProperty.KeyName %>] FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] WHERE <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, false) %>)
<% End If %>

<%-- Primary key is not a identity prop or a GUID, so include all columns as input parameters. --%>
<% Else %>

CREATE PROCEDURE <%= GetInsertStoredProcedureName() %>
<% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
<% GenerateParameter(Entity.ConcurrencyProperty, 1, true, false, true, true) %>,
<% End If %>
<% GenerateParameters(Entity.Properties, 1, false) %>

AS

SET NOCOUNT ON
INSERT INTO [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] (
    <% GenerateColumns(Entity.Properties, 1, false) %>
) VALUES (
    <% GenerateVariables(Entity.Properties, 1, false) %>
)

<% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
SET <%= ParameterPrefix %><%= Entity.ConcurrencyProperty.KeyName %> = (SELECT [<%= Entity.ConcurrencyProperty.KeyName %>] FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] WHERE <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, false) %>)
<% End If %>
<% End If %>

GO
IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetInsertStoredProcedureName()) %>
<% End If %>
<% If (IncludeUpdate) Then %>
<%------------------------------------------------------------------------------------------
*
* Update Procedure
*
------------------------------------------------------------------------------------------%>
<% GenerateProcedureHeader(GetUpdateStoredProcedureName()) %>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetUpdateStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetUpdateStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetUpdateStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customized. Please review and remove the prop if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetUpdateStoredProcedureName() %>
<% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
<% GenerateParameter(Entity.ConcurrencyProperty, 1, true, false, true, true) %>,
<% End If %>
<% GenerateParameters(Entity.Properties, 1, false, false, false, true) %>

AS

UPDATE [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] SET
    <% GenerateUpdates(Entity.Properties, 1, false) %>

WHERE
    <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, true) %>
<% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
    <% GenerateCondition(Entity.ConcurrencyProperty, 1, false, true, false) %>
<% End If %>

<% If Not(Entity.ConcurrencyProperty Is Nothing) Then %>
SET <%= ParameterPrefix %><%= Entity.ConcurrencyProperty.KeyName %> = (SELECT [<%= Entity.ConcurrencyProperty.KeyName %>] FROM [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>] WHERE <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, false) %>)
<% End If %>

GO
IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetUpdateStoredProcedureName()) %>
<% End If %>
<% If (IncludeDelete) Then %>
<%------------------------------------------------------------------------------------------
*
* Delete Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetDeleteStoredProcedureName())
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetDeleteStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetDeleteStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetDeleteStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customized. Please review and remove the prop if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetDeleteStoredProcedureName() %>
<% GenerateParameters(Entity.GetProperties(PropertyType.Key), 1, false) %>

AS

DELETE FROM
    [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>]
WHERE
    <% GenerateConditions(Entity.GetProperties(PropertyType.Key), 1, false) %>

GO
IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetDeleteStoredProcedureName()) %>
<% End If %>
<%------------------------------------------------------------------------------------------
*
* Select Procedure
*
------------------------------------------------------------------------------------------%>
<%
    GenerateProcedureHeader(GetSelectStoredProcedureName())
%>

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

PRINT N'Creating <%= GetSelectStoredProcedureName() %>'
GO

IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '<%= GetSelectStoredProcedureShortName() %>', default, default) WHERE name = 'CustomProcedure' and value = '1')
    BEGIN
        RAISERROR ('The procedure <%= GetSelectStoredProcedureName() %> has an Extended Property "CustomProcedure" which means is has been customized. Please review and remove the prop if you wish to create the stored procedure.',16,1)
        INSERT INTO #tmpErrors (Error) SELECT 1
    END
GO

CREATE PROCEDURE <%= GetSelectStoredProcedureName() %>
<% GenerateParameters(Entity.Properties, 1, false, false, true) %>

AS

<% GenerateSetTransactionIsolationLevelStatement(IsolationLevel) %>

SELECT
    <% GenerateColumns(Entity.Properties, 1, true) %>

FROM
    [<%= Entity.SchemaName %>].[<%= Entity.EntityKeyName %>]
WHERE
    <% GenerateFindConditions(Entity.Properties, 1) %>

GO
IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION
GO

IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT 'Stored procedure creation succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT 'Stored procedure creation failed.'
GO
DROP TABLE #tmpErrors
GO

<% GenerateProcedureFooter(GetSelectStoredProcedureName()) %>
<script runat="template">

Private _droppedProcedureNames As New StringCollection()
Private _generatedProcedureNames As New StringCollection()

Public Sub GenerateSetTransactionIsolationLevelStatement(ByVal isolationLevel As TransactionIsolationLevelEnum)
    Response.Write("SET TRANSACTION ISOLATION LEVEL ")

    Select Case isolationLevel
        Case TransactionIsolationLevelEnum.ReadUncommitted
            If True Then
                Response.WriteLine("READ UNCOMMITTED")
                Exit Select
            End If
        Case TransactionIsolationLevelEnum.RepeatableRead
            If True Then
                Response.WriteLine("REPEATABLE READ")
                Exit Select
            End If
        Case TransactionIsolationLevelEnum.Serializable
            If True Then
                Response.WriteLine("SERIALIZABLE")
                Exit Select
            End If
        Case Else
            If True Then
                Response.WriteLine("READ COMMITTED")
                Exit Select
        End If
    End Select
End Sub

#Region "Code Generation Helpers"

Public Sub GenerateDropStatement(ByVal procedureName As String)
    ' check to see if this procedure has already been dropped.
    If Not _droppedProcedureNames.Contains(procedureName) Then
        Response.WriteLine("SET NUMERIC_ROUNDABORT OFF")
        Response.WriteLine("GO")
        Response.WriteLine("SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON")
        Response.WriteLine("GO")
        Response.WriteLine("IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors")
        Response.WriteLine("GO")
        Response.WriteLine("CREATE TABLE #tmpErrors (Error int)")
        Response.WriteLine("GO")
        Response.WriteLine("SET XACT_ABORT ON")
        Response.WriteLine("GO")
        Response.WriteLine("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE")
        Response.WriteLine("GO")
        Response.WriteLine("BEGIN TRANSACTION")
        Response.WriteLine("GO")
        
        Response.WriteLine("PRINT N'Dropping {0}'", procedureName)
        Response.WriteLine("GO")
        
        Response.WriteLine("IF EXISTS(SELECT 1 FROM fn_listextendedproperty (NULL, 'SCHEMA', 'dbo', 'PROCEDURE', '{0}', default, default) WHERE name = 'CustomProcedure' and value = '1')", procedureName)
        Response.WriteLine("BEGIN")
        Response.WriteLine("    RAISERROR ('The procedure {0} has an Extended Property ""CustomProcedure"" which means is has been customised. Please review and remove the prop if you wish to drop the procedure.',16,1)", procedureName)
        Response.WriteLine("    INSERT INTO #tmpErrors (Error) SELECT 1")
        Response.WriteLine("END")
        Response.WriteLine("GO")
        Response.WriteLine("")
        
        Response.WriteLine("IF OBJECT_ID(N'{0}') IS NOT NULL", procedureName)
        GenerateIndent(1)
        Response.WriteLine("DROP PROCEDURE {0}", procedureName)
        Response.WriteLine("")
        
        Response.WriteLine("GO")
        Response.WriteLine("IF @@ERROR!=0 AND @@TRANCOUNT>0 ROLLBACK TRANSACTION")
        Response.WriteLine("GO")
        Response.WriteLine("")
        Response.WriteLine("IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END")
        Response.WriteLine("GO")
        Response.WriteLine("")
        Response.WriteLine("IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION")
        Response.WriteLine("GO")
        Response.WriteLine("")
        Response.WriteLine("IF @@TRANCOUNT>0 BEGIN")
        Response.WriteLine("PRINT 'The stored procedure drop has succeeded'")
        Response.WriteLine("COMMIT TRANSACTION")
        Response.WriteLine("END")
        Response.WriteLine("ELSE PRINT 'The stored procedure drop has failed'")
        Response.WriteLine("GO")
        Response.WriteLine("")
        Response.WriteLine("DROP TABLE #tmpErrors")
        Response.WriteLine("GO")

        ' add this procedure to the list of dropped procedures
        _droppedProcedureNames.Add(procedureName)
    End If
End Sub

Public Sub GenerateProcedureHeader(ByVal procedureName As String)
    Response.WriteLine("--region {0}", procedureName)
    Response.WriteLine("")
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------")
    Response.WriteLine("-- Generated By:   {0} using {1}", System.Environment.UserName, VersionInfo)
    Response.WriteLine("-- Procedure Name: {0}", procedureName)
    Response.WriteLine("------------------------------------------------------------------------------------------------------------------------")
End Sub

Public Sub GenerateProcedureFooter(ByVal procedureName As String)
    Response.WriteLine("--endregion")
    Response.WriteLine("")
    Response.WriteLine("GO")
    Response.WriteLine("")
End Sub

Public Sub GenerateIndent(ByVal indentLevel As Integer)
    For i As Integer = 0 To indentLevel - 1
        Response.Write(ControlChars.Tab)
    Next
End Sub

Public Sub GenerateParameter(ByVal prop As IProperty, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeTimeStamp As Boolean)
    GenerateParameter(prop, indentLevel, isFirst, isLast, False, includeTimeStamp)
End Sub

Public Sub GenerateParameter(prop As IProperty, indentLevel As Integer, isFirst As Boolean, isLast As Boolean, isOutput As Boolean, includeTimeStamp As Boolean)
    GenerateParameter(prop, indentLevel, isFirst, isLast, isOutput, includeTimeStamp, False)
End Sub

Public Sub GenerateParameter(ByVal prop As IProperty, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal isOutput As Boolean, ByVal includeTimeStamp As Boolean, ByVal makeParametersNullable As Boolean)
    GenerateParameter(prop, indentLevel, isFirst, isLast, isOutput, includeTimeStamp, makeParametersNullable, False)
End Sub

Public Sub GenerateParameter(ByVal prop As IProperty, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal isOutput As Boolean, ByVal includeTimeStamp As Boolean, ByVal makeParametersNullable As Boolean, ByVal includeOriginalParam As Boolean)
    If (ColumnIsIgnored(prop) OrElse (Not includeTimeStamp AndAlso prop.IsType(PropertyType.Concurrency))) Then
        Exit Sub
    End If
    
    If Not isFirst Then
        Response.Write(",")
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    End If
    
    ' Is Guid prop.
    If(includeOriginalParam AndAlso prop.IsDbType(DbType.Guid) AndAlso prop.IsType(PropertyType.Key) AndAlso Not prop.IsType(PropertyType.Foreign)) Then
        isOutput = True
    End If
    
    GenerateIndent(indentLevel)
    Response.Write(GetSqlParameterStatement(prop, isOutput))
    If makeParametersNullable Then
        Response.Write(" = NULL")
    End If

    If makeParametersNullable AndAlso prop.IsNullable Then
        Response.Write(String.Format("," & vbCr & vbLf & vbTab & "{0}{1}HasValue BIT = 0", ParameterPrefix, prop.KeyName))
    End If

    If includeOriginalParam AndAlso prop.IsType(PropertyType.Key) AndAlso Not prop.IsType(PropertyType.Identity) Then
        Response.Write(",")
    
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    
        GenerateIndent(indentLevel)
        Response.Write(GetSqlParameterStatement(prop, False, includeOriginalParam))
    End If
End Sub

Public Function GetSqlParameterStatement(ByVal prop As IProperty, ByVal isOutput As Boolean) As String
    Return GetSqlParameterStatement(prop, isOutput, False)
End Function

Public Function GetSqlParameterStatement(ByVal props As IProperty, ByVal isOutput As Boolean, ByVal includeOriginalParam As Boolean) As String
    If (TypeOf props Is ISchemaProperty) = False Then
        Throw New ArgumentException("prop must be of type IProperty", "prop")
    End If

    Dim prop = DirectCast(props, ISchemaProperty)

    Dim param As String = String.Format("{0}{1}{2} {3}", ParameterPrefix, If(includeOriginalParam, "Original", ""), prop.KeyName, prop.NativeType)
    If Not IsUserDefinedType(prop) And Not prop.IsType(PropertyType.Concurrency) Then
        Select Case prop.DataType
            Case DbType.[Decimal]
                If True Then
                    param += String.Format("({0}, {1})", prop.Precision, prop.Scale)
                    Exit Select
                End If
            Case DbType.Binary, DbType.AnsiString, DbType.AnsiStringFixedLength, DbType.String, DbType.StringFixedLength
                If True Then
                    If prop.NativeType <> "text" AndAlso prop.NativeType <> "ntext" Then
                        If prop.Size > 0 Then
                            param += String.Format("({0})", prop.Size)
                        ElseIf prop.Size = -1 Then
                            param += "(max)"
                        End If
                    End If
                    Exit Select
                End If
        End Select
    End If
    
    If isOutput Then
        param += " OUTPUT"
    End If
    
    Return param
End Function

''' <summary>
''' Determine if the given prop is using a UDT.
''' </summary>
''' <param name="prop"></param>
''' <returns></returns>
Public Function IsUserDefinedType(ByVal prop As IProperty) As Boolean
    If prop.ExtendedProperties.ContainsKey("CS_UserDefinedType") Then
        Return True
    End If

    Return False
End Function

Public Sub GenerateParameters(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    GenerateParameters(columns, indentLevel, False, includeTimeStamp)
End Sub

Public Sub GenerateParameters(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer, ByVal includeTrailingComma As Boolean, ByVal includeTimeStamp As Boolean)
    GenerateParameters(columns, indentLevel, includeTrailingComma, includeTimeStamp, False)
End Sub

Public Sub GenerateParameters(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer, ByVal includeTrailingComma As Boolean, ByVal includeTimeStamp As Boolean, ByVal makeParametersNullable As Boolean)
    GenerateParameters(columns, indentLevel, includeTrailingComma, includeTimeStamp, makeParametersNullable, False)
End Sub

Public Sub GenerateParameters(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer, ByVal includeTrailingComma As Boolean, ByVal includeTimeStamp As Boolean, ByVal makeParametersNullable As Boolean, ByVal includeOriginalParam As Boolean)
    For Each prop As Object In columns.AsIndexedEnumerable()
        GenerateParameter(prop.Value, indentLevel, prop.IsFirst, prop.IsLast AndAlso Not includeTrailingComma, False, includeTimeStamp, makeParametersNullable, includeOriginalParam)
    Next
End Sub

Public Sub GenerateColumn(ByVal prop As IProperty, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeTimeStamp As Boolean)
    If (ColumnIsIgnored(prop) OrElse (Not includeTimeStamp AndAlso prop.IsType(PropertyType.Concurrency))) Then
        Exit Sub
    End If
    
    If Not isFirst Then
        Response.Write(",")
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    End If
    GenerateIndent(indentLevel)
    Response.Write("[")
    Response.Write(prop.KeyName)
    Response.Write("]")
End Sub

Public Sub GenerateColumns(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    For Each prop As Object In columns.AsIndexedEnumerable()
        GenerateColumn(prop.Value, indentLevel, prop.IsFirst, prop.IsLast, includeTimeStamp)
    Next
End Sub

Public Sub GenerateUpdate(ByVal prop As IProperty, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeTimeStamp As Boolean)
    If (ColumnIsIgnored(prop) OrElse (Not includeTimeStamp AndAlso prop.IsType(PropertyType.Concurrency))) Then
        Exit Sub
    End If
    
    If Not isFirst Then
        Response.Write(",")
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    End If
    
    GenerateIndent(indentLevel)
    Response.Write("[")
    Response.Write(prop.KeyName)
    Response.Write("] = ")
    Response.Write(ParameterPrefix)
    Response.Write(prop.KeyName)
End Sub

Public Sub GenerateUpdates(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    Dim isFirst As Boolean = True
    For Each prop As Object In columns.AsIndexedEnumerable()
        If prop.Value.IsType(PropertyType.Key) AndAlso prop.Value.IsType(PropertyType.Identity) Then
            Continue For
        End If

        GenerateUpdate(prop.Value, indentLevel, isFirst, prop.IsLast, includeTimeStamp)
        isFirst = False
    Next
End Sub

Public Sub GenerateCondition(ByVal prop As IProperty, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeOriginal As Boolean)
    
    If (ColumnIsIgnored(prop)) Then
        Exit Sub
    End If
    
    GenerateIndent(indentLevel)
    If Not isFirst Then
        Response.Write("AND ")
    End If
    Response.Write("[")
    Response.Write(prop.KeyName)
    Response.Write("] = ")
    Response.Write(ParameterPrefix)

If includeOriginal AndAlso prop.IsType(PropertyType.Key) AndAlso prop.IsType(PropertyType.Identity) Then
    Response.Write("Original")
End If

    Response.Write(prop.KeyName)
    If indentLevel >= 0 Then
        Response.WriteLine("")
    ElseIf Not isLast Then
        Response.Write(" ")
    End If
End Sub

Public Sub GenerateConditions(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer)
    GenerateConditions(columns, indentLevel, false)
End Sub
Public Sub GenerateConditions(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer, ByVal includeOriginal As Boolean)
    For Each prop As Object In columns.AsIndexedEnumerable()
        GenerateCondition(prop.Value, indentLevel, prop.IsFirst, prop.IsLast, includeOriginal)
    Next
End Sub

Public Sub GenerateFindConditions(columns As IList(Of IProperty), indentLevel As Integer)
    For Each prop As Object In columns.AsIndexedEnumerable()
        GenerateFindCondition(prop.Value, indentLevel, prop.IsFirst, prop.IsLast)
    Next
End Sub

Public Sub GenerateFindCondition(prop As IProperty, indentLevel As Integer, isFirst As Boolean, isLast As Boolean)
    If ColumnIsIgnored(prop) OrElse Not IsColumnFindable(prop) Then
        Return
    End If

    GenerateIndent(indentLevel)
    If Not isFirst Then
        Response.Write("AND ")
    End If
    Response.Write("([")
    Response.Write(prop.KeyName)
    Response.Write("] = ")
    Response.Write(ParameterPrefix)
    Response.Write(prop.KeyName)
If prop.IsNullable Then
    Response.Write(" OR (")
    Response.Write(ParameterPrefix)
    Response.Write(prop.KeyName)
    Response.Write(" IS NULL AND ")
    Response.Write(ParameterPrefix)
    Response.Write(prop.KeyName)
    Response.Write("HasValue = 0))")
Else
    Response.Write(" OR ")
    Response.Write(ParameterPrefix)
    Response.Write(prop.KeyName)
    Response.Write(" IS NULL)")
End If

    If indentLevel >= 0 Then
        Response.WriteLine("")
    ElseIf Not isLast Then
        Response.Write(" ")
    End If
End Sub

Public Function IsColumnFindable(prop As IProperty) As Boolean
    If TypeOf prop Is ISchemaProperty Then
        Dim p = DirectCast(prop, ISchemaProperty)
        If p.DataType = DbType.Binary OrElse p.NativeType = "text" OrElse p.NativeType = "ntext" OrElse p.NativeType = "timestamp" OrElse p.NativeType = "image" OrElse p.NativeType = "xml" Then
            Return False
        End If
    End If

    Return True
End Function

''' <summary>
''' This method adds support for composite primary keys.
''' </summary>
''' <param name="key"></param>
''' <returns></returns>
Public Function HasGuidOrIdentityColumn(key As IKey) As Boolean
    For Each prop As IProperty In key.Properties
        If IsGuidOrIdentityColumn(prop) Then
            Return True
        End If
    Next
    
    Return False
End Function

Public Function IsGuidOrIdentityColumn(ByVal prop As IProperty) As Boolean
    If prop.IsDbType(DbType.Guid) OrElse IsIdentityColumn(prop) Then
        Return True
    End If
    
    Return False
End Function

Public Function IsIdentityColumn(ByVal prop As IProperty) As Boolean
    If prop Is Nothing Then
        Return False
    End If
    
    Dim correctDataType As Boolean = prop.IsDbType(DbType.Int16) OrElse prop.IsDbType(DbType.Int32) OrElse prop.IsDbType(DbType.Int64)
    If correctDataType AndAlso prop.IsType(PropertyType.Identity) Then
        Return True
    End If
    
    Return False
End Function


Public Sub GenerateVariable(ByVal prop As IProperty, ByVal indentLevel As Integer, ByVal isFirst As Boolean, ByVal isLast As Boolean, ByVal includeTimeStamp As Boolean)
    If (ColumnIsIgnored(prop) OrElse (Not includeTimeStamp AndAlso prop.IsType(PropertyType.Concurrency))) Then
        Exit Sub
    End If
    
    If Not isFirst Then
        Response.Write(",")
        If indentLevel >= 0 Then
            Response.WriteLine("")
        ElseIf Not isLast Then
            Response.Write(" ")
        End If
    End If
    GenerateIndent(indentLevel)
    Response.Write(ParameterPrefix)
    Response.Write(prop.KeyName)
End Sub

Public Sub GenerateVariables(ByVal columns As List(Of IProperty), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    For Each prop As Object In columns.AsIndexedEnumerable()
        GenerateVariable(prop.Value, indentLevel, prop.IsFirst, prop.IsLast, includeTimeStamp)
    Next
End Sub

Public Sub GenerateVariables(ByVal columns As IList(Of IProperty), ByVal indentLevel As Integer, ByVal includeTimeStamp As Boolean)
    For Each prop As Object In columns.AsIndexedEnumerable()
        GenerateVariable(prop.Value, indentLevel, prop.IsFirst, prop.IsLast, includeTimeStamp)
    Next
End Sub

Public Function ColumnIsIgnored(ByVal prop As IProperty) As Boolean
    Return CodeSmith.SchemaHelper.Configuration.Instance.ExcludeRegexIsMatch(prop.ToString())
End Function

#End Region

#Region "Events"

Protected Overloads Overrides Sub OnPostRender(ByVal result As String)
    If AutoExecuteStoredProcedures Then
        Dim connectionString As String = If(TypeOf Entity Is ISchemaEntity, DirectCast(Entity, ISchemaEntity).ConnectionString, Nothing)
        If Not String.IsNullOrEmpty(connectionString) Then
            ' execute the output on the same database as the source table.
            Dim scriptResult = CodeSmith.BaseTemplates.ScriptUtility.ExecuteScript(connectionString, result, New System.Data.SqlClient.SqlInfoMessageEventHandler(AddressOf cn_InfoMessage))
            Trace.WriteLine(scriptResult.ToString())
        End If
    End If

    MyBase.OnPostRender(result)
End Sub

Private Sub cn_InfoMessage(ByVal sender As Object, ByVal ex As System.Data.SqlClient.SqlInfoMessageEventArgs)
    Trace.WriteLine(ex.Message)
End Sub

#End Region
</script>