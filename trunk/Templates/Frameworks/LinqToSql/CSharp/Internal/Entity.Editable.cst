<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" 
    Description="Linq to Sql Entity Class." %>

<%@ Assembly Name="ICSharpCode.NRefactory" Path="..\..\Common" %>
<%@ Assembly Name="InsertClassMergeStrategy" Path="..\..\Common" %>
<%@ Assembly Name="Generator" Path="..\..\Common" %>
<%@ Assembly Name="Dbml" Path="..\..\Common" %>

<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="LinqToSqlShared.DbmlObjectModel" %>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="1.Mapping" Name="Database" 
    Type="LinqToSqlShared.DbmlObjectModel.Database" Optional="False" 
    Description="Database instance. Must be set by parent template" %>

<%@ Property Category="1.Mapping" Name="Type" 
    Type="LinqToSqlShared.DbmlObjectModel.Type" Optional="False" 
    Description="The Type instance for this entity. Must be set by parent template" %>

<%@ Property Category="2.Class" Name="Framework"
    Type="LinqToSqlShared.Generator.FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Which version of the .Net Framework is being generated for." %>

<%@ Property Category="2.Class" Name="ExistingFile"
    Type="CodeFileParser" Optional="True" %>

<%@ Map Name="CSharpAlias" 
    Src="System-CSharpAlias.csmap" Reverse="False" 
    Description="Convert system data types to c# alias" %>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
<%if(Framework == FrameworkEnum.v35_SP1){%>using System.ComponentModel.DataAnnotations;<%}%>

namespace <%= Database.EntityNamespace %>
{
    <%= Naming.GetModifier(Type.AccessModifier, Type.Modifier) %> partial class <%= Type.Name %>
    {
		// For more information about the features contained in this class, please visit our GoogleCode Wiki at...
		// http://code.google.com/p/codesmith/wiki/PLINQO
		// Also, you can watch our Video Tutorials at...
		// http://community.codesmithtools.com/
        
<%      if(Framework == FrameworkEnum.v35_SP1) { %>
        #region Metadata
        
        private class Metadata
        {
            // Only Attributes in the class will be preserved.
<%          AttributeSectionVisitor sourceAttributes = new AttributeSectionVisitor();
            if(ExistingFile!=null)
            {
                ExistingFile.CompilationUnit.AcceptVisitor(sourceAttributes, String.Concat(Type.Name, "MetaData"));
            } 
            foreach(Column column in Type.Columns)
            {
                if(sourceAttributes.PropertyMap.ContainsKey(column.Name))
                {
                    foreach (ICSharpCode.NRefactory.Ast.AttributeSection attributeSection in sourceAttributes.PropertyMap[column.Name].Attributes)
                    { %>
            <%= ExistingFile.GetSection(attributeSection.StartLocation, attributeSection.EndLocation) %>
<%                  }
                } %>

            public <%= CSharpAlias[column.Type] %> <%=column.Member%> { get; set; }
<%          } %>
        }
        
        #endregion
<%      } %>
    }
}
