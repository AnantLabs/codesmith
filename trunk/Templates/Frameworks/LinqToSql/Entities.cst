<%@ CodeTemplate Language="C#" TargetLanguage="XML" 
    Description="Generate Linq to Sql Class File" 
    Debug="True" OutputType="None" %>

<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="Microsoft.Build.Utilities" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Src="Internal\Common.cs" %>
<%@ Assembly Src="Internal\Schema.cs" %>
<%@ Assembly Src="Internal\Project.cs" %>

<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="DbmlSchema" %>

<%@ Property Category="2.Class" Name="OutputDirectory" 
    Type="System.String" Default="" Optional="True" 
    Description="The folder to save the generated files." 
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="1.Mapping" Name="DbmlFile" 
    Type="System.String" Default="Database.dbml" Optional="False" 
    Description="The full path to the mapping file." 
    Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Category="2.Class" Name="IncludeDataContract"
    Type="System.Boolean" Default="true" Optional="False"
    Description="Include WCF DataContract attributes." %>

<%@ Register Name="DataContextGeneratedClass" 
    Template="Internal\DataContext.Generated.cst" 
    MergeProperties="False" %>

<%@ Register Name="DataContextEditableClass" 
    Template="Internal\DataContext.Editable.cst" 
    MergeProperties="False" %>

<%@ Register Name="EntityBaseClass" 
    Template="Internal\Entity.Base.cst" 
    MergeProperties="False" %>

<%@ Register Name="EntityGeneratedClass" 
    Template="Internal\Entity.Generated.cst" 
    MergeProperties="False" %>

<%@ Register Name="EntityEditableClass" 
    Template="Internal\Entity.Editable.cst" 
    MergeProperties="False" %>



<script runat="template">
    private ProjectUpdater _project = null;
    
    internal ProjectUpdater Project
    {
        get
        {
            if (_project == null)
                _project = new ProjectUpdater(ProjectFile);
            
            return _project;
        }
    }
    
    private string _projectFile;
    
    [Category("3.Project")]
    [Description("Select the Visual Studio project file to update.")]
    [FileDialog(FileDialogType.Open, Title="Select Project File", Filter="Project Files (*.csproj)|*.csproj|All Files (*.*)|*.*", DefaultExtension=".csproj")]
    [Editor(typeof(CodeSmith.CustomProperties.FileNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
    [CodeSmith.Engine.Optional()]
    public string ProjectFile
    {
        get {return _projectFile;}
        set {_projectFile = value;}
    }
    
    public void Generate()
    {
        if (!Directory.Exists(this.OutputDirectory))
            Directory.CreateDirectory(this.OutputDirectory);

        Database database = DbmlSchema.DbmlFile.Load(this.DbmlFile);
        if (database == null)
            throw new Exception("Error loading Dbml file.");
            
        
        this.Progress.MaximumValue = (database.Tables.Count + 1) * 2;
        this.Progress.Step = 1;
        
        CreateEntityBaseClass(database);
        CreateDataContextClass(database);
        CreateEntityClasses(database);
        
        //if (database.Connection != null)
        //{
        //    Project.AddConnectionStringSetting(
        //        database.Connection.SettingsPropertyName,
        //        database.Connection.ConnectionString);
        //}
        
        //Project.AddNoneItem(DbmlFile);
        //Project.AddReferenceItem("System.Data.Linq", false);
        //Project.SaveProject();
    }
        
    public void CreateEntityBaseClass(Database database)
    {
        string fileName = database.EntityBase + ".cs";
        fileName = Path.Combine(OutputDirectory, fileName);
        
        if (File.Exists(fileName))
            return;
        
        EntityBaseClass t = this.Create<EntityBaseClass>();
        t.ClassNamespace = database.EntityNamespace;
        t.ClassName = database.EntityBase;
        t.RenderToFile(fileName, true);
        
        //Project.AddCompileItem(fileName);
    }
    
    public void CreateDataContextClass(Database database)
    {
        Stopwatch watch = Stopwatch.StartNew();
        DataContextGeneratedClass t = this.Create<DataContextGeneratedClass>();
        t.Database = database;
        
        DataContextEditableClass p = this.Create<DataContextEditableClass>();
        p.Database = database;
        
        string contextClass = CommonUtility.GetClassName(database.Class);
        
		string parentFileName = contextClass + ".cs";
        parentFileName = Path.Combine(OutputDirectory, parentFileName);
        
        if (!File.Exists(parentFileName))
        {
            Response.WriteLine(parentFileName);
            p.RenderToFile(parentFileName, true);
        }

		string fileName = contextClass + ".Generated.cs";
        fileName = Path.Combine(OutputDirectory, fileName);
        
        Debug.WriteLine(string.Format("Creating DataContext Class '{0}' ...", 
            contextClass));
        
        Response.WriteLine(fileName);
        t.RenderToFile(fileName, parentFileName, true);        
                
        //Project.AddCompileItem(parentFileName, fileName);
        
        Debug.WriteLine(string.Format("Created '{0}' in {1} ms.", 
            contextClass,
            watch.Elapsed.TotalMilliseconds.ToString()));
            
        this.Progress.PerformStep();
    }
    
    public void CreateEntityClasses(Database database)
    {
        EntityGeneratedClass t = this.Create<EntityGeneratedClass>();
        t.Database = database;
        t.IncludeDataContract = this.IncludeDataContract;
        
        EntityEditableClass p = this.Create<EntityEditableClass>();
        p.Database = database;

        foreach(Table tableMap in database.Tables)
        {
            Stopwatch watch = Stopwatch.StartNew();
            
             Debug.WriteLine(string.Format(
                "Creating Entity Class '{0}' ...",
                tableMap.Type.Name));
            
            t.TableName = tableMap.Name;
            t.EntityBase = database.EntityBase;
            
            CreateEntity(t, p, tableMap.Type);

            Debug.WriteLine(string.Format(
                "Created '{0}' in {1} ms.", 
                tableMap.Type.Name,
                watch.Elapsed.TotalMilliseconds.ToString()));

            this.Progress.PerformStep();
        }
        
        foreach(Function function in database.Functions)
        {
            foreach(DbmlSchema.Type resultType in function.ElementTypes)
            {
                if (string.IsNullOrEmpty(resultType.IdRef))
                {
                    t.TableName = string.Empty;
                    t.EntityBase = string.Empty;
                    CreateEntity(t, p, resultType);
                }
            }
        }
    }
    
    public void CreateEntity(
        EntityGeneratedClass entityClass, 
        EntityEditableClass partialClass, 
        DbmlSchema.Type type)
    {
        string className = type.Name;
        
		string parentFileName = className + ".cs";
        parentFileName = Path.Combine(OutputDirectory, parentFileName);

        if (!File.Exists(parentFileName))
        {
            partialClass.Type = type;
            Response.WriteLine(parentFileName);
            partialClass.RenderToFile(parentFileName, false);
        }
        
		string fileName = className + ".Generated.cs";
        fileName = Path.Combine(OutputDirectory, fileName);
        
        Response.WriteLine(fileName);
        entityClass.Type = type;
        entityClass.RenderToFile(fileName, parentFileName, true);
        
        //Project.AddCompileItem(parentFileName, fileName);
        
        foreach(DbmlSchema.Type childType in type.DerivedTypes)
        {
            entityClass.TableName = string.Empty;
            entityClass.EntityBase = type.Name;
            CreateEntity(entityClass, partialClass, childType);
        }
    }
</script>
Generating Linq to Sql Entities ...
<% Generate(); %>