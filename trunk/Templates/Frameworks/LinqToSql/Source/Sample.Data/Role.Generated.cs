
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace Sample.Data
{
    /// <summary>
    /// The class representing the dbo.Role table.
    /// </summary>
    [Table(Name="dbo.Role")]
    [DataContract]
    public partial class Role
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Role"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Role()
        {
            OnCreated();
            _userRoleList = new EntitySet<UserRole>(
                new System.Action<UserRole>(this.Attach_UserRoleList),
                new System.Action<UserRole>(this.Detach_UserRoleList));
        }
        #endregion
        
        #region Column Mapped Properties
        
        private int _roleID = default(int);

        /// <summary>
        /// Gets the RoleID column value.
        /// </summary>
        [Column(Name="RoleID", Storage="_roleID", DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        [DataMember]
        public int RoleID
        {
            get { return _roleID; }
            set
            {
                if (_roleID != value)
                {
                    OnRoleIDChanging(value);
                    OnPropertyChanging("RoleID");
                    _roleID = value;
                    OnPropertyChanged("RoleID");
                    OnRoleIDChanged();
                }
            }
        }
        
        private string _roleName;

        /// <summary>
        /// Gets or sets the RoleName column value.
        /// </summary>
        [Column(Name="RoleName", Storage="_roleName", DbType="varchar(50) NOT NULL", CanBeNull=false)]
        [DataMember]
        public string RoleName
        {
            get { return _roleName; }
            set
            {
                if (_roleName != value)
                {
                    OnRoleNameChanging(value);
                    OnPropertyChanging("RoleName");
                    _roleName = value;
                    OnPropertyChanged("RoleName");
                    OnRoleNameChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntitySet<UserRole> _userRoleList;
        
        /// <summary>
        /// Gets or sets the UserRole association.
        /// </summary>
        [Association(Name="Role_UserRole", Storage="_userRoleList", ThisKey="RoleID", OtherKey="RoleID")]
        [DataMember]
        public EntitySet<UserRole> UserRoleList
        {
            get { return _userRoleList; }
            set { _userRoleList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_UserRoleList(UserRole entity)
        {
            OnPropertyChanging(null);
            entity.Role = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_UserRoleList(UserRole entity)
        {
            OnPropertyChanging(null);
            entity.Role = null;
            OnPropertyChanged(null);
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when RoleID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnRoleIDChanging(int value);
        /// <summary>Called after RoleID has Changed.</summary>
        partial void OnRoleIDChanged();
        /// <summary>Called when RoleName is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnRoleNameChanging(string value);
        /// <summary>Called after RoleName has Changed.</summary>
        partial void OnRoleNameChanged();
        #endregion
        
    }
}

