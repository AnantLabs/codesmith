
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace Sample.Data
{
    /// <summary>
    /// The DataContext class for the Sample database.
    /// </summary>
    public partial class SampleDataContext : DataContext
    {
        private static MappingSource mappingCache = new AttributeMappingSource();
        
        #region Constructors
        /// <summary>
        /// Initializes the <see cref="SampleDataContext"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        static SampleDataContext()
        { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleDataContext"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute]
        public SampleDataContext()
            : base("Data Source=zeus;Initial Catalog=Sample;Integrated Security=True", mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleDataContext"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        [DebuggerNonUserCodeAttribute]
        public SampleDataContext(string connection)
            : base(connection, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleDataContext"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        [DebuggerNonUserCodeAttribute]
        public SampleDataContext(IDbConnection connection)
            : base(connection, mappingCache)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleDataContext"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [DebuggerNonUserCodeAttribute]
        public SampleDataContext(string connection, MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleDataContext"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [DebuggerNonUserCodeAttribute]
        public SampleDataContext(IDbConnection connection, MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        #endregion
        
        #region Tables
        /// <summary>Represents the dbo.ActiveUser table in the underlying database.</summary>
        public Table<ActiveUser> ActiveUser
        {
            get { return GetTable<ActiveUser>(); }
        }
        
        /// <summary>Represents the dbo.Priority table in the underlying database.</summary>
        public Table<Priority> Priority
        {
            get { return GetTable<Priority>(); }
        }
        
        /// <summary>Represents the dbo.Role table in the underlying database.</summary>
        public Table<Role> Role
        {
            get { return GetTable<Role>(); }
        }
        
        /// <summary>Represents the dbo.Status table in the underlying database.</summary>
        public Table<Status> Status
        {
            get { return GetTable<Status>(); }
        }
        
        /// <summary>Represents the dbo.Task table in the underlying database.</summary>
        public Table<Task> Task
        {
            get { return GetTable<Task>(); }
        }
        
        /// <summary>Represents the dbo.TaskExtended table in the underlying database.</summary>
        public Table<TaskExtended> TaskExtended
        {
            get { return GetTable<TaskExtended>(); }
        }
        
        /// <summary>Represents the dbo.User table in the underlying database.</summary>
        public Table<User> User
        {
            get { return GetTable<User>(); }
        }
        
        /// <summary>Represents the dbo.UserRole table in the underlying database.</summary>
        public Table<UserRole> UserRole
        {
            get { return GetTable<UserRole>(); }
        }
        
        #endregion

        #region Functions
        /// <summary>Method that is mapped to the dbo.GetEmail database procedure.</summary>
        /// <returns></returns>
        [Function(Name="dbo.GetEmail")]
        public int GetEmail(
            [Parameter(DbType="varchar(20)")] string userName, 
            [Parameter(DbType="varchar(150)")] ref string email)
        {
            IExecuteResult result = this.ExecuteMethodCall(this,
                ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, email);
            
            email = ((string)(result.GetParameterValue(1)));
            
            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.GetMyTasks database procedure.</summary>
        /// <returns></returns>
        [Function(Name="dbo.GetMyTasks")]
        public ISingleResult<GetMyTasksResult> GetMyTasks(
            [Parameter(DbType="int")] int? userID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this,
                ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
            
            
            return ((ISingleResult<GetMyTasksResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.MarkTaskComplete database procedure.</summary>
        /// <returns></returns>
        [Function(Name="dbo.MarkTaskComplete")]
        public int MarkTaskComplete(
            [Parameter(DbType="int")] int? taskId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this,
                ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskId);
            
            
            return ((int)(result.ReturnValue));
        }

        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called after this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called before a ActiveUser is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertActiveUser(ActiveUser instance);
        /// <summary>Called before a ActiveUser is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateActiveUser(ActiveUser instance);
        /// <summary>Called before a ActiveUser is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteActiveUser(ActiveUser instance);
        /// <summary>Called before a Priority is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertPriority(Priority instance);
        /// <summary>Called before a Priority is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdatePriority(Priority instance);
        /// <summary>Called before a Priority is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeletePriority(Priority instance);
        /// <summary>Called before a Role is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertRole(Role instance);
        /// <summary>Called before a Role is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateRole(Role instance);
        /// <summary>Called before a Role is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteRole(Role instance);
        /// <summary>Called before a Status is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertStatus(Status instance);
        /// <summary>Called before a Status is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateStatus(Status instance);
        /// <summary>Called before a Status is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteStatus(Status instance);
        /// <summary>Called before a Task is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertTask(Task instance);
        /// <summary>Called before a Task is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateTask(Task instance);
        /// <summary>Called before a Task is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteTask(Task instance);
        /// <summary>Called before a TaskExtended is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertTaskExtended(TaskExtended instance);
        /// <summary>Called before a TaskExtended is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateTaskExtended(TaskExtended instance);
        /// <summary>Called before a TaskExtended is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteTaskExtended(TaskExtended instance);
        /// <summary>Called before a User is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertUser(User instance);
        /// <summary>Called before a User is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateUser(User instance);
        /// <summary>Called before a User is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteUser(User instance);
        /// <summary>Called before a UserRole is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertUserRole(UserRole instance);
        /// <summary>Called before a UserRole is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateUserRole(UserRole instance);
        /// <summary>Called before a UserRole is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteUserRole(UserRole instance);
        #endregion
    }
}

