<%@ CodeTemplate Language="VB" TargetLanguage="VB" Debug="True" 
    Description="Linq to Sql Entity Class." %>
    
<%@ Assembly Name="Generator" Path="..\..\Common"%>
<%@ Import Namespace="LinqToSqlShared.Generator" %>

<%@ Property Category="2.Class" Name="ClassNamespace" 
    Type="System.String" Default="Project.Core.Data" Optional="False" 
    Description="The namespace to use for the generated class files."%>

<%@ Property Category="2.Class" Name="ClassName" 
    Type="System.String" Default="LinqEntityBase" Optional="False" 
    Description="The names of the class."%>
    
<%@ Property Category="2.Class" Name="IncludeDataContract"
     Type="System.Boolean" Default="False" Optional="False"
     Description="Include WCF DataContract attributes." %>

<%@ Property Category="2.Class" Name="Framework"
    Type="FrameworkEnum" Default="v35_SP1" Optional="False"
    Description="Include Serialization attributes and what kind." %>

Imports System
Imports System.ComponentModel
Imports System.Data.Linq
Imports System.Linq
<% If IncludeDataContract Then %>
Imports System.Runtime.Serialization
<%End If%>

Namespace <%= ClassNamespace %>
    
    ''' <summary>
    ''' A base class for Linq entities that implements notification events.
    ''' </summary>
    <%If IncludeDataContract Then %>
    <DataContract(<%If Framework = FrameworkEnum.v35_SP1 Then %> IsReference:=True <%End If%>)> _
    <%End If%>
    Public Partial MustInherit Class <%= ClassName %> 
       Implements INotifyPropertyChanging
       Implements INotifyPropertyChanged
    
        ''' <summary>
        ''' Initializes a new instance of the <see cref="<%= ClassName %>"/> class.
        ''' </summary>
        Protected Sub New()
        End Sub

        #Region "Notification Events"

        ''' <summary>
        ''' Implements a PropertyChanged event.
        ''' </summary>
        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        ''' <summary>
        ''' Raise the PropertyChanged event for a specific property.
        ''' </summary>
        ''' <param name="propertyName">Name of the property that has changed.</param>
        <EditorBrowsable(EditorBrowsableState.Advanced)> _
        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            If PropertyChangedEvent IsNot Nothing Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub


        ''' <summary>
        ''' Implements a PropertyChanging event.
        ''' </summary>
        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        ''' <summary>
        ''' Raise the PropertyChanging event for a specific property.
        ''' </summary>
        ''' <param name="propertyName">Name of the property that is changing.</param>
        <EditorBrowsable(EditorBrowsableState.Advanced)> _
        Protected Overridable Sub SendPropertyChanging(ByVal propertyName As String)
            If PropertyChangingEvent IsNot Nothing Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub
        #End Region
        
        #Region "Detach Methods"
        ''' <summary>
        ''' Gets a value indicating whether this instance is Added to the change tracking of <see cref="DataContext"/>.
        ''' </summary>
        ''' <returns>
        ''' <c>true</c> if this instance is Added; otherwise, <c>false</c>.
        ''' </returns>
        Public Function IsAttached() As Boolean
            Return PropertyChangingEvent IsNot Nothing
        End Function
        
        ''' <summary>
        ''' Remove this instance from the <see cref="DataContext"/>.
        ''' </summary>
        ''' <remarks>
        ''' Removeing the entity will allow it to be Added to another <see cref="DataContext"/>.
        ''' </remarks>
        Public Overridable Sub Detach()
            PropertyChangingEvent = Nothing
            PropertyChangedEvent = Nothing
        End Sub
        
        ''' <summary>
        ''' Remove the specified <see cref="T:System.Data.Linq.EntitySet`1" />.
        ''' </summary>
        ''' <typeparam name="TEntity">The type of the entity.</typeparam>
        ''' <param name="entitySet">The <see cref="T:System.Data.Linq.EntitySet`1" /> to Remove.</param>
        ''' <param name="onAdd">Delegate for <see cref="M:System.Data.Linq.EntitySet`1.Add(`0)" />.</param>
        ''' <param name="onRemove">Delegate for <see cref="M:System.Data.Linq.EntitySet`1.Remove(`0)" />.</param>
        ''' <returns>A new <see cref="T:System.Data.Linq.EntitySet`1" /> with the list copied if it was loaded.</returns>
        Protected Shared Function Detach(Of TEntity As <%= ClassName %>)(ByVal entitySet As EntitySet(Of TEntity), ByVal onAdd As Action(Of TEntity), ByVal onRemove As Action(Of TEntity)) As EntitySet(Of TEntity)
            If entitySet Is Nothing OrElse Not entitySet.HasLoadedOrAssignedValues Then
                Return New EntitySet(Of TEntity)(onAdd, onRemove)
            End If
            
            ' copy list and Remove all entities
            Dim list = entitySet.ToList()
            For Each t As TEntity In list
                t.Detach()
            Next
            
            Dim newSet = New EntitySet(Of TEntity)(onAdd, onRemove)
            newSet.Assign(list)
            Return newSet
        End Function
        
        ''' <summary>
        ''' Remove the specified <see cref="T:System.Data.Linq.EntityRef`1"/>.
        ''' </summary>
        ''' <typeparam name="TEntity">The type of the entity.</typeparam>
        ''' <param name="entity">The <see cref="T:System.Data.Linq.EntityRef`1"/> to Remove.</param>
        ''' <returns>A new <see cref="T:System.Data.Linq.EntityRef`1"/> with the entity Removeed.</returns>
        Protected Shared Function Detach(Of TEntity As <%= ClassName %>)(ByVal entity As EntityRef(Of TEntity)) As EntityRef(Of TEntity)
            If Not entity.HasLoadedOrAssignedValue OrElse entity.Entity Is Nothing Then
                Return New EntityRef(Of TEntity)()
            End If
            
            entity.Entity.Detach()
            Return New EntityRef(Of TEntity)(entity.Entity)
        End Function
        
        ''' <summary>
        ''' Remove the specified lazy loaded value.
        ''' </summary>
        ''' <typeparam name="T">The type of the value.</typeparam>
        ''' <param name="value">The lazy loaded value.</param>
        ''' <returns>A new <see cref="T:System.Data.Linq.Link`1"/> that is Removeed.</returns>
        Protected Shared Function Detach(Of T)(ByVal value As Link(Of T)) As Link(Of T)
            If Not value.HasLoadedOrAssignedValue Then
                Return Nothing
            End If
            
            Return New Link(Of T)(value.Value)
        End Function

        
        #End Region

    End Class
End Namespace