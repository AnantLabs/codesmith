<%-- 
Name: ManagerFactory.cst
Author: Tom DuPont
Description: Generates a Manager Factory class for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Src="..\Helpers\NHibernateHelper.cs" Inherits="NHibernateHelper" TargetLanguage="C#" Debug="False" Description="Generates a Manager Factory class for NHibernate." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="1a. Source Database" Description="The source database to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<% this.tablePrefix = TablePrefix; %>
using System;
using System.Collections.Generic;
using System.Text;

using <%= BaseNamespace %>;

namespace <%= ManagerNamespace %>
{
    public interface IManagerFactory
    {
		// Get Methods
        <% foreach(TableSchema table in SourceDatabase.Tables) { %>
		<% if(!ExcludedTables.Contains(table) && !IsManyToMany(table)) { %>
		I<%= GetClassName(table) %>Manager Get<%= GetClassName(table) %>Manager();
		I<%= GetClassName(table) %>Manager Get<%= GetClassName(table) %>Manager(INHibernateSession session);
		<% } %>
		<% } %>
    }

    public class ManagerFactory : IManagerFactory
    {
        #region Constructors

        public ManagerFactory()
        {
        }

        #endregion

        #region Get Methods

 		<% foreach(TableSchema table in SourceDatabase.Tables) { %>
		<% if(!ExcludedTables.Contains(table) && !IsManyToMany(table)) { %>
		public I<%= GetClassName(table) %>Manager Get<%= GetClassName(table) %>Manager()
        {
            return new <%= GetClassName(table) %>Manager();
        }
		public I<%= GetClassName(table) %>Manager Get<%= GetClassName(table) %>Manager(INHibernateSession session)
        {
            return new <%= GetClassName(table) %>Manager(session);
        }
		<% } %>
		<% } %>
        
        #endregion
    }
}
