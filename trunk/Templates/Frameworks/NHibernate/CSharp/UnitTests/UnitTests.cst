<%-- 
Name: UnitTests.cst
Author: Tom DuPont
Description: Generates Unit Tests for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Src="..\Helpers\NHibernateHelper.cs" Inherits="NHibernateHelper" TargetLanguage="C#" Debug="False" Description="Generates Unit Tests for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="NHibVersion" Type="NHibernateVersion" Default="v1_2" Optional="False" Category="2. NHibernate" Description="The version of NHibernate to generate for." %>
<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="3. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Property Name="UnitTestNamespace" Type="System.String" Default="NHibernate.Generated.UnitTests" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the UnitTests." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<% this.tablePrefix = TablePrefix; %>
using System;
using System.Collections.Generic;
using System.Text;
using NUnit.Framework;
using <%= ManagerNamespace %>;
using <%= BusinessNamespace %>;
using <%= BaseNamespace %>;

namespace <%= UnitTestNamespace %>
{
	[TestFixture]
    public partial class <%= GetClassName(SourceTable.Name) %>Tests : UNuitTestBase
    {
        protected I<%= GetClassName(SourceTable.Name) %>Manager manager;
		
		public <%= GetClassName(SourceTable.Name) %>Tests()
        {
            manager = managerFactory.Get<%= GetClassName(SourceTable.Name) %>Manager();
        }
		
		protected <%= GetClassName(SourceTable.Name) %> CreateNew<%= GetClassName(SourceTable.Name) %>()
		{
			<%= GetClassName(SourceTable.Name) %> entity = new <%= GetClassName(SourceTable.Name) %>();
			
			<% if(!IsMutliColumnPrimaryKey(SourceTable.PrimaryKey)) { %>
			<% if(SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties.Contains("CS_IsIdentity") && ((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value) == false) { %>
			// You may need to maually enter this key if there is a constraint violation.
			entity.Id = <%= GetUnitTestInitialization(SourceTable.PrimaryKey.MemberColumns[0].Column) %>;
			<% } %>
			<% } else { %>
			<% foreach(MemberColumnSchema mcs in SourceTable.PrimaryKey.MemberColumns) { %>
			<% if(!mcs.IsForeignKeyMember) { %>
			entity.<%= GetPropertyName(mcs.Name) %> = <%= GetUnitTestInitialization(mcs.Column) %>;
			<% } %>
			<% } %>
			<% } %>
			
			<% // Primitives %>
			<% foreach(ColumnSchema column in SourceTable.NonKeyColumns) { %>
			<% if(!column.AllowDBNull) { %>
			entity.<%= GetPropertyName(column.Name) %> = <%= GetUnitTestInitialization(column) %>;
			<% } %>
			<% } %>
			<% // Many-To-One %>
			<% foreach(TableKeySchema tks in SourceTable.ForeignKeys) { %>
			<% foreach(MemberColumnSchema mcs in tks.ForeignKeyMemberColumns) { %>
			<% if(!ExcludedTables.Contains(tks.PrimaryKeyTable) && (!mcs.IsPrimaryKeyMember || IsMutliColumnPrimaryKey(SourceTable.PrimaryKey))) { %>
			
			I<%= GetClassName(tks.PrimaryKeyTable.Name) %>Manager <%= GetVariableName(GetClassName(tks.PrimaryKeyTable.Name)) %>Manager = managerFactory.Get<%= GetClassName(tks.PrimaryKeyTable.Name) %>Manager();
			<% if(!mcs.IsPrimaryKeyMember) { %>
			entity.<%= GetPropertyName(GetClassName(tks.PrimaryKeyTable.Name)) %> = <%= GetVariableName(GetClassName(tks.PrimaryKeyTable.Name)) %>Manager.GetAll(1)[0];
			<% } else { %>
			entity.<%= GetPropertyName(mcs.Name) %> = <%= GetVariableName(GetClassName(tks.PrimaryKeyTable.Name)) %>Manager.GetAll(1)[0].Id;
			<% } %>
			<% } %>
			<% } %>
			<% } %>
			
			return entity;
		}
		protected <%= GetClassName(SourceTable.Name) %> GetFirst<%= GetClassName(SourceTable.Name) %>()
        {
            IList<<%= GetClassName(SourceTable.Name) %>> entityList = manager.GetAll(1);
            if (entityList.Count == 0)
                Assert.Fail("All tables must have at least one row for unit tests to succeed.");
            return entityList[0];
        }
		
		[Test]
        public void Create()
        {
            try
            {
				<%= GetClassName(SourceTable.Name) %> entity = CreateNew<%= GetClassName(SourceTable.Name) %>();
				
                object result = manager.Save(entity);

                Assert.IsNotNull(result);
            }
            catch(Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
        }
        [Test]
        public void Read()
        {
            try
            {
                <%= GetClassName(SourceTable.Name) %> entityA = CreateNew<%= GetClassName(SourceTable.Name) %>();
				manager.Save(entityA);

                <%= GetClassName(SourceTable.Name) %> entityB = manager.GetById(entityA.Id);

                Assert.AreEqual(entityA, entityB);
            }
            catch (Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
        }
		<% if(SourceTable.NonKeyColumns.Count > 0) { %>
		[Test]
		public void Update()
        {
            try
            {
                <%= GetClassName(SourceTable.Name) %> entityA = GetFirst<%= GetClassName(SourceTable.Name) %>();
				entityA.<%= GetPropertyName(SourceTable.NonKeyColumns[0].Name) %> = <%= GetUnitTestInitialization(SourceTable.NonKeyColumns[0]) %>;
				
				manager.Update(entityA);

                <%= GetClassName(SourceTable.Name) %> entityB = manager.GetById(entityA.Id);

                Assert.AreEqual(entityA.<%= GetPropertyName(SourceTable.NonKeyColumns[0].Name) %>, entityB.<%= GetPropertyName(SourceTable.NonKeyColumns[0].Name) %>);
            }
            catch (Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
        }
		<% } %>
        [Test]
        public void Delete()
        {
            try
            {
                <%= GetClassName(SourceTable.Name) %> entity = GetFirst<%= GetClassName(SourceTable.Name) %>();
				
                manager.Delete(entity);

				<% if(NHibVersion.Equals(NHibernateVersion.v1_2)) { %>
                try
                {
                    entity = manager.GetById(entity.Id);
                    Assert.Fail("Object should have been deleted!");
                }
                catch(Exception ex)
                {
                    Assert.IsInstanceOfType(typeof(NHibernate.ObjectDeletedException), ex);
                }
				<% } else { %>
                entity = manager.GetById(entity.Id);
                Assert.IsNull(entity);
				<% } %>
            }
            catch (Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
        }
	}
}