<%-- 
Name: BusinessObject.cst
Author: Tom DuPont
Description: Generates a Business Object for NHibernate.
--%>
<%@ CodeTemplate Language="VB" Src="..\Helpers\VbNHibernateHelper.vb" Inherits="VbNHibernateHelper" TargetLanguage="VB" Debug="False" Description="Generates a Business Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="VsVersion" Type="VisualStudioVersion" Default="VS_2008" Optional="False" Category="2. Versions" Description="The version of Visual Studio to generate for." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="3. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\Common\NHibernateHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="NHibernateHelper" %>
<% Dim entityManager As New EntityManager(SourceTable, ExcludedTables) %>
Imports System
Imports System.Collections
Imports System.Collections.Generic

Imports <%= BaseNamespace %>

Namespace NHibernate.Generated.BusinessObjects
	Public Partial Class <%= GetClassName(SourceTable) %>
		Inherits BusinessBase(Of <%= GetBusinessBaseIdType(SourceTable) %>)

		#region "Declarations"

		<% 'Primitives %>
		<% For Each em As EntityMember In entityManager.MembersPrimaryKeyUnion %>
		Private <%= em.PrivateVariableName %> As <%= em.SystemType %> = <%= GetInitialization(em.SystemType) %>
		<% Next %>
		
		<% 'Many-To-One %>
		<% For Each association As EntityAssociation In entityManager.ManyToOne %>
		Private <%= association.PrivateVariableName %> As <%= association.ClassName %> = Nothing
		<% Next %>
		
		<% 'One-To-Many & Many-To-Many %>
		<% For Each association As EntityAssociation In entityManager.ToManyUnion %>
		Private <%= association.PrivateVariableName %> As IList(Of <%= association.ClassName %>) = New List(Of <%= association.ClassName %>)()
		<% Next %>
				
        #End Region

        #region "Constructors"

        Public Sub New()
		End Sub

        #End Region

        #region "Methods"

		Public Overloads Overrides Function GetHashCode() As Integer
			Dim sb As New System.Text.StringBuilder()

			sb.Append(Me.[GetType]().FullName)
			
			<% For Each em As EntityMember In entityManager.MembersPrimaryKeyUnion %>
			sb.Append(<%= em.PrivateVariableName %>)
			<% Next %>
			
			Return sb.ToString().GetHashCode()
		End Function

        #End Region

        #region "Properties"

		<% 'Primary Keys %>
		<% If entityManager.PrimaryKey.IsCompositeKey Then %>
		Public Overloads Overrides Property Id() As String
			Get
				Dim uniqueId As New System.Text.StringBuilder()
				<% Dim isFirst As Boolean = True %>
				<% For Each em As EntityMember In entityManager.PrimaryKey.KeyColumns %>
				<% If isFirst Then %>
				<% isFirst = False %>
				<% Else %>
				uniqueId.Append("^")
				<% End If %>
				uniqueId.Append(<%= em.PrivateVariableName.ToString() %>)
				<% Next %>
				Return uniqueId.ToString()
			End Get
			Set(ByVal value As String)
            End Set
		End Property
		
		<% End If %>
		<% 'Primitives %>
		<% For Each em As EntityMember In entityManager.MembersPrimaryKeyUnion %>
		Public Overridable Property <%= em.PropertyName %>() As <%= em.SystemType %>
			Get
				Return <%= em.PrivateVariableName %>
			End Get
			Set
				<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>On<%= em.PropertyName %>Changing()<% End If %>
				<%= em.PrivateVariableName %> = value
				<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>On<%= em.PropertyName %>Changed()<% End If %>
			End Set
		End Property
		<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>
		Partial Private Sub On<%= em.PropertyName %>Changing()
		End Sub
		Partial Private Sub On<%= em.PropertyName %>Changed()
		End Sub
		<% End If %>
		<% Next %>
		
		<% 'Many-To-One %>
		<% For Each association As EntityAssociation In entityManager.ManyToOne %>
		Public Overridable Property <%= association.PropertyName %>() As <%= association.ClassName %>
			Get
				Return <%= association.PrivateVariableName %>
			End Get
			Set
				<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>On<%= association.PropertyName %>Changing()<% End If %>
				<%= association.PrivateVariableName %> = value
				<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>On<%= association.PropertyName %>Changed()<% End If %>
			End Set
		End Property
		<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>
		Partial Private Sub On<%= association.PropertyName %>Changing()
		End Sub
		Partial Private Sub On<%= association.PropertyName %>Changed()
		End Sub
		<% End If %>
		
		<% Next %>
		<% 'One-To-Many & Many-To-Many %>
		<% For Each association As EntityAssociation In entityManager.ToManyUnion %>
		Public Overridable Property <%= association.PropertyName %>() As IList(Of <%= association.ClassName %>)
			Get
				Return <%= association.PrivateVariableName %>
			End Get
			Set
				<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>On<%= association.PropertyName %>Changing()<% End If %>
				<%= association.PrivateVariableName %> = value
				<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>On<%= association.PropertyName %>Changed()<% End If %>
			End Set
		End Property
		<% If VsVersion.Equals(VisualStudioVersion.VS_2008) Then %>
		Partial Private Sub On<%= association.PropertyName %>Changing()
		End Sub
		Partial Private Sub On<%= association.PropertyName %>Changed()
		End Sub
		<% End If %>
		
		<% Next %>
        #End Region

	End Class
End Namespace
