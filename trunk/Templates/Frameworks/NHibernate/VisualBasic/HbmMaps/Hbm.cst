<%-- 
Name: Hbm.cst
Author: Tom DuPont
Description: Generates a HBM Map for NHibernate.
--%>
<%@ CodeTemplate Language="VB" Src="..\Helpers\VbNHibernateHelper.vb" Inherits="VbNHibernateHelper" TargetLanguage="XML" Debug="False" Description="Generates a HBM Map for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="AssemblyName" Type="System.String" Default="NHibernate.Generated" Optional="False" Category="2a. Assembly" Description="The name of the Assembly that will contain the business objects." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="2b. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="3b. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\Common\NHibernateHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="NHibernateHelper" %>
<% Dim entityManager As New EntityManager(SourceTable, ExcludedTables) %>
<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" namespace="<%= BusinessNamespace %>" assembly="<%= AssemblyName %>">
	<class name="<%= BusinessNamespace %>.<%= GetClassName(SourceTable) %>, <%= AssemblyName %>" table="<%= entityManager.TableSafeName %>" lazy="true">
		<% 'Primary Key %>
		<% If entityManager.PrimaryKey.IsCompositeKey Then %>
		<composite-id>
			<% For Each em As EntityMember In entityManager.PrimaryKey.KeyColumns %>
			<key-property name="<%= em.PropertyName %>" column="<%= em.ColumnSafeName %>" /> 
			<% Next %>
		</composite-id>
		<% Else %>
		<id name="Id" column="<%= entityManager.PrimaryKey.KeyColumn.ColumnSafeName %>">
		 	<%= entityManager.PrimaryKey.Generator %>
		</id>
		<% End If %>
		
		<% 'Version %>
		<% If (entityManager.HasRowVersionMember) Then %>
		<version name="<%= entityManager.RowVersionMember.PropertyName %>" column="<%= entityManager.RowVersionMember.ColumnSafeName %>" />
		<% End If %>
		<% 'Properties %>
		<% For Each em As EntityMember In entityManager.MembersNoKeyNoVersion %>
		<property name="<%= em.PropertyName %>" column="<%= em.ColumnSafeName %>" <%= GetPropertyType(em.SystemType) %>/>
		<% Next %>
		<% 'Many-To-One %>
		<% For Each association As EntityAssociation In entityManager.ManyToOne %>
		<many-to-one name="<%= association.PropertyName %>" column="<%= association.ColumnSafeName %>" class="<%= association.ClassName %>" <% IF (association.HasCascade) Then %>cascade="<%= association.Cascade %>" <% End If %>/>
		<% Next %>
		<% 'One-To-Many %>
		<% For Each association As EntityAssociation In entityManager.OneToMany %>
		<bag name="<%= association.PropertyName %>" lazy="true" cascade="<%= association.Cascade %>"  inverse="false" >
			<key column="<%= association.ColumnSafeName %>"></key>
			<one-to-many class="<%= association.ClassName %>"></one-to-many>
		</bag>
		<% Next %>
		<% 'Many-To-Many %>
		<% For Each association As EntityAssociation In entityManager.ManyToMany %>
		<bag name="<%= association.PropertyName %>" table="<%= association.TableSafeName %>" lazy="true" cascade="all" inverse="true" >
			<key column="<%= association.ColumnSafeName %>"></key>
			<many-to-many column="<%= association.ToManyTableKeySafeName %>" class="<%= association.ClassName %>" />
    	</bag>
		<% Next %>
	</class>
</hibernate-mapping>

<script runat="template">
    Public Function GetPropertyType(ByVal type As String) As String
        If(type = "System.Xml.XmlDocument")
            Return [String].Format("type=""{0}.XmlType, {1}""", Me.BaseNamespace, Me.AssemblyName)
        Else
            Return [String].Empty
        End If
    End Function
</script>