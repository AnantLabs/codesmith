<%-- 
Name: ManagerFactory.cst
Author: Tom DuPont
Description: Generates a Manager Factory class for NHibernate.
--%>
<%@ CodeTemplate Language="VB" Src="..\NHibernateHelper.vb" Inherits="NHibernateHelper" TargetLanguage="VB" Debug="False" Description="Generates a Manager Factory class for NHibernate." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="1a. Source Database" Description="The source database to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<% Me._tablePrefix = TablePrefix %>

Imports System
Imports System.Collections.Generic
Imports System.Text

Imports <%= BaseNamespace %>

Namespace <%= ManagerNamespace %>
	Public Interface IManagerFactory
		' Get Methods
		<% For Each table As TableSchema In SourceDatabase.Tables %>
		<% If Not ExcludedTables.Contains(table) AndAlso Not IsManyToMany(table) Then %>
		Function Get<%= GetClassName(table.Name) %>Manager() As I<%= GetClassName(table.Name) %>Manager
		Function Get<%= GetClassName(table.Name) %>Manager(ByVal session As INHibernateSession) As I<%= GetClassName(table.Name) %>Manager
		<% End If %>
		<% Next %>
	End Interface

	Public Class ManagerFactory
		Implements IManagerFactory
		
#region Constructors
		Public Sub New()
		End Sub
#End Region

#region Get Methods

		<% For Each table As TableSchema In SourceDatabase.Tables %>
		<% If Not ExcludedTables.Contains(table) AndAlso Not IsManyToMany(table) Then %>
		Public Function Get<%= GetClassName(table.Name) %>Manager() As I<%= GetClassName(table.Name) %>Manager
			Return New <%= GetClassName(table.Name) %>Manager()
		End Function
		Public Function Get<%= GetClassName(table.Name) %>Manager(ByVal session As INHibernateSession) As I<%= GetClassName(table.Name) %>Manager
			Return New <%= GetClassName(table.Name) %>Manager(session)
		End Function
		<% End If %>
		<% Next %>
		
#End Region
	End Class
End Namespace
