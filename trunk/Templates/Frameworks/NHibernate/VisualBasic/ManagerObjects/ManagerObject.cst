<%-- 
Name: ManagerObject.cst
Author: Tom DuPont
Description: Generates a Manager Object for NHibernate.
--%>
<%@ CodeTemplate Language="VB" Src="..\Helpers\NHibernateHelper.vb" Inherits="NHibernateHelper" TargetLanguage="VB" Debug="False" Description="Generates a Manager Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="NHibernateVersion" Type="NHibernateVersion" Default="v1_2" Optional="False" Category="2. NHibernate" Description="The version of NHibernate to generate for." %>
<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="3. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<% Dim scList As List(Of SearchCriteria) = SearchCriteria.GetAllSearchCriteria(SourceTable) %>
<% Me._tablePrefix = TablePrefix %>
Imports System
Imports System.Collections.Generic
Imports System.Text

Imports NHibernate
Imports <%= BusinessNamespace %>
Imports <%= BaseNamespace %>

Namespace <%= ManagerNamespace %>
	Public Interface I<%= GetClassName(SourceTable.Name) %>Manager
		Inherits IManagerBase(Of <%= GetClassName(SourceTable.Name) %>, <%= GetBusinessBaseIdType(SourceTable) %>)
		
		' Get Methods
		<% For Each sc As SearchCriteria In scList %>
		<% If sc.IsAllPrimaryKeys Then %>
		<% If sc.Items.Count > 1 Then ' Override GetById %>
		Overloads Function GetById(<%= GetMethodParameters(sc.Items, true) %>) As <%= GetClassName(SourceTable.Name) %>
		<% End If %>
		<% Else If Not ContainsForeignKey(sc, ExcludedTables) Then %>
		Function <%= GetMethodDeclaration(sc) %> As IList(Of <%= GetClassName(SourceTable.Name) %>)
		<% End If %>
		<% Next %>
		
	End Interface

	Partial Class <%= GetClassName(SourceTable.Name) %>Manager
		Inherits ManagerBase(Of <%= GetClassName(SourceTable.Name) %>, <%= GetBusinessBaseIdType(SourceTable) %>)
		Implements I<%= GetClassName(SourceTable.Name) %>Manager
#region "Constructors"

		Public Sub New()
			MyBase.New()
		End Sub
		Public Sub New(ByVal session As INHibernateSession)
			MyBase.New(session)
		End Sub
#End Region

#region "Get Methods"

		<% For Each sc As SearchCriteria In scList %>
		<% If sc.IsAllPrimaryKeys Then %>
		<% if sc.Items.Count > 1 Then ' Override GetById %>
		Public Overloads Overrides Function GetById(ByVal id As String) As <%= GetClassName(SourceTable.Name) %>
			Dim keys As String() = id.Split("^"C)
		
			If keys.Length <> <%= sc.Items.Count %> Then
				Throw New Exception("Invalid Id for <%= GetClassName(SourceTable.Name) %>Manager.GetById")
			End If
		
			Return GetById(<%= GetPrimaryKeyCallParameters(sc.Items) %>)
		End Function
		Public Overloads Function GetById(<%= GetMethodParameters(sc.Items, true) %>) As <%= GetClassName(SourceTable.Name) %>  Implements I<%= GetClassName(SourceTable.Name) %>Manager.GetById
			Dim criteria As ICriteria = Session.GetISession().CreateCriteria(GetType(<%= GetClassName(SourceTable.Name) %>))
		
			<% For Each mcs As MemberColumnSchema In sc.Items %>
			criteria.Add(<%= GetCriterionNamespace(Me.NHibernateVersion) %>.Expression.Eq("<%= mcs.Name %>", <%= GetVariableName(mcs.Name) %>))
			<% Next %>
			
			Dim result As <%= GetClassName(SourceTable.Name) %> = DirectCast(criteria.UniqueResult(), <%= GetClassName(SourceTable.Name) %>)
		
			If result Is Nothing Then
				Throw New NHibernate.ObjectDeletedException("", Nothing, Nothing)
			End If
		
			Return result
		End Function
		<% End If %>
		<% Else If Not ContainsForeignKey(sc, ExcludedTables) Then %>
		Public Function <%= GetMethodDeclaration(sc) %> As IList(Of <%= GetClassName(SourceTable.Name) %>) Implements I<%= GetClassName(SourceTable.Name) %>Manager.<%= sc.MethodName %>
            Dim <%= GetVariableName(SourceTable.Name) %>Criteria As ICriteria = Session.GetISession().CreateCriteria(GetType(<%= GetClassName(SourceTable.Name) %>))
			
			<% For Each mcs As MemberColumnSchema In sc.Items %>
			<% If mcs.IsForeignKeyMember %>
			Dim <%= GetVariableName(GetForeignTableName(mcs, SourceTable)) %>Criteria As ICriteria = <%= GetVariableName(SourceTable.Name) %>Criteria.CreateCriteria("<%= GetPropertyName(GetForeignTableName(mcs, SourceTable)) %>")
            <%= GetVariableName(GetForeignTableName(mcs, SourceTable)) %>Criteria.Add(<%= GetCriterionNamespace(Me.NHibernateVersion) %>.Expression.Eq("Id", <%= GetVariableName(mcs.Name) %>))
			<% Else %>
			<%= GetVariableName(SourceTable.Name) %>Criteria.Add(<%= GetCriterionNamespace(Me.NHibernateVersion) %>.Expression.Eq("<%= GetPropertyName(mcs.Name) %>", <%= GetVariableName(mcs.Name) %>))
			<% End If %>
			<% Next %>
			
            return <%= GetVariableName(SourceTable.Name) %>Criteria.List(Of <%= GetClassName(SourceTable.Name) %>)()
        End Function
		<% End If %>
		<% Next %>
		
#End Region
	End Class
End Namespace
