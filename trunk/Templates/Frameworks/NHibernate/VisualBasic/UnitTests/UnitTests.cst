<%-- 
Name: UnitTests.cst
Author: Tom DuPont
Description: Generates Unit Tests for NHibernate.
--%>
<%@ CodeTemplate Language="VB" Src="..\Helpers\VbNHibernateHelper.vb" Inherits="VbNHibernateHelper" TargetLanguage="VB" Debug="False" Description="Generates Unit Tests for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="NHibVersion" Type="NHibernateVersion" Default="v1_2" Optional="False" Category="2. NHibernate" Description="The version of NHibernate to generate for." %>
<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Property Name="UnitTestNamespace" Type="System.String" Default="NHibernate.Generated.UnitTests" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the UnitTests." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\Common\NHibernateHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="NHibernateHelper" %>
<% Dim entityManager As New EntityManager(SourceTable, ExcludedTables) %>
Imports System
Imports System.Collections.Generic
Imports System.Text
Imports NUnit.Framework
Imports <%= ManagerNamespace %>
Imports <%= BusinessNamespace %>
Imports <%= BaseNamespace %>

Namespace <%= UnitTestNamespace %>
	<TestFixture()> _
	Public Partial Class <%= GetClassName(SourceTable) %>Tests
		Inherits UNuitTestBase
		
		Protected manager As I<%= GetClassName(SourceTable) %>Manager

		Public Sub New()
			manager = managerFactory.Get<%= GetClassName(SourceTable) %>Manager()
		End Sub

		Protected Function CreateNew<%= GetClassName(SourceTable) %>() As <%= GetClassName(SourceTable) %>
			Dim entity As New <%= GetClassName(SourceTable) %>()

			<% If Not entityManager.PrimaryKey.IsCompositeKey AndAlso Not entityManager.PrimaryKey.IsIdentity Then %>
			' You may need to maually enter this key if there is a constraint violation.
			entity.Id = <%= GetUnitTestInitialization(SourceTable.PrimaryKey.MemberColumns(0).Column) %>
			<% End If %>
			
			<% ' Primitives %>
			<% For Each em As EntityMember In entityManager.Members %>
			entity.<%= em.PropertyName %> = <%= GetUnitTestInitialization(em.Column) %>
			<% Next %>
			<% ' Many-To-One %>
			<% For Each association As EntityAssociation In entityManager.ManyToOne %>
			
			Dim <%= association.VariableName %>Manager As I<%= association.ClassName %>Manager = managerFactory.Get<%= association.ClassName %>Manager()
			entity.<%= association.PropertyName %> = <%= association.VariableName %>Manager.GetAll(1)(0)
			<% Next %>

			Return entity
		End Function
		Protected Function GetFirst<%= GetClassName(SourceTable) %>() As <%= GetClassName(SourceTable) %>
			Dim entityList As IList(Of <%= GetClassName(SourceTable) %>) = manager.GetAll(1)
			If entityList.Count = 0 Then
				Assert.Fail("All tables must have at least one row for unit tests to succeed.")
			End If
			Return entityList(0)
		End Function

		<Test()> _
		Public Sub Create()
			Try
				Dim entity As <%= GetClassName(SourceTable) %> = CreateNew<%= GetClassName(SourceTable) %>()

				Dim result As Object = manager.Save(entity)

				Assert.IsNotNull(result)
			Catch ex As Exception
				Assert.Fail(ex.ToString())
			End Try
		End Sub
		<Test()> _
		Public Sub Read()
			Try
				Dim entityA As <%= GetClassName(SourceTable) %> = CreateNew<%= GetClassName(SourceTable) %>()
				manager.Save(entityA)

				Dim entityB As <%= GetClassName(SourceTable) %> = manager.GetById(entityA.Id)

				Assert.IsTrue(entityA.Equals(entityB))
			Catch ex As Exception
				Assert.Fail(ex.ToString())
			End Try
		End Sub
		<Test()> _
		Public Sub Update()
			Try
				Dim entityA As <%= GetClassName(SourceTable) %> = GetFirst<%= GetClassName(SourceTable) %>()
				
				<% If entityManager.MembersNoKeyNoVersion.Count > 0 Then %>
				entityA.<%= entityManager.MembersNoKeyNoVersion(0).PropertyName %> = <%= GetUnitTestInitialization(entityManager.MembersNoKeyNoVersion(0).Column) %>;
				<% End If %>
				
				manager.Update(entityA)

				Dim entityB As <%= GetClassName(SourceTable) %> = manager.GetById(entityA.Id)



				Assert.AreEqual(entityA.<%= entityManager.GetEntityBaseFromColumn(SourceTable.NonKeyColumns(0)).PropertyName %>, entityB.<%= entityManager.GetEntityBaseFromColumn(SourceTable.NonKeyColumns(0)).PropertyName %>)
			Catch ex As Exception
				Assert.Fail(ex.ToString())
			End Try
		End Sub
		<Test()> _
		Public Sub Delete()
			Try
				Dim entity As <%= GetClassName(SourceTable) %> = GetFirst<%= GetClassName(SourceTable) %>()

				manager.Delete(entity)

				<% If NHibVersion.Equals(NHibernateVersion.v1_2) Then %>
				Try
					entity = manager.GetById(entity.Id)
					Assert.Fail("Object should have been deleted!")
				Catch ex As Exception
					Assert.IsInstanceOfType(GetType(NHibernate.ObjectDeletedException), ex)
				End Try
				<% Else %>
                entity = manager.GetById(entity.Id)
                Assert.IsNull(entity)
				<% End If %>
			Catch ex As Exception
				Assert.Fail(ex.ToString())
			End Try
		End Sub
	End Class
End Namespace

<script runat="template">

Protected random As New Random()
Public Function GetUnitTestInitialization(ByVal column As ColumnSchema) As String
	Dim result As String

	If column.SystemType.Equals(GetType(String)) Then
		Dim sb As New StringBuilder()

		Dim size As Integer = 10
		If (column.Size > 0 AndAlso column.Size < 100) Then
			size = random.[Next](1, column.Size)
		End If

		sb.Append("""")
		Dim x As Integer = 0
		While x < size
			Select Case x Mod 5
				Case 0
					sb.Append("T")
					Exit Select
				Case 1
					sb.Append("e")
					Exit Select
				Case 2
					sb.Append("s")
					Exit Select
				Case 3
					sb.Append("t")
					Exit Select
				Case 4
					sb.Append(" ")
					Exit Select
			End Select
			System.Math.Max(System.Threading.Interlocked.Increment(x),x - 1)
		End While
		sb.Append("""")

		result = sb.ToString()
	ElseIf column.SystemType.Equals(GetType(DateTime)) Then
		result = "DateTime.Now"
	ElseIf column.SystemType.Equals(GetType(Decimal)) Then
		result = Convert.ToDecimal(random.[Next](1, 100)).ToString()
	ElseIf column.SystemType.Equals(GetType(Int32)) Then
		result = random.[Next](1, 100).ToString()
	ElseIf column.SystemType.Equals(GetType(Boolean)) Then
		result = (random.[Next](1, 2).Equals(1)).ToString()
	Else
		result = "Nothing"
	End If

	Return result
End Function

</script>