<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a set of files to get a project started." Debug="True" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="1. Setup" Description="Database that entities should be based on." %>
<%@ Property Name="TablePrefixes" Type="String" Default="" Optional="True" Category="1. Setup" Description="The table prefix to be cut from the class name" %>
<%@ Property Name="Namespace" Type="String" Default="Kinetic" Optional="False" Category="1. Setup" Description="The root namespace for the project" %>
<%@ Property Name="DomainNamespace" Type="String" Default="Business" Optional="False" Category="1. Setup" Description="The namespace to be added to the root namespace for the business objects" %>
<%@ Property Name="SQLType" Type="SqlType" Default="Dynamic" Optional="False" Category="1. Setup" Description="Use stored procedures or generated SQL" %>
<%@ Property Name="ExcludedTables" Type="TableSchemaCollection" Default="" Optional="True" Category="1. Setup" Description="Tables to exclude" %>
<%@ Property Name="ConnectionStringKey" Type="String" Default="ConnString" Optional="False" Category="1. Setup" Description="The configuration file key for the connection string"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>

<%@ Register Template="Domain\DomainCsProj.cst" Name="DomainCsProj" MergeProperties="True" ExcludeProperties="DomainGuid" %>
<%@ Register Template="Solution.cst" Name="Solution" MergeProperties="True" ExcludeProperties="DomainGuid,DatabaseGuid" %>
<%@ Register Template="Database\DatabaseProj.cst" Name="DatabaseProj" MergeProperties="True" %>

<%@ Register Template="Domain\Framework\MinToEmptyTypeConverter.cst" Name="MinToEmptyTypeConverter" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\DatabaseColumnAttribute.cst" Name="DatabaseColumnAttribute" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\ISavable.cst" Name="ISavable" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\ISearchable.cst" Name="ISearchable" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\IDataHelper.cst" Name="IDataHelper" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\IDataFactory.cst" Name="IDataFactory" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\ServiceLocator.cst" Name="ServiceLocator" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\EntityComparer.cst" Name="EntityComparer" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityEventArgs.cst" Name="EntityEventArgs" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityCancelEventArgs.cst" Name="EntityCancelEventArgs" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityValidationEventArgs.cst" Name="EntityValidationEventArgs" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityValidationCancelEventArgs.cst" Name="EntityValidationCancelEventArgs" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityException.cst" Name="EntityException" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityFinder.cst" Name="EntityFinder" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityList.cst" Name="EntityList" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityList.Generated.cst" Name="EntityListGenerated" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityListBase.cst" Name="EntityListBase" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityListBase.Generated.cst" Name="EntityListBaseGenerated" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityListReadOnly.cst" Name="EntityListReadOnly" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\EntityListReadOnly.Generated.cst" Name="EntityListReadOnlyGenerated" MergeProperties="True" %>

<%@ Register Template="Domain\Framework\SqlHelperBase.cst" Name="SqlHelperBase" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\SqlHelper.cst" Name="SqlHelper" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\SqlHelper.Generated.cst" Name="SqlHelperGenerated" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\ColumnInfo.cst" Name="ColumnInfo" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\ValidationError.cst" Name="ValidationError" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\ValidationGroup.cst" Name="ValidationGroup" MergeProperties="True" %>
<%@ Register Template="Domain\Framework\ValidationGroup.Generated.cst" Name="ValidationGroupGenerated" MergeProperties="True" %>

<%@ Register Template="Domain\AssemblyInfo.cst" Name="AssemblyInfo" MergeProperties="True" ExcludeProperties="SourceTable" %>

<%@ Register Template="Domain\Framework\EntityBase.cst" Name="EntityBase" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\EntityBase.Generated.cst" Name="EntityBaseGenerated" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\EntityBaseReadOnly.cst" Name="EntityBaseReadOnly" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Framework\EntityBaseReadOnly.Generated.cst" Name="EntityBaseReadOnlyGenerated" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Entity.cst" Name="Entity" MergeProperties="True" ExcludeProperties="SourceTable" %>
<%@ Register Template="Domain\Entity.generated.cst" Name="EntityGenerated" MergeProperties="True" ExcludeProperties="SourceTable,IsolationLevel" %>

<%@ Register Template="Database\InsertStoredProcedure.cst" Name="InsertStoredProcedure" MergeProperties="True" ExcludeProperties="SourceTable,IncludeDrop,IsolationLevel" %>
<%@ Register Template="Database\UpdateStoredProcedure.cst" Name="UpdateStoredProcedure" MergeProperties="True" ExcludeProperties="SourceTable,IncludeDrop,IsolationLevel" %>
<%@ Register Template="Database\DeleteStoredProcedure.cst" Name="DeleteStoredProcedure" MergeProperties="True" ExcludeProperties="SourceTable,IncludeDrop,IsolationLevel" %>
<%@ Register Template="Database\GetStoredProcedure.cst" Name="GetStoredProcedure" MergeProperties="True" ExcludeProperties="SourceTable,IncludeDrop,IsolationLevel" %>
<%@ Register Template="Database\GetAllStoredProcedure.cst" Name="GetAllStoredProcedure" MergeProperties="True" ExcludeProperties="SourceTable,IncludeDrop,IsolationLevel" %>
<%@ Register Template="Database\GetByFKStoredProcedure.cst" Name="GetByFKStoredProcedure" MergeProperties="True" ExcludeProperties="SourceTable,FKTable,IncludeDrop,IsolationLevel" %>
<%@ Register Template="Database\DeleteByFKStoredProcedure.cst" Name="DeleteByFKStoredProcedure" MergeProperties="True" ExcludeProperties="SourceTable,FKTable,IncludeDrop,IsolationLevel" %>

<%
Debug.WriteLine("Kinetic Framework: starting generation at " + DateTime.Now.ToString());
if(SQLType == SqlType.StoredProcedures)
{
	SafeCreateDirectory(OutputDirectory + "\\Database");
	SafeCreateDirectory(OutputDirectory + "\\Database\\Change Scripts");
	SafeCreateDirectory(OutputDirectory + "\\Database\\Create Scripts");
	SafeCreateDirectory(OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures");
	SafeCreateDirectory(OutputDirectory + "\\Database\\Queries");
}

SafeCreateDirectory(OutputDirectory + "\\" + DomainNamespace + "\\Framework");
SafeCreateDirectory(OutputDirectory + "\\" + DomainNamespace + "\\Properties");

System.Guid domainGuid = System.Guid.NewGuid();
System.Guid databaseGuid = System.Guid.NewGuid();

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + Namespace + ".sln");
	Solution solution = new Solution();
	solution.DomainGuid = domainGuid;
	solution.DatabaseGuid = databaseGuid;
	this.CopyPropertiesTo(solution);
	solution.RenderToFile(OutputDirectory + "\\" + Namespace + ".sln", false);
}
catch 
{ 
	Debug.WriteLine("\tFile already exists. Leaving existing file.");	
}

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\" + Namespace + "." + DomainNamespace + ".csproj");
	DomainCsProj domainCsProj = new DomainCsProj();
	domainCsProj.DomainGuid = domainGuid;	
	this.CopyPropertiesTo(domainCsProj);
	domainCsProj.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\" + Namespace + "." + DomainNamespace + ".csproj", false);
} 
catch {
	Debug.WriteLine("\tFile already exists. Leaving existing file.");	
} 

if(SQLType == SqlType.StoredProcedures)
{
	try {
		Debug.WriteLine("Writing File: " + OutputDirectory + "\\Database\\" + Namespace + ".Database.dbp");
		DatabaseProj databaseProj = new DatabaseProj();
		this.CopyPropertiesTo(databaseProj);
		databaseProj.RenderToFile(OutputDirectory + "\\Database\\" + Namespace + ".Database.dbp", false);
	} catch {
		Debug.WriteLine("\tFile already exists. Leaving existing file.");			
	} 
}

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityList.cs");
	EntityList entityList = new EntityList();
	this.CopyPropertiesTo(entityList);
	entityList.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityList.cs", false);
} 
catch 
{ 
	Debug.WriteLine("\tFile already exists. Leaving existing file.");	
}

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityList.cs");
EntityListGenerated entityListGenerated = new EntityListGenerated();
this.CopyPropertiesTo(entityListGenerated);
entityListGenerated.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityList.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityFinder.cs");
EntityFinder entityFinder = new EntityFinder();
this.CopyPropertiesTo(entityFinder);
entityFinder.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityFinder.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityException.cs");
EntityException entityException = new EntityException();
this.CopyPropertiesTo(entityException);
entityException.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityException.cs", true);

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityListBase.cs");
	EntityListBase entityListBase = new EntityListBase();
	this.CopyPropertiesTo(entityListBase);
	entityListBase.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityListBase.cs", false);
}
catch 
{ 
	Debug.WriteLine("\tFile already exists. Leaving existing file.");	
}

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityListBase.cs");
EntityListBaseGenerated entityListBaseGenerated = new EntityListBaseGenerated();
this.CopyPropertiesTo(entityListBaseGenerated);
entityListBaseGenerated.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityListBase.cs", true);

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityListReadOnly.cs");
	EntityListReadOnly entityListReadOnly = new EntityListReadOnly();
	this.CopyPropertiesTo(entityListReadOnly);
	entityListReadOnly.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityListReadOnly.cs", false);
} 
catch 
{ 
	Debug.WriteLine("\tFile already exists. Leaving existing file.");	
}

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityListReadOnly.cs");
EntityListReadOnlyGenerated entityListReadOnlyGenerated = new EntityListReadOnlyGenerated();
this.CopyPropertiesTo(entityListReadOnlyGenerated);
entityListReadOnlyGenerated.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityListReadOnly.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityComparer.cs");
EntityComparer entityComparer = new EntityComparer();
this.CopyPropertiesTo(entityComparer);
entityComparer.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityComparer.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityEventArgs.cs");
EntityEventArgs entityEventArgs = new EntityEventArgs();
this.CopyPropertiesTo(entityEventArgs);
entityEventArgs.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityEventArgs.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityCancelEventArgs.cs");
EntityCancelEventArgs entityCancelEventArgs = new EntityCancelEventArgs();
this.CopyPropertiesTo(entityCancelEventArgs);
entityCancelEventArgs.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityCancelEventArgs.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityValidationEventArgs.cs");
EntityValidationEventArgs entityValidationEventArgs = new EntityValidationEventArgs();
this.CopyPropertiesTo(entityValidationEventArgs);
entityValidationEventArgs.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityValidationEventArgs.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityValidationCancelEventArgs.cs");
EntityValidationCancelEventArgs entityValidationCancelEventArgs = new EntityValidationCancelEventArgs();
this.CopyPropertiesTo(entityValidationCancelEventArgs);
entityValidationCancelEventArgs.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityValidationCancelEventArgs.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\MinToEmptyTypeConverter.cs");
MinToEmptyTypeConverter minToEmptyTypeConverter = new MinToEmptyTypeConverter();
this.CopyPropertiesTo(minToEmptyTypeConverter);
minToEmptyTypeConverter.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\MinToEmptyTypeConverter.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ColumnInfo.cs");
ColumnInfo columnInfo = new ColumnInfo();
this.CopyPropertiesTo(columnInfo);
columnInfo.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ColumnInfo.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ValidationError.cs");
ValidationError validationError = new ValidationError();
this.CopyPropertiesTo(validationError);
validationError.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ValidationError.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\DatabaseColumnAttribute.cs");
DatabaseColumnAttribute databaseColumnAttribute = new DatabaseColumnAttribute();
this.CopyPropertiesTo(databaseColumnAttribute);
databaseColumnAttribute.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\DatabaseColumnAttribute.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ISearchable.cs");
ISearchable searchable = new ISearchable();
this.CopyPropertiesTo(searchable);
searchable.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ISearchable.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ISavable.cs");
ISavable savable = new ISavable();
this.CopyPropertiesTo(savable);
savable.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ISavable.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\IDataHelper.cs");
IDataHelper dataHelper = new IDataHelper();
this.CopyPropertiesTo(dataHelper);
dataHelper.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\IDataHelper.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\IDataFactory.cs");
IDataFactory dataFactory = new IDataFactory();
this.CopyPropertiesTo(dataFactory);
dataFactory.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\IDataFactory.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ServiceLocator.cs");
ServiceLocator serviceLocator = new ServiceLocator();
this.CopyPropertiesTo(serviceLocator);
serviceLocator.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ServiceLocator.cs", true);

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\SqlHelperBase.cs");
SqlHelperBase sqlHelperBase = new SqlHelperBase();
this.CopyPropertiesTo(sqlHelperBase);
sqlHelperBase.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\SqlHelperBase.cs", true);

try 
{
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\SqlHelper.cs");
	SqlHelper sqlHelper = new SqlHelper();
	this.CopyPropertiesTo(sqlHelper);
	sqlHelper.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\SqlHelper.cs", false);
} 
catch 
{ 
	Debug.WriteLine("\tFile already exists. Leaving existing file.");	
}

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.SqlHelper.cs");
SqlHelperGenerated sqlHelperGenerated = new SqlHelperGenerated();
this.CopyPropertiesTo(sqlHelperGenerated);
sqlHelperGenerated.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.SqlHelper.cs", true);

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Properties\\AssemblyInfo.cs");
	AssemblyInfo assemblyInfo = new AssemblyInfo();
	this.CopyPropertiesTo(assemblyInfo);
	assemblyInfo.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Properties\\AssemblyInfo.cs", false);
} catch { Debug.WriteLine("\tFile already exists. Leaving existing file.");	}

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityBase.cs");
	EntityBase entityBase = new EntityBase();
	this.CopyPropertiesTo(entityBase);
	entityBase.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityBase.cs", false);
} catch { Debug.WriteLine("\tFile already exists. Leaving existing file.");	}

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityBase.cs");
EntityBaseGenerated entityBaseGenerated = new EntityBaseGenerated();
this.CopyPropertiesTo(entityBaseGenerated);
entityBaseGenerated.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityBase.cs", true);

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityBaseReadOnly.cs");
	EntityBaseReadOnly entityBaseReadOnly = new EntityBaseReadOnly();
	this.CopyPropertiesTo(entityBaseReadOnly);
	entityBaseReadOnly.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\EntityBaseReadOnly.cs", false);
} catch { Debug.WriteLine("\tFile already exists. Leaving existing file.");	}

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityBaseReadOnly.cs");
EntityBaseReadOnlyGenerated entityBaseReadOnlyGenerated = new EntityBaseReadOnlyGenerated();
this.CopyPropertiesTo(entityBaseReadOnlyGenerated);
entityBaseReadOnlyGenerated.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.EntityBaseReadOnly.cs", true);

try {
	Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ValidationGroup.cs");
	ValidationGroup validationGroup = new ValidationGroup();
	this.CopyPropertiesTo(validationGroup);
	validationGroup.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\ValidationGroup.cs", false);
} catch { Debug.WriteLine("\tFile already exists. Leaving existing file.");	}

Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.ValidationGroup.cs");
ValidationGroupGenerated validationGroupGenerated= new ValidationGroupGenerated();
this.CopyPropertiesTo(validationGroupGenerated);
validationGroupGenerated.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Framework\\Generated.ValidationGroup.cs", true);

for (int i = 0; i < SourceDatabase.Tables.Count; i++)
{
	if(SourceDatabase.Tables[i].Name != "" && ShouldUseTable(SourceDatabase.Tables[i], ExcludedTables)) 
	{
		bool isReadOnly = IsReadOnlyEntity(SourceDatabase.Tables[i]);
		
		Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\Generated." + GetClassName(SourceDatabase.Tables[i]) + ".cs");
		EntityGenerated entityGenerated = new EntityGenerated();
		entityGenerated.SourceTable = SourceDatabase.Tables[i];
		this.CopyPropertiesTo(entityGenerated);
		entityGenerated.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\Generated." + GetClassName(SourceDatabase.Tables[i]) + ".cs", true);
		
		try {
			Debug.WriteLine("Writing File: " + OutputDirectory + "\\" + DomainNamespace + "\\" + GetClassName(SourceDatabase.Tables[i]) + ".cs");
			Entity entity = new Entity();
			entity.SourceTable = SourceDatabase.Tables[i];
			this.CopyPropertiesTo(entity);
			entity.RenderToFile(OutputDirectory + "\\" + DomainNamespace + "\\" + GetClassName(SourceDatabase.Tables[i]) + ".cs", false);
		} catch  { Debug.WriteLine("\tFile already exists. Leaving existing file.");	 }
		
		if(SQLType == SqlType.StoredProcedures)
		{
			if(!isReadOnly) 
			{
				Debug.WriteLine("Writing File: " + OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "Insert.sql");
				InsertStoredProcedure insertSP = new InsertStoredProcedure();
				insertSP.SourceTable = SourceDatabase.Tables[i];
				this.CopyPropertiesTo(insertSP);
				insertSP.RenderToFile(OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "Insert.sql", true);
				
				Debug.WriteLine("Writing File: " + OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "Update.sql");
				UpdateStoredProcedure updateSP = new UpdateStoredProcedure();
				updateSP.SourceTable = SourceDatabase.Tables[i];
				this.CopyPropertiesTo(updateSP);
				updateSP.RenderToFile(OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "Update.sql", true);
				
				Debug.WriteLine("Writing File: " + OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "Delete.sql");
				DeleteStoredProcedure deleteSP = new DeleteStoredProcedure();
				deleteSP.SourceTable = SourceDatabase.Tables[i];
				this.CopyPropertiesTo(deleteSP);
				deleteSP.RenderToFile(OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "Delete.sql", true);
				
				Debug.WriteLine("Writing File: " + OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "Get.sql");
				GetStoredProcedure getSP = new GetStoredProcedure();
				getSP.SourceTable = SourceDatabase.Tables[i];
				this.CopyPropertiesTo(getSP);
				getSP.RenderToFile(OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "Get.sql", true);
			}
			
			Debug.WriteLine("Writing File: " + OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "GetAll.sql");
			GetAllStoredProcedure getAllSP = new GetAllStoredProcedure();
			getAllSP.SourceTable = SourceDatabase.Tables[i];
			this.CopyPropertiesTo(getAllSP);
			getAllSP.RenderToFile(OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "GetAll.sql", true);

			for (int j = 0; j < SourceDatabase.Tables[i].ForeignKeys.Count; j++)
			{
				if(ShouldUseTable(SourceDatabase.Tables[i].ForeignKeys[j].PrimaryKeyTable, ExcludedTables)) 
				{
					Debug.WriteLine("Writing File: " + OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "GetBy" + GetClassName(SourceDatabase.Tables[i].ForeignKeys[j].PrimaryKeyTable) + ".sql");
					GetByFKStoredProcedure getByFKSP = new GetByFKStoredProcedure();
					getByFKSP.SourceTable = SourceDatabase.Tables[i];
					getByFKSP.FKTable = SourceDatabase.Tables[i].ForeignKeys[j];
					this.CopyPropertiesTo(getByFKSP);
					getByFKSP.RenderToFile(OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "GetBy" + GetClassName(SourceDatabase.Tables[i].ForeignKeys[j].PrimaryKeyTable) + ".sql", true);
					
					Debug.WriteLine("Writing File: " + OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "DeleteBy" + GetClassName(SourceDatabase.Tables[i].ForeignKeys[j].PrimaryKeyTable) + ".sql");
					DeleteByFKStoredProcedure deleteByFKSP = new DeleteByFKStoredProcedure();
					deleteByFKSP.SourceTable = SourceDatabase.Tables[i];
					deleteByFKSP.FKTable = SourceDatabase.Tables[i].ForeignKeys[j];
					this.CopyPropertiesTo(deleteByFKSP);
					deleteByFKSP.RenderToFile(OutputDirectory + "\\Database\\Create Scripts\\Stored Procedures\\" + GetClassName(SourceDatabase.Tables[i]) + "DeleteBy" + GetClassName(SourceDatabase.Tables[i].ForeignKeys[j].PrimaryKeyTable) + ".sql", true);
				}
			}
		}
	}	
}

Debug.WriteLine("Kinetic Framework: finished generation at " + DateTime.Now.ToString());
%>

<script runat="template">
public enum TransactionIsolationLevelEnum
{
	ReadCommitted,
	ReadUncommitted,
	RepeatableRead,
	Serializable
}

public enum SqlType
{
	StoredProcedures,
	Dynamic
}
<!-- #include file="Utilities.cs" -->

private string _outputDirectory; 
[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
public string OutputDirectory
{
 get { return _outputDirectory; }
 set { _outputDirectory = value; }
}

</script>