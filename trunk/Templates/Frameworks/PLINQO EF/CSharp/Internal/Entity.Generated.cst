<%-- Author: Blake Niemyjski --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>

<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.Runtime.Serialization;
using System.Xml.Serialization;

namespace <%= EntityNamespace %>
{
<% if(Entity.HasDescription) { %>
    /// <summary>
    /// <%= Entity.Description %>
    /// </summary>
<% } %>
    [EdmEntityTypeAttribute(NamespaceName="<%= Entity.Namespace %>", Name="<%= Entity.Name %>")]
    [DataContractAttribute(IsReference=true)]
    [ScaffoldTable(true)]
    [Serializable()]
<% if(!IsComplexEntity()) { foreach (var entity in Entity.DerivedEntities) { %>
    [KnownTypeAttribute(typeof(<%= entity.Name %>))]
<% } } %>
   <%= Entity.TypeAccess %> <%= Entity.IsAbstract ? "abstract" : string.Empty %>partial class <%= Entity.Name %> : <%= ResolveBaseType() %>
    {
<% if(!Entity.IsAbstract && FactoryProperties().Count > 0) { %>
        #region Factory Methods

        /// <summary>
        /// Create a new <%= Entity.Name %> object.
        /// </summary>
<% foreach(var property in FactoryProperties()) { %>
        /// <param name="<%= property.VariableName %>">Initial value of the <%= property.PropertyName %> property.</param>
<% } %>
        public static <%= Entity.Name %> Create<%= Entity.Name %>(<% foreach(var property in FactoryProperties().AsIndexedEnumerable()) { if(!IsComplexProperty(property.Value)) { %>global::<%}%><%= property.Value.SystemType %> <%= property.Value.VariableName %><%if(!property.IsLast) {%>, <% } } %>)
        {
            <%= Entity.Name %> <%= Entity.VariableName %> = new <%= Entity.Name %>();
<% foreach(var property in FactoryProperties()) { 
    if(!IsComplexProperty(property)) { %>
            <%= Entity.VariableName %>.<%= property.PropertyName %> = <%= property.VariableName %>;
    <% } else {%>
            <%= Entity.VariableName %>.<%= property.PropertyName %> = StructuralObject.VerifyComplexObjectIsNotNull(<%= property.VariableName %>, "<%= property.PropertyName %>");
<% } } %>

            return <%= Entity.VariableName %>;
        }

        #endregion

<% } %>
        #region Primitive Properties
<% foreach(var property in Entity.Properties.Where(p => !IsComplexProperty(p))) { %>

<% if(property.HasDescription) { %>
        /// <summary>
        /// <%= property.Description %>
        /// </summary>
<% } %>
        [EdmScalarPropertyAttribute(EntityKeyProperty=<%= ((property.PropertyType & PropertyType.Key) == PropertyType.Key) ? "true" : "false" %>, IsNullable=<%= property.IsNullable.ToString().ToLower() %>)]
        [DataMemberAttribute()]
        <%= property.TypeAccess %> global::<%= property.SystemType %> <%= property.PropertyName %>
        {
           <%= property.GetterAccess %> get
            {
<% if(property.BaseSystemType == "System.Byte[]") { %>
                return StructuralObject.GetValidValue(<%= property.PrivateMemberVariableName %>);
<% } else { %>
                return <%= property.PrivateMemberVariableName %>;
<% } %>
            }
           <%= property.SetterAccess %> set
            {
<% if(property.BaseSystemType == "System.Byte[]") { %>
                if (!StructuralObject.BinaryEquals(<%= property.PrivateMemberVariableName %>, value))
<% } else { %>
                if (<%= property.PrivateMemberVariableName %> != value)
<% } %>
                {
                    On<%= property.PropertyName %>Changing(value);
                    ReportPropertyChanging("<%= property.PropertyName %>");
                    <%= property.PrivateMemberVariableName %> = StructuralObject.SetValidValue(value<% if(property.BaseSystemType == "System.Byte[]" || property.BaseSystemType == "System.String") {%>, <%= property.IsNullable || ((property.PropertyType & PropertyType.Computed) == PropertyType.Computed) ? "true" : "false" %><% } %>);
                    ReportPropertyChanged("<%= property.PropertyName %>");
                    On<%= property.PropertyName %>Changed();
                }
            }
        }

        private global::<%= property.SystemType %> <%= property.PrivateMemberVariableName %>;
        partial void On<%= property.PropertyName %>Changing(global::<%= property.SystemType %> value);
        partial void On<%= property.PropertyName %>Changed();
<% } %>

        #endregion
<% if(Entity.Properties.Count(p => IsComplexProperty(p)) > 0) { %>

        #region Complex Properties
<% foreach(var property in Entity.Properties.Where(p => IsComplexProperty(p))) { %>

<% if(property.HasDescription) { %>
        /// <summary>
        /// <%= property.Description %>
        /// </summary>
<% } %>
        [EdmComplexPropertyAttribute()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        [XmlElement(IsNullable=true)]
        [SoapElement(IsNullable=true)]
        [DataMemberAttribute()]
        <%= property.TypeAccess %> <%= property.SystemType %> <%= property.PropertyName %>
        {
            get
            {
                <%= property.PrivateMemberVariableName %> = GetValidValue(<%= property.PrivateMemberVariableName %>, "<%= property.PropertyName %>", false, <%= property.PrivateMemberVariableName %>Initialized);
                <%= property.PrivateMemberVariableName %>Initialized = true;
                return <%= property.PrivateMemberVariableName %>;
            }
            set
            {
                On<%= property.PropertyName %>Changing(value);
                ReportPropertyChanging("<%= property.PropertyName %>");
                <%= property.PrivateMemberVariableName %> = SetValidValue(<%= property.PrivateMemberVariableName %>, value, "<%= property.PropertyName %>");
                <%= property.PrivateMemberVariableName %>Initialized = true;
                ReportPropertyChanged("<%= property.PropertyName %>");
                On<%= property.PropertyName %>Changed();
            }
        }
        private <%= property.SystemType %> <%= property.PrivateMemberVariableName %>;
        private bool <%= property.PrivateMemberVariableName %>Initialized;
        partial void On<%= property.PropertyName %>Changing(<%= property.SystemType %> value);
        partial void On<%= property.PropertyName %>Changed();
<% } %>

        #endregion
<% } %>
<% if(Entity.Associations.Count > 0) { %>

        #region Navigation Properties
<% foreach(Association association in Entity.Associations) { %>

        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("<%= association.Namespace %>", "<%= association.AssociationKeyName %>", "<%= association.ForeignEntity.Name %>")]
<%if (association.AssociationType == AssociationType.ManyToMany || association.AssociationType == AssociationType.OneToMany || association.AssociationType == AssociationType.ZeroOrOneToMany) { %>
        public EntityCollection<<%= association.ForeignEntity.Name %>> <%= association.Name %>
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<<%= association.ForeignEntity.Name %>>("<%= association.Namespace %>.<%= association.AssociationKeyName %>", "<%= association.ForeignEntity.Name %>");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<<%= association.ForeignEntity.Name %>>("<%= association.Namespace %>.<%= association.AssociationKeyName %>", "<%= association.ForeignEntity.Name %>", value);
                }
            }
        }
<% } else { %>
        public <%= association.ForeignEntity.Name %> <%= association.Name %>
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<<%= association.ForeignEntity.Name %>>("<%= association.Namespace %>.<%= association.AssociationKeyName %>", "<%= association.ForeignEntity.Name %>").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<<%= association.ForeignEntity.Name %>>("<%= association.Namespace %>.<%= association.AssociationKeyName %>", "<%= association.ForeignEntity.Name %>").Value = value;
            }
        }

        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<<%= association.ForeignEntity.Name %>> <%= association.Name %>Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<<%= association.ForeignEntity.Name %>>("<%= association.Namespace %>.<%= association.AssociationKeyName %>", "<%= association.ForeignEntity.Name %>");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<<%= association.ForeignEntity.Name %>>("<%= association.Namespace %>.<%= association.AssociationKeyName %>", "<%= association.ForeignEntity.Name %>", value);
                }
            }
        }
<% } } %>

        #endregion
<% } %>
    }
}
#pragma warning restore 1591
<script runat="template">
    private bool IsComplexProperty(IProperty property)
    {
        return property.ExtendedProperties.ContainsKey(EdmxConstants.ComplexPropertyExtendedProperty);
    }
    
    private bool IsComplexEntity()
    {
        return (Entity is ComplexEntity);
    }

    private List<IProperty> FactoryProperties()
    {
        // NOTE: Should we check to see if the type is the same as the declaring type?
        return Entity.Properties.Where(p => !p.IsNullable && string.IsNullOrEmpty(p.DefaultValue) && p.TypeAccess.Equals("public") && p.GetterAccess.Equals("") && p.GetterAccess.Equals("")).ToList();
    }

    private string ResolveBaseType()
    {
        if(Entity.BaseEntity != null)
            return Entity.BaseEntity.Name;
            
        return (Entity is ConceptualEntity) ? "EntityObject" : "ComplexObject";
    }
</script>