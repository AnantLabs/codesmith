<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>

<%@ Assembly Src="Model.cs" %>
<%@ Assembly Src="Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="EntityContext" Type="SchemaMapper.EntityContext"  %>

<%@ Property Name="ContextNamespace" Type="System.String"  %>
<%@ Property Name="EntityNamespace" Type="System.String"  %>
<%@ Property Name="MappingNamespace" Type="System.String"  %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace <%= ContextNamespace %>
{
    public partial class <%= EntityContext.ClassName.ToSafeName() %>
        : System.Data.Entity.DbContext
    {
        static <%= EntityContext.ClassName.ToSafeName() %>()
        {
            System.Data.Entity.Database.SetInitializer<<%= EntityContext.ClassName.ToSafeName() %>>(null);
        }
        
        public ExternalIntegrationContext()
            :base ()
        { }

        public ExternalIntegrationContext(System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(model)
        { }

        public ExternalIntegrationContext(string nameOrConnectionString)
            : base(nameOrConnectionString)
        { }

        public ExternalIntegrationContext(string nameOrConnectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(nameOrConnectionString, model)
        { }

        public ExternalIntegrationContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        { }

        public ExternalIntegrationContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        { }

        public ExternalIntegrationContext(System.Data.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        { }


<% foreach(var p in EntityContext.Entities) { %>
        public System.Data.Entity.DbSet<<%= EntityNamespace %>.<%= p.ClassName.ToSafeName() %>> <%= p.ContextName.ToSafeName() %> { get; set; }
<% } // foreach %>

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<System.Data.Entity.Infrastructure.IncludeMetadataConvention>();
<% foreach(var p in EntityContext.Entities) { %>
            modelBuilder.Configurations.Add(new <%= MappingNamespace %>.<%= p.MappingName.ToSafeName() %>());
<% } // foreach %>

            InitializeMapping(modelBuilder);
        }
    }
}