<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>

<%@ Property Name="LazyLoadingEnabled" Type="System.Boolean" Category="2. Class"  Optional="False" %>
<%@ Property Name="DataContextName" Type="System.String" Category="2. Class" Optional="False" %>
<%@ Property Name="ContextNamespace" Type="System.String" Category="2. Class" Optional="False" Description="The namespace to use for the context class files."%>
<%@ Property Name="EntityNamespace" Type="System.String" Category="2. Class" Optional="False" Description="The namespace to use for the entity class files."%>
<%@ Property Name="ControllerNamespace" Type="System.String" Category="2. Class" Default="" Optional="True" Description="The namespace for the interfaces.  Leave blank to not generate them." %>
<%@ Property Category="3. Query" Name="QueryNamespace" Type="System.String" Default="" Optional="True" Description="The namespace for the interfaces.  Leave blank to not generate them." %>
<%@ Property Category="3. Query" Name="MethodPrefix" Type="System.String" Default="By" Optional="True" Description="The prefix of query method names." %>
<%@ Property Category="3. Query" Name="UniqueMethodPrefix" Type="System.String" Default="GetBy" Optional="True" Description="The prefix of query method names." %>
<%@ Property Category="3. Query" Name="MethodKeySuffix" Type="System.String" Default="Key" Optional="False" Description="The property.Name of the primary key query method names." %>
#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Codesmith.Data;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using <%= String.IsNullOrEmpty(QueryNamespace) ? EntityNamespace : QueryNamespace %>;

namespace <%= String.IsNullOrEmpty(ControllerNamespace) ? String.Concat(EntityNamespace, ".Controllers") : ControllerNamespace %>
{
    [KendoPagingAndFiltering]
    public partial class <%= Entity.Name %>Controller : ApiController
    {
        private <%= ContextNamespace %>.<%= DataContextName %> _context = new <%= ContextNamespace %>.<%= DataContextName %>();

        #region Get

<% if(Entity.HasKey) { %>
        public <%= EntityNamespace %>.<%= Entity.Name %> <%= UniqueMethodPrefix %><%= MethodKeySuffix %>(<%= GetParameters(Entity.Key.Properties) %>)
        {
            var <%= Entity.VariableName %> = _context.<%= Entity.Name %>.<%= UniqueMethodPrefix %><%= MethodKeySuffix %>(<%= GetArguments(Entity.Key.Properties) %>);
            if (<%= Entity.VariableName %> == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            return <%= Entity.VariableName %>;
        }

<% } %>
<% foreach (IProperty property in Entity.Properties) {
    if (property.IsType(PropertyType.Index) && !property.IsType(PropertyType.Key)) { %>
        public <%= EntityNamespace %>.<%= Entity.Name %> <%= UniqueMethodPrefix %><%= property.Name %>(<%= GetParameters(new List<IProperty>() { property }) %>)
        {
            var <%= Entity.VariableName %> = _context.<%= Entity.Name %>.<%= UniqueMethodPrefix %><%= property.Name %>(<%= property.VariableName %>);
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            return <%= Entity.VariableName %>;
        }

<% } } %>
        public IQueryable<<%= EntityNamespace %>.<%= Entity.Name %>> GetAll()
        {
            return _context.<%= Entity.Name %>.AsQueryable();
        }
<% foreach(IProperty property in Entity.Properties) { %>
   <% if (IsIgnoreType(property) || property.IsType(PropertyType.Key) || property.IsType(PropertyType.Index)) { continue; } %>

        public IQueryable<<%= EntityNamespace %>.<%= Entity.Name %>> Get<%= MethodPrefix %><%= property.Name %>(<%= GetParameters(new List<IProperty>() { property }) %>)
        {
            return _context.<%= Entity.Name %>.<%= MethodPrefix %><%= property.Name %>(<%= property.VariableName %>).AsQueryable();
        }
<% } %>

        #endregion
<% if (Entity.HasKey) { %>

        public HttpResponseMessage Post(<%= EntityNamespace %>.<%= Entity.Name %> value)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            _context.<%= Entity.Name %>.AddObject(value);
            _context.SaveChanges();

            var response = Request.CreateResponse<<%= EntityNamespace %>.<%= Entity.Name %>>(HttpStatusCode.Created, value);
            response.Headers.Location = new Uri( Url.Link("DefaultApi", new { <%= GetObjectInitializers(Entity.Key.Properties) %> }));

            return response;
        }

        public HttpResponseMessage Put(<%= EntityNamespace %>.<%= Entity.Name %> value)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            var <%= Entity.VariableName %> = _context.<%= Entity.Name %>.<%= UniqueMethodPrefix %><%= MethodKeySuffix %>(<%= GetArguments(Entity.Key.Properties, "value.") %>);
            if (<%= Entity.VariableName %> == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            _context.<%= Entity.Name %>.Attach(value);
            _context.ObjectStateManager.ChangeObjectState(value, System.Data.EntityState.Modified);

            //_context.ApplyCurrentValues(<%= Entity.VariableName %>.EntityKey.EntitySetName, value);
            _context.SaveChanges();

            return new HttpResponseMessage(HttpStatusCode.OK);
        }

        public HttpResponseMessage Delete(<%= GetParameters(Entity.Key.Properties) %>)
        {
            var <%= Entity.VariableName %> = _context.<%= Entity.Name %>.<%= UniqueMethodPrefix %><%= MethodKeySuffix %>(<%= GetArguments(Entity.Key.Properties) %>);
            if (<%= Entity.VariableName %> == null)
                return new HttpResponseMessage(HttpStatusCode.NotFound);

            _context.<%= Entity.Name %>.DeleteObject(<%= Entity.VariableName %>);
            _context.SaveChanges();
            
            return new HttpResponseMessage(HttpStatusCode.OK);
        }
<% } %>
    }
}

<script runat="template">

    public bool IsIgnoreType(IProperty property)
    {
        if (property.SystemType.Contains("XmlType"))
            return true;

        if (property.SystemType.Contains("Byte[]"))
            return true;

        if ((property.PropertyType & PropertyType.Concurrency) == PropertyType.Concurrency || property.BaseSystemType == "System.Byte[]")
            return true;

        return false;
    }

    public string GetParameters(List<IProperty> properties)
    {
        StringBuilder args = new StringBuilder();
        foreach(IProperty property in properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            args.AppendFormat("{0} {1}", property.SystemType, property.VariableName);
        }

        return args.ToString();
    }
    
    public string GetArguments(List<IProperty> properties, string prefix = "")
    {
        StringBuilder args = new StringBuilder();
        foreach(IProperty property in properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            if(String.IsNullOrEmpty(prefix))
                 args.Append(property.VariableName);
            else
                args.AppendFormat("{0}{1}", prefix, property.Name);
        }

        return args.ToString();
    }
        
    public string GetObjectInitializers(List<IProperty> properties, string leftHandPrefix = "", string rightHandPrefix = "value.")
    {
        StringBuilder args = new StringBuilder();
        foreach(IProperty property in properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            args.AppendFormat("{0}{1} = {2}{1}", leftHandPrefix, property.Name, rightHandPrefix);
        }

        return args.ToString();
    }
</script>