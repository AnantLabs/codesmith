<%@ CodeTemplate Language="C#" TargetLanguage="JavaScript" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" %>
<%@ Register Name="DataSource" Template="Kendo\DataSource.cst" %>
<%@ Register Name="Grid" Template="Kendo\Grid.cst" %>
<%@ Register Name="DropDownEditor" Template="Kendo\DropDownEditor.cst" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Property Category="4. JavaScript" Name="ServiceBaseUrl" Type="System.String" Default="http://localhost/api" %>
<%@ Property Category="4. JavaScript" Name="PageSize" Type="System.Int32" Default="5" Optional="False" %>
<% bool includeDetails = Entity.Associations.Count() > 0; %>
$(document).ready(function () {
    var crudServiceBaseUrl = "<%= ServiceBaseUrl %>";
<% foreach(var association in Entity.Associations) { %>
<%= RenderDataSource(association.ForeignEntity, false, false, false, false, false, false, false, true, false) %>
<% } %>
<%= RenderDataSource(Entity, Entity.HasKey, Entity.HasKey, Entity.HasKey, true, true, true, true, true, true) %>
<%= RenderGrid(Entity, Entity.HasKey, Entity.HasKey, Entity.HasKey, true, true, true, true, true, true, includeDetails) %>
<% if(includeDetails){ %>
    function <%= Entity.VariableName %>Details(e) {
<%  foreach(var association in Entity.Associations) { %>
<%= RenderGridDetails(association, true, true, true, true, true) %>
<% } %>
    }

<% } %>
<% foreach(var association in Entity.Associations.Where(a => a.ForeignEntity.Properties.Count >= 2)) { %>
<%= RenderDropDownEditor(association.ForeignEntity) %>
<% } %>
<% var toolbarFilterAssociation = Entity.Associations.FirstOrDefault(a => a.ForeignEntity.Properties.Count >= 2);
if (toolbarFilterAssociation != null) { %>
    $("#toolbarFilter").kendoDropDownList({
        dataValueField: "<%= GetDataValueField(toolbarFilterAssociation.ForeignEntity) %>",
        dataTextField: "<%= GetDataTextField(toolbarFilterAssociation.ForeignEntity) %>",
        autoBind: false,
        optionLabel: "All",
        dataSource: <%= toolbarFilterAssociation.ForeignEntity.VariableName %>DataSource,
        change: function () {
            var value = this.value();
            if (value) {
                grid.data("kendoGrid").dataSource.filter({ field: "<%= toolbarFilterAssociation.Properties[0].Property.Name %>", operator: "eq", value: value });
            } else {
                grid.data("kendoGrid").dataSource.filter({});
            }
        }
    });
<% } %>
});
<script runat="template">

    public string RenderDataSource(IEntity entity, bool includeCreate = true, bool includeUpdate = true, bool includeDelete = true, bool includePaging = true, bool includeFiltering = true, bool includeSorting = true, bool includeParameterMap = true, bool includeModel = true, bool includeValidation = true, string serviceBaseUrl = ""){
        var template = this.Create<DataSource>();
        this.CopyPropertiesTo(template);
        template.Entity = entity;
        template.ServiceBaseUrl = serviceBaseUrl;
        template.IncludeCreate = includeCreate;
        template.IncludeUpdate = includeUpdate;
        template.IncludeDelete = includeDelete;
        template.IncludePaging = includePaging;
        template.IncludeFiltering = includeFiltering;
        template.IncludeSorting = includeSorting;
        template.IncludeParameterMap = includeParameterMap;
        template.IncludeModel = includeModel;
        template.IncludeValidation = includeValidation;
        template.Response.IndentLevel = 1;

        return template.RenderToString();
    }

    public string RenderGrid(IEntity entity, bool includeCreate = true, bool includeUpdate = true, bool includeDelete = true, bool includePaging = true, bool includeFiltering = true, bool includeSorting = true, bool includeNavigation = true, bool includeTitle = true, bool includeToolbar = true, bool includeDetails = true){
        var template = this.Create<Grid>();
        this.CopyPropertiesTo(template);
        template.Entity = entity;
        template.IncludeCreate = includeCreate;
        template.IncludeUpdate = includeUpdate;
        template.IncludeDelete = includeDelete;
        template.IncludePaging = includePaging;
        template.IncludeFiltering = includeFiltering;
        template.IncludeSorting = includeSorting;
        template.IncludeNavigation = includeNavigation;
        template.IncludeTitle = includeTitle;
        template.IncludeToolbar = includeToolbar;
        template.IncludeDetails = includeDetails;
        template.IsDetailedGrid = false;
        template.Response.IndentLevel = 1;

        return template.RenderToString();
    }

    public string RenderGridDetails(IAssociation assocation, bool includePaging = true, bool includeFiltering = true, bool includeSorting = true, bool includeNavigation = true, bool includeTitle = true){
        var template = this.Create<Grid>();
        this.CopyPropertiesTo(template);
        template.Entity = assocation.ForeignEntity;
        template.IncludeCreate = assocation.ForeignEntity.HasKey;
        template.IncludeUpdate = assocation.ForeignEntity.HasKey;
        template.IncludeDelete = assocation.ForeignEntity.HasKey;
        template.IncludePaging = includePaging;
        template.IncludeFiltering = includeFiltering;
        template.IncludeSorting = includeSorting;
        template.IncludeNavigation = includeNavigation;
        template.IncludeTitle = includeTitle;
        template.IncludeToolbar = false;
        template.IncludeDetails = false;
        template.IsDetailedGrid = true;
        template.Association = assocation;
        template.Response.IndentLevel = 2;

        return template.RenderToString();
    }

    public string RenderDropDownEditor(IEntity entity){
        var template = this.Create<DropDownEditor>();
        this.CopyPropertiesTo(template);
        template.Entity = entity;

        return template.RenderToString();
    }

    public bool IsIgnoreType(IProperty property)
    {
        if (property.SystemType.Contains("XmlType"))
      return true;

        if (property.SystemType.Contains("Byte[]"))
      return true;

        if ((property.PropertyType & PropertyType.Concurrency) == PropertyType.Concurrency || property.BaseSystemType == "System.Byte[]")
      return true;

        return false;
    }

    /// <summary>
    /// Returns {Number|String|Boolean|Date}. The default is string.
    /// </summary>
    /// <param name="property"></param>
    /// <returns></returns>
    public string GetJavaScriptType(IProperty property)
    {
        if (property.SystemType.Contains("Boolean"))
      return "boolean";
        
        if (property.SystemType.Contains("Date"))
      return "date";

        if (property.SystemType.Contains("Byte")
      || property.SystemType.Contains("Decimal")
      || property.SystemType.Contains("Double")
      || property.SystemType.Contains("Single")
      || property.SystemType.Contains("Int"))
      return "number";
        
        return "string";
    }
 
    public string GetDataValueField(IEntity entity)
    {
        if(entity.HasKey)
            foreach(var key in entity.Key.Properties)
                if(!IsIgnoreType(key))
                    return key.Name;
        
        foreach(var p in entity.Properties)
            if(!IsIgnoreType(p))
                    return p.Name;
        
        return entity.Properties.FirstOrDefault().Name;
    }

    public string GetDataTextField(IEntity entity)
    {
        string valueField = GetDataValueField(entity);
        foreach(var p in entity.Properties)
            if(!IsIgnoreType(p) 
                && !p.IsType(PropertyType.Key) 
                && !p.IsType(PropertyType.Foreign)
                && String.Equals(GetJavaScriptType(p), "String", StringComparison.OrdinalIgnoreCase) 
                && !String.Equals(p.Name, valueField, StringComparison.OrdinalIgnoreCase))
                    return p.Name;
        
        return entity.Properties.FirstOrDefault().Name;
    }

</script>