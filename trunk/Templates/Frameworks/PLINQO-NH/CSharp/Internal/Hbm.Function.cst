<%-- Author: Tom DuPont --%>
<%@ CodeTemplate Language="C#" TargetLanguage="XML" Debug="False" CompilerVersion="v3.5"
    Src="NHibernateHelper.cs" Inherits="NHibernateHelper"
    Description="Generates a HBM for PLINQO for NHibernate." %>
    
<%@ Property Category="1. Source" Name="SourceCommand" Type="CodeSmith.SchemaHelper.CommandEntity"
    Optional="False"
    Description="SourceEntity" %>
<%@ Property Category="2. Assembly" Name="AssemblyName" Type="System.String"
    Optional="False" Default="" 
    Description="The name of the Assembly that will contain the business objects." %>
<%@ Property Category="3. Namespaces" Name="EntityNamespace" Type="System.String"
    Optional="False" Default="" 
    Description="The desired Namespace for the Business Objects." %>
    
<%@ Assembly Name="System.Xml.Linq" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="../../Common/SchemaHelper" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.NHibernate" Path="../../Common/SchemaHelper" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Xml.Linq" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.SchemaHelper.NHibernate" %>
<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" namespace="<%= EntityNamespace %>" assembly="<%= AssemblyName %>">
  <sql-query name="<%= SourceCommand.Name %>" >
<% if (SourceCommand.IsAssociated) { %>
    <return class="<%= SourceCommand.AssociatedEntity.Name %>" />
<% } else { %>
    <% foreach(IProperty property in SourceCommand.Properties) { %>
    <return-scalar column="<%= property.KeyName %>" type="<%= property.ExtendedProperties[NHibernateUtilities.NHibernateType] %>" />
    <% } %>
<% } %>
<% if (HasSearchCriteria()) { %>
    <% foreach(IProperty property in GetSearchCriteria().Properties) { %>
    <query-param name="<%= property.Name %>" type="<%= property.ExtendedProperties[NHibernateUtilities.NHibernateType] %>" />
    <% } %>
<% } %>
    exec <%= SourceCommand.GetSafeName() %> <%= GetSearchCriteriaParams() %>
  </sql-query>
</hibernate-mapping>

<script runat="template">
    public SearchCriteria GetSearchCriteria()
    {
        return SourceCommand.SearchCriteria.FirstOrDefault(sc => sc.SearchCriteriaType == SearchCriteriaType.CustomCommand);
    }

    public bool HasSearchCriteria()
    {
        SearchCriteria searchCriteria = GetSearchCriteria();
        
        return searchCriteria != null && searchCriteria.Properties.Count > 0;
    }

    public string GetSearchCriteriaParams()
    {
        if (!HasSearchCriteria())
            return String.Empty;
        
        StringBuilder sb = new StringBuilder();
        sb.Append(":");
        
        bool isFirst = true;
        foreach(IProperty property in GetSearchCriteria().Properties)
        {
            if (isFirst)
                isFirst = false;
            else
                sb.Append(", ");
                
            sb.Append(property.KeyName);
        }
        
        return sb.ToString();
    }
</script>
