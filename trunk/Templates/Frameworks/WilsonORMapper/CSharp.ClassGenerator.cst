<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects in .net 2.0" 
	Debug="true" 
	OutputType="None" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Src="Internal\CommonUtility.cs" %>
<%@ Assembly Src="Internal\ProjectUtility.cs" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="Microsoft.Build.Utilities" %>

<%@ Register Name="MappingCommon" Template="Internal\mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="Internal\class.common.cst" MergeProperties="True" ExcludeProperties="ClassNamespace,MappingEntity" %>

<%@ Register Name="CSharpManager" Template="Internal\cs.v2.manager.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpTransaction" Template="Internal\cs.v2.transaction.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpRetrieveBase" Template="Internal\cs.v2.retrieveBase.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpPersistBase" Template="Internal\cs.v2.persistBase.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpClass" Template="Internal\cs.v2.class.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpPartial" Template="Internal\cs.v2.partial.cst" MergeProperties="True" ExcludeProperties="" %>

<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Windows.Forms.Design" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="Microsoft.Build.BuildEngine" %>
<%@ Import Namespace="Microsoft.Build.Utilities" %>
 

<script runat="template">
	private MappingCommon _mappingCommon;
	
	private CSharpManager _managerTemplate = null;
	private CSharpClass _classTemplate = null;
	private CSharpPartial _partialTemplate = null;
	private CSharpRetrieveBase _retrieveBaseTemplate = null;
	private CSharpPersistBase _persistBaseTemplate = null;
	private CSharpTransaction _transactionTemplate = null;
	
	private ProjectUtility _dataProject;
	
	private string _fileExtension = ".cs";

	private string _projectFile;
	
	[Category("3.Project")]
	[Description("Select the Visual Studio project file to update or create.")]
	[FileDialog(FileDialogType.Open, Title="Select Project File", Filter="Project Files (*.csproj)|*.csproj|All Files (*.*)|*.*", DefaultExtension=".csproj")]
	[Editor(typeof(CodeSmith.CustomProperties.FileNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
	public string ProjectFile
	{
		get {return _projectFile;}
		set {_projectFile = value;}
	}

	
	public void Initialize()
	{
		if (!Directory.Exists(this.OutputDirectory))
			Directory.CreateDirectory(this.OutputDirectory);
			
		// init templates		
		_managerTemplate = this.Create<CSharpManager>();
		_classTemplate = this.Create<CSharpClass>();
		_partialTemplate = this.Create<CSharpPartial>();
		_retrieveBaseTemplate = this.Create<CSharpRetrieveBase>();
		_persistBaseTemplate = this.Create<CSharpPersistBase>();
		_transactionTemplate = this.Create<CSharpTransaction>();
		
		this.CopyPropertiesTo(_managerTemplate);
		this.CopyPropertiesTo(_retrieveBaseTemplate);
		this.CopyPropertiesTo(_persistBaseTemplate);
		this.CopyPropertiesTo(_classTemplate);
		this.CopyPropertiesTo(_partialTemplate);
		this.CopyPropertiesTo(_transactionTemplate);
		
		// load mapping file
		_mappingCommon = new MappingCommon();
		this.CopyPropertiesTo(_mappingCommon);
		
		Response.WriteLine("Loading Mapping File '{0}'.", MappingFile);
		_mappingCommon.LoadMappingFile();
		
		_dataProject = new ProjectUtility(this.ProjectFile, 
			Path.Combine(this.CodeTemplateInfo.DirectoryName, "Internal"));
			
		_dataProject.AddReferenceItem("System.configuration", false);
		_dataProject.AddReferenceItem("System.Web", false);
		_dataProject.AddReferenceItem("WilsonORMapper", true);
	}
	
	public void Generate()
	{		
		mappings map = _mappingCommon.MappingObject;
		string classNamespace = map.defaultNamespace;
		_dataProject.AddEmbeddedResource(this.MappingFile);
		
		this.Progress.MaximumValue = map.entities.Count + 4;
		this.Progress.Step = 1;
		
		//generate dataManager
		string managerFile = Path.Combine(this.OutputDirectory, "DataManager.cs");
		if (!File.Exists(managerFile))
		{
			Response.WriteLine(string.Format("Generating DataManager '{0}' ...", managerFile));		
			_managerTemplate.SetProperty("ClassNamespace", classNamespace);			
			_managerTemplate.RenderToFile(managerFile, true);
			Response.WriteLine("File {0} saved succesfully!", managerFile);
			_dataProject.AddCompileItem(managerFile);
		}
		this.Progress.PerformStep();
		//generate transactionManager
		string transactionFile = Path.Combine(this.OutputDirectory, "TransactionManager.cs");
		if (!File.Exists(transactionFile))
		{
			Response.WriteLine(string.Format("Generating TransactionManager '{0}' ...", transactionFile));		
			_transactionTemplate.SetProperty("ClassNamespace", classNamespace);			
			_transactionTemplate.RenderToFile(transactionFile, true);
			Response.WriteLine("File {0} saved succesfully!", transactionFile);
			_dataProject.AddCompileItem(transactionFile);
		}
		this.Progress.PerformStep();
		//generate retrieveBase
		string retrieveBaseFile = Path.Combine(this.OutputDirectory, "RetrieveBase.cs");
		if (!File.Exists(retrieveBaseFile))
		{
			Response.WriteLine(string.Format("Generating RetrieveBase '{0}' ...", retrieveBaseFile));		
			_retrieveBaseTemplate.SetProperty("ClassNamespace", classNamespace);			
			_retrieveBaseTemplate.RenderToFile(retrieveBaseFile, true);
			Response.WriteLine("File {0} saved succesfully!", retrieveBaseFile);
			_dataProject.AddCompileItem(retrieveBaseFile);
		}
		this.Progress.PerformStep();
		//generate PersistBase
		string persistBaseFile = Path.Combine(this.OutputDirectory, "PersistBase.cs");
		if (!File.Exists(persistBaseFile))
		{
			Response.WriteLine(string.Format("Generating PersistBase '{0}' ...", persistBaseFile));		
			_persistBaseTemplate.SetProperty("ClassNamespace", classNamespace);			
			_persistBaseTemplate.RenderToFile(persistBaseFile, true);
			Response.WriteLine("File {0} saved succesfully!", persistBaseFile);
			_dataProject.AddCompileItem(persistBaseFile);
		}
		this.Progress.PerformStep();
		//generate classes
		foreach(entity en in map.entities)
		{
			string className = CommonUtility.GetClassName(en.type);
			string generatedName = Path.Combine(this.OutputDirectory, className + ".Generated.cs");
			string partialFile = Path.Combine(this.OutputDirectory, className + ".cs");
						
			if (!File.Exists(partialFile))
			{
				_partialTemplate.SetProperty("ClassNamespace", classNamespace);
				_partialTemplate.SetProperty("MappingEntity", en);
				Response.WriteLine("Generating Partial Class '{0}' ...", partialFile);		
				_partialTemplate.RenderToFile(partialFile, true);
				Response.WriteLine("File {0} saved succesfully!", partialFile);
			}			
			
			_classTemplate.SetProperty("ClassNamespace", classNamespace);
			_classTemplate.SetProperty("MappingEntity", en);
			
			Response.WriteLine("Generating Class '{0}' ...", generatedName);		
			_classTemplate.RenderToFile(generatedName, true);
			Response.WriteLine("File {0} saved succesfully!", generatedName);
			_dataProject.AddDependentClassItem(partialFile, generatedName);
			
			this.Progress.PerformStep();		
		}
		_dataProject.SaveProject();
		
	}
</script>
<% 
//Debugger.Break();
this.Initialize();  
this.Generate();  
%>

Generate Count: <%= this.RegisteredOutputs.Count %>
<% foreach(string file in this.RegisteredOutputs) { %>
<%= file %>
<% } %>