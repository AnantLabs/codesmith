<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates NUnit Test Classes for the ORMapper" 
	Debug="true" 
	OutputType="None" %>

<%@ Assembly Name="System.Design" %>
<%@ Assembly Src="Internal\CommonUtility.cs" %>

<%@ Register Name="MappingCommon" Template="Internal\mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="Internal\class.common.cst" MergeProperties="True" ExcludeProperties="ClassNamespace,MappingEntity,ImplementHelper,ImplementNotification" %>
<%@ Register Name="CSharpV1Test" Template="Internal\cs.v1.test.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpV2Test" Template="Internal\cs.v2.test.cst" MergeProperties="True" ExcludeProperties="" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Windows.Forms.Design" %>
 
<%@ Property Name="Framework" Type="FrameworkEnum" Default="v1" Optional="False" Category="2.Class" Description="The dotnet framework version to use." %>
<%@ Property Name="Langauge" Type="LangaugeEnum" Default="CSharp" Optional="False" Category="2.Class" Description="The dotnet langauge to generate class for." %>


<script runat="template">

	private MappingCommon _mappingCommon;
	private string _fileExtension = ".cs";
	private CodeTemplate _testTemplate = null;

	public string BuildFileName(string name)
	{
		name = Path.ChangeExtension(name, _fileExtension);
		name = Path.Combine(OutputDirectory, name);
		return name;
	}

	public void InitializeTemplates()
	{		
		string tempName =  Framework.ToString() + Langauge.ToString();
		switch (tempName)
		{
			case "v1CSharp" :
				_testTemplate = this.Create<CSharpV1Test>();
				_fileExtension = ".cs";
				break;
			case "v2CSharp" :
				_testTemplate = this.Create<CSharpV2Test>();
				_fileExtension = ".cs";
				break;
		}
		this.CopyPropertiesTo(_testTemplate);
		
		// load mapping file
		_mappingCommon = new MappingCommon();
		this.CopyPropertiesTo(_mappingCommon);
		
		Response.WriteLine("Loading Mapping File '{0}'.", MappingFile);
		_mappingCommon.LoadMappingFile();
	}
	
	public void Generate()
	{
		//Debugger.Break();
		InitializeTemplates();

		mappings map = _mappingCommon.MappingObject;
		string classNamespace = map.defaultNamespace;
		
		this.Progress.MaximumValue = map.entities.Count;
		this.Progress.Step = 1;

		//generate tests
		foreach(entity en in map.entities)
		{
			string className = CommonUtility.GetClassName(en.type) + "Test";
			string classFile = BuildFileName(className);
			
			if (!File.Exists(classFile))
			{
				_testTemplate.SetProperty("ClassNamespace", classNamespace);
				_testTemplate.SetProperty("MappingEntity", en);
				Response.WriteLine("Generating Test '{0}' ...", classFile);		
				_testTemplate.RenderToFile(classFile, true);
				Response.WriteLine("File {0} saved succesfully!", classFile);
			}
			this.Progress.PerformStep();
		}
	}
	
	
</script>
<% this.Generate();  %>

