<%--
Author:
    Milan Negovan
    milan@aspnetresources.com
    
Description:
    An implementation of a class with the Microsoft AJAX Library
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JavaScript" Description="An implementation of a class with the Microsoft AJAX Library" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Property Name="Namespace" Type="System.String" Optional="False" Category="1. Namespace and class name" %>
<%@ Property Name="ClassName" Type="System.String" Optional="False" Category="1. Namespace and class name" %>
<%@ Property Name="Properties" Type="CodeSmith.CustomProperties.StringCollection" Optional="True" Category="2. Members" %>
<%@ Property Name="Disposable" Type="System.Boolean" Default="False" Optional="True" Category="3. Misc" %>
<%@ Property Name="BaseClass" Type="System.String" Optional="True" Description="Fully qualified base class name" Category="1. Namespace and class name" %>
<%@ Property Name="ImplementsInterfaces" Type="CodeSmith.CustomProperties.StringCollection" Optional="True" Category="3. Misc" %>
Type.registerNamespace('<%= Namespace %>');

<%= Namespace %>.<%= ClassName %> = function (<%= GetConstructorParameters () %>) {
    <% if (!string.IsNullOrEmpty (BaseClass)) { %>
    <%= BaseClass %>.initializeBase (this, [/* pass parameters to base class constructor */]);
    
    <% } %>
    <% if (Properties != null) {

       int count = Properties.Count;
    
       for (int i=0; i < count; i++) 
       {
         string p = Properties[i];
         string p_camel = TurnToCamelCase (p);
    %>
    this._<%= p_camel %> = <%= p_camel %>;
    <% } %>
    <% } %>
}

<%= Namespace %>.<%= ClassName %>.prototype = {
	<% if (Properties != null) { %>
    
    // ------------- Properties -------------
    <%    
       int count = Properties.Count;

	   for (int i=0; i < count; i++) 
       {
         string p = Properties[i];
         string p_camel = TurnToCamelCase (p);
    %>
    get_<%= p_camel %> : function () {
        return this._<%= p_camel %>;
    },
    
    set_<%= p_camel %> : function (value) {
        this._<%= p_camel %> = value;
    }<% if (i != count - 1) { %>,
    
    <% } %>
    <% } %>
	<% } %>
<% if (Disposable) { %>,
    
    dispose: function() {
        // Clean-up code goes here
    }<% } %>
}

<% string baseClass = !string.IsNullOrEmpty (BaseClass) ? BaseClass : "null";  %>
<%= Namespace %>.<%= ClassName %>.registerClass ('<%= Namespace %>.<%= ClassName %>', <%= baseClass %><% if (Disposable) %>, Sys.IDisposable<% 
    %><% if (ImplementsInterfaces != null && ImplementsInterfaces.Count > 0) { %>, <%= String.Join (", ", ImplementsInterfaces.ToArray()) %><%}%>);
    
<script runat="template">
public string TurnToCamelCase (string s) 
{
    if (string.IsNullOrEmpty (s))
        return s;
        
    return s.Substring (0, 1).ToLower() + s.Substring (1);
}

public string GetConstructorParameters()
{
    string res = string.Empty;
    
    if (Properties != null && Properties.Count > 0) 
    {
        string[] parms = Properties.ToArray();
        
        for (int i=0; i<parms.Length; i++)
            parms[i] = TurnToCamelCase (parms[i]);
            
    res = String.Join (", ", parms);
    }

    return res;
}
</script>