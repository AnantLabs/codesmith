<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the ORMapper" 
	Debug="true" %>

<%@ Register Name="MappingCommon" Template="mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="class.common.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpProperty" Template="cs.property.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Import Namespace="System.IO" %>

<script runat="template">
	public string GetMappingFile()
	{
		string mappingFile = this.MappingFile;
		mappingFile = Path.GetFileName(mappingFile);
		return mappingFile;
	}
</script>	
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.IO;
using System.Reflection;
using Wilson.ORMapper;

namespace <%= ClassNamespace %>
{
	/// <summary>
	/// The DataManager class is the singleton instance of the ObjectSpace class
	/// </summary>
	public sealed class DataManager
	{
		private const string MAPPING_FILE = "<%= GetMappingFile() %>";
		private const string CONNECTION_NAME = "<%= ClassNamespace %>.ConnectionString";
		
        // singleton instances
        private static volatile string _connectionString;
        private static volatile ObjectSpace _objectSpace;
        // lock objects
        private static object _objectLock = new Object();
        private static object _connectionLock = new Object();

		private DataManager()
		{ }

		
		/// <summary>The application connection string read from app.config</summary>		
		/// <example>
		/// Add the following key to the "appSettings" section of your config:
		/// <code><![CDATA[
		/// 	<configuration>
		///			<appSettings>
		///				<add key="WilsonORMapper.Sample.ConnectionString" value="Data Source=(local);Initial Catalog=DATABASE;User ID=USERNAME;Password=PASSWORD;" />
		///			</appSettings>
		/// 	</configuration>
		/// ]]></code>
		/// </example>
    	public static string ConnectionString
        {
            get
            {
                if (_connectionString == null)
                {
                    lock (_connectionLock)
                    {
                        if (_connectionString == null)
                            _connectionString = GetDefaultConnectionString();
                    }
                }
                return _connectionString;
            }
        } 

		/// <summary>The singletion instance of an ObjectSpace Class</summary>
        public static ObjectSpace ObjectSpace
        {
            get
            {
                if (_objectSpace == null)
                {
                    lock (_objectLock)
                    {
                        if (_objectSpace == null)
                            _objectSpace = GetDefaultInstance();
                    }
                }
                return _objectSpace;
            }
        } 
		
		private static ObjectSpace GetDefaultInstance()
		{
			Assembly assembly = Assembly.GetAssembly(typeof(DataManager));
			
			using (Stream mappingStream = assembly.GetManifestResourceStream(
					   typeof(DataManager), 
					   MAPPING_FILE))
			{
				if (mappingStream == null)
				{
					string message = string.Format("Could not find the mapping file '{0}' as an Embedded Resource.  " + 
						"Please set the Build Action to Embedded Resource for file '{0}'.", MAPPING_FILE);
					throw new Exception(message);
				}
				
				//TODO: Adjust settings to needs
				return new ObjectSpace(
					mappingStream, 
					ConnectionString, 
					Provider.MsSql,
					20, 5);
			}
		}
		
		private static string GetDefaultConnectionString()
		{
			string connectionString = ConfigurationSettings.AppSettings[CONNECTION_NAME];
			if (connectionString == null || connectionString.Length == 0)
			{
				string message = string.Format("Could not find the connection string '{0}' in the configuration file.  " +
					"Please add an entry to 'appSettings' section named '{0}'.", CONNECTION_NAME);
				throw new Exception(message);
			}
			return connectionString;
		}
	}
}


