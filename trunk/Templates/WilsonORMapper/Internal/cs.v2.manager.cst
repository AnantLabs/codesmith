<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the ORMapper" 
	Debug="true" %>
	
<%@ Register Name="MappingCommon" Template="mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="class.common.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="CSharpProperty" Template="cs.property.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Import Namespace="System.IO" %>

<script runat="template">
	public string GetMappingFile()
	{
		string mappingFile = this.MappingFile;
		mappingFile = Path.GetFileName(mappingFile);
		return mappingFile;
	}
</script>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Configuration;
using System.IO;
using System.Data.SqlClient;
using System.Reflection;
using Wilson.ORMapper;

namespace <%= ClassNamespace %>
{
	/// <summary>
	/// The DataManager class is the singleton instance of the ObjectSpace class
	/// </summary>
	public sealed class DataManager
	{
		private const string MAPPING_FILE = "<%= GetMappingFile() %>";
		private const string CONNECTION_NAME = "<%= ClassNamespace %>.DataManager";
		
        // singleton instances
        private static volatile string _connectionString;
        private static volatile ObjectSpace _objectSpace;
		private static volatile string _initialCatalog;
        
        // lock objects, each singleton has own to prevent deadlock
        private static object _objectLock = new Object();
        private static object _connectionLock = new Object();
		private static object _catalogLock = new Object();

        private DataManager()
        { }


        /// <summary>The application connection string read from web.config or app.config</summary>		
        /// <example>
        /// Add the following key to the "connectionStrings" section of your config:
        /// <code><![CDATA[
        /// <configuration>
        /// 	<connectionStrings>
        /// 		<add name="<%= ClassNamespace %>.DataManager" 
        /// 			connectionString="Data Source=(local);Initial Catalog=DATABASE;Integrated Security=True"
        /// 			providerName="System.Data.SqlClient" />
        /// 	</connectionStrings>
        /// </configuration>
        /// ]]></code>
        /// </example>
    	public static string ConnectionString
        {
            get
            {
                if (_connectionString == null)
                {
                    lock (_connectionLock)
                    {
                        if (_connectionString == null)
                            _connectionString = GetDefaultConnectionString();
                    }
                }
                return _connectionString;
            }
        } 


        /// <summary>The singleton instance of an ObjectSpace Class</summary>
        public static ObjectSpace ObjectSpace
        {
            get
            {
                if (_objectSpace == null)
                {
                    lock (_objectLock)
                    {
                        if (_objectSpace == null)
                            _objectSpace = GetDefaultInstance();
                    }
                }
                return _objectSpace;
            }
        } 

		/// <summary>The name of the database associated with the current connection</summary>
        public static string InitialCatalog
        {
            get
            {
                if (_initialCatalog == null)
                {
                    lock (_catalogLock)
                    {
                        if (_initialCatalog == null)
                            _initialCatalog = GetInitialCatalog();
                    }
                }
                return _initialCatalog;
            }
        } 
		
		private static string GetInitialCatalog()
        {
            SqlConnectionStringBuilder cs = new SqlConnectionStringBuilder(DataManager.ConnectionString);
            return cs.InitialCatalog;
        }
		
		private static ObjectSpace GetDefaultInstance()
		{
			Assembly assembly = Assembly.GetAssembly(typeof(DataManager));
			
			using (Stream mappingStream = assembly.GetManifestResourceStream(
					   typeof(DataManager), 
					   MAPPING_FILE))
			{
				if (mappingStream == null)
                {
                    string message = string.Format("Could not find the mapping file '{0}' as an Embedded Resource.  " + 
                        "Please set the Build Action to Embedded Resource for file '{0}'.", MAPPING_FILE);
                    throw new Exception(message);
                }
                
				//TODO: Adjust settings to needs
				return new ObjectSpace(
					mappingStream, 
					ConnectionString, 
					Provider.MsSql,
					20, 5);
			}
		}
		
		private static string GetDefaultConnectionString()
		{
			ConnectionStringSettings settings = ConfigurationManager.ConnectionStrings[CONNECTION_NAME];
            if (settings == null)
            {
                string message = string.Format("Could not find the connection string '{0}' in the configuration file.  " +
                       "Please add an entry to connectionStrings section named '{0}'.", CONNECTION_NAME);
                throw new Exception(message);
            }
            return settings.ConnectionString;
		}
	}
}


