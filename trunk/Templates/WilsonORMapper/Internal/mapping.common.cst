<%@ CodeTemplate Language="C#" TargetLanguage="XML" Description="Holds an Instance of the ORMapper Mapping File" Debug="true" %>

<%@ XmlProperty Name="MappingObject" Schema="WilsonORMapper.xsd" Optional="True" RootElement="mappings" %>
<%@ Property Category="1.Mapping" Name="MappingFile" Type="System.String" Default="Mapping.config" Optional="False" Description="The full path to the mapping file." Editor="System.Windows.Forms.Design.FileNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Category="2.Class" Name="OutputDirectory" Type="System.String" Default="" Optional="True" Description="The folder to save the generated files." Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Xml" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Xml.Serialization" %>

<script runat="template">
	private static readonly XmlSerializer _mappingsSerializer = new XmlSerializer(typeof(mappings));

	public void LoadMappingFile()
	{
		using(StreamReader sr = File.OpenText(this.MappingFile))
		{
			object instance = _mappingsSerializer.Deserialize(sr);
			if (instance is mappings)
			{
				this.MappingObject = instance as mappings;
			}
		}		
	}

	public void SaveMappingFile()
	{
		string folder = Path.GetDirectoryName(this.MappingFile);
		if (!Directory.Exists(folder))
			Directory.CreateDirectory(folder);
			
		using(StreamWriter sw = File.CreateText(this.MappingFile))
		{
			XmlSerializerNamespaces xsn = new XmlSerializerNamespaces();
  			xsn.Add( "", "" );
  			_mappingsSerializer.Serialize(sw, this.MappingObject, xsn);
		}	
	}
	
	public mappings InitializeMappings()
	{
		if(File.Exists(MappingFile))
			LoadMappingFile();
		
		if(MappingObject == null)
			MappingObject = new mappings();
		
		MappingObject.version = "4.2";
		if (MappingObject.entities == null)
			MappingObject.entities = new entityCollection();
		
		return MappingObject;
	}
	
	public entity GetExistingOrNewEntity(string tableName)
	{
		entity en = null;
		
		foreach(entity e in MappingObject.entities)
		{
			if(string.Compare(e.table, tableName, false) == 0)
			{
				en = e;
				break;
			}
		}
		if (en == null)
		{
			en = new entity();
			en.table = tableName;
			MappingObject.entities.Add(en);
		}
		if (en.attributes == null)
			en.attributes = new attributeCollection();;
		if (en.relations == null)
			en.relations = new relationCollection();
		
		return en;
	}
	
	public attribute GetExistingOrNewAttribute(entity en, string columnName)
	{
		attribute at = null;
		
		foreach(attribute a in en.attributes)
		{
			if(string.Compare(a.field, columnName, false) == 0)
			{
				at = a;
				break;
			}
		}
		if (at == null)
		{
			at = new attribute();
			at.field = columnName;
			en.attributes.Add(at);
		}
		
		return at;		
	}
	
	public relation GetExistingOrNewRelation(entity en, string memberName)
	{
		relation rt = null;
		
		foreach(relation r in en.relations)
		{
			if(string.Compare(r.member, memberName, false) == 0)
			{
				rt = r;
				break;
			}
		}
		if (rt == null)
		{
			rt = new relation();
			rt.member = memberName;
			en.relations.Add(rt);
		}
		
		return rt;		
	}
	
</script>